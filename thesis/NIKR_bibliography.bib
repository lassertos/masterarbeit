
@article{fan_covscode_2019,
  title      = {{CoVSCode}: {A} {Novel} {Real}-{Time} {Collaborative} {Programming} {Environment} for {Lightweight} {IDE}},
  volume     = {9},
  shorttitle = {{CoVSCode}},
  doi        = {10.3390/app9214642},
  abstract   = {Real-time collaborative programming is an emerging approach that supports a team of programmers to view and edit shared source code at the same time. Each programmer can edit any part of the source code, and changes become instantly visible at other collaborating sites. With a broad range of application scenarios and benefits, real-time collaborative programming has attracted increasing interest from academia and industry. Lightweight integrated development environments (lightweight IDEs) have rapidly grown in popularity in the recent years, but there are serious problems and limitations with existing real-time collaboration support for lightweight IDEs. In this study, we contribute a novel real-time collaborative programming environment named CoVSCode that supports unconstrained and flexible real-time collaboration based on Visual Studio Code, one of the most popular and widely used lightweight IDEs. We present design objectives and rationales, the workflow and functional design from collaborating programmers’ perspectives, major technical issues and solutions, and prototype implementation, as well as a set of experimental evaluations that have demonstrated the technical feasibility and good performance of the prototype system. All approaches, techniques and solutions derived in this work are generic, which can also be applied in building real-time collaborative programming environments for other lightweight IDEs.},
  journal    = {Applied Sciences},
  author     = {Fan, Zhun and Li, Zhenwang and Song, Shengli and {Zhang} and Shi, Hua and Yanhua, Du},
  month      = oct,
  year       = {2019},
  pages      = {4642},
  file       = {Full Text:/home/pierre-helbing/Zotero/storage/2HR374C9/Fan et al. - 2019 - CoVSCode A Novel Real-Time Collaborative Programm.pdf:application/pdf}
}

@inproceedings{sharrock_weblinux_2018,
  address    = {London United Kingdom},
  title      = {{WebLinux}: a scalable in-browser and client-side {Linux} and {IDE}},
  isbn       = {978-1-4503-5886-6},
  shorttitle = {{WebLinux}},
  url        = {https://dl.acm.org/doi/10.1145/3231644.3231703},
  doi        = {10.1145/3231644.3231703},
  abstract   = {WebLinux” is a web app tool providing a standard Linux OS and an IDE in the browser, including a terminal, a code editor and a file browser. It provides a client-side and offline Linux OS environment based on a Javascript emulated processor. By avoiding the use of a Virtual Machine or any Linux server, Weblinux enables learners to directly start experimenting with the Linux OS without installing any software. The tool is entirely client-side which makes it extremely scalable and easy to deploy within a large community of online learners.},
  language   = {en},
  urldate    = {2024-08-26},
  booktitle  = {Proceedings of the {Fifth} {Annual} {ACM} {Conference} on {Learning} at {Scale}},
  publisher  = {ACM},
  author     = {Sharrock, Rémi and Angrave, Lawrence and Hamonic, Ella},
  month      = jun,
  year       = {2018},
  pages      = {1--2},
  file       = {Sharrock et al. - 2018 - WebLinux a scalable in-browser and client-side Li.pdf:/home/pierre-helbing/Zotero/storage/P3KYQP6U/Sharrock et al. - 2018 - WebLinux a scalable in-browser and client-side Li.pdf:application/pdf}
}

@inproceedings{colin_design_2024,
  address   = {New York, NY, USA},
  series    = {{ITiCSE} 2024},
  title     = {Design and {Evaluation} of a {Web}-based {Distributed} {Pair} {Programming} {Tool} for {Novice} {Programmers}},
  isbn      = {9798400706004},
  url       = {https://dl.acm.org/doi/10.1145/3649217.3653571},
  doi       = {10.1145/3649217.3653571},
  abstract  = {Research on pair programming (PP) in education have shown a number of positive outcomes for learners, and especially novice programmers, such as enhanced learning, greater confidence in work quality, higher problem solving skills or enhanced interaction skills, and promotes collaborative learning. Due to these diverse advantages, pair programming in education currently follows a growing curve. Also, blended learning approaches are becoming more and more popular in education, including when learners have to learn programming. As a consequence, distributed pair programming (DPP) can be considered as a good solution to support pair programming in hybrid learning scenarios. A large number of tools from both the research community and the major integrated development environment (IDE) editors tried to study and implement DPP in their tools. However, our review of literature shows that none of them meet the requirements for delivering effective pair programming activities to novice programmers in blended learning scenarios. Based on these findings, the paper introduces a new DPP application especially designed for novice programmers. It integrates, based on some requirements identified from previous research, several features dedicated to DPP as well as other capabilities supporting extensive data collection and learning analytics. The tool has been experimented in authentic learning settings in higher education with 82 students, both in PP and DPP conditions. The experiment showed no evidence of a difference between PP and DPP on the students' perceived usability of the application, as well as on the quality of their productions.},
  urldate   = {2024-09-09},
  booktitle = {Proceedings of the 2024 on {Innovation} and {Technology} in {Computer} {Science} {Education} {V}. 1},
  publisher = {Association for Computing Machinery},
  author    = {Colin, José and Hoarau, Sébastien and Declercq, Christophe and Broisin, Julien},
  month     = jul,
  year      = {2024},
  pages     = {527--533},
  file      = {Full Text PDF:/home/pierre-helbing/Zotero/storage/PVK2PNRI/Colin et al. - 2024 - Design and Evaluation of a Web-based Distributed P.pdf:application/pdf}
}

@inproceedings{malan_containerizing_2024,
  address    = {New York, NY, USA},
  series     = {{ITiCSE} 2024},
  title      = {Containerizing {CS50}: {Standardizing} {Students}' {Programming} {Environments}},
  isbn       = {9798400706004},
  shorttitle = {Containerizing {CS50}},
  url        = {https://dl.acm.org/doi/10.1145/3649217.3653567},
  doi        = {10.1145/3649217.3653567},
  abstract   = {We argue in favor of Docker containers as alternatives to clusters of servers or virtual machines for students in introductory programming courses. We present our experience with the same since 2015 in CS50 at Harvard University as well as the pedagogical and operational motivations therefor. We present, too, the evolution of our environments for students over the years, from an on-campus cluster, to an off-campus cloud, to client-side virtual machines, to Docker containers, discussing the trade-offs of each. Not only do containers provide students with a standardized environment, reducing technical difficulties and frequently asked questions at term's start, they also provide instructors with full control over the software in use and versions thereof, additionally allowing instructors to deploy updates mid-semester. Particularly for large courses with hundreds or even thousands of students, containers allow staff to focus more of their time on teaching than on technical support. And, coupled with text editors that support extensions or plugins, containers allow instructors to optimize students' environment for learning, while still acquainting students with industry-standard tools. Most recently implemented atop GitHub Codespaces, a cloud-based version of Visual Studio Code, our own container-based solutions have since been used by more than 700,000 students and teachers, both on campus and off, and are also freely available to any teacher or student outside of our own university.},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the 2024 on {Innovation} and {Technology} in {Computer} {Science} {Education} {V}. 1},
  publisher  = {Association for Computing Machinery},
  author     = {Malan, David J.},
  month      = jul,
  year       = {2024},
  pages      = {534--540},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/YHFIWHJJ/Malan - 2024 - Containerizing CS50 Standardizing Students' Progr.pdf:application/pdf}
}

@inproceedings{jefferson_pyodideu_2024,
  address    = {New York, NY, USA},
  series     = {{SIGCSE} 2024},
  title      = {{PyodideU}: {Unlocking} {Python} {Entirely} in a {Browser} for {CS1}},
  isbn       = {9798400704239},
  shorttitle = {{PyodideU}},
  url        = {https://dl.acm.org/doi/10.1145/3626252.3630913},
  doi        = {10.1145/3626252.3630913},
  abstract   = {In this paper, we present an education-focused Python IDE and runtime library which can run entirely in desktop, laptop, tablet, and mobile device web browsers. Our solution provides features useful for an engaging CS1 course, and eliminates the need for a server-based runtime. We describe a new, open source, methodology for running interactive Python entirely in the browser by solving the "WebAssembly blocking problem," a core technical challenge to a web-based Python solution.Because our method enables Python entirely in the browser, it unlocks many new features. For example, students can share their code with others, without incurring extra costs to the instructors or institutions. Other features include line by line code highlighting as a program executes, highly intuitive interactive graphics, mouse and touch integration, and use of a wide selection of Python modules such as Numpy and Pandas. Currently, our IDE has been used in 5 classes, covering more than 10,000 students and teachers, with over 350,000 projects created. We found that students and instructors appreciated the variety of tools and abilities the IDE made possible. We benchmark the performance of running code with our method against other online Python solutions and we discuss the benefits and additional possibilities that our method allows, such as mobile device and/or offline code execution. We provide full free public access to our IDE and open source the core libraries which enable the conversion of student written Python to WebAssembly.},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the 55th {ACM} {Technical} {Symposium} on {Computer} {Science} {Education} {V}. 1},
  publisher  = {Association for Computing Machinery},
  author     = {Jefferson, Thomas and Gregg, Chris and Piech, Chris},
  month      = mar,
  year       = {2024},
  pages      = {583--589},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/GHGUGLSP/Jefferson et al. - 2024 - PyodideU Unlocking Python Entirely in a Browser f.pdf:application/pdf}
}

@inproceedings{fischer_addressing_2024,
  address    = {New York, NY, USA},
  series     = {{ICETC} '23},
  title      = {Addressing {Misconceptions} in {Introductory} {Programming}: {Automated} {Feedback} in {Integrated} {Development} {Environments}},
  isbn       = {9798400709111},
  shorttitle = {Addressing {Misconceptions} in {Introductory} {Programming}},
  url        = {https://dl.acm.org/doi/10.1145/3629296.3629297},
  doi        = {10.1145/3629296.3629297},
  abstract   = {In recent years, numerous approaches to automated feedback have been presented in the field of programming education. Often, these methods deliver feedback through standalone web-based environments or educational programming environments. However, only few works have explored how such feedback can be provided within Integrated Development Environments (IDEs). We propose MINDFIX, an approach for integrating alternative feedback mechanisms for addressing programming language misconceptions about Java into the Eclipse IDE. These mechanisms include textual hints, code examples, and a personalized pedagogical agent. A laboratory experiment was conducted to investigate their impact on novice programmers in higher education. The results show that MINDFIX addresses missing feedback mechanisms and features. Additionally, there are initial insights that our feedback addresses programming language misconceptions while being perceived as useful and comprehensible. Our findings also suggest that novice programmers with low self-efficacy expectations perceive pedagogical agents as more motivating, useful, and less disruptive compared to their peers.},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the 15th {International} {Conference} on {Education} {Technology} and {Computers}},
  publisher  = {Association for Computing Machinery},
  author     = {Fischer, Björn and Birk, Fabian and Iwer, Eva-Maria and Panitz, Sven Eric and Dörner, Ralf},
  month      = jan,
  year       = {2024},
  pages      = {1--8},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/88RVDGUJ/Fischer et al. - 2024 - Addressing Misconceptions in Introductory Programm.pdf:application/pdf}
}

@inproceedings{kuznetsov_development_2024,
  title     = {Development of {Project} {Management} {Module} for {Reflex} {Cloud} {IDE}},
  url       = {https://ieeexplore.ieee.org/document/10515647},
  doi       = {10.1109/SmartIndustryCon61328.2024.10515647},
  abstract  = {Paper describes a project management module for the Reflex process-oriented language cloud IDE. Currently, a prototype IDE called RIDE has been developed for the Reflex language, based on Eclipse Theia. This implementation approach allows the user to launch the IDE in a browser and immediately begin developing embedded control software. However, Theia is aimed at single-user applications and this drawback limits complexity of the programs. Therefore, Reflex IDE requires a development environment, which provides sufficient features for group development. The paper analyzes existing cloud IDEs and multi-user collaboration in projects, formulates architectural requirements for the project management module, and describes the implementation of the cloud IDE RIDE using the Reflex language.},
  urldate   = {2024-09-09},
  booktitle = {2024 {International} {Russian} {Smart} {Industry} {Conference} ({SmartIndustryCon})},
  author    = {Kuznetsov, Yegor and Zyubin, Vladimir},
  month     = mar,
  year      = {2024},
  keywords  = {Browsers, cloud IDE, Collaboration, Complexity theory, Industries, Industry 4.0, Project management, project management module, Prototypes, Reflex, RIDE, Software},
  pages     = {957--961},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/L8TF3GTI/10515647.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/2Q8LFE5K/Kuznetsov and Zyubin - 2024 - Development of Project Management Module for Refle.pdf:application/pdf}
}

@inproceedings{tomar_exploring_2024,
  title      = {Exploring the {Boundaries}: {Online} {Compiler} {Limitations} and {Capabilities}},
  shorttitle = {Exploring the {Boundaries}},
  url        = {https://ieeexplore.ieee.org/document/10522387},
  doi        = {10.1109/ICRITO61523.2024.10522387},
  abstract   = {This study examines the many facets of online compilers, examining their benefits and drawbacks as vital resources for contemporary software development. Web browser-based online compilers have become indispensable for programmers since they provide a platform-neutral environment for coding. The many elements that are built into these platforms-like language support, IDEs, accessibility, and collaboration tools-are all thoroughly examined in our study. Simultaneously, we examine the intrinsic constraints, such as security issues related to remote code execution, constraints on resource allocation, and difficulties with dependency management. We examine the advantages and disadvantages of well-known online compilers via case studies, offering valuable perspectives that help shape the direction of this technology going forward. The study concludes with suggestions for resolving the constraints found and emphasises the critical role online compilers play in the changing software development environment.},
  urldate    = {2024-09-09},
  booktitle  = {2024 11th {International} {Conference} on {Reliability}, {Infocom} {Technologies} and {Optimization} ({Trends} and {Future} {Directions}) ({ICRITO})},
  author     = {Tomar, Rhea and Singh, Ajay Vikram},
  month      = mar,
  year       = {2024},
  note       = {ISSN: 2769-2884},
  keywords   = {Codes, Collaboration, Dependency management, Encoding, Integrated Development Environments (IDEs), Online compilers, Program processors, Resource allocation, Security concerns, Shape, Software, Software development, Teamwork, Technological innovation},
  pages      = {1--7},
  file       = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/UI69FXGS/10522387.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/MQKFBPD9/Tomar and Singh - 2024 - Exploring the Boundaries Online Compiler Limitati.pdf:application/pdf}
}

@inproceedings{agrawal_codexchange_2024,
  title      = {{CodeXchange}: {Leaping} into the {Future} of {AI}-{Powered} {Code} {Editing}},
  volume     = {1},
  shorttitle = {{CodeXchange}},
  url        = {https://ieeexplore.ieee.org/document/10585043},
  doi        = {10.1109/ICCICA60014.2024.10585043},
  abstract   = {In the ever-changing internet ecosystem, where programs need to be regularly updated by users themselves not saving time and space, web-based coding tools surpass conventional desktop programs. Thus, showing online code editors enabling programmers to interact, experiment, and innovate efficiently. This study centers on "CodeXchange," an innovative online code editor designed to streamline coding processes and foster collaboration. It discusses the capabilities of code translation in Python, Java, and C++, optimization, auto-commenting, and collaborative development. Translation aids in code interchange, optimization ideas enhance time complexity and maintainability, while direct code comments improve documentation and comprehension. Multiple developers can interact on the same codebase using websockets and secure shared room access keys, enabling real-time collaborative coding and fostering knowledge exchange and cooperation. This study showcases the significant development of online code editors and their potential to revolutionize how programmers communicate, develop, and learn.},
  urldate    = {2024-09-09},
  booktitle  = {2024 {International} {Conference} on {Computational} {Intelligence} and {Computing} {Applications} ({ICCICA})},
  author     = {Agrawal, Mihir and Goyal, Jatin and Goyal, Mradul and Sukhija, Pratham and Sharma, Jaya and Vinod, D. Franklin},
  month      = may,
  year       = {2024},
  keywords   = {Code editors, Code translation, Codes, Collaboration, Comments Generation, Documentation, Encoding, IDEs, Knowledge engineering, Optimization, Parsing, Programming, Real-time systems, Websockets},
  pages      = {367--374},
  file       = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/YR7P3RHC/10585043.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/UH9R94P2/Agrawal et al. - 2024 - CodeXchange Leaping into the Future of AI-Powered.pdf:application/pdf}
}

@article{camarmas-alonso_creator_2024,
  title      = {{CREATOR}: {An} {Educational} {Integrated} {Development} {Environment} for {RISC}-{V} {Programming}},
  issn       = {2169-3536},
  shorttitle = {{CREATOR}},
  url        = {https://ieeexplore.ieee.org/document/10540579},
  doi        = {10.1109/ACCESS.2024.3406935},
  abstract   = {This article introduces a new integrated development environment called CREATOR (didaCtic and geneRic assEmbly progrAmming simulaTOR) that provides an interactive platform for educational assembly programming. CREATOR is specially designed for the academic environment, so it is very intuitive to users who are encountering assembly for the first time. It makes the traditional theory classes interactive, engaging students’ participation. Moreover, it is a multiplatform simulator that can be used with a web browser without requiring a server or additional installations, and it can be used on different types of devices. CREATOR allows all the necessary steps to be performed on the same tool, from the implementation of the assembly program to its execution on real hardware. For this purpose, it allows editing, compiling, simulating, debugging, and loading the program on the hardware device without auxiliary software. In addition, it is also capable of detecting compilation errors, execution errors, and violations of the parameter passing convention, helping users understand the reason for a given error so that they can resolve it. CREATOR offers the RISC-V and MIPS32 architectures by default. However, it is possible to modify these architectures or add new architectures in the tool as needed by any user. This feature allows teachers to prepare practical labs adapted to the teaching objectives, and it can also be used for research, e.g., for the study of different instruction sets.},
  urldate    = {2024-09-09},
  journal    = {IEEE Access},
  author     = {Camarmas-Alonso, Diego and Garcia-Carballeira, Felix and Calderon-Mateos, Alejandro and Del-Pozo-Puñal, Elias},
  year       = {2024},
  note       = {Conference Name: IEEE Access},
  keywords   = {Assembly, Assembly programming, Computer architecture, educational simulator, ESP32-RISCV, Hardware, Instruction sets, integrated development environment (IDE), Performance evaluation, Programming profession, Reactive power, Reduced instruction set computing, Registers, RISC-V, Simulation},
  pages      = {1--1},
  file       = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/GMJ745QL/10540579.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/R6PD5T9K/Camarmas-Alonso et al. - 2024 - CREATOR An Educational Integrated Development Env.pdf:application/pdf}
}

@inproceedings{frankford_requirements_2024,
  address    = {Angers, France},
  title      = {Requirements for an {Online} {Integrated} {Development} {Environment} for {Automated} {Programming} {Assessment} {Systems}:},
  isbn       = {978-989-758-697-2},
  shorttitle = {Requirements for an {Online} {Integrated} {Development} {Environment} for {Automated} {Programming} {Assessment} {Systems}},
  url        = {https://www.scitepress.org/DigitalLibrary/Link.aspx?doi=10.5220/0012556400003693},
  doi        = {10.5220/0012556400003693},
  language   = {en},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the 16th {International} {Conference} on {Computer} {Supported} {Education}},
  publisher  = {SCITEPRESS - Science and Technology Publications},
  author     = {Frankford, Eduard and Crazzolara, Daniel and Sauerwein, Clemens and Vierhauser, Michael and Breu, Ruth},
  year       = {2024},
  pages      = {305--313},
  file       = {Frankford et al. - 2024 - Requirements for an Online Integrated Development .pdf:/home/pierre-helbing/Zotero/storage/5EMDHHDR/Frankford et al. - 2024 - Requirements for an Online Integrated Development .pdf:application/pdf}
}

@article{mesaros_learning_2024,
  title      = {Learning {Web} {Development} using {GitHub} {Copilot} in and outside {Academia}: a {Blessing} or a {Curse}?},
  volume     = {22},
  issn       = {1334-4684, 1334-4676},
  shorttitle = {Learning {Web} {Development} using {GitHub} {Copilot} in and outside {Academia}},
  url        = {https://hrcak.srce.hr/318430},
  doi        = {10.7906/indecs.22.3.10},
  abstract   = {This article investigates the usage of GitHub Copilot, an artificial intelligence-powered coding assistant owned by Microsoft and GitHub, in the process of learning and teaching web development both in formal academic, and informal settings. We dive...},
  language   = {en},
  number     = {3},
  urldate    = {2024-09-09},
  journal    = {Interdisciplinary Description of Complex Systems : INDECS},
  author     = {Mesaroš, Gabriel Oliver},
  month      = jun,
  year       = {2024},
  note       = {Publisher: Hrvatsko interdisciplinarno društvo},
  pages      = {355--359},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/D2XVNVHU/Mesaroš - 2024 - Learning Web Development using GitHub Copilot in a.pdf:application/pdf}
}

@inproceedings{gornev_towards_2023,
  title     = {Towards {Collaborative} {Coding} in {RIDE} {Web} {IDE}},
  url       = {https://ieeexplore.ieee.org/document/10347731},
  doi       = {10.1109/APEIE59731.2023.10347731},
  abstract  = {RIDE is an integrated development environment (IDE) suited for the Reflex language, specifically designed for creating control algorithms for cyber-physical systems. RIDE is based on Eclipse Theia and a host program running independent instances for each user. However, it does not provide collaborative experience. Eclipse Theia is designed for single-user; therefore, collaborative programming is hampered by security and ease of use issues. This paper outlines a server program architecture to add collaborative abilities to otherwise single-user web applications. The suggested approach is application independent. It is applicable to other single-user applications, making it possible to deploy them in the cloud as web services. The paper provides a detailed analysis of the problem, as well as the tools and frameworks used for implementing this design with RIDE. This implementation makes use of Docker for containerization, Python and Flask for host program, Google Auth for user authentication, and SQLite for the database.},
  urldate   = {2024-09-09},
  booktitle = {2023 {IEEE} {XVI} {International} {Scientific} and {Technical} {Conference} {Actual} {Problems} of {Electronic} {Instrument} {Engineering} ({APEIE})},
  author    = {Gornev, Ilya A. and Bondarchuk, Vladimir V.},
  month     = nov,
  year      = {2023},
  note      = {ISSN: 2473-8573},
  keywords  = {cloud IDE, Collaboration, Computer architecture, CPS, Instruments, multi-user management, process-oriented programming, Programming, Reflex, Service-oriented architecture, Software, Source coding, web application},
  pages     = {970--974},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/55QXVAWR/10347731.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/Y3JDWMBI/Gornev and Bondarchuk - 2023 - Towards Collaborative Coding in RIDE Web IDE.pdf:application/pdf}
}

@inproceedings{li_design_2023,
  title     = {Design of {STEM} {Teaching} {Network} {Publishing} {Framework} {Based} on {Web} {Interactive} {Programming} {Environment}},
  url       = {https://ieeexplore.ieee.org/document/10393759},
  doi       = {10.1109/ICDSCA59871.2023.10393759},
  abstract  = {With the rapid development of e-learning, collaborative learning platforms such as Web-Based Education Domain are gradually being promoted in subject education. However, with the deepening of the application of platform environments, the problem of time lag in learning interaction in virtual classrooms has gradually been exposed. The traditional one-way collaborative education platform has been difficult to meet the demand for real-time interaction in smart classroom teaching. Based on this, the research was inspired by programming education and introduced a Web-based interactive programming environment. Through segmented programming technology, real-time interaction between teachers and students in the virtual classroom was realized, and animation media resources were finally generated and published to the learning network. middle. In the environment design, the study introduced four dimensions of environmental learning goals (entry skills, primitive skills, emotional skills and wisdom skills) to analyze learners, and based on the analysis results, a corresponding teaching case for the interactive programming environment system framework was designed, discuss how to use this framework to implement subject teaching ideas and practical methods to promote real-time interaction in virtual classrooms.},
  urldate   = {2024-09-09},
  booktitle = {2023 {IEEE} 3rd {International} {Conference} on {Data} {Science} and {Computer} {Application} ({ICDSCA})},
  author    = {Li, Danyang and Yang, Wudao},
  month     = oct,
  year      = {2023},
  keywords  = {Animation, Education, Interactive programming environment, Market research, Media, Notebooks, programming education, Publishing, real-time interaction, Real-time systems, STEM, Systems operation},
  pages     = {357--362},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/98RM6QE5/10393759.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/CLHK84BY/Li and Yang - 2023 - Design of STEM Teaching Network Publishing Framewo.pdf:application/pdf}
}

@inproceedings{molnar_evaluation_2023,
  title      = {Evaluation and technological solutions for a dynamic, unified cloud programming development environment : {Ease} of use and applicable system for uniformized practices and assessments},
  shorttitle = {Evaluation and technological solutions for a dynamic, unified cloud programming development environment},
  url        = {https://ieeexplore.ieee.org/document/10044519},
  doi        = {10.1109/SAMI58000.2023.10044519},
  abstract   = {The dynamic development and change of the world also result in the modernization of teacher-student relationships. In the training, educational processes must be planned with innovative strategies that meet the increasingly changing needs of students, which today go beyond the traditional classroom and methodological frameworks. In this article, we present a technological solution to support the renewal efforts in the education world that, on the one hand, takes advantage of the benefits of cloud-based services, and on the other hand, ensures that students can acquire the material of a given course in a unified, stable environment. The isolated environment offered by the virtual space guarantees private work sessions, and multi-project activities can also be handled more easily and uniformly. The analysis of the teaching program presented below provides insight into the practical and appropriate solutions offered by the containerization process. In addition to these, the topic will also cover the widely used and popular Docker application that supports the implementation of the process, as well as the NodeJS environment closely related to the project.},
  urldate    = {2024-09-09},
  booktitle  = {2023 {IEEE} 21st {World} {Symposium} on {Applied} {Machine} {Intelligence} and {Informatics} ({SAMI})},
  author     = {Molnár, György and József, Cserkó and Éva, Karl},
  month      = jan,
  year       = {2023},
  keywords   = {Cloud computing, cloud-based services, containerization, Docker, Dynamic programming, Informatics, Machine intelligence, NodeJS, Programming profession, teach program, Training, virtual environment},
  pages      = {000237--000240},
  file       = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/9HCCEXQR/10044519.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/FS4TBV28/Molnár et al. - 2023 - Evaluation and technological solutions for a dynam.pdf:application/pdf}
}

@inproceedings{liang_browser-based_2023,
  title     = {Browser-based {Java} {Development} {Environment} for {Programming} {Education}},
  url       = {https://ieeexplore.ieee.org/document/10409780},
  doi       = {10.1109/CANDARW60564.2023.00033},
  abstract  = {Programming education has become popular in elementary education. However, the pass rate for the subject of programming in higher education is not always sufficient. In recent years, data science courses have effectively taught interactive and goal-oriented programming using Python and Jupyter. We propose a method for learning Java programming interactively using a Jupyter-like execution environment. This environment also enables the execution of network applications that are difficult to execute in the existing Jupyter environment. We show that many of the actual class examples can be executed using the proposed system.},
  urldate   = {2024-09-09},
  booktitle = {2023 {Eleventh} {International} {Symposium} on {Computing} and {Networking} {Workshops} ({CANDARW})},
  author    = {Liang, Yibao and Uehara, Minoru},
  month     = nov,
  year      = {2023},
  note      = {ISSN: 2832-1324},
  keywords  = {Data science, Google Colaboratory (Colab), Graphical user interfaces, Java, JupyterHub, JupyterLab, Programming Education, Programming Environment, Programming profession, Python, Task analysis, Training},
  pages     = {153--158},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/AI2PQJMK/10409780.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/K6R44W7S/Liang and Uehara - 2023 - Browser-based Java Development Environment for Pro.pdf:application/pdf}
}

@inproceedings{elhayany_exploring_2023,
  title      = {Exploring the {Effectiveness} of {Web}-{Based} {Programming} {Environments} for {MOOCs}: {A} {Comparative} {Study} of {CodeOcean} and {OpenJupyter}},
  shorttitle = {Exploring the {Effectiveness} of {Web}-{Based} {Programming} {Environments} for {MOOCs}},
  url        = {https://ieeexplore.ieee.org/document/10306228},
  doi        = {10.1109/LWMOOCS58322.2023.10306228},
  abstract   = {Programming courses offered by openHPI, the European MOOC platform of the Hasso Plattner Institute, feature hands-on programming exercises to support learners in practicing the newly acquired skills. These exercises are facilitated by two tools: CodeOcean and Open Jupyter. Code Ocean is user-friendly and suitable for beginners, while OpenJupyter is more advanced and used in data science courses. In this paper, we compare and discuss the advantages and limitations of both tools, providing recommendations for instructors and researchers in programming courses. We also address technical details, such as scalability and execution environments. Furthermore, we explore future research possibilities, particularly in learner collaboration and automated feedback. Our work supports learners in acquiring knowledge and testing it at their own pace, with individualized feedback and minimal technical requirements, contributing to an open education landscape in programming education.},
  urldate    = {2024-09-09},
  booktitle  = {2023 {IEEE} {Learning} with {MOOCS} ({LWMOOCS})},
  author     = {Elhayany, Mohamed and Serth, Sebastian and Meinel, Christoph},
  month      = oct,
  year       = {2023},
  keywords   = {Auto-Grader, CodeOcean, Computer aided instruction, Data Science, Education, Electronic learning, MOOC, Oceans, OpenJupyter, Programming, Refining, Scalability, Technical requirements, Web-based Environment},
  pages      = {1--6},
  file       = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/CZ8JYPYP/10306228.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/CBGANMBS/Elhayany et al. - 2023 - Exploring the Effectiveness of Web-Based Programmi.pdf:application/pdf}
}

@article{kuga_efpga_2023,
  title    = {An {eFPGA} {Generation} {Suite} with {Customizable} {Architecture} and {IDE}},
  volume   = {E106.A},
  doi      = {10.1587/transfun.2022VLP0008},
  abstract = {From edge devices to cloud servers, providing optimized hardware acceleration for specific applications has become a key approach to improve the efficiency of computer systems. Traditionally, many systems employ commercial field-programmable gate arrays (FPGAs) to implement dedicated hardware accelerator as the CPU's co-processor. However, commercial FPGAs are designed in generic architectures and are provided in the form of discrete chips, which makes it difficult to meet increasingly diversified market needs, such as balancing reconfigurable hardware resources for a specific application, or to be integrated into a customer's system-on-a-chip (SoC) in the form of embedded FPGA (eFPGA). In this paper, we propose an eFPGA generation suite with customizable architecture and integrated development environment (IDE), which covers the entire eFPGA design generation, testing, and utilization stages. For the eFPGA design generation, our intellectual property (IP) generation flow can explore the optimal logic cell, routing, and array structures for given target applications. For the testability, we employ a previously proposed shipping test method that is 100\% accurate at detecting all stuck-at faults in the entire FPGA-IP. In addition, we propose a user-friendly and customizable Web-based IDE framework for the generated eFPGA based on the NODE-RED development framework. In the case study, we show an eFPGA architecture exploration example for a differential privacy encryption application using the proposed suite. Then we show the implementation and evaluation of the eFPGA prototype with a 55nm test element group chip design.},
  number   = {3},
  journal  = {IEICE Transactions on Fundamentals of Electronics, Communications and Computer Sciences},
  author   = {Kuga, Morihiro and Zhao, Qian and Nakazato, Yuya and Amagasaki, Motoki and Iida, Masahiro},
  year     = {2023},
  keywords = {application-specific acceleration, eFPGA, FPGA architecture, FPGA CAD, FPGA-IP},
  pages    = {560--574},
  file     = {Full Text PDF:/home/pierre-helbing/Zotero/storage/CHTTK36L/Kuga et al. - 2023 - An eFPGA Generation Suite with Customizable Archit.pdf:application/pdf;J-Stage - Snapshot:/home/pierre-helbing/Zotero/storage/N8V285HT/_article.html:text/html}
}

@article{bork_language_2023,
  title      = {Language {Server} {Protocol}: {An} {Introduction} to the {Protocol}, its {Use}, and {Adoption} for {Web} {Modeling} {Tools}},
  volume     = {18},
  copyright  = {Copyright (c) 2023 Dominik Bork, Philip Langer},
  issn       = {1866-3621},
  shorttitle = {Language {Server} {Protocol}},
  url        = {https://emisa-journal.org/emisa/article/view/320},
  doi        = {10.18417/emisa.18.9},
  abstract   = {With the introduction of the Language Server Protocol (LSP), a fundamental shift has been observed in the development of language editing support for Integrated Development Environments (IDEs), such as VS Code, the traditional Eclipse IDE, or Eclipse Theia. LSP establishes a uniform protocol that standardizes the communication between a language client (e. g., an IDE like Eclipse) and a language server (e. g., for a programming language like Java). The language client only needs to be able to interpret and understand the protocol instead of the specific programming language. Likewise, the language server can focus on language support and does not need to consider the specifics of a respective IDE. This reduces the complexity of realizing language support on different editors and IDEs and enables smooth transitions from one IDE to another. LSP is an open and community-driven protocol that has been developed within the realm of the VS Code community, initiated and driven by Microsoft. The generic concept and architecturalpattern of LSP enables widespread applications that go far beyond the realization of editing support for programming languages. This paper provides an introduction to LSP, describes its evolution and core characteristics, and delineates its potential for revolutionizing not only the IDE market but also other software systems, such as modeling tools.},
  language   = {en},
  urldate    = {2024-09-09},
  journal    = {Enterprise Modelling and Information Systems Architectures (EMISAJ)},
  author     = {Bork, Dominik and Langer, Philip},
  month      = sep,
  year       = {2023},
  keywords   = {Conceptual Modeling, Integrated Development Environment, Language Server Protocol, Modeling tools, Software Engineering},
  pages      = {9:1--16},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/QPQIH68J/Bork and Langer - 2023 - Language Server Protocol An Introduction to the P.pdf:application/pdf}
}

@article{noor_acceptance_2023,
  title     = {{THE} {ACCEPTANCE} {OF} {AN} {EDUCATIONAL} {INTEGRATED} {DEVELOPMENT} {ENVIRONMENT} {TO} {LEARN} {PROGRAMMING} {FUNDAMENTALS}},
  volume    = {93},
  copyright = {Copyright (c) 2023 Нор Фарахвахіда Мохд Нур, Асліна Саад, Абу Бакар Ібрагім, Норашаді Мохд Нур},
  issn      = {2076-8184},
  url       = {https://journal.iitta.gov.ua/index.php/itlt/article/view/5102},
  doi       = {10.33407/itlt.v93i1.5102},
  abstract  = {Programming is an important course for any IT or engineering-related course. However, previous research shows that students face difficulties in learning programming due to its abstract concepts. This study aims to evaluate the acceptance of a developed Integrated Development Environment (IDE), namely C-SOLVIS which is a web-based application that specifically intends to facilitate the teaching and learning of the C programming fundamentals in Malaysian tertiary education. The C-SOLVIS integrates problem-solving into a program development environment for the C language. The goal is to guide the users in problem-solving and help them write C programs based on problem-solving algorithms. The Rapid Application Development (RAD) Model was employed in the C-SOLVIS development process. Based on this model, the requirement planning phase was carried out through the triangulation technique by applying qualitative approaches comprising a literature review supported by semi-structured interviews, document reviews, and content validation by expert programming lecturers. Subsequently, the design of the application was accomplished through the iterative prototyping process which was then followed by the application construction. Then, the C-SOLVIS is deployed to be used by several programming lecturers to evaluate its usability by adopting a quantitative method using the System Usability Scale (SUS) questionnaire. The study has discovered several suitable techniques and designs for the problem-solving and program development environment. For the problem-solving environment, the Computational Thinking (CT) concepts were applied which were supported by the Input-Process-Output (IPO) Model through Scientific Instructions and Inquiries. Meanwhile, the program development environment was designed and developed based on frame-based programming using a set of developed Code Patterns. The C-SOLVIS evaluation using the SUS instrument has yielded a SUS mean score of 86.07. This score is interpreted by SUS as an A grade that indicates C-SOLVIS as a highly usable application and thus is accepted for C programming learning. Hence, the development process of the C-SOLVIS can be used as a guideline for educational software development, especially in the field of programming education.},
  language  = {en},
  number    = {1},
  urldate   = {2024-09-09},
  journal   = {Information Technologies and Learning Tools},
  author    = {Noor, Nor Farahwahida Mohd and Saad, Aslina and Ibrahim, Abu Bakar and Noor, Norashady Mohd},
  month     = feb,
  year      = {2023},
  note      = {Number: 1},
  keywords  = {educational software, IDE, programming, usability, зручність використання, Інтегроване Середовище Розробки (ІСР), освітнє програмне забезпечення, програмування},
  pages     = {135--151},
  file      = {Full Text PDF:/home/pierre-helbing/Zotero/storage/4CXIYRBF/Noor et al. - 2023 - THE ACCEPTANCE OF AN EDUCATIONAL INTEGRATED DEVELO.pdf:application/pdf}
}

@inproceedings{alharbi_re-imagining_2022,
  address    = {New York, NY, USA},
  series     = {{WSSE} '22},
  title      = {Re-imagining {Computer} {Laboratories} for {Teaching} {Introductory} {Programming} {Concepts} {Using} {Web}-based {Integrated} {Development} {Environments}: {Opportunities} and {Challenges}},
  isbn       = {978-1-4503-9695-0},
  shorttitle = {Re-imagining {Computer} {Laboratories} for {Teaching} {Introductory} {Programming} {Concepts} {Using} {Web}-based {Integrated} {Development} {Environments}},
  url        = {https://dl.acm.org/doi/10.1145/3568364.3568375},
  doi        = {10.1145/3568364.3568375},
  abstract   = {This study reported on students' views and experience during the transition from a traditional computer laboratory into a web-based integrated development environment in an introductory programming concepts course. The aim of this study is twofold. First, to review and evaluate selected web-based integrated development environments (Web IDEs) that can be used to support teaching and learning of programming concepts. Second, to get insight into students' views and experience towards the web-based integrated development environments compared to computer laboratory. Students' understanding of basic programming concepts is part of any computer science and information technology academic program. However, research shows that it is not always easy for students to learn about these concepts, and that is reflected in the high drop rate among students in these subjects. Computer laboratory is an integral part for introductory courses on programming concepts to help students practice what they have learnt. The study is descriptive and exploratory in its nature, and was conducted in two stages. First, a review of some selected web integrated development environments was performed using a rubric for evaluating e-learning tools. Second, the study explored students' views and experience with the web-based integrated development environment using a questionnaire and a focus group. The study demonstrated that students had positive views and experience towards the web-based integrated development environments implying that these tools have the potential to overcome the limitations inherited in computer laboratory. The study suggested some improvements to the web-based integrated development environments to be more educationally effective.},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the 4th {World} {Symposium} on {Software} {Engineering}},
  publisher  = {Association for Computing Machinery},
  author     = {Alharbi, Ali},
  month      = dec,
  year       = {2022},
  pages      = {67--74},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/8L2ZIDND/Alharbi - 2022 - Re-imagining Computer Laboratories for Teaching In.pdf:application/pdf}
}

@inproceedings{malan_standardizing_2022,
  address    = {New York, NY, USA},
  series     = {{ITiCSE} '22},
  title      = {Standardizing {Students}' {Programming} {Environments} with {Docker} {Containers}: {Using} {Visual} {Studio} {Code} in the {Cloud} with {GitHub} {Codespaces}},
  isbn       = {978-1-4503-9200-6},
  shorttitle = {Standardizing {Students}' {Programming} {Environments} with {Docker} {Containers}},
  url        = {https://dl.acm.org/doi/10.1145/3502717.3532164},
  doi        = {10.1145/3502717.3532164},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the 27th {ACM} {Conference} on on {Innovation} and {Technology} in {Computer} {Science} {Education} {Vol}. 2},
  publisher  = {Association for Computing Machinery},
  author     = {Malan, David J.},
  month      = jul,
  year       = {2022},
  pages      = {599--600},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/JCMDTQ8E/Malan - 2022 - Standardizing Students' Programming Environments w.pdf:application/pdf}
}

@inproceedings{al-gahmi_jupyter_2022,
  address    = {New York, NY, USA},
  series     = {{SIGCSE} 2022},
  title      = {Jupyter in the {Classroom}: {An} {Experience} {Report}},
  volume     = {1},
  isbn       = {978-1-4503-9070-5},
  shorttitle = {Jupyter in the {Classroom}},
  url        = {https://dl.acm.org/doi/10.1145/3478431.3499379},
  doi        = {10.1145/3478431.3499379},
  abstract   = {Jupyter is an interactive web-based programming environment commonly used by Python programmers and data scientists. It can be used in the classroom either by itself or in addition to a traditional programming environment. This paper documents our experience using Jupyter in multiple computer science courses in a public four-year university using different programming languages (Java, C++, and Python). It describes our motivations for using Jupyter in these courses and how it is made available to students. It also describes the different roles it plays in our pedagogical approaches and the challenges it poses to both instructors and students. A report is presented on the preliminary experimentation conducted to evaluate its effectiveness in improving student performance. While our tests are limited by small sample sizes and did not show that using Jupyter produces a statistically significant improvement in student performance, qualitative analysis of student responses showed the usefulness of this tool in revitalizing teaching and keeping students engaged.},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the 53rd {ACM} {Technical} {Symposium} on {Computer} {Science} {Education} - {Volume} 1},
  publisher  = {Association for Computing Machinery},
  author     = {Al-Gahmi, Abdulmalek and Zhang, Yong and Valle, Hugo},
  month      = feb,
  year       = {2022},
  pages      = {425--431},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/ZNAR4JIQ/Al-Gahmi et al. - 2022 - Jupyter in the Classroom An Experience Report.pdf:application/pdf}
}

@inproceedings{cazalas_mocside_2022,
  address    = {New York, NY, USA},
  series     = {{SIGCSE} 2022},
  title      = {{MOCSIDE}: {An} {Open}-source and {Scalable} {Online} {IDE} and {Auto}-{Grader} for {Computer} {Science} {Education}},
  isbn       = {978-1-4503-9071-2},
  shorttitle = {{MOCSIDE}},
  url        = {https://dl.acm.org/doi/10.1145/3478432.3499125},
  doi        = {10.1145/3478432.3499125},
  abstract   = {Programming is learned through practice, with said practice in introductory programming courses often translating to a prohibitively large number of assignments, increasing the grading workload for faculty and/or teaching assistants. In short, this is unsustainable. Several publishers and a few notable companies have provided meritable auto-grading solutions, although most are plagued with problems including minimal problem sets, limited customization options, high cost, and at times even a disconnect with the pedagogical needs of academia. This poster presents our newly-developed web application, MOCSIDE, an open-source and scalable online IDE and auto-grader for computer science education. Results indicate a positive user experience from students and instructors alike, with cost savings, ease of use, and code collaboration highlighted as key features.},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the 53rd {ACM} {Technical} {Symposium} on {Computer} {Science} {Education} {V}. 2},
  publisher  = {Association for Computing Machinery},
  author     = {Cazalas, Jonathan and Barlow, Max and Cazalas, Ibraheem and Robinson, Chase},
  month      = mar,
  year       = {2022},
  pages      = {1114},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/BDFZGF5B/Cazalas et al. - 2022 - MOCSIDE An Open-source and Scalable Online IDE an.pdf:application/pdf}
}

@inproceedings{gornev_towards_2022,
  title     = {Towards {Multi}-{User} {Mode} in {RIDE} {Web}-{IDE}},
  url       = {https://ieeexplore.ieee.org/document/9855114},
  doi       = {10.1109/EDM55285.2022.9855114},
  abstract  = {RIDE is an integrated development environment for the Reflex language, a process-oriented language designed for developing control algorithms for cyber-physical systems. RIDE was developed based on Eclipse Theia – an open source web IDE framework. Despite being based on web technologies such as Node.JS, RIDE can not serve as a web application for multiple users simultaneously. The paper describes an approach for configuring a server environment and creating a host program that makes hosting RIDE as a public web application possible. It provides problem analysis, tools and frameworks survey, and implementation details. Among discussed technologies are Docker, Kubernetes, and Eclipse Che. For multi-user support and security reasons, an instance of RIDE runs in an independent Docker container for each client. The host program handles input connections, runs and stops Docker containers with RIDE. The described approach may be used for deploying other single-user applications in the cloud turning them into web-services.},
  urldate   = {2024-09-09},
  booktitle = {2022 {IEEE} 23rd {International} {Conference} of {Young} {Professionals} in {Electron} {Devices} and {Materials} ({EDM})},
  author    = {Gornev, Ilya A. and Bondarchuk, Vladimir V. and Liakh, Tatiana V.},
  month     = jun,
  year      = {2022},
  note      = {ISSN: 2325-419X},
  keywords  = {cloud IDE, Containers, Cyber-physical systems, Docker, multi-user management, Process control, process-oriented programming, Protocols, Servers, Turning, web, Web services},
  pages     = {675--678},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/NYTGSAAF/9855114.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/U9ABR9G4/Gornev et al. - 2022 - Towards Multi-User Mode in RIDE Web-IDE.pdf:application/pdf}
}

@inproceedings{srinivasa_bad_2022,
  title      = {A {Bad} {IDEa}: {Weaponizing} uncontrolled online-{IDEs} in availability attacks},
  shorttitle = {A {Bad} {IDEa}},
  url        = {https://ieeexplore.ieee.org/document/9799405},
  doi        = {10.1109/EuroSPW55150.2022.00015},
  abstract   = {Botnets are an ongoing threat to the cyber world and can be utilized to carry out DDoS attacks of high magnitude. From the botmaster's perspective, there is a constant need for deploying more effective botnets and discovering new ways to bolster their bot ranks. Integrated Development Environments (IDEs) have been essential for software developers to write and compile source code. The increasing need for remote work and collaborative workspaces have led to the IDE-as-a-service paradigm that offers online code editing and compilation with multiple language support. In this paper, we show that a multitude of online IDEs do not run control checks on the user code and can be therefore lever-aged by a botnet. We examine the concept of uncontrolled execution environments and present a proof of concept to show how uncontrolled online-IDEs can be weaponized to perform large-scale attacks by a botnet. Overall, we detect a total of 719 online-IDEs with uncontrolled execution environments and limited sandboxing. Lastly, as ethical disclosure, we inform the IDE developers and service providers of the vulnerabilities and propose countermeasures.},
  urldate    = {2024-09-09},
  booktitle  = {2022 {IEEE} {European} {Symposium} on {Security} and {Privacy} {Workshops} ({EuroS}\&{PW})},
  author     = {Srinivasa, Shreyas and Georgoulias, Dimitrios and Pedersen, Jens Myrup and Vasilomanolakis, Emmanouil},
  month      = jun,
  year       = {2022},
  note       = {ISSN: 2768-0657},
  keywords   = {Bandwidth, Botnet, Codes, Collaboration, Denial-of-service attack, Ethics, online IDE, uncontrolled execution, Weapons},
  pages      = {82--92},
  file       = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/CXDWW58D/9799405.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/5DAID824/Srinivasa et al. - 2022 - A Bad IDEa Weaponizing uncontrolled online-IDEs i.pdf:application/pdf}
}

@inproceedings{coutinho_study_2022,
  title     = {A study of microcontroller simulator tools for autonomous and online learning},
  url       = {https://ieeexplore.ieee.org/document/9820021},
  doi       = {10.1109/EAEEIE54893.2022.9820021},
  abstract  = {Even though technologically advanced processors based on 32 and 64 bit are now available, embedded systems still rely on the use 8 or 16 bit microcontroller solutions, due to factors such as cost-effectiveness and low power consumption. Its widespread adoption by the industry and its simplicity led the academy to address the development of systems using these 8 or 16 bit microcontrollers in its introductory-level electrical engineering curricula. Typically, a microcontroller of the MSP, AVR, MCS-51 or PIC family is used. Although in person laboratory work offers students the opportunity for acquiring skills related to practical experience with hardware and development boards, availability of hardware resources might be reduced in autonomous or online contexts. In these scenarios, simulation tools can be highly valuable, as an alternative or complementary option to laboratory work. Standard development tools are often unsuited for such purposes, because they are oriented to development activities that often assume the availability of hardware resources for executing, testing and debugging the system. To address this, this paper presents a survey of the ecosystem of tools for 8 or 16 bit microprocessors and microcontrollers development focused on their capability for supporting the simulation of embedded systems, and evaluate these solutions from the perspective of their potential for enabling autonomous study and learning by students. This comparative analysis can be very useful as it can serve as a decision factor for the choice of the microcontroller or microprocessor and toolchain to adopt in curriculum design, while it also identifies opportunities for new developments to address existing limitations.},
  urldate   = {2024-09-09},
  booktitle = {2022 31st {Annual} {Conference} of the {European} {Association} for {Education} in {Electrical} and {Information} {Engineering} ({EAEEIE})},
  author    = {Coutinho, Fernanda and Silva, Marco and Barreiros, Jorge},
  month     = jun,
  year      = {2022},
  note      = {ISSN: 2472-7687},
  keywords  = {Analytical models, autonomous learning, development tools, Electrical engineering, embedded systems, Embedded systems, Hardware, microcontroller simulators, Microcontrollers, online learning, Power demand, Program processors},
  pages     = {1--6},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/RMHBMPFX/9820021.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/ZL7MPSSI/Coutinho et al. - 2022 - A study of microcontroller simulator tools for aut.pdf:application/pdf}
}

@article{singh_pyguru_nodate,
  title    = {{PyGuru}: {A} {Programming} {Environment} to {Facilitate} {Measurement} of {Cognitive} {Engagement}},
  abstract = {There is a vital link between students' engagement and their performance. Despite this, a dearth of studies exploring student engagement (especially cognitive) in computer programming, where high failure rates are a norm. Interestingly, online environments capture fine-grained interactions; this data has the potential to detect students' cognitive engagement. The contribution of this paper is two-fold. Firstly, it introduces an online learning environment to learn and practice python programming called PyGuru and the data logged in the system. Secondly, we provide a preliminary analysis of students' interaction with the system to reveal their level of cognitive engagement in different system components. The results of this study conducted for two weeks and 21 students demonstrate that students perform more actions that correspond to passive engagement than other levels of engagement.},
  language = {en},
  author   = {Singh, Daevesh and Subramaniam, Hema and Rajendran, Ramkumar},
  file     = {Singh et al. - PyGuru A Programming Environment to Facilitate Me.pdf:/home/pierre-helbing/Zotero/storage/6IBZ6HKX/Singh et al. - PyGuru A Programming Environment to Facilitate Me.pdf:application/pdf}
}

@article{barlow_mocside_2021,
  title      = {{MOCSIDE}: an open-source and scalable online {IDE} and auto-grader for introductory programming courses},
  volume     = {37},
  issn       = {1937-4771},
  shorttitle = {{MOCSIDE}},
  abstract   = {Programming is learned through practice, with said practice in introductory programming courses often translating to a prohibitively large number of assignments, increasing the grading workload for faculty and/or teaching assistants. In short, this is unsustainable. Several publishers and a few notable companies have provided meritable solutions, although most are plagued with problems including minimal problem sets, limited customization options, high cost, and even a disconnect with the pedagogical needs within academia. This paper presents a survey of the more popular solutions currently available, followed by a presentation of our newly-developed web application, MOCSIDE: open-source and scalable online IDE and auto-grader for computer science education.},
  number     = {5},
  journal    = {J. Comput. Sci. Coll.},
  author     = {Barlow, Max and Cazalas, Ibraheem and Robinson, Chase and Cazalas, Jonathan},
  month      = oct,
  year       = {2021},
  pages      = {11--20},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/C5KAN5CF/Barlow et al. - 2021 - MOCSIDE an open-source and scalable online IDE an.pdf:application/pdf}
}

@inproceedings{gornev_ride_2021,
  title      = {{RIDE}: {Theia}-{Based} {Web} {IDE} for the {Reflex} {Language}},
  shorttitle = {{RIDE}},
  url        = {https://ieeexplore.ieee.org/document/9507678},
  doi        = {10.1109/EDM52169.2021.9507678},
  abstract   = {The process-oriented programming language Reflex is a programming language for cyber-physical systems' (CPS) control software. It is based on the formal hyperprocess model. Reflex has proved effective in industrial projects. But using Reflex is difficult due to the lack of IDE for Reflex programs. In this paper, we develop a cloud desktop IDE for the Reflex language - RIDE. Modularity is the main principle of RIDE architecture. It meets the needs of CPS software development process and allows extending the IDE functionality. Reflex IDE extensions may provide various functionalities, such as a graphical representation of the Reflex code, translators to other programming languages, debugging, and verification techniques.},
  urldate    = {2024-09-09},
  booktitle  = {2021 {IEEE} 22nd {International} {Conference} of {Young} {Professionals} in {Electron} {Devices} and {Materials} ({EDM})},
  author     = {Gornev, Ilya and Liakh, Tatiana},
  month      = jun,
  year       = {2021},
  note       = {ISSN: 2325-419X},
  keywords   = {cloud IDE, Computer architecture, Computer languages, control software, cyber-physical systems, Debugging, Process control, process-oriented programming, Syntactics, web, Web services, Writing},
  pages      = {503--506},
  file       = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/Q7HEKPGD/9507678.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/6CQ4X9MV/Gornev and Liakh - 2021 - RIDE Theia-Based Web IDE for the Reflex Language.pdf:application/pdf}
}

@inproceedings{liu_codehelper_2021,
  title      = {{CodeHelper}: {A} {Web}-{Based} {Lightweight} {IDE} for {E}-{Mentoring} in {Online} {Programming} {Courses}},
  shorttitle = {{CodeHelper}},
  url        = {https://ieeexplore.ieee.org/document/9486772},
  doi        = {10.1109/ICCCI51764.2021.9486772},
  abstract   = {Many universities choose online courses instead of in-person during the COVID-19 pandemic. One of the limitations of online courses is that it is difficult to perform teacher-student interactions in online teaching environments. Especially in online programming courses, it is hard to find an appropriate approach to remotely guide students when they have trouble conducting program code. This paper presents a lightweight IDE named CodeHelper integrated with an online judge that allows the instructor or the teaching assistant (TA) to help students in a form of online pair programming. Students can share their code with the instructor or the TA in a sandbox programming environment generated by CodeHelper, and the instructor or the TA can guide students by marking the mistakes in the sandbox. CodeHelper allows real-time pair programming for both sides, which can reduce the time and the cost of distance learning. Besides, the source code shared in the sandbox can also be compiled for syntax check, executed with a user-defined input, and submitted to the online judge for automated assessment, which can let students check the correctness of their programs once their troubles have been solved. It is efficient to use CodeHelper for mentoring students in online programming courses.},
  urldate    = {2024-09-09},
  booktitle  = {2021 3rd {International} {Conference} on {Computer} {Communication} and the {Internet} ({ICCCI})},
  author     = {Liu, Xiao and Woo, Gyun},
  month      = jun,
  year       = {2021},
  keywords   = {COVID-19, e-mentoring, Education, Internet, Online programming courses, pair programming, Pandemics, Real-time systems, Syntactics, User experience},
  pages      = {220--224},
  file       = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/IRNMEGJL/9486772.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/G6TEFGM3/Liu and Woo - 2021 - CodeHelper A Web-Based Lightweight IDE for E-Ment.pdf:application/pdf}
}

@inproceedings{bastrykina_developing_2021,
  title     = {Developing {Reflex} {IDE} {Kernel} with {Xtext} {Framework}},
  url       = {https://ieeexplore.ieee.org/document/9507663},
  doi       = {10.1109/EDM52169.2021.9507663},
  abstract  = {In this paper, we describe the technology of the process-oriented language Reflex IDE kernel development. The Reflex language, which is being maintained at the Institute of Automation and Electrometry, is a language for cyber-physical systems software specification. In the paper, we assume that the cyber-physical system is a computational core that interacts with the physical world. In the case of Reflex, the computation platform is an industrial PC. Reflex IDE (RIDE) includes a language-based editor, syntax and semantics analyzers as well as an abstract syntax tree (AST) generator, and a class library for working with the generated AST. In this work, we explain our motivation for the research, formulate the requirements for the development, and present the RIDE architecture. We describe the RIDE development process using Eclipse/Xtext tools and its user interface. We also provide an example of extending the Reflex IDE kernel with a code generator for the AVR platform. In the conclusion, we discuss the possibility of using the obtained result to create a web-version of RIDE.},
  urldate   = {2024-09-09},
  booktitle = {2021 {IEEE} 22nd {International} {Conference} of {Young} {Professionals} in {Electron} {Devices} and {Materials} ({EDM})},
  author    = {Bastrykina, Alena and Zyubin, Vladimir and Rozov, Andrey},
  month     = jun,
  year      = {2021},
  note      = {ISSN: 2325-419X},
  keywords  = {Computer architecture, Cyber-physical systems, DSL, Generators, parser, process-oriented programming, Reflex, Semantics, Syntactics, Tools, translator, User interfaces, Xtext},
  pages     = {511--514},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/ECCVVKVU/9507663.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/YHCU4YFR/Bastrykina et al. - 2021 - Developing Reflex IDE Kernel with Xtext Framework.pdf:application/pdf}
}

@article{calatrava_arroyo_pilot_2021,
  title     = {A {Pilot} {Experience} with {Software} {Programming} {Environments} as a {Service} for {Teaching} {Activities}},
  volume    = {11},
  copyright = {http://creativecommons.org/licenses/by/3.0/},
  issn      = {2076-3417},
  url       = {https://www.mdpi.com/2076-3417/11/1/341},
  doi       = {10.3390/app11010341},
  abstract  = {Software programming is one of the key abilities for the development of Computational Thinking (CT) skills in Science, Technology, Engineering and Mathematics (STEM). However, specific software tools to emulate realistic scenarios are required for effective teaching. Unfortunately, these tools have some limitations in educational environments due to the need of an adequate configuration and orchestration, which usually assumes an unaffordable work overload for teachers and is inaccessible for students outside the laboratories. To mitigate the aforementioned limitations, we rely on cloud solutions that automate the process of orchestration and configuration of software tools on top of cloud computing infrastructures. This way, the paper presents ACTaaS as a cloud-based educational resource that deploys and orchestrates a whole realistic software programming environment. ACTaaS provides a simple, fast and automatic way to set up a professional integrated environment without involving an overload to the teacher, and it provides an ubiquitous access to the environment. The solution has been tested in a pilot group of 28 students. Currently, there is no tool like ACTaaS that allows such a high grade of automation for the deployment of software production environments focused on educational activities supporting a wide range of cloud providers. Preliminary results through a pilot group predict its effectiveness due to the efficiency to set up a class environment in minutes without overloading the teachers, and providing ubiquitous access to students. In addition, the first student opinions about the experience were greatly positive.},
  language  = {en},
  number    = {1},
  urldate   = {2024-09-09},
  journal   = {Applied Sciences},
  author    = {Calatrava Arroyo, Amanda and Ramos Montes, Marcos and Segrelles Quilis, J. Damian},
  month     = jan,
  year      = {2021},
  note      = {Number: 1
               Publisher: Multidisciplinary Digital Publishing Institute},
  keywords  = {cloud computing, learning environments, software as a service, software programming, STEM education},
  pages     = {341},
  file      = {Full Text PDF:/home/pierre-helbing/Zotero/storage/A4I6ISUX/Calatrava Arroyo et al. - 2021 - A Pilot Experience with Software Programming Envir.pdf:application/pdf}
}

@inproceedings{valez_student_2020,
  address    = {New York, NY, USA},
  series     = {{SIGCSE} '20},
  title      = {Student {Adoption} and {Perceptions} of a {Web} {Integrated} {Development} {Environment}: {An} {Experience} {Report}},
  isbn       = {978-1-4503-6793-6},
  shorttitle = {Student {Adoption} and {Perceptions} of a {Web} {Integrated} {Development} {Environment}},
  url        = {https://dl.acm.org/doi/10.1145/3328778.3366949},
  doi        = {10.1145/3328778.3366949},
  abstract   = {Students often spend a considerable amount of time and effort installing and configuring programming tools and environments. This can frustrate, and distract them from more important learning objectives, particularly in introductory programming courses. A web-based integrated development environment can serve as a low-threshold, ready-to-use programming environment, and reduce the time and effort needed to start practicing programming.In this paper, we report our experience of developing and deploying a web-based integrated development environment (web IDE) as an optional tool at a large public university that has been in use for over several years in various programming courses.We conducted a survey to understand students' perceptions toward the web IDE and usage of its features. Using the data from the survey, we explored potential correlations between student demographic and behavioral traits in adoption of the web IDE. The results of the survey suggest that around half of the students use the IDE often or very often. We also discovered that the likelihood of adoption of the IDE decreases as students to move to upper classes. In this paper, we also describe broader lessons for educators and researchers.},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the 51st {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
  publisher  = {Association for Computing Machinery},
  author     = {Valez, Martin and Yen, Michael and Le, Mathew and Su, Zhendong and Alipour, Mohammad Amin},
  month      = feb,
  year       = {2020},
  pages      = {1172--1178},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/XK798E9E/Valez et al. - 2020 - Student Adoption and Perceptions of a Web Integrat.pdf:application/pdf}
}

@inproceedings{mesihovic_using_2020,
  title     = {Using {WebIDE} as a distance learning tool for high school programming},
  url       = {https://ieeexplore.ieee.org/document/9245263},
  doi       = {10.23919/MIPRO48935.2020.9245263},
  abstract  = {During COVID-19 pandemics, not unlike their peers in other parts of the world, the high-school students in Bosnia and Herzegovina needed to get accustomed to learning from their homes. This proved to be particularly difficult for those who were scheduled to learn basic C++ programming, not only the inperson support by their teachers is invaluable in these early stages of learning, but many of them did not have access to adequate hardware or software. A web-based integrated development environment (WebIDE) was deployed, and a number of sample assignments were created. Altogether, over 130 students from 5 schools participated actively, solving a total of 65 assignments (as of June 1st). Based on questionnaire results, overall the experiment was deemed successful, and the continued use of WebIDE after life returns to normal was justified.},
  urldate   = {2024-09-09},
  booktitle = {2020 43rd {International} {Convention} on {Information}, {Communication} and {Electronic} {Technology} ({MIPRO})},
  author    = {Mesihović, Mirza and Ljubović, Vedran and Muharemović, Ibrahim},
  month     = sep,
  year      = {2020},
  note      = {ISSN: 2623-8764},
  keywords  = {Computer aided instruction, COVID-19, distance learning, Hardware, introductory programming, K-12 education, Pandemics, Programming profession, Software, Tools, webide},
  pages     = {893--898},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/HY4EENHC/9245263.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/PM5JPHC9/Mesihović et al. - 2020 - Using WebIDE as a distance learning tool for high .pdf:application/pdf}
}

@article{gallego-romero_analyzing_2020,
  title    = {Analyzing learners’ engagement and behavior in {MOOCs} on programming with the {Codeboard} {IDE}},
  volume   = {68},
  issn     = {1556-6501},
  url      = {https://doi.org/10.1007/s11423-020-09773-6},
  doi      = {10.1007/s11423-020-09773-6},
  abstract = {Massive Open Online Courses (MOOCs) can be enhanced with the so-called learning-by-doing, designing the courses in a way that the learners are involved in a more active way in the learning process. Within the options for increasing learners’ interaction in MOOCs, it is possible to integrate (third-party) external tools as part of the instructional design of the courses. In MOOCs on computer sciences, there are, for example, web-based Integrated Development Environments (IDEs) which can be integrated and that allow learners to do programming tasks directly in their browsers without installing desktop software. This work focuses on analyzing the effect on learners’ engagement and behavior of integrating a third-party web-based IDE, Codeboard, in three MOOCs on Java programming with the purpose of promoting learning-by-doing (learning by coding in this case). In order to measure learners’ level of engagement and behavior, data was collected from Codeboard on the number of compilations, executions and code generated, and compared between learners who registered in Codeboard to save and keep a record of their projects (registered learners) and learners who did not register in Codeboard and did not have access to these extra features (anonymous learners). The results show that learners who registered in Codeboard were more engaged than learners who did not register (in terms of number of compilations and executions), spent more time coding and did more changes in the base code provided by the teachers. The main implication of this study suggests the need for a trade-off between designing MOOCs that allow a very easy and anonymous access to external tools aimed for a more active learning, and forcing learners to give a step forward in terms of commitment in exchange for benefitting from additional features of the external tool used.},
  language = {en},
  number   = {5},
  urldate  = {2024-09-09},
  journal  = {Educational Technology Research and Development},
  author   = {Gallego-Romero, Jesús Manuel and Alario-Hoyos, Carlos and Estévez-Ayres, Iria and Delgado Kloos, Carlos},
  month    = oct,
  year     = {2020},
  keywords = {Artificial Intelligence, Codeboard, Digital Education and Educational Technology, edX, Learners’ engagement, Learning analytics, MOOCs, Programming},
  pages    = {2505--2528},
  file     = {Full Text PDF:/home/pierre-helbing/Zotero/storage/2HN25LRU/Gallego-Romero et al. - 2020 - Analyzing learners’ engagement and behavior in MOO.pdf:application/pdf}
}

@inproceedings{leisner_good-bye_2019,
  title      = {Good-{Bye} {Localhost}: {A} {Cloud}-{Based} {Web} {IDE} for {Teaching} {Java} {EE} {Web} {Development} to {Non}-{Computer} {Science} {Majors}},
  shorttitle = {Good-{Bye} {Localhost}},
  url        = {https://ieeexplore.ieee.org/document/8802810},
  doi        = {10.1109/ICSE-Companion.2019.00108},
  abstract   = {While cloud-and web-based Integrated Development Environments (IDE) are used in practice and education for some time, these are mainly intended for classical web development. Support for enterprise platforms such as Java Enterprise Edition (EE) is typically lacking. However, in higher education, web-based cloud IDE are particularly useful in software development courses for non-computer science major students, since they could help to overcome the participants' limited IT skills. Thus, a respective easy-to-use web IDE is required. Therefore, in this paper a software platform for a web-based cloud IDE for educational purposes is proposed and evaluated, which in particular supports Java EE and is suitable for non-computer science majors. The platform was evaluated in a classroom experiment. The results indicate that it is useful and beneficial for the students, allowing the lecturer and the students to focus more on the actual learning objectives.},
  urldate    = {2024-09-09},
  booktitle  = {2019 {IEEE}/{ACM} 41st {International} {Conference} on {Software} {Engineering}: {Companion} {Proceedings} ({ICSE}-{Companion})},
  author     = {Leisner, Michael and Brune, Philipp},
  month      = may,
  year       = {2019},
  note       = {ISSN: 2574-1934},
  keywords   = {Cloud computing, Education, Interviews, Java, Programming profession, Software, Web Development Education, Java EE, Higher Education, Non-Computer Science Majors, Cloud Computing},
  pages      = {268--269},
  file       = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/RUGDQAS9/8802810.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/RWWV9YQR/Leisner and Brune - 2019 - Good-Bye Localhost A Cloud-Based Web IDE for Teac.pdf:application/pdf}
}

@inproceedings{jawad_gamifying_2019,
  title     = {Gamifying the {Code} {Genie} {Programming} {Tool}},
  url       = {https://ieeexplore.ieee.org/document/8833771},
  doi       = {10.1109/EIT.2019.8833771},
  abstract  = {The Code Genie programming environment was built by the researcher and the author of this paper as part of a Ph.D. study to encourage high school student for coding in JavaScript language. This environment was tested and used in three coding workshops. The participated students had several suggestions in their feedback comments. One of the common suggestions was adding a tutorial section to the environment. Gamification elements and the suggested tutorial section were added to the Code Genie web Integrated Development Environment (IDE). This update is introduced and discussed in this paper.},
  urldate   = {2024-09-09},
  booktitle = {2019 {IEEE} {International} {Conference} on {Electro} {Information} {Technology} ({EIT})},
  author    = {Jawad, Hadeel Mohammed},
  month     = may,
  year      = {2019},
  note      = {ISSN: 2154-0373},
  keywords  = {animation, Animation, Art, art with coding, Code Genie development environment, code sharing, computer programming for high school students, computer science for girls, Encoding, Programming profession, STEM tool for k12, Tools, Tutorials, web IDE},
  pages     = {555--559},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/LP3K7XGL/8833771.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/ID4FCRRN/Jawad - 2019 - Gamifying the Code Genie Programming Tool.pdf:application/pdf}
}

@inproceedings{uehara_javascript_2019,
  title     = {{JavaScript} {Development} {Environment} for {Programming} {Education} {Using} {Smartphones}},
  url       = {https://ieeexplore.ieee.org/document/8951653},
  doi       = {10.1109/CANDARW.2019.00058},
  abstract  = {A development environment that allows programming at any time or place is required for supporting programming education. Currently, smartphones are more popular than personal computers. Therefore, if a development environment for smartphones is available then students can learn to program in a normal room, with no personal computer, or on the way to school. A browser-based development environment can be realized using JavaScript as a learning language. In this paper, we describe the design, implementation, and evaluation of a JavaScript development environment. Our development environment is suitable for smartphones and is easy to use even with a small screen.},
  urldate   = {2024-09-09},
  booktitle = {2019 {Seventh} {International} {Symposium} on {Computing} and {Networking} {Workshops} ({CANDARW})},
  author    = {Uehara, Minoru},
  month     = nov,
  year      = {2019},
  keywords  = {Programming Education, Smartphone, JavaScript},
  pages     = {292--297},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/2LXUJLGH/8951653.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/PE2W6E42/Uehara - 2019 - JavaScript Development Environment for Programming.pdf:application/pdf}
}

@article{marcopoulos_onlinesparc_2019,
  title      = {{onlineSPARC}: {A} {Programming} {Environment} for {Answer} {Set} {Programming}},
  volume     = {19},
  issn       = {1471-0684, 1475-3081},
  shorttitle = {{onlineSPARC}},
  url        = {https://www.cambridge.org/core/journals/theory-and-practice-of-logic-programming/article/onlinesparc-a-programming-environment-for-answer-set-programming/680E5E4FE3230FDAF4080795D3B466B9},
  doi        = {10.1017/S1471068418000509},
  abstract   = {Recent progress in logic programming (e.g. the development of the answer set programming (ASP) paradigm) has made it possible to teach it to general undergraduate and even middle/high school students. Given the limited exposure of these students to computer science, the complexity of downloading, installing, and using tools for writing logic programs could be a major barrier for logic programming to reach a much wider audience. We developed onlineSPARC, an online ASP environment with a self-contained file system and a simple interface. It allows users to type/edit logic programs and perform several tasks over programs, including asking a query to a program, getting the answer sets of a program, and producing a drawing/animation based on the answer sets of a program.},
  language   = {en},
  number     = {2},
  urldate    = {2024-09-09},
  journal    = {Theory and Practice of Logic Programming},
  author     = {Marcopoulos, Elias and Zhang, Yuanlin},
  month      = mar,
  year       = {2019},
  keywords   = {answer set programming, CS education, integrated development environment, logic programming, visualization},
  pages      = {262--289},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/CG5QY4ZZ/Marcopoulos and Zhang - 2019 - onlineSPARC A Programming Environment for Answer .pdf:application/pdf}
}

@article{janssen_pyiron_2019,
  title      = {pyiron: {An} integrated development environment for computational materials science},
  volume     = {163},
  issn       = {0927-0256},
  shorttitle = {pyiron},
  url        = {https://www.sciencedirect.com/science/article/pii/S0927025618304786},
  doi        = {10.1016/j.commatsci.2018.07.043},
  abstract   = {To support and accelerate the development of simulation protocols in atomistic modelling, we introduce an integrated development environment (IDE) for computational materials science called pyiron (http://pyiron.org). The pyiron IDE combines a web based source code editor, a job management system for build automation, and a hierarchical data management solution. The core components of the pyiron IDE are pyiron objects based on an abstract class, which links application structures such as atomistic structures, projects, jobs, simulation protocols and computing resources with persistent storage and an interactive user environment. The simulation protocols within the pyiron IDE are constructed using the Python programming language. To highlight key concepts of this tool as well as to demonstrate its ability to simplify the implementation and testing of simulation protocols we discuss two applications. In these examples we show how pyiron supports the whole life cycle of a typical simulation, seamlessly combines ab initio with empirical potential calculations, and how complex feedback loops can be implemented. While originally developed with focus on ab initio thermodynamics simulations, the concepts and implementation of pyiron are general thus allowing to employ it for a wide range of simulation topics.},
  urldate    = {2024-09-09},
  journal    = {Computational Materials Science},
  author     = {Janssen, Jan and Surendralal, Sudarsan and Lysogorskiy, Yury and Todorova, Mira and Hickel, Tilmann and Drautz, Ralf and Neugebauer, Jörg},
  month      = jun,
  year       = {2019},
  keywords   = {Complex simulation protocols, Integrated development environment, Modelling workflow},
  pages      = {24--36},
  file       = {Janssen et al. - 2019 - pyiron An integrated development environment for .pdf:/home/pierre-helbing/Zotero/storage/NKC37ZU8/Janssen et al. - 2019 - pyiron An integrated development environment for .pdf:application/pdf;ScienceDirect Snapshot:/home/pierre-helbing/Zotero/storage/PTT8USK6/S0927025618304786.html:text/html}
}

@inproceedings{kelter_teachers_2019,
  address   = {Cham},
  title     = {Teachers’ {Perspectives} on {Learning} and {Programming} {Environments} for {Secondary} {Education}},
  isbn      = {978-3-030-23513-0},
  doi       = {10.1007/978-3-030-23513-0_5},
  abstract  = {Teaching and learning programming is a challenge. Although several learning and programming environments have been proposed for classes, there seems to be more dissent than consensus as to which tools are preferable over others. This paper investigates teachers’ perspectives on popular learning and programming environments used in secondary computer science education in Germany. The environments investigated are: BlueJ, Scratch, Greenfoot, Eclipse, MIT App Inventor, Processing IDE, and Alice. Based on prior research, a catalogue of environment features supporting the learning processes of students was constructed. Using these criteria, an online-survey was conducted with computer science teachers in North Rhine-Westphalia, Germany. In the survey, the participating teachers evaluated the selected tools’ adequacy for teaching object-oriented programming. The findings support the results of prior research conducted with students, stressing the importance of a simple and user-friendly graphical user interface (GUI) as well as the option to visualise classes and objects. Contrary to prior studies, the results show that teachers do not see the editor as equally important, as students do, and that there is no consensus about the role of the area of application for choosing an integrated development environment (IDE). Student-friendly debugging messages as well as a step-by-step execution of programs were identified as important features. Although no tool excelled for every criterion, the clear favourite was BlueJ.},
  language  = {en},
  booktitle = {Empowering {Learners} for {Life} in the {Digital} {Age}},
  publisher = {Springer International Publishing},
  author    = {Kelter, Riko and Kramer, Matthias and Brinda, Torsten},
  editor    = {Passey, Don and Bottino, Rosa and Lewin, Cathy and Sanchez, Eric},
  year      = {2019},
  keywords  = {Educational programming environments, Object-oriented-programming, Teaching and learning programming},
  pages     = {47--55},
  file      = {Full Text PDF:/home/pierre-helbing/Zotero/storage/K5Q3MMWN/Kelter et al. - 2019 - Teachers’ Perspectives on Learning and Programming.pdf:application/pdf}
}

@inproceedings{morales_how_2019,
  address   = {Cham},
  title     = {How “{Friendly}” {Integrated} {Development} {Environments} {Are}?},
  isbn      = {978-3-030-21902-4},
  doi       = {10.1007/978-3-030-21902-4_7},
  abstract  = {Programmers and software developers are using different Integrated Development Environments (IDEs) to perform their daily work. IDEs are often complex applications, not friendly for novice programmers, with a learning process of several weeks and with usability and satisfaction of use not always as good as expected. The Programmer eXperience (PX) is a particular case of User eXperience (UX), based on the use of the IDEs and other artifacts. We have found studies about the programmer’s behavior and work, and also articles addressed the usability and new tools proposals for IDEs. In this work, we conducted a survey to evaluate the usability of several IDEs. The survey was based on the System Usability Scale (SUS), which we adapted for the purpose of our research. We focus the study on popular IDEs such as Dev-C++, Eclipse and NetBeans. The survey was conducted in two Chilean universities and one Spanish university, with students enrolled in two undergraduate programs in Informatics Engineering. The results obtained show that the IDEs evaluated have several issues related to the usability perceived by our participants. An interview was conducted with six experienced programmers that are working in different programming environments, in order to consult them on what aspects they would like to improve the IDEs. Their comments indicate that IDEs should incorporate connection with other programmers, and also, they claim for more intuitive interfaces and understandable error messages.},
  language  = {en},
  booktitle = {Social {Computing} and {Social} {Media}. {Design}, {Human} {Behavior} and {Analytics}},
  publisher = {Springer International Publishing},
  author    = {Morales, Jenny and Botella, Federico and Rusu, Cristian and Quiñones, Daniela},
  editor    = {Meiselwitz, Gabriele},
  year      = {2019},
  keywords  = {Integrated Development Environment, Interview, Programmer eXperience, Survey, Usability, User eXperience},
  pages     = {80--91},
  file      = {Full Text PDF:/home/pierre-helbing/Zotero/storage/ABUKPCBC/Morales et al. - 2019 - How “Friendly” Integrated Development Environments.pdf:application/pdf}
}

@inproceedings{yu_matlab_2018,
  title     = {Matlab {Programming} {Environment} {Based} on {Web}},
  url       = {https://ieeexplore.ieee.org/document/8740716},
  doi       = {10.1109/ITOEC.2018.8740716},
  abstract  = {Matlab is a mathematics software, which is the industry leader in numerical calculation, but this software takes up a lot of system memory and is extremely cumbersome to install. As various types of modeling rise and the intensity and frequency of discipline penetration are deepened and accelerate gradually, Matlab has gradually entered more people's field of vision. In order to simplify the programming environment and improve the convenience, a Matlab programming environment based on Web is proposed in this paper. Compared with the traditional Matlab programming environment, the main features of the system are that it does not need to deploy any development environment locally, and users can write and run Matlab code through the browser of mobile phone, tablet, computer; at the same time, the system also supports standard input, parameter input, and image output. Through the research and testing of the system, the programming environment has strong feasibility, excellent user experience, good concurrency and stability.},
  urldate   = {2024-09-09},
  booktitle = {2018 {IEEE} 4th {Information} {Technology} and {Mechatronics} {Engineering} {Conference} ({ITOEC})},
  author    = {Yu, Liu},
  month     = dec,
  year      = {2018},
  keywords  = {Computer languages, Matlab, online programming, Programming, programming environment, Programming environments, Servers, Software, Tools, Web},
  pages     = {509--512},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/8JE4EM8F/8740716.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/U29QYCEG/Yu - 2018 - Matlab Programming Environment Based on Web.pdf:application/pdf}
}

@article{yang_evaluations_2018,
  title      = {Evaluations of {JaguarCode}: {A} web-based object-oriented programming environment with static and dynamic visualization},
  volume     = {145},
  issn       = {0164-1212},
  shorttitle = {Evaluations of {JaguarCode}},
  url        = {https://www.sciencedirect.com/science/article/pii/S016412121830147X},
  doi        = {10.1016/j.jss.2018.07.037},
  abstract   = {To increase program comprehension and overcome learning obstacles of Object-Oriented Programming (OOP), various visualization techniques have been adopted in educational OOP environments. Some provide software development with visual notations without source code, while others support programming with visual aids. Our research supports Java programming along with UML diagrams (class, object, and sequence) and dynamic execution traces of program synchronized in a web-based programming environment - JaguarCode. It aims to help students better understand the static structure and dynamic behavior of Java programs, as well as object-oriented design concepts. This paper reports on the evaluation results of JaguarCode to investigate its effectiveness and user satisfaction through quantitative and qualitative experiments. The experimental results revealed that having both static and dynamic visualizations did positively impact the correctness of program understanding and tracing problems, while the visual representations did affect students' understanding on the program execution of the problems to higher accuracy. It was also observed that students were satisfied with the aspects of those visualizations provided in JaguarCode.},
  urldate    = {2024-09-09},
  journal    = {Journal of Systems and Software},
  author     = {Yang, Jeong and Lee, Young and Chang, Kai H.},
  month      = nov,
  year       = {2018},
  keywords   = {Object-oriented, Programming environment, Static and dynamic visualization, UML diagram, Web-based},
  pages      = {147--163},
  file       = {ScienceDirect Snapshot:/home/pierre-helbing/Zotero/storage/25TQIEDB/S016412121830147X.html:text/html;Yang et al. - 2018 - Evaluations of JaguarCode A web-based object-orie.pdf:/home/pierre-helbing/Zotero/storage/LSQRK744/Yang et al. - 2018 - Evaluations of JaguarCode A web-based object-orie.pdf:application/pdf}
}

@inproceedings{warner_codepilot_2017,
  address    = {New York, NY, USA},
  series     = {{CHI} '17},
  title      = {{CodePilot}: {Scaffolding} {End}-to-{End} {Collaborative} {Software} {Development} for {Novice} {Programmers}},
  isbn       = {978-1-4503-4655-9},
  shorttitle = {{CodePilot}},
  url        = {https://dl.acm.org/doi/10.1145/3025453.3025876},
  doi        = {10.1145/3025453.3025876},
  abstract   = {Novice programmers often have trouble installing, configuring, and managing disparate tools (e.g., version control systems, testing infrastructure, bug trackers) that are required to become productive in a modern collaborative software development environment. To lower the barriers to entry into software development, we created a prototype IDE for novices called CodePilot, which is, to our knowledge, the first attempt to integrate coding, testing, bug reporting, and version control management into a real-time collaborative system. CodePilot enables multiple users to connect to a web-based programming session and work together on several major phases of software development. An eight-subject exploratory user study found that first-time users of CodePilot spontaneously used it to assume roles such as developer/tester and developer/assistant when creating a web application together in pairs. Users felt that CodePilot could aid in scaffolding for novices, situational awareness, and lowering barriers to impromptu collaboration.},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the 2017 {CHI} {Conference} on {Human} {Factors} in {Computing} {Systems}},
  publisher  = {Association for Computing Machinery},
  author     = {Warner, Jeremy and Guo, Philip J.},
  month      = may,
  year       = {2017},
  pages      = {1136--1141},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/64HAUFSQ/Warner and Guo - 2017 - CodePilot Scaffolding End-to-End Collaborative So.pdf:application/pdf}
}

@inproceedings{ghorashi_jimbo_2016,
  address    = {New York, NY, USA},
  series     = {{CHASE} '16},
  title      = {Jimbo: a collaborative {IDE} with live preview},
  isbn       = {978-1-4503-4155-4},
  shorttitle = {Jimbo},
  url        = {https://dl.acm.org/doi/10.1145/2897586.2897613},
  doi        = {10.1145/2897586.2897613},
  abstract   = {Team collaboration plays a key role in the success of any multi-user activity. Software engineering is a highly collaborative activity, where multiple developers and designers work together to solve a common problem. Meaningful and effective designer-developer collaboration improves the user experience, which can improve the chances of success for the project. Learning to program is another activity that can be implemented in a more collaborative way, students can learn in an active style by working with others. The growth of online classes, from small structured seminars to massive open online courses (MOOCs), and the isolation and impoverished learning experience some students report in these, points to an urgent need for tools that support remote pair programming in a distributed educational setting.In this paper, we describe Jimbo, a collaborative integrated development environment (IDE) that we believe is beneficial and effective in both aforementioned activities. Jimbo integrates many features that support better collaboration and communication between designers and developers, to bridge communication gaps and develop mutual understanding. These novel features can improve today's CS education by bringing students closer to each other and their instructors as well as training them to collaborate which is consistent with current practices in software engineering.},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the 9th {International} {Workshop} on {Cooperative} and {Human} {Aspects} of {Software} {Engineering}},
  publisher  = {Association for Computing Machinery},
  author     = {Ghorashi, Soroush and Jensen, Carlos},
  month      = may,
  year       = {2016},
  pages      = {104--107},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/P4QUBVZF/Ghorashi and Jensen - 2016 - Jimbo a collaborative IDE with live preview.pdf:application/pdf}
}

@article{nguyen_enhancing_2016,
  title     = {Enhancing team collaboration through integrating social interactions in a {Web}-based development environment},
  volume    = {24},
  copyright = {© 2016 Wiley Periodicals, Inc.},
  issn      = {1099-0542},
  url       = {https://onlinelibrary.wiley.com/doi/abs/10.1002/cae.21729},
  doi       = {10.1002/cae.21729},
  abstract  = {This paper presents the design and evaluation of a Web-based collaborative learning environment called EduCo for learning and practicing team-based exercises in computer science and software engineering courses. EduCo's defining characteristic is integrating a number of services for software development activities, for example, project management, requirements engineering, design, and programming into integrated shared workspaces with social-networking facilities to enhance collaboration among students and instructors. We conducted a controlled experiment to evaluate the effectiveness of the system in doing a three-iteration programming project. A total of 126 second-year students who attended an object-oriented programming course participated in the experiment. The results show that while the system was not found to affect student programming performance, it improved student engagement and satisfaction when working in teams. These results imply that the system's shared workspaces and social-networking services have the potential to enhance learning outcomes of students working in teams when these features are integrated into collaborative learning environments. © 2016 Wiley Periodicals, Inc. Comput Appl Eng Educ 24:529–545, 2016; View this article online at wileyonlinelibrary.com/journal/cae; DOI 10.1002/cae.21729},
  language  = {en},
  number    = {4},
  urldate   = {2024-09-09},
  journal   = {Computer Applications in Engineering Education},
  author    = {Nguyen, Vu and Dang, Hai Hoang and Do, Nguyen-Kha and Tran, Dan-Thu},
  year      = {2016},
  note      = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/cae.21729},
  keywords  = {collaborative environment, programming language, social environment, social network},
  pages     = {529--545},
  file      = {Full Text PDF:/home/pierre-helbing/Zotero/storage/ZVZUHKMN/Nguyen et al. - 2016 - Enhancing team collaboration through integrating s.pdf:application/pdf;Snapshot:/home/pierre-helbing/Zotero/storage/CMFZSPAQ/cae.html:text/html}
}

@article{fylaktopoulos_overview_2016,
  title    = {An overview of platforms for cloud based development},
  volume   = {5},
  issn     = {2193-1801},
  url      = {https://doi.org/10.1186/s40064-016-1688-5},
  doi      = {10.1186/s40064-016-1688-5},
  abstract = {This paper provides an overview of the state of the art technologies for software development in cloud environments. The surveyed systems cover the whole spectrum of cloud-based development including integrated programming environments, code repositories, software modeling, composition and documentation tools, and application management and orchestration. In this work we evaluate the existing cloud development ecosystem based on a wide number of characteristics like applicability (e.g. programming and database technologies supported), productivity enhancement (e.g. editor capabilities, debugging tools), support for collaboration (e.g. repository functionality, version control) and post-development application hosting and we compare the surveyed systems. The conducted survey proves that software engineering in the cloud era has made its initial steps showing potential to provide concrete implementation and execution environments for cloud-based applications. However, a number of important challenges need to be addressed for this approach to be viable. These challenges are discussed in the article, while a conclusion is drawn that although several steps have been made, a compact and reliable solution does not yet exist.},
  number   = {1},
  urldate  = {2024-09-09},
  journal  = {SpringerPlus},
  author   = {Fylaktopoulos, G. and Goumas, G. and Skolarikis, M. and Sotiropoulos, A. and Maglogiannis, I.},
  month    = jan,
  year     = {2016},
  keywords = {Cloud computing, Code repositories, Integrated Development Environment (IDE), Orchestration tools, Software modeling},
  pages    = {38},
  file     = {Full Text PDF:/home/pierre-helbing/Zotero/storage/X2VMRYMR/Fylaktopoulos et al. - 2016 - An overview of platforms for cloud based developme.pdf:application/pdf;Snapshot:/home/pierre-helbing/Zotero/storage/IM4W8IS9/s40064-016-1688-5.html:text/html}
}

@inproceedings{ball_beyond_2015,
  title      = {Beyond {Open} {Source}: {The} {Touch} {Develop} {Cloud}-{Based} {Integrated} {Development} {Environment}},
  shorttitle = {Beyond {Open} {Source}},
  url        = {https://ieeexplore.ieee.org/document/7283033},
  doi        = {10.1109/MobileSoft.2015.20},
  abstract   = {Software engineering tools and environments are migrating to the cloud, enabling more people to participate in programming from many more devices. To study this phenomenon in detail, we designed, implemented and deployed Touch Develop (url www.touchdevelop.com), a cloud-based integrated development environment (CIDE), which has been online for the past three years. Touch Develop combines a cross-platform browser-based IDE for the creation of mobile cloud apps, an online programmer/user community, and an app store. A central feature of Touch Develop is to track all program edits, versions, runtime information, bugs, as well user comments, questions and feedback in a single cloud-based repository that is available publicly via Web APIs. In this paper, we examine a key feature of Touch Develop that should be relevant to others creating CIDEs, namely the seamless integration of replicated workspaces, simplified version control and app publishing. An analysis of the Touch Develop repository shows that this combination of capabilities allows users to easily create new versions of apps from existing apps, make changes to other users' apps, and share their results from a variety of devices, including smartphones, tablets and traditional PCs.},
  urldate    = {2024-09-09},
  booktitle  = {2015 2nd {ACM} {International} {Conference} on {Mobile} {Software} {Engineering} and {Systems}},
  author     = {Ball, Thomas and Burckhardt, Sebastian and de Halleux, Jonathan and Moskal, Michal and Protzenko, Jonathan and Tillmann, Nikolai},
  month      = may,
  year       = {2015},
  keywords   = {Computer crashes, Context, Control systems, History, Keyboards, Libraries, Mobile communication},
  pages      = {83--93},
  file       = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/S8LG54ZD/7283033.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/A3UDSXLZ/Ball et al. - 2015 - Beyond Open Source The Touch Develop Cloud-Based .pdf:application/pdf}
}

@inproceedings{yang_enhancing_2015,
  title     = {Enhancing object-oriented programming education using static and dynamic visualization},
  url       = {https://ieeexplore.ieee.org/document/7344152},
  doi       = {10.1109/FIE.2015.7344152},
  abstract  = {While Object-Oriented programming in Java has been widely adopted as an introductory programming course in Computer Science, it is considered difficult to teach and learn. Studies have identified that the difficulty is from the underlying Object-Oriented concepts and principles. To help student programmers better understand the structure of a program and the concepts of Object-Oriented design, visualizations in various formats have been applied to programming environments. This paper presents a web-based interactive educational programming environment, JavlinaCode, and its unique design principles. JavlinaCode is designed for teaching object-oriented programming in Java. It aims to enhance student programmers' programming skill and to help them understand object-oriented design concepts. It provides integrated static and dynamic visualizations: the static state of a Java program in an UML class diagram and the dynamic run-time state of the program execution. With the synchronized multi-view real time visualization along with source code, JavelinaCode is highly expected to reduce student programmers' cognitive workload in Java programming and to enhance comprehension of the objectoriented programming and design concepts.},
  urldate   = {2024-09-09},
  booktitle = {2015 {IEEE} {Frontiers} in {Education} {Conference} ({FIE})},
  author    = {Yang, Jeong and Lee, Young and Hicks, David and Chang, Kai H.},
  month     = oct,
  year      = {2015},
  keywords  = {Data visualization, Java, Programming environments, Programming profession, Unified modeling language, Visualization},
  pages     = {1--5},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/6BRMXT4J/7344152.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/B2Z9XZH6/Yang et al. - 2015 - Enhancing object-oriented programming education us.pdf:application/pdf}
}

@article{kabbani_formal_2015,
  title    = {Formal {Reasoning} {Using} an {Iterative} {Approach} with an {Integrated} {Web} {IDE}},
  volume   = {187},
  issn     = {2075-2180},
  url      = {http://arxiv.org/abs/1508.03896},
  doi      = {10.4204/EPTCS.187.5},
  abstract = {This paper summarizes our experience in communicating the elements of reasoning about correctness, and the central role of formal specifications in reasoning about modular, component-based software using a language and an integrated Web IDE designed for the purpose. Our experience in using such an IDE, supported by a 'push-button' verifying compiler in a classroom setting, reveals the highly iterative process learners use to arrive at suitably specified, automatically provable code. We explain how the IDE facilitates reasoning at each step of this process by providing human readable verification conditions (VCs) and feedback from an integrated prover that clearly indicates unprovable VCs to help identify obstacles to completing proofs. The paper discusses the IDE's usage in verified software development using several examples drawn from actual classroom lectures and student assignments to illustrate principles of design-by-contract and the iterative process of creating and subsequently refining assertions, such as loop invariants in object-based code.},
  urldate  = {2024-09-09},
  journal  = {Electronic Proceedings in Theoretical Computer Science},
  author   = {Kabbani, Nabil M. and Welch, Daniel and Priester, Caleb and Schaub, Stephen and Durkee, Blair and Sun, Yu-Shan and Sitaraman, Murali},
  month    = aug,
  year     = {2015},
  note     = {arXiv:1508.03896 [cs]},
  keywords = {Computer Science - Human-Computer Interaction, Computer Science - Programming Languages, Computer Science - Software Engineering},
  pages    = {56--71},
  annote   = {Comment: In Proceedings F-IDE 2015, arXiv:1508.03388},
  file     = {arXiv Fulltext PDF:/home/pierre-helbing/Zotero/storage/45MPQKV6/Kabbani et al. - 2015 - Formal Reasoning Using an Iterative Approach with .pdf:application/pdf;arXiv.org Snapshot:/home/pierre-helbing/Zotero/storage/87ZS6Q45/1508.html:text/html}
}

@article{kurniawan_coder_2015,
  series     = {International {Conference} on {Computer} {Science} and {Computational} {Intelligence} ({ICCSCI} 2015)},
  title      = {{CodeR}: {Real}-time {Code} {Editor} {Application} for {Collaborative} {Programming}},
  volume     = {59},
  issn       = {1877-0509},
  shorttitle = {{CodeR}},
  url        = {https://www.sciencedirect.com/science/article/pii/S1877050915020608},
  doi        = {10.1016/j.procs.2015.07.531},
  abstract   = {The world of Internet is growing rapidly, many applications that previously created on the desktop start moving to the web. Many applications could be accessed anytime and anywhere easily using Internet. Developers need tools to create their applications, one of them named code editor. The purpose of this research is to design and develop a real-time code editor application using web socket technology to help users collaborate while working on the project. This application provides a feature where users can collaborate on a project in real-time. The authors using analysis methodology which conducting on a study of the current code editor applications, distributing questionnaires and conducting on literature study. CodeR is a web application that provides workspace to writing, perform, display the results of the code through the terminal, and collaborate with other users in real-time. The application main features are providing workspace to make, execute and build the source code, real-time collaboration, chat, and build the terminal. This application supports C, C++, and Java programming languages.},
  urldate    = {2024-09-09},
  journal    = {Procedia Computer Science},
  author     = {Kurniawan, Aditya and Kurniawan, Aditya and Soesanto, Christine and Wijaya, Joe Erik Carla},
  month      = jan,
  year       = {2015},
  keywords   = {Application, Code Editor, Collaborative Programming, Real-time, Web Socket},
  pages      = {510--519},
  file       = {Kurniawan et al. - 2015 - CodeR Real-time Code Editor Application for Colla.pdf:/home/pierre-helbing/Zotero/storage/FA56EXWJ/Kurniawan et al. - 2015 - CodeR Real-time Code Editor Application for Colla.pdf:application/pdf;ScienceDirect Snapshot:/home/pierre-helbing/Zotero/storage/BDMCWCQG/S1877050915020608.html:text/html}
}

@article{lipman_learncs_2014,
  title    = {{LearnCS}! a new, browser-based {C} programming environment for {CS1}},
  volume   = {29},
  issn     = {1937-4771},
  abstract = {LearnCS! is a learning environment specifically written for use by first-year computer science students. It provides students with a browser-based programming and execution environment which contains a depiction of the notional machine for the C language, and contains a built-in debugger. Many error messages are customized to assist the beginning student of computer science. These features have seemingly yielded good results in improving students' comprehension of CS1 concepts.},
  number   = {6},
  journal  = {J. Comput. Sci. Coll.},
  author   = {Lipman, Derrell},
  month    = jun,
  year     = {2014},
  pages    = {144--150},
  file     = {Full Text PDF:/home/pierre-helbing/Zotero/storage/GTU7PREI/Lipman - 2014 - LearnCS! a new, browser-based C programming enviro.pdf:application/pdf}
}

@inproceedings{wang_new_2014,
  address   = {New York, NY, USA},
  series    = {{ICSE} {Companion} 2014},
  title     = {New opportunities for extracting insights from cloud based {IDEs}},
  isbn      = {978-1-4503-2768-8},
  url       = {https://dl.acm.org/doi/10.1145/2591062.2591105},
  doi       = {10.1145/2591062.2591105},
  abstract  = {Traditional integrated development environments (IDEs) provide developers with robust environments for writing, testing, debugging, and deploying code. As the world becomes increasingly networked and more services are delivered via the cloud, it is only natural that the functionality of IDEs be delivered via the cloud. In addition to simplifying the provisioning and deployment of new IDE features, and making it easier to integrate with other web native tools, cloud based IDEs provide some fundamental advantages when it comes to understanding the behavior of a wide community of software developers. One of these advantages for the IDE provider is the ability to transparently monitor and analyze the real-time fine-grained actions of a large number of developers. In this paper, we explore how to leverage these transparent monitoring capabilities of cloud based IDEs to develop advanced analytics to understand developers' behavior and infer their characteristics. We demonstrate the feasibility of this research direction with a preliminary study focusing on the way that source code files grow for different developers, development tasks, and skill levels. We then analyze the trends of source code file growth and find growth is more similar within subjects than within tasks.},
  urldate   = {2024-09-09},
  booktitle = {Companion {Proceedings} of the 36th {International} {Conference} on {Software} {Engineering}},
  publisher = {Association for Computing Machinery},
  author    = {Wang, Yi and Wagstrom, Patrick and Duesterwald, Evelyn and Redmiles, David},
  month     = may,
  year      = {2014},
  pages     = {408--411},
  file      = {Full Text PDF:/home/pierre-helbing/Zotero/storage/Z2S8CLT2/Wang et al. - 2014 - New opportunities for extracting insights from clo.pdf:application/pdf}
}

@inproceedings{hausladen_cloud-based_2014,
  title     = {A cloud-based integrated development environment for embedded systems},
  url       = {https://ieeexplore.ieee.org/document/6935577},
  doi       = {10.1109/MESA.2014.6935577},
  abstract  = {Developing software for embedded systems may be a challenging task. Next to solid programming skills using the C language (and Assembly) elaborate know-how about the target controller and surrounding hardware is mandatory. Furthermore, setup of the required tooling (compiler infrastructure, debug interfaces, etc.) can be a cumbersome task, especially when supporting multiple different host operating systems. Especially for beginners, this tooling aspect can turn out as an intriguing problem. This paper presents a cloud based integrated development environment (Cloud IDE) for embedded systems based entirely on open-source solutions that has the potential to ease some of these burdens. In contrast to existing solutions it supports flashing and debugging of a target board attached to the local host computer whereas, the entire development takes place in a cloud environment.},
  urldate   = {2024-09-09},
  booktitle = {2014 {IEEE}/{ASME} 10th {International} {Conference} on {Mechatronic} and {Embedded} {Systems} and {Applications} ({MESA})},
  author    = {Hausladen, Jürgen and Pohn, Birgit and Horauer, Martin},
  month     = sep,
  year      = {2014},
  keywords  = {Browsers, Cloud IDE, Debugging, education, Embedded systems, embedded systems development, Hardware, Libraries, Node.js, PaaS, Servers},
  pages     = {1--5},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/6YWIK6MQ/6935577.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/NAJ457CV/Hausladen et al. - 2014 - A cloud-based integrated development environment f.pdf:application/pdf}
}

@inproceedings{nguyen_learning_2014,
  title     = {Learning and practicing object-oriented programming using a collaborative web-based {IDE}},
  url       = {https://ieeexplore.ieee.org/document/7044141},
  doi       = {10.1109/FIE.2014.7044141},
  abstract  = {Collaborative programming is an effective approach to software development, improving software quality, programmer's satisfaction and shortening delivery time This study examines the application of a collaborative Web-based IDE named IDEOL to execute a four-week multi-submission programming assignment in an introductory object-oriented programming class. Forty eight students forming 24 two-member groups in class used the IDE to interact and write source code required by the project. All collaborative and programming activities performed by students were recorded by IDEOL. The results of the study shows that students tend to postpone their programming work until the submission dates. This study also provides an approach to designing and executing an extended programming exercises, which receives high student satisfaction. Our results imply that IDEOL is a useful environment for students to collaborate, learn, and practice programming to improve their learning satisfaction. In addition, as students tend to procrastinate, IDEOL is a useful tool to facilitate, monitor, and report student progress in extended programming exercises.},
  urldate   = {2024-09-09},
  booktitle = {2014 {IEEE} {Frontiers} in {Education} {Conference} ({FIE}) {Proceedings}},
  author    = {Nguyen, Vu and Dang, Hai H. and Do, Kha N. and Tran, Thu D.},
  month     = oct,
  year      = {2014},
  note      = {ISSN: 2377-634X},
  keywords  = {Atmospheric measurements, collaboration, Collaboration, Collaborative IDE, Debugging, interaction, Message systems, Particle measurements, programming exercise, Programming profession, Web-based IDE},
  pages     = {1--9},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/6BZQA5QS/7044141.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/4J6655XQ/Nguyen et al. - 2014 - Learning and practicing object-oriented programmin.pdf:application/pdf}
}

@inproceedings{helminen_recording_2013,
  address   = {New York, NY, USA},
  series    = {Koli {Calling} '13},
  title     = {Recording and analyzing in-browser programming sessions},
  isbn      = {978-1-4503-2482-3},
  url       = {https://dl.acm.org/doi/10.1145/2526968.2526970},
  doi       = {10.1145/2526968.2526970},
  abstract  = {In this paper, we report on the analysis of a novel type of automatically recorded detailed programming session data collected on a university-level web programming course. We present a method and an implementation of collecting rich data on how students learning to program edit and execute code and explore its use in examining learners' behavior. The data collection instrument is an in-browser Python programming environment that integrates an editor, an execution environment, and an interactive Python console and is used to deliver programming assignments with automatic feedback. Most importantly, the environment records learners' interaction within it. We have implemented tools for viewing these traces and demonstrate their potential in learning about the programming processes of learners and of benefiting computing education research and the teaching of programming.},
  urldate   = {2024-09-09},
  booktitle = {Proceedings of the 13th {Koli} {Calling} {International} {Conference} on {Computing} {Education} {Research}},
  publisher = {Association for Computing Machinery},
  author    = {Helminen, Juha and Ihantola, Petri and Karavirta, Ville},
  month     = nov,
  year      = {2013},
  pages     = {13--22},
  file      = {Full Text PDF:/home/pierre-helbing/Zotero/storage/Z3DTW8FJ/Helminen et al. - 2013 - Recording and analyzing in-browser programming ses.pdf:application/pdf}
}

@inproceedings{tran_interactive_2013,
  title     = {An interactive {Web}-based {IDE} towards teaching and learning in programming courses},
  url       = {https://ieeexplore.ieee.org/document/6654478},
  doi       = {10.1109/TALE.2013.6654478},
  abstract  = {In programming courses, students are often asked to work in groups to write multiple programs. The existing Integrated Development Environments (IDE), however, do not encourage concurrent interactions among student programmers. Students often encounter difficulties in collaborative activities, sharing resources, reviewing code and discussing ideas, especially when the group cannot reach a common arrangement for face-to-face meetings at a convenient time and place. We propose to resolve this problem by transforming the traditional IDE into Software as a Service on the Web, and integrating collaborative features in order to create an interactive and responsive environment, where real-time on-the-job guidance, communication and collaboration can be delivered. In this paper, we introduce a web-based IDE designed for this purpose, and show how it can be applied in programming courses.},
  urldate   = {2024-09-09},
  booktitle = {Proceedings of 2013 {IEEE} {International} {Conference} on {Teaching}, {Assessment} and {Learning} for {Engineering} ({TALE})},
  author    = {Tran, Hai T. and Dang, Hai H. and Do, Kha N. and Tran, Thu D. and Nguyen, Vu},
  month     = aug,
  year      = {2013},
  keywords  = {Collaboration, collaborative learning, Education, Programming profession, Servers, Software, Visualization, web-based IDE},
  pages     = {439--444},
  file      = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/LE3JRSNU/6654478.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/8C7B9CJF/Tran et al. - 2013 - An interactive Web-based IDE towards teaching and .pdf:application/pdf}
}

@inproceedings{kats_software_2012,
  address    = {New York, NY, USA},
  series     = {Onward! 2012},
  title      = {Software development environments on the web: a research agenda},
  isbn       = {978-1-4503-1562-3},
  shorttitle = {Software development environments on the web},
  url        = {https://dl.acm.org/doi/10.1145/2384592.2384603},
  doi        = {10.1145/2384592.2384603},
  abstract   = {Software is rapidly moving from the desktop to the Web. The Web provides a generic user interface that allows ubiquitous access, instant collaboration, integration with other online services, and avoids installation and configuration on desktop computers. For software development, the Web presents a shift away from developer workstations as a silo, and has the promise of closer collaboration and improved feedback through innovations in Web-based interactive development environments (IDEs). Moving IDEs to the Web is not just a matter of porting desktop IDEs; a fundamental reconsideration of the IDE architecture is necessary in order to realize the full potential that the combination of modern IDEs and the Web can offer. This paper discusses research challenges and opportunities in this area, guided by a pilot study of a web IDE implementation.},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the {ACM} international symposium on {New} ideas, new paradigms, and reflections on programming and software},
  publisher  = {Association for Computing Machinery},
  author     = {Kats, Lennart C.L. and Vogelij, Richard G. and Kalleberg, Karl Trygve and Visser, Eelco},
  month      = oct,
  year       = {2012},
  pages      = {99--116},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/SL5I7TUV/Kats et al. - 2012 - Software development environments on the web a re.pdf:application/pdf}
}

@inproceedings{lautamaki_cored_2012,
  address    = {New York, NY, USA},
  series     = {{CSCW} '12},
  title      = {{CoRED}: browser-based {Collaborative} {Real}-time {Editor} for {Java} web applications},
  isbn       = {978-1-4503-1086-4},
  shorttitle = {{CoRED}},
  url        = {https://dl.acm.org/doi/10.1145/2145204.2145399},
  doi        = {10.1145/2145204.2145399},
  abstract   = {While the users of completed applications are heavily moving from desktop to the web browser, the majority of developers are still working with desktop IDEs such as Eclipse or Visual Studio. In contrast to professional installable IDEs, current web-based code editors are simple text editors with extra features. They usually understand lexical syntax and can do highlighting and indenting, but lack many of the features seen in modern desktop editors. In this paper, we present CoRED, a browser-based collaborative real-time code editor for Java applications. CoRED is a complete Java editor with error checking and automatic code generation capabilities, extended with some features commonly associated with social media. As a proof of the concept, we have extended CoRED to support Java based Vaadin framework for web applications. Moreover, CoRED can be used either as a stand-alone version or as a component of any other software. It is already used as a part of browser based Arvue IDE.},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the {ACM} 2012 conference on {Computer} {Supported} {Cooperative} {Work}},
  publisher  = {Association for Computing Machinery},
  author     = {Lautamäki, Janne and Nieminen, Antti and Koskinen, Johannes and Aho, Timo and Mikkonen, Tommi and Englund, Marc},
  month      = feb,
  year       = {2012},
  pages      = {1307--1316},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/YEEIMAAQ/Lautamäki et al. - 2012 - CoRED browser-based Collaborative Real-time Edito.pdf:application/pdf}
}

@inproceedings{yoo_wescheme_2011,
  address    = {New York, NY, USA},
  series     = {{ITiCSE} '11},
  title      = {{WeScheme}: the browser is your programming environment},
  isbn       = {978-1-4503-0697-3},
  shorttitle = {{WeScheme}},
  url        = {https://dl.acm.org/doi/10.1145/1999747.1999795},
  doi        = {10.1145/1999747.1999795},
  abstract   = {We present a programming environment called WeScheme that runs in the Web browser and supports interactive development. WeScheme programmers can save programs directly on the Web, making them accessible from everywhere. As a result, sharing of programs is a central focus that WeScheme supports seamlessly. The environment also leverages the existing presentation media and program run-time support found in Web browsers, thus making these easily accessible to students and leveraging their rapid engineering improvements. WeScheme is being used successfully by students, and is especially valuable in schools that have prohibitions on installing new software or lack the computational demands of more intensive programming environments.},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the 16th annual joint conference on {Innovation} and technology in computer science education},
  publisher  = {Association for Computing Machinery},
  author     = {Yoo, Danny and Schanzer, Emmanuel and Krishnamurthi, Shriram and Fisler, Kathi},
  month      = jun,
  year       = {2011},
  pages      = {163--167},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/5LDPK7AH/Yoo et al. - 2011 - WeScheme the browser is your programming environm.pdf:application/pdf}
}

@inproceedings{goldman_real-time_2011,
  address   = {New York, NY, USA},
  series    = {{UIST} '11},
  title     = {Real-time collaborative coding in a web {IDE}},
  isbn      = {978-1-4503-0716-1},
  url       = {https://dl.acm.org/doi/10.1145/2047196.2047215},
  doi       = {10.1145/2047196.2047215},
  abstract  = {This paper describes Collabode, a web-based Java integrated development environment designed to support close, synchronous collaboration between programmers. We examine the problem of collaborative coding in the face of program compilation errors introduced by other users which make collaboration more difficult, and describe an algorithm for error-mediated integration of program code. Concurrent editors see the text of changes made by collaborators, but the errors reported in their view are based only on their own changes. Editors may run the program at any time, using only error-free edits supplied so far, and ignoring incomplete or otherwise error-generating changes. We evaluate this algorithm and interface on recorded data from previous pilot experiments with Collabode, and via a user study with student and professional programmers. We conclude that it offers appreciable benefits over naive continuous synchronization without regard to errors and over manual version control.},
  urldate   = {2024-09-09},
  booktitle = {Proceedings of the 24th annual {ACM} symposium on {User} interface software and technology},
  publisher = {Association for Computing Machinery},
  author    = {Goldman, Max and Little, Greg and Miller, Robert C.},
  month     = oct,
  year      = {2011},
  pages     = {155--164},
  file      = {Full Text PDF:/home/pierre-helbing/Zotero/storage/WLG3DXZN/Goldman et al. - 2011 - Real-time collaborative coding in a web IDE.pdf:application/pdf}
}

@inproceedings{wu_ceclipse_2011,
  title      = {{CEclipse}: {An} {Online} {IDE} for {Programing} in the {Cloud}},
  shorttitle = {{CEclipse}},
  url        = {https://ieeexplore.ieee.org/document/6012686},
  doi        = {10.1109/SERVICES.2011.74},
  abstract   = {Due to the benefits of cloud computing, many desktop applications have been migrated into the cloud. In order to program in the cloud, lots of IDEs are also moved into the cloud at recent years. Although online IDE can bring developers a lot of convenience for their developing process, some tough problems are still less touched. This paper summarized three main kinds of actual problems from three aspects (Function implementation, Security guarantee, Advanced utilization) encountered when using the online IDE, and proposed three solutions (Services composition, Program behavior analysis, Program behavior mining) to handle these according problems. Finally, this paper introduce a real online IDE (CEclipse) developed by our research group and apply the three solutions in this online IDE.},
  urldate    = {2024-09-09},
  booktitle  = {2011 {IEEE} {World} {Congress} on {Services}},
  author     = {Wu, Ling and Liang, Guangtai and Kui, Shi and Wang, Qianxiang},
  month      = jul,
  year       = {2011},
  note       = {ISSN: 2378-3818},
  keywords   = {Cloud computing, Cloud Computing, Java, Monitoring, Online IDE, Performance analysis, Program Analysis, Program Behavior, Security, Servers, Service Composition},
  pages      = {45--52},
  file       = {IEEE Xplore Abstract Record:/home/pierre-helbing/Zotero/storage/MZHEDJKB/6012686.html:text/html;IEEE Xplore Full Text PDF:/home/pierre-helbing/Zotero/storage/R7B5EGIS/Wu et al. - 2011 - CEclipse An Online IDE for Programing in the Clou.pdf:application/pdf}
}

@inproceedings{van_deursen_adinda_2010,
  address    = {New York, NY, USA},
  series     = {{ICSE} '10},
  title      = {Adinda: a knowledgeable, browser-based {IDE}},
  isbn       = {978-1-60558-719-6},
  shorttitle = {Adinda},
  url        = {https://dl.acm.org/doi/10.1145/1810295.1810330},
  doi        = {10.1145/1810295.1810330},
  abstract   = {In practice, many people have to work together to develop and maintain a software system. However, the programmer's key tool, the Integrated Development Environment (IDE), is a solo-tool, serving to help individual programmers understand and modify the system. Such an IDE does not leverage the knowledge other team members may have of the design and implementation of the system. We propose to resolve this problem by exploring, experimentally, new ways of inferring knowledge from past IDE-interactions, and of maximizing collaboration among developers. Our approach, called Adinda, revolves around transforming the IDE into a set of integrated services, accessible via a web browser, and enriched with Web 2.0 technologies. Such services will not only help developers perform traditional IDE tasks, but also facilitate the required informal communication and collaboration needs of software development projects. In this paper, we report on our vision, approach and challenges for building Adinda, and initial results.},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the 32nd {ACM}/{IEEE} {International} {Conference} on {Software} {Engineering} - {Volume} 2},
  publisher  = {Association for Computing Machinery},
  author     = {van Deursen, Arie and Mesbah, Ali and Cornelissen, Bas and Zaidman, Andy and Pinzger, Martin and Guzzi, Anja},
  month      = may,
  year       = {2010},
  pages      = {203--206},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/TWJAYN3V/van Deursen et al. - 2010 - Adinda a knowledgeable, browser-based IDE.pdf:application/pdf}
}

@inproceedings{efopoulos_wipe_2005,
  address    = {New York, NY, USA},
  series     = {{ITiCSE} '05},
  title      = {{WIPE}: a programming environment for novices},
  isbn       = {978-1-59593-024-8},
  shorttitle = {{WIPE}},
  url        = {https://dl.acm.org/doi/10.1145/1067445.1067479},
  doi        = {10.1145/1067445.1067479},
  abstract   = {This paper presents an overview of the design principles and the evaluation of a new programming environment, WIPE (Web Integrated Programming Environment), designed specifically to teach novices the fundamentals of programming. The environment is designed for use in secondary education as a first programming course, in order to help students become familiar with the main programming concepts.},
  urldate    = {2024-09-09},
  booktitle  = {Proceedings of the 10th annual {SIGCSE} conference on {Innovation} and technology in computer science education},
  publisher  = {Association for Computing Machinery},
  author     = {Efopoulos, Vassilios and Dagdilelis, Vassilios and Evangelidis, Georgios and Satratzemi, Maya},
  month      = jun,
  year       = {2005},
  pages      = {113--117},
  file       = {Full Text PDF:/home/pierre-helbing/Zotero/storage/Z9KHD3NZ/Efopoulos et al. - 2005 - WIPE a programming environment for novices.pdf:application/pdf}
}

@article{ryan_web_2007,
  title   = {Web-based java integrated development environment},
  author  = {Ryan, William},
  journal = {BEng thesis, University of Edinburgh},
  year    = {2007}
}

@misc{noauthor_eclipse_nodate,
  title    = {Eclipse {IDE} {\textbar} {The} {Eclipse} {Foundation}},
  url      = {https://eclipseide.org/},
  abstract = {The Eclipse IDE Working Group is formed to ensure the continued sustainability, integrity, evolution and adoption of the Eclipse IDE suite of products and …},
  language = {en},
  urldate  = {2024-09-09},
  journal  = {eclipseide.org},
  file     = {Snapshot:/home/pierre-helbing/Zotero/storage/L74F5FXQ/eclipseide.org.html:text/html}
}

@misc{noauthor_pyodide_nodate,
  title   = {Pyodide — {Version} 0.26.2},
  url     = {https://pyodide.org/en/stable/},
  urldate = {2024-09-09},
  file    = {Pyodide — Version 0.26.2:/home/pierre-helbing/Zotero/storage/I8W2K6P7/stable.html:text/html}
}

@misc{noauthor_aws-cloud9_nodate,
  title    = {Cloud {IDE} - {AWS} {Cloud9} - {AWS}},
  url      = {https://aws.amazon.com/cloud9/},
  abstract = {AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser.},
  language = {en-US},
  urldate  = {2024-09-09},
  journal  = {Amazon Web Services, Inc.},
  file     = {Snapshot:/home/pierre-helbing/Zotero/storage/X55I2ZPT/cloud9.html:text/html}
}

@misc{noauthor_amazon_nodate,
  title    = {Amazon {Web} {Services} {AWS} – {Server} {Hosting} \& {Cloud} {Services}},
  url      = {https://aws.amazon.com/de/},
  abstract = {Amazon Web Services bietet zuverlässige, skalierbare und wirtschaftliche Cloud-Computing-Services. Kostenlose Teilnahme, nutzungsabhängige Zahlung.},
  language = {de-DE},
  urldate  = {2024-09-09},
  journal  = {Amazon Web Services, Inc.},
  file     = {Snapshot:/home/pierre-helbing/Zotero/storage/5TWGTYH6/de.html:text/html}
}

@misc{noauthor_xtext_nodate,
  title   = {Xtext - {Language} {Engineering} {Made} {Easy}!},
  url     = {https://eclipse.dev/Xtext/},
  urldate = {2024-09-09},
  file    = {Xtext - Language Engineering Made Easy!:/home/pierre-helbing/Zotero/storage/9749EDKK/Xtext.html:text/html}
}

@misc{noauthor_etherpad_nodate,
  title   = {Etherpad},
  url     = {https://etherpad.org/},
  urldate = {2024-09-09},
  file    = {Etherpad:/home/pierre-helbing/Zotero/storage/57IDWLVE/etherpad.org.html:text/html}
}

@inproceedings{fraser_differential_2009,
  address   = {Munich Germany},
  title     = {Differential synchronization},
  isbn      = {978-1-60558-575-8},
  url       = {https://dl.acm.org/doi/10.1145/1600193.1600198},
  doi       = {10.1145/1600193.1600198},
  abstract  = {This paper describes the Differential Synchronization (DS) method for keeping documents synchronized. The key feature of DS is that it is simple and well suited for use in both novel and existing state-based applications without requiring application redesign. DS uses deltas to make efficient use of bandwidth, and is fault-tolerant, allowing copies to converge in spite of occasional errors. We consider practical implementation of DS and describe some techniques to improve its performance in a browser environment.},
  language  = {en},
  urldate   = {2024-09-10},
  booktitle = {Proceedings of the 9th {ACM} symposium on {Document} engineering},
  publisher = {ACM},
  author    = {Fraser, Neil},
  month     = sep,
  year      = {2009},
  pages     = {13--20},
  file      = {Fraser - 2009 - Differential synchronization.pdf:/Users/pierre/Zotero/storage/SKCYVTD8/Fraser - 2009 - Differential synchronization.pdf:application/pdf}
}

@misc{noauthor_ace_nodate,
  title   = {Ace - {The} {High} {Performance} {Code} {Editor} for the {Web}},
  url     = {https://ace.c9.io/},
  urldate = {2024-09-10},
  file    = {Ace - The High Performance Code Editor for the Web:/Users/pierre/Zotero/storage/R3GAKRIN/ace.c9.io.html:text/html}
}

@inproceedings{shapiro_conflict-free_2011,
  address   = {Berlin, Heidelberg},
  title     = {Conflict-{Free} {Replicated} {Data} {Types}},
  isbn      = {978-3-642-24550-3},
  doi       = {10.1007/978-3-642-24550-3_29},
  abstract  = {Replicating data under Eventual Consistency (EC) allows any replica to accept updates without remote synchronisation. This ensures performance and scalability in large-scale distributed systems (e.g., clouds). However, published EC approaches are ad-hoc and error-prone. Under a formal Strong Eventual Consistency (SEC) model, we study sufficient conditions for convergence. A data type that satisfies these conditions is called a Conflict-free Replicated Data Type (CRDT). Replicas of any CRDT are guaranteed to converge in a self-stabilising manner, despite any number of failures. This paper formalises two popular approaches (state- and operation-based) and their relevant sufficient conditions. We study a number of useful CRDTs, such as sets with clean semantics, supporting both add and remove operations, and consider in depth the more complex Graph data type. CRDT types can be composed to develop large-scale distributed applications, and have interesting theoretical properties.},
  language  = {en},
  booktitle = {Stabilization, {Safety}, and {Security} of {Distributed} {Systems}},
  publisher = {Springer},
  author    = {Shapiro, Marc and Preguiça, Nuno and Baquero, Carlos and Zawirski, Marek},
  editor    = {Défago, Xavier and Petit, Franck and Villain, Vincent},
  year      = {2011},
  keywords  = {Eventual Consistency, Large-Scale Distributed Systems, Replicated Shared Objects},
  pages     = {386--400},
  file      = {Full Text PDF:C\:\\Users\\pierr\\Zotero\\storage\\U2GN8VKV\\Shapiro et al. - 2011 - Conflict-Free Replicated Data Types.pdf:application/pdf}
}

@inproceedings{sun_operational_1998,
  address    = {New York, NY, USA},
  series     = {{CSCW} '98},
  title      = {Operational transformation in real-time group editors: issues, algorithms, and achievements},
  isbn       = {978-1-58113-009-6},
  shorttitle = {Operational transformation in real-time group editors},
  url        = {https://dl.acm.org/doi/10.1145/289444.289469},
  doi        = {10.1145/289444.289469},
  urldate    = {2024-12-01},
  booktitle  = {Proceedings of the 1998 {ACM} conference on {Computer} supported cooperative work},
  publisher  = {Association for Computing Machinery},
  author     = {Sun, Chengzheng and Ellis, Clarence},
  month      = nov,
  year       = {1998},
  pages      = {59--68},
  file       = {Full Text PDF:C\:\\Users\\pierr\\Zotero\\storage\\VBGBTPDC\\Sun und Ellis - 1998 - Operational transformation in real-time group edit.pdf:application/pdf}
}

@misc{noauthor_google-scholar_nodate,
  title   = {Google {Scholar}},
  url     = {https://scholar.google.com/},
  urldate = {2024-11-26},
  file    = {Google Scholar:/home/pierre-helbing/Zotero/storage/3AYCMPMZ/scholar.google.com.html:text/html}
}

@misc{noauthor_web-of-science_nodate,
  title   = {Clarivate},
  url     = {https://www.webofscience.com/wos/},
  urldate = {2024-11-26},
  file    = {Clarivate:/home/pierre-helbing/Zotero/storage/K9W47YIK/login.html:text/html}
}

@misc{noauthor_scopus_nodate,
  title   = {Scopus preview - {Scopus} - {Welcome} to {Scopus}},
  url     = {https://www.scopus.com/home.uri},
  urldate = {2024-11-26},
  file    = {Scopus preview - Scopus - Welcome to Scopus:/home/pierre-helbing/Zotero/storage/IIWM23I7/home.html:text/html}
}

@misc{noauthor_ieee-xplore_nodate,
  title   = {{IEEE} {Xplore}},
  url     = {https://ieeexplore.ieee.org/Xplore/home.jsp},
  urldate = {2024-11-26},
  file    = {IEEE Xplore:/home/pierre-helbing/Zotero/storage/RJ72YEYS/home.html:text/html}
}

@misc{noauthor_acm_nodate,
  title    = {{ACM} {Digital} {Library}},
  url      = {https://dl.acm.org/},
  abstract = {ACM Digital Library Home page},
  language = {en},
  urldate  = {2024-11-26},
  journal  = {ACM Digital Library},
  file     = {Snapshot:/home/pierre-helbing/Zotero/storage/EXH54TJM/dl.acm.org.html:text/html}
}

@misc{noauthor_jdk_nodate,
  title   = {{JDK} {Builds} from {Oracle}},
  url     = {https://jdk.java.net/},
  urldate = {2024-12-20},
  file    = {JDK Builds from Oracle:/home/pierre-helbing/Zotero/storage/2SEUYJQ7/jdk.java.net.html:text/html}
}

@misc{noauthor_firepad_nodate,
  title   = {Firepad - {An} open source collaborative code and text editor},
  url     = {https://firepad.io/},
  urldate = {2024-09-11},
  file    = {Firepad - An open source collaborative code and text editor:/home/pierre-helbing/Zotero/storage/JEJPT6X9/firepad.io.html:text/html}
}

@misc{noauthor_github_nodate,
  title    = {Build software better, together},
  url      = {https://github.com},
  abstract = {GitHub is where people build software. More than 100 million people use GitHub to discover, fork, and contribute to over 420 million projects.},
  language = {en},
  urldate  = {2024-12-20},
  journal  = {GitHub},
  file     = {Snapshot:/home/pierre-helbing/Zotero/storage/YLZNZE2D/github.com.html:text/html}
}

@misc{noauthor_language-server-protocol_nodate,
  title   = {Official page for {Language} {Server} {Protocol}},
  url     = {https://microsoft.github.io/language-server-protocol/},
  urldate = {2024-11-26},
  file    = {Official page for Language Server Protocol:/home/pierre-helbing/Zotero/storage/38QWI8BY/language-server-protocol.html:text/html}
}

@misc{noauthor_vscode_nodate,
  title    = {Visual {Studio} {Code} - {Code} {Editing}. {Redefined}},
  url      = {https://code.visualstudio.com/},
  abstract = {Visual Studio Code is a code editor redefined and optimized for building and debugging modern web and cloud applications.  Visual Studio Code is free and available on your favorite platform - Linux, macOS, and Windows.},
  language = {en},
  urldate  = {2024-11-25},
  file     = {Snapshot:/home/pierre-helbing/Zotero/storage/5AT4CNP4/code.visualstudio.com.html:text/html}
}

@misc{noauthor_moodle_nodate,
  title    = {Startseite {\textbar} {Moodle}.org},
  url      = {https://moodle.org/},
  abstract = {Moodle is a Learning Platform or course management system (CMS) - a free Open Source software package designed to help educators create effective online courses based on sound pedagogical principles. You can download and use it on any computer you have handy (including webhosts), yet it can scale from a single-teacher site to a 200,000-student University. Moodle has a large and diverse user community with over 100,000 sites registered worldwide speaking over 140 languages in every country there is.},
  language = {de},
  urldate  = {2024-12-20},
  file     = {Snapshot:/home/pierre-helbing/Zotero/storage/JE9VY96D/moodle.org.html:text/html}
}

@misc{noauthor_github-codespaces_2024,
  title    = {{GitHub} {Codespaces}},
  url      = {https://github.com/features/codespaces},
  abstract = {GitHub Codespaces gets you up and coding faster with fully configured, secure cloud development environments native to GitHub.},
  language = {en},
  urldate  = {2024-11-25},
  journal  = {GitHub},
  year     = {2024},
  file     = {Snapshot:/home/pierre-helbing/Zotero/storage/A3BQRP88/codespaces.html:text/html}
}

@misc{noauthor_lti_nodate,
  title   = {Learning {Tools} {Interoperability} {\textbar} {1EdTech}},
  url     = {https://www.1edtech.org/standards/lti},
  urldate = {2024-12-21},
  file    = {Learning Tools Interoperability | 1EdTech:C\:\\Users\\pierr\\Zotero\\storage\\IE3I9MMG\\lti.html:text/html}
}

@misc{noauthor_ec2-autoscaling_nodate,
  title    = {Instance {Auto} {Scaling} – {Amazon} {EC2} {Auto} {Scaling} – {AWS}},
  url      = {https://aws.amazon.com/de/ec2/autoscaling/},
  abstract = {Amazon EC2 Auto Scaling hilft Ihnen, die Anwendungsverfügbarkeit aufrechtzuerhalten und festzulegen, wie die Amazon-EC2-Kapazität skaliert werden soll, um die Anforderungen Ihrer Anwendung zu erfüllen.},
  language = {de-DE},
  urldate  = {2024-12-21},
  journal  = {Amazon Web Services, Inc.},
  file     = {Snapshot:C\:\\Users\\pierr\\Zotero\\storage\\CDZF48T9\\autoscaling.html:text/html}
}

@misc{noauthor_azure-cloud-services_nodate,
  title    = {Cloud {Services} – {Bereitstellen} von {Cloud}-{Apps} und {APIs} {\textbar} {Microsoft} {Azure}},
  url      = {https://azure.microsoft.com/en-us/products/cloud-services},
  abstract = {Hier erhalten Sie Informationen zu Azure Cloud Services, das Sie bei der Bereitstellung und Skalierung leistungsstarker Cloudanwendungen und APIs unterstützt. Unterstützt Java, Node.js, PHP, Python, .NET und viele mehr.},
  language = {de-DE},
  urldate  = {2024-12-21},
  file     = {Snapshot:C\:\\Users\\pierr\\Zotero\\storage\\GUHTZYG2\\cloud-services.html:text/html}
}

@misc{noauthor_vscode-github_2024,
  title     = {microsoft/vscode},
  copyright = {MIT},
  url       = {https://github.com/microsoft/vscode},
  abstract  = {Visual Studio Code},
  urldate   = {2024-12-21},
  publisher = {Microsoft},
  month     = dec,
  year      = {2024},
  note      = {original-date: 2015-09-03T20:23:38Z},
  keywords  = {editor, electron, microsoft, typescript, visual-studio-code}
}

@misc{noauthor_monaco_nodate,
  title   = {Monaco {Editor}},
  url     = {https://microsoft.github.io/monaco-editor/},
  urldate = {2024-12-21},
  file    = {Monaco Editor:C\:\\Users\\pierr\\Zotero\\storage\\HPKFDR9G\\monaco-editor.html:text/html}
}

@misc{noauthor_vscode-extension-api_nodate,
  title    = {Extension {API}},
  url      = {https://code.visualstudio.com/api/index},
  abstract = {Visual Studio Code has a rich extension API. Learn how to create your own extensions for VS Code.},
  language = {en},
  urldate  = {2024-12-21},
  file     = {Snapshot:C\:\\Users\\pierr\\Zotero\\storage\\JX6928JW\\api.html:text/html}
}

@misc{noauthor_jetbrains_nodate,
  title      = {{JetBrains}: {Unentbehrliche} {Tools} für {Software}-{Entwickler}*innen und {Teams}},
  shorttitle = {{JetBrains}},
  url        = {https://www.jetbrains.com/de-de/},
  abstract   = {JetBrains ist ein führender Anbieter innovativer Software, der sich auf intelligente Entwicklungstools spezialisiert, darunter IntelliJ IDEA – die führende Java-IDE – und die Programmiersprache Kotlin.},
  language   = {de},
  urldate    = {2024-12-21},
  journal    = {JetBrains},
  file       = {Snapshot:C\:\\Users\\pierr\\Zotero\\storage\\KGILKZPY\\de-de.html:text/html}
}

@misc{noauthor_jetbrains-plugins_nodate,
  title    = {{JetBrains} {Marketplace}},
  url      = {https://plugins.jetbrains.com/},
  abstract = {Welcome to JetBrains Marketplace},
  urldate  = {2024-12-21},
  journal  = {JetBrains Marketplace},
  file     = {Snapshot:C\:\\Users\\pierr\\Zotero\\storage\\PU5FMNV9\\plugins.jetbrains.com.html:text/html}
}

@misc{noauthor_stackblitz_nodate,
  title    = {{StackBlitz} {\textbar} {Instant} {Dev} {Environments} {\textbar} {Click}. {Code}. {Done}.},
  url      = {https://stackblitz.com/},
  abstract = {StackBlitz is the collaborative browser-based IDE for web developers. StackBlitz eliminates time-consuming local configuration and lets developers spend more time building.},
  language = {en},
  urldate  = {2024-12-21},
  file     = {Snapshot:C\:\\Users\\pierr\\Zotero\\storage\\HX9FPGMA\\stackblitz.com.html:text/html}
}

@misc{noauthor_nodejs_nodate,
  title    = {Node.js — {Run} {JavaScript} {Everywhere}},
  url      = {https://nodejs.org/en},
  abstract = {Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine.},
  language = {en-GB},
  urldate  = {2024-12-21},
  file     = {Snapshot:C\:\\Users\\pierr\\Zotero\\storage\\3NRDYGYS\\en.html:text/html}
}

@misc{noauthor_webcontainer_nodate,
  title    = {{WebContainer} {API} {Docs}},
  url      = {https://webcontainers.io/},
  abstract = {Build the future of web based coding experiences, from interactive tutorials to instant production-ready dev environments.},
  language = {en-US},
  urldate  = {2024-12-21},
  file     = {Snapshot:C\:\\Users\\pierr\\Zotero\\storage\\VCPGRBVS\\webcontainers.io.html:text/html}
}

@misc{noauthor_theia_nodate,
  title   = {Theia - {Cloud} and {Desktop} {IDE} {Platform}},
  url     = {https://theia-ide.org/},
  urldate = {2024-12-21},
  file    = {Theia - Cloud and Desktop IDE Platform:C\:\\Users\\pierr\\Zotero\\storage\\IXSF47ZW\\theia-ide.org.html:text/html}
}

@misc{noauthor_opensumi_nodate,
  title    = {{OpenSumi}},
  url      = {https://opensumi.com/zh},
  abstract = {一款帮助你快速搭建本地和云端 IDE 的框架 - A framework helps you quickly build Cloud or Desktop IDE products.},
  language = {zh},
  urldate  = {2024-12-21}
}

@misc{noauthor_alibaba_nodate,
  title    = {Alibaba {Group} {Official} {Website}},
  url      = {https://www.alibabagroup.com/en-US/},
  abstract = {Alibaba Group’s mission is to make it easy to do business anywhere. We enable businesses to transform the way they market, sell and operate and improve their efficiencies. We provide the technology infrastructure and marketing reach to help merchants, brands, retailers and other businesses to leverage the power of new technology to engage with their users and customers and operate in a more efficient way.},
  urldate  = {2024-12-21},
  file     = {Snapshot:C\:\\Users\\pierr\\Zotero\\storage\\2Y3YLLAV\\en-US.html:text/html}
}

@misc{milinkovich_eclipse-foundation_nodate,
  title    = {Eclipse {Foundation} {\textbar} {The} {Eclipse} {Foundation}},
  url      = {https://www.eclipse.org/org/foundation/},
  abstract = {The Eclipse Foundation - home to a global community, the Eclipse IDE, Jakarta EE and over 415 open source projects, including runtimes, tools and frameworks.},
  language = {en},
  urldate  = {2024-12-21},
  author   = {Milinkovich, Mike},
  file     = {Snapshot:C\:\\Users\\pierr\\Zotero\\storage\\U3GUURFJ\\foundation.html:text/html}
}

@misc{noauthor_microsoft_nodate,
  title    = {Microsoft – {AI}, {Cloud}, {Produktivität}, {Computing}, {Gaming} und {Apps}},
  url      = {https://www.microsoft.com/de-de},
  abstract = {Entdecken Sie Microsoft-Produkte und -Dienste für Ihr Zuhause oder Ihr Unternehmen. Microsoft 365, Copilot, Teams, Xbox, Windows, Azure, Surface und mehr kaufen},
  language = {de-DE},
  urldate  = {2024-12-21},
  file     = {Snapshot:C\:\\Users\\pierr\\Zotero\\storage\\5HWCUPE5\\de-de.html:text/html}
}

@misc{noauthor_eclipse-che_nodate,
  title    = {Eclipse {Che}},
  url      = {https://www.eclipse.org/che/},
  abstract = {Run your favorite IDE on Kubernetes.},
  language = {en},
  urldate  = {2024-12-21},
  journal  = {Eclipse Che},
  file     = {Snapshot:C\:\\Users\\pierr\\Zotero\\storage\\HV76PTL9\\che.html:text/html}
}
