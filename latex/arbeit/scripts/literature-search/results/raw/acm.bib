@inproceedings{10.1145/3624486.3624507,
author = {Villanueva, Eliseo and Torres, Ismael and Osaba, Eneko and Canzoneri, Sergio and Franchini, Andrea and Blasi, Lorenzo},
title = {PIACERE Integrated Development Environment},
year = {2023},
isbn = {9798400708350},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3624486.3624507},
doi = {10.1145/3624486.3624507},
abstract = {This article presents a model-driven engineering (MDE) integrated development environment (IDE) to assist the DevSecOps (Development Security and Operations) process. This tool has been developed within the PIACERE H2020 project, which proposes a framework composed of a set of tools developed to support all phases of the DevSecOps life cycle including modeling, test/validation, build/generate, deployment, operate and modeling. PIACERE IDE is an Eclipse based tool, that acts as the front-end for this framework, and plays a key role in integrating other PIACERE tools. The IDE allows developers to access the different tools in a simple and unified way.},
booktitle = {Proceedings of the 3rd Eclipse Security, AI, Architecture and Modelling Conference on Cloud to Edge Continuum},
pages = {62–66},
numpages = {5},
keywords = {DevSecOps, Eclipse, IDE (integrated development environment), IaC (Infrastructure as Code)},
location = {<conf-loc>, <city>Ludwigsburg</city>, <country>Germany</country>, </conf-loc>},
series = {ESAAM '23}
}

@inproceedings{10.1145/3328778.3366949,
author = {Valez, Martin and Yen, Michael and Le, Mathew and Su, Zhendong and Alipour, Mohammad Amin},
title = {Student Adoption and Perceptions of a Web Integrated Development Environment: An Experience Report},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3366949},
doi = {10.1145/3328778.3366949},
abstract = {Students often spend a considerable amount of time and effort installing and configuring programming tools and environments. This can frustrate, and distract them from more important learning objectives, particularly in introductory programming courses. A web-based integrated development environment can serve as a low-threshold, ready-to-use programming environment, and reduce the time and effort needed to start practicing programming.In this paper, we report our experience of developing and deploying a web-based integrated development environment (web IDE) as an optional tool at a large public university that has been in use for over several years in various programming courses.We conducted a survey to understand students' perceptions toward the web IDE and usage of its features. Using the data from the survey, we explored potential correlations between student demographic and behavioral traits in adoption of the web IDE. The results of the survey suggest that around half of the students use the IDE often or very often. We also discovered that the likelihood of adoption of the IDE decreases as students to move to upper classes. In this paper, we also describe broader lessons for educators and researchers.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {1172–1178},
numpages = {7},
keywords = {student perceptions, tool adoption, web-based integrated development envioronment},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/3568364.3568375,
author = {Alharbi, Ali},
title = {Re-imagining Computer Laboratories for Teaching Introductory Programming Concepts Using Web-based Integrated Development Environments: Opportunities and Challenges},
year = {2022},
isbn = {9781450396950},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3568364.3568375},
doi = {10.1145/3568364.3568375},
abstract = {This study reported on students' views and experience during the transition from a traditional computer laboratory into a web-based integrated development environment in an introductory programming concepts course. The aim of this study is twofold. First, to review and evaluate selected web-based integrated development environments (Web IDEs) that can be used to support teaching and learning of programming concepts. Second, to get insight into students' views and experience towards the web-based integrated development environments compared to computer laboratory. Students' understanding of basic programming concepts is part of any computer science and information technology academic program. However, research shows that it is not always easy for students to learn about these concepts, and that is reflected in the high drop rate among students in these subjects. Computer laboratory is an integral part for introductory courses on programming concepts to help students practice what they have learnt. The study is descriptive and exploratory in its nature, and was conducted in two stages. First, a review of some selected web integrated development environments was performed using a rubric for evaluating e-learning tools. Second, the study explored students' views and experience with the web-based integrated development environment using a questionnaire and a focus group. The study demonstrated that students had positive views and experience towards the web-based integrated development environments implying that these tools have the potential to overcome the limitations inherited in computer laboratory. The study suggested some improvements to the web-based integrated development environments to be more educationally effective.},
booktitle = {Proceedings of the 4th World Symposium on Software Engineering},
pages = {67–74},
numpages = {8},
keywords = {Programming education, Virtual labs, Web-based integrated development environments, e-learning},
location = {Xiamen, China},
series = {WSSE '22}
}

@inproceedings{10.1145/3516807.3519421,
author = {Grove, David},
title = {Virtual programming environments: programming the cloud (keynote)},
year = {2022},
isbn = {9781450392518},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3516807.3519421},
doi = {10.1145/3516807.3519421},
abstract = {Cloud-based applications are ubiquitous and essential. We expect them to be simultaneously scalable and available and simple to build and deploy. Virtual Programming Environments are what make these applications possible. Virtual Programming Environments are themselves complex distributed systems, built using the entire spectrum of System and Runtime Virtualization technology that is the subject of VEE. In the first part of the talk, I will focus on the purest form of Serverless Computing: Functions as a Service (FaaS) as embodied in Virtual Programming Environments such as AWS Lambda or Apache OpenWhisk. I will describe the programming abstractions they provide to the developer and how these abstractions are realized using virtualization technology. In the second part of the talk, I will outline the research challenges in moving beyond FaaS to build Virtual Programming Environments that can productively support building complex stateful applications on the cloud.},
booktitle = {Proceedings of the 18th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments},
pages = {2},
numpages = {1},
keywords = {Distributed Systems, Fault Tolerance, Functions as a Service, Serverless Computing},
location = {Virtual, Switzerland},
series = {VEE 2022}
}

@inproceedings{10.1145/3159450.3162203,
author = {Lim, Seongtaek and Adithya Varanasi, Rama and Parikh, Tapan},
title = {GLIDE (Git-Learning IDE; Integrated Development Environment): In-class Collaboration in Web Engineering Curriculum for Youths (Abstract Only)},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3162203},
doi = {10.1145/3159450.3162203},
abstract = {Despite software engineering's inherently collaborative nature, collaboration with others hasn't been the primary way for students to learn how to program. Although various collaboration frameworks, such as Git, are widely used in software engineering, they've been treated as separate skills to acquire in addition to learning programming languages, rather than ways of learning, working, and thinking while learning to program. One collaborative software development task that students often want to engage in is building websites. However, the complexity of web syntax and architecture has been a hurdle in teaching and learning web design and development, especially for beginners without sufficient technical background. Specifically, syntactic barriers in several different languages for a webpage, inherent coupling of content and design in HTML, difficulty in understanding server-client model, and need for hosting resources for deployment contribute to a steep learning curve in building websites "from scratch". This work aims to address these issues by developing GLIDE (Git-Learning Integrated Development Environment) - a set of tools and curriculum that support in-class collaborative development in web engineering courses. GLIDE structures the website development process as a teacher-guided Git workflow for a team of students collaborating in groups in a Git repository. The application also provides a web programming model that separates content, from design, from implementation, allowing students to take on different roles and responsibilities during the development process. This demo presents a tutorial on how a group of students can build websites collaboratively with teacher's assistance based on the GLIDE software platform and curriculum.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {1112},
numpages = {1},
keywords = {collaborative software engineering, k-12 cs education, web engineering curriculum},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/3626253.3633427,
author = {Malan, David J. and Liu, Rongxin and Zenke, Carter and Lloyd, Doug},
title = {Providing Students with Standardized, Cloud-Based Programming Environments at Term's Start (for Free)},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3633427},
doi = {10.1145/3626253.3633427},
abstract = {For CS50 at Harvard, we have long provided students with a standardized programming environment, to avoid start-of-term technical difficulties that might otherwise arise if students had to install and configure compilers, interpreters, and debuggers on their own Macs and PCs. (For many students, "hello, world" is challenge enough on day 0, without also encountering "command not found" at the same time!) We originally provided students with shell accounts on a university-managed cluster of systems. We then transitioned to a cloud-based equivalent so as to manage the systems ourselves, root access and all. We transitioned thereafter to client-side virtual machines, to scale to more students and enable GUI-based assignments. We have since transitioned to web-based environments, complete with code tabs, terminal windows, and file explorers, initially implemented atop AWS Cloud9 and now, most recently, GitHub Codespaces, an implementation of Visual Studio (VS) Code in the cloud, free for teachers and students alike. In this workshop, we'll discuss the pedagogical and technological advantages and disadvantages of every approach and focus most of our time, hands-on, on using and configuring GitHub Codespaces itself for teaching and learning. Along the way, attendees will learn how to create their own Docker images and "devcontainers" for their own classes and any languages they teach. Attendees will learn what is possible educationally by writing their own VS Code extensions as well. And how, at term's end, to "offboard" students to VS Code itself on their own Macs and PCs, so as to continue programming independent of Codespaces.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1903},
numpages = {1},
keywords = {cli, code, code editor, command-line interface, container, docker, editor, graphical user interface, gui, ide, integrated development environment, programming, terminal window, text editor, web app, web application},
location = {<conf-loc>, <city>Portland</city>, <state>OR</state>, <country>USA</country>, </conf-loc>},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/3545947.3569611,
author = {Malan, David J. and Carter, Jonathan and Liu, Rongxin and Zenke, Carter},
title = {Providing Students with Standardized, Cloud-Based Programming Environments at Term's Start (for Free)},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3569611},
doi = {10.1145/3545947.3569611},
abstract = {For CS50 at Harvard, we have long provided students with a standardized programming environment, to avoid start-of-term technical difficulties that might otherwise arise if students had to install and configure compilers, interpreters, and debuggers on their own Macs and PCs. (For many students, "hello, world" is challenge enough on day 0, without also encountering "command not found" at the same time!) We originally provided students with shell accounts on a university-managed cluster of systems. We then transitioned to a cloud-based equivalent so as to manage the systems ourselves, root access and all. We transitioned thereafter to client-side virtual machines, to scale to more students and enable GUI-based assignments. We have since transitioned to web-based environments, complete with code tabs, terminal windows, and file explorers, initially implemented atop AWS Cloud9 and now, most recently, GitHub Codespaces, an implementation of Visual Studio (VS) Code in the cloud, free for teachers and students alike. In this workshop, we'll discuss the pedagogical and technological advantages and disadvantages of every approach and focus most of our time, hands-on, on using and configuring GitHub Codespaces itself for teaching and learning. Along the way, attendees will learn how to create their own Docker images and "devcontainers" for their own classes and any languages they teach. Attendees will learn what is possible educationally by writing their own VS Code extensions as well. And how, at term's end, to "offboard" students to VS Code itself on their own Macs and PCs, so as to continue programming independent of Codespaces.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1183},
numpages = {1},
keywords = {cli, code, code editor, command-line interface, container, docker, editor, graphical user interface, gui, ide, integrated development environment, programming, terminal window, text editor, web app, web application},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/1363686.1364249,
author = {Musicante, Martin A. and Potrich, Edinardo and Carrero, Marcos Aurelio},
title = {A programming environment for web services},
year = {2008},
isbn = {9781595937537},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1363686.1364249},
doi = {10.1145/1363686.1364249},
abstract = {PEWS is a programming language for the definition of web service interfaces. PEWS programs can be used for the description of both simple and composite web services. Simple web services can be built from scratch, by the combination of (WSDL) operations. Each operation must be implemented as a Java method. Composite web services are constructed from the combination of existing web services, accessed by using their WSDL descriptions. PEWS combinators help to define the order in which web services and operations will be performed. PEWS has a human-readable syntax as well as a XML version, called XPEWS. The human-readable language is intended to help in the design of web services and in the formal reasoning about programs. XPEWS is used as an interface language between the front-end and back-end of the PEWS language processor.This paper presents the development of a computational environment for PEWS. The front-end of the environment is an Eclipse plug-in. The use of the front-end can help reducing the time for development of the compositions, by the verification of codification errors and the generation XPEWS documents. The back-end of PEWS is responsible for the implementation of the web services described in a XPEWS document. The back-end produces Java™ code (skeletons) to call the web service operations and performs them in the order defined by the XPEWS document.},
booktitle = {Proceedings of the 2008 ACM Symposium on Applied Computing},
pages = {2363–2367},
numpages = {5},
keywords = {PEWS, back-end, front-end},
location = {Fortaleza, Ceara, Brazil},
series = {SAC '08}
}

@inproceedings{10.5555/370049.370067,
author = {Park, Insung and Kapadia, Nirav H. and Figueiredo, Renato J. and Eigenmann, Rudolf and Fortes, Jos\'{e} A. B.},
title = {Towards an integrated, web-executable parallel programming tool environment},
year = {2000},
isbn = {0780398025},
publisher = {IEEE Computer Society},
address = {USA},
abstract = {We present a new parallel programming tool environment that is (1) accessible and executable “anytime, anywhere,” through standard Web browsers and (2) integrated in that it provides tools which adhere to a common underlying methodology for parallel programming and performance tuning. The environment is based on a new network computing infrastructure developed at Purdue University. We evaluate our environment qualitatively by comparing our tool access method with conventional schemes of software download and installation. We also quantitatively evaluate the efficiency of interactive tool access in our environment. We do this by measuring the response times of various functions of the Ursa Minor tool and compare them with those of a Java Applet-based  "anytime,  anywhere" tool access method. We found that our environment offers significant advantages in terms of tool accessibility, integration, and efficiency.},
booktitle = {Proceedings of the 2000 ACM/IEEE Conference on Supercomputing},
pages = {9–es},
location = {Dallas, Texas, USA},
series = {SC '00}
}

@inproceedings{10.1145/3626253.3635429,
author = {Liu, Rongxin and Liu, Charlie and Zenke, Carter and Malan, David J.},
title = {Providing Students with Standardized, Cloud-Based Programming Environments at Term's Start (for Free)},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3635429},
doi = {10.1145/3626253.3635429},
abstract = {CS50.dev is a cloud-based programming environment offered to students taking CS50 and other CS courses at Harvard University, both on-campus or online. Built atop GitHub Codespaces, CS50.dev simplifies the initial challenges commonly faced by students and instructors because of the complexities involved in setting up programming environments at term's start. This demo offers an in-depth exploration of CS50.dev's architecture and presents a detailed guide on customizing Docker images and development container (devcontainers) to meet the specific needs of courses within GitHub Codespaces. The demo will also provide general guidance on how to help students transition from CS50.dev to using VS Code independently on their local machines at the term's end.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1926},
numpages = {1},
keywords = {code, containers, ide, integrated development environment, programming, text editor},
location = {<conf-loc>, <city>Portland</city>, <state>OR</state>, <country>USA</country>, </conf-loc>},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/1999747.1999795,
author = {Yoo, Danny and Schanzer, Emmanuel and Krishnamurthi, Shriram and Fisler, Kathi},
title = {WeScheme: the browser is your programming environment},
year = {2011},
isbn = {9781450306973},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1999747.1999795},
doi = {10.1145/1999747.1999795},
abstract = {We present a programming environment called WeScheme that runs in the Web browser and supports interactive development. WeScheme programmers can save programs directly on the Web, making them accessible from everywhere. As a result, sharing of programs is a central focus that WeScheme supports seamlessly. The environment also leverages the existing presentation media and program run-time support found in Web browsers, thus making these easily accessible to students and leveraging their rapid engineering improvements. WeScheme is being used successfully by students, and is especially valuable in schools that have prohibitions on installing new software or lack the computational demands of more intensive programming environments.},
booktitle = {Proceedings of the 16th Annual Joint Conference on Innovation and Technology in Computer Science Education},
pages = {163–167},
numpages = {5},
keywords = {programming environments, web},
location = {Darmstadt, Germany},
series = {ITiCSE '11}
}

@inproceedings{10.1145/2095536.2095560,
author = {Akama, Hiroki and Yamamuro, Masashi and Menjo, Takashi and Satoh, Tetsuji},
title = {Integrating multimedia data processing parts in cloud into folder programming environment},
year = {2011},
isbn = {9781450307840},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2095536.2095560},
doi = {10.1145/2095536.2095560},
abstract = {There are a variety of media processing parts such as Image-Magick, FFmpeg, and OpenCV. A mechanism is necessary that allows PC users to access easily these parts in a cloud. We propose Polder, a programming environment based on a simple processing principle that provides novices with an easy programming and execution environment. Data input is achieved through dragging and dropping data objects onto a folder. The input data object is processed by a program bound to the folder name and the resulting data object is stored in the same folder. Establishing a hierarchical folder structure chains the processes of the folders. Combined with a WebDAV network folder, Polder becomes a mashup environment for end users. In this paper, we evaluate and discuss Polder based on a user questionnaire administered after students test Polder to process images, videos, and voice files. Moreover, we discuss Polder based on the application development experience using Polder.},
booktitle = {Proceedings of the 13th International Conference on Information Integration and Web-Based Applications and Services},
pages = {130–137},
numpages = {8},
keywords = {end user programming, mashup, multimedia processing},
location = {Ho Chi Minh City, Vietnam},
series = {iiWAS '11}
}

@inproceedings{10.1145/1167253.1167333,
author = {Garrett, Aaron and Thornton, David},
title = {A web-based programming environment for LEGO mindstorms robots},
year = {2005},
isbn = {1595930590},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1167253.1167333},
doi = {10.1145/1167253.1167333},
abstract = {In this paper, we present briefly an approach that provides simple, inexpensive access to a mobile telerobot in order to facilitate team-based problem solving for introductory programming students.},
booktitle = {Proceedings of the 43rd Annual Southeast Regional Conference - Volume 2},
pages = {349–350},
numpages = {2},
keywords = {problem solving, telerobotics},
location = {Kennesaw, Georgia},
series = {ACM-SE 43}
}

@inproceedings{10.1145/3535227.3535239,
author = {Sabuncuoglu, Alpay and Sezgin, T. Metin},
title = {Prototyping Products using Web-based AI Tools: Designing a Tangible Programming Environment with Children},
year = {2022},
isbn = {9781450396332},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3535227.3535239},
doi = {10.1145/3535227.3535239},
abstract = {A wide variety of children’s products such as mobile apps, toys, and assistant systems now have integrated smart features. Designing such AI-powered products with children, the users, is essential. Using high-fidelity prototypes can be a means to reveal children’s needs and behaviors with AI-powered systems. Yet, a prototype that can show unpredictable features similar to the final AI-powered product can be expensive. A more manageable and inexpensive solution is using web-based AI prototyping tools such as Teachable Machine. In this work, we developed a Teachable Machine-powered game-development environment to inform our tangible programming environment’s design decisions. Using this kind of an AI-powered high-fidelity prototype in the research process allowed us to observe children in a very similar setting to our final AI-powered product and extract design considerations. This paper reports our experience of prototyping AI-powered solutions with children and shares our design considerations for children’s self-made tangible representations.},
booktitle = {6th FabLearn Europe / MakeEd Conference 2022},
articleno = {12},
numpages = {6},
keywords = {child-AI interaction, co-creation with AI, co-design with children, tangible programming},
location = {Copenhagen, Denmark},
series = {FabLearn Europe / MakeEd 2022}
}

@inproceedings{10.1145/3502717.3532164,
author = {Malan, David J.},
title = {Standardizing Students' Programming Environments with Docker Containers: Using Visual Studio Code in the Cloud with GitHub Codespaces},
year = {2022},
isbn = {9781450392006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3502717.3532164},
doi = {10.1145/3502717.3532164},
booktitle = {Proceedings of the 27th ACM Conference on on Innovation and Technology in Computer Science Education Vol. 2},
pages = {599–600},
numpages = {2},
keywords = {code, code editor, container, containerization, docker, editor, ide, integrated development environment, programming, text editor},
location = {Dublin, Ireland},
series = {ITiCSE '22}
}

@inproceedings{10.1145/2384592.2384603,
author = {Kats, Lennart C.L. and Vogelij, Richard G. and Kalleberg, Karl Trygve and Visser, Eelco},
title = {Software development environments on the web: a research agenda},
year = {2012},
isbn = {9781450315623},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2384592.2384603},
doi = {10.1145/2384592.2384603},
abstract = {Software is rapidly moving from the desktop to the Web. The Web provides a generic user interface that allows ubiquitous access, instant collaboration, integration with other online services, and avoids installation and configuration on desktop computers. For software development, the Web presents a shift away from developer workstations as a silo, and has the promise of closer collaboration and improved feedback through innovations in Web-based interactive development environments (IDEs). Moving IDEs to the Web is not just a matter of porting desktop IDEs; a fundamental reconsideration of the IDE architecture is necessary in order to realize the full potential that the combination of modern IDEs and the Web can offer. This paper discusses research challenges and opportunities in this area, guided by a pilot study of a web IDE implementation.},
booktitle = {Proceedings of the ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {99–116},
numpages = {18},
keywords = {cloud, cloud9, collaboration, ide, integrated development environment, interactive development environment, online, spoofax, web},
location = {Tucson, Arizona, USA},
series = {Onward! 2012}
}

@inproceedings{10.1145/2664551.2664553,
author = {de Lima, Edirlei Soares and Barbosa, Simone Diniz Junqueira and Feij\'{o}, Bruno and Furtado, Antonio Luz},
title = {Building Keyword-Indexed Virtual Libraries in a Logic Programming Environment},
year = {2014},
isbn = {9781450332309},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2664551.2664553},
doi = {10.1145/2664551.2664553},
abstract = {KW-GPS is a system to assist users intent on enjoying Web resources related to a domain-restricted collection of stories. In this system, each story is referenced in a virtual library in terms of the following data: (1) the URLs of resources associated with the story, which include but are not limited to plot-summaries, narrative texts, and videos; and (2) keywords of different classes, which serve as a multi-aspect index mechanism. Library items also include story templates, representing narrative motifs. Furthermore, a reduced version of the tool runs the basic rank-and-show process on mobile devices.},
booktitle = {Proceedings of the 20th Brazilian Symposium on Multimedia and the Web},
pages = {75–82},
numpages = {8},
keywords = {detective stories, digital entertainment, logic programming, story templates, virtual libraries, web resources},
location = {Jo\~{a}o Pessoa, Brazil},
series = {WebMedia '14}
}

@inproceedings{10.1145/3491101.3503575,
author = {Hess, Chris and Chasins, Sarah E.},
title = {Informing Housing Policy through Web Automation: Lessons for Designing Programming Tools for Domain Experts},
year = {2022},
isbn = {9781450391566},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3491101.3503575},
doi = {10.1145/3491101.3503575},
abstract = {Housing costs have risen dramatically in the past decade, surpassing their pre-Recession levels, but the data that housing researchers and policymakers rely on to understand these dynamics remain subject to important limitations in their spatiotemporal granularity or methodological transparency. While these aspects of existing public and private data sources present barriers to understanding the geography of cost and availability in markets across the United States, web data about housing opportunities provide an important alternative—albeit one that demands technical skills that would-be data users may lack. This case study documents the experiences of a collaboration between social and computer scientists focused on using a novel programming-by-demonstration tool for web automation, Helena, to inform rental housing policy and inequalities in the United States. While this project was initially focused on collecting housing ads from a single site within the Seattle area, the capacity to scale our project to new sources and locations afforded by Helena’s human-centered design allowed a team of social scientists to progress to scraping data across the country and multiple platforms. Using this project as a case study, we discuss a.) important programming and research challenges that were encountered and b.) how Helena’s design helped us overcome these barriers to using scraped web data in basic research and policy analysis.},
booktitle = {Extended Abstracts of the 2022 CHI Conference on Human Factors in Computing Systems},
articleno = {32},
numpages = {9},
keywords = {applied sociology, housing policy, web automation},
location = {New Orleans, LA, USA},
series = {CHI EA '22}
}

@inproceedings{10.5555/2825041.2825057,
author = {Ball, Thomas and Burckhardt, Sebastian and de Halleux, Jonathan and Moskal, Micha\l{} and Protzenko, Jonathan and Tillmann, Nikolai},
title = {Beyond open source: the TouchDevelop cloud-based integrated development environment},
year = {2015},
isbn = {9781479919345},
publisher = {IEEE Press},
abstract = {Software engineering tools and environments are migrating to the cloud, enabling more people to participate in programming from many more devices. To study this phenomenon in detail, we designed, implemented and deployed TouchDevelop (www.touchdevelop.com), a cloud-based integrated development environment (CIDE), which has been online for the past three years.TouchDevelop combines a cross-platform browser-based IDE for the creation of mobile+cloud apps, an online programmer/user community, and an app store. A central feature of TouchDevelop is to track all program edits, versions, runtime information, bugs, as well user comments, questions and feedback in a single cloud-based repository that is available publicly via Web APIs.In this paper, we examine a key feature of TouchDevelop that should be relevant to others creating CIDEs, namely the seamless integration of replicated workspaces, simplified version control and app publishing. An analysis of the TouchDevelop repository shows that this combination of capabilities allows users to easily create new versions of apps from existing apps, make changes to other users' apps, and share their results from a variety of devices, including smartphones, tablets and traditional PCs.},
booktitle = {Proceedings of the Second ACM International Conference on Mobile Software Engineering and Systems},
pages = {83–93},
numpages = {11},
location = {Florence, Italy},
series = {MOBILESoft '15}
}

@inproceedings{10.1145/1641309.1641324,
author = {Krahn, Robert and Ingalls, Dan and Hirschfeld, Robert and Lincke, Jens and Palacz, Krzysztof},
title = {Lively Wiki a development environment for creating and sharing active web content},
year = {2009},
isbn = {9781605587301},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1641309.1641324},
doi = {10.1145/1641309.1641324},
abstract = {Wikis are Web-based collaborative systems designed to help people share information. Wikis have become popular due to their openness which gives users complete control over the organization and the content of wiki pages. Unfortunately existing wiki engines restrict users to enter only passive content, such as text, graphics, and videos and do not allow users to customize wiki pages. Thus, wikis cannot be used to host or author rich dynamic and interactive content. In this paper we present Lively Wiki, a development and collaboration environment based on the Lively Kernel which enables users to create rich and interactive Web pages and applications - without leaving the Web. Lively Wiki combines the wiki metaphor with a direct-manipulation user interface and adds a concept for Web programming as well as programming tool support to create an easy to use, scalable, and extendable Web authoring tool. Moreover, Lively Wiki is self-supporting, i.e. the development tools were used for creating its own implementation thereby giving users the freedom to customize every aspect of the system.},
booktitle = {Proceedings of the 5th International Symposium on Wikis and Open Collaboration},
articleno = {9},
numpages = {10},
keywords = {Wikis, application Wikis, development environment, end-user programming, morphic, user innovation, web application},
location = {Orlando, Florida},
series = {WikiSym '09}
}

@inproceedings{10.1145/3585059.3611429,
author = {Chung, Sam and Jagatha, Veerendra and Johnson, Darron},
title = {Cloud-based Development Environment: A Case Study of Teaching a Cross-Platform Mobile App Course},
year = {2023},
isbn = {9798400701306},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3585059.3611429},
doi = {10.1145/3585059.3611429},
abstract = {This workshop aims to share the experiences of using a cloud-based development environment for teaching a cross-platform mobile app requiring full-stack technologies. This approach brings several benefits to instructors and students: 1) Instructors can be free from trouble shootings in their students' local desktop-based development environments. 2) Students can focus on the main concepts and skills of the course rather than the environment. Cloud-based development environments can be accessed from any device with an internet connection. It provides flexibility and convenience for the student. 3) Instructors can save their grading time by accessing the cloud-based development environment of each student. Furthermore, 4) students are exposed to the power of cloud computing with built-in version control systems.},
booktitle = {Proceedings of the 24th Annual Conference on Information Technology Education},
pages = {148–149},
numpages = {2},
keywords = {Cloud-based Development Environment, Cross-Platform, Mobile Apps, React Native},
location = {<conf-loc>, <city>Marietta</city>, <state>GA</state>, <country>USA</country>, </conf-loc>},
series = {SIGITE '23}
}

@inproceedings{10.1145/2016039.2016141,
author = {Halstead-Nussloch, Rich},
title = {Utilizing web server middleware for development environments and student projects},
year = {2011},
isbn = {9781450306867},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2016039.2016141},
doi = {10.1145/2016039.2016141},
abstract = {Teaching and learning web development is challenging today because of multiple factors including complexity, scale and security. As these challenges have grown through the years of the web, educators have been required to keep up with them in order to provide web-development education that has fidelity with practice. At Southern Polytechnic, we have been trying to keep abreast with a convenient development environment that is suitable for student use. This poster identifies and analyzes the major factors involved in deciding on a platform and recommends some freely available middleware suitable for web development environments and student projects.},
booktitle = {Proceedings of the 49th Annual Southeast Regional Conference},
pages = {348–349},
numpages = {2},
keywords = {distance learning, education, instructional technologies, laboratory experience, nontraditional students, student development platform, web},
location = {Kennesaw, Georgia},
series = {ACM-SE '11}
}

@inproceedings{10.1145/3328778.3372680,
author = {Williams, Renaldo and Garcia, Dan},
title = {CodeKey - An Online Code Editor to Study Code Patterns and Enhance Student Performance in CS Courses},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3372680},
doi = {10.1145/3328778.3372680},
abstract = {In the past several years, there has been an increase in web-based compilers that allow students to learn how to code using a browser. Many Universities use online code editors for their large Computer Science (CS) courses. For example, the CS200 course at UC Berkeley uses Jupyter Notebooks to teach Python for data science to 800+ students. All the students in the course must write and submit their code assignments in the web-browser. These online code editors for large CS courses presents several benefits. One benefit is that it becomes easier to monitor the steps that a student takes to solve a coding problem since keystrokes can be tracked using Javascript. Another benefit is that the code written by students can be stored in one central database, creating less barriers for code analysis. The CodeKey project aims to take advantage of analyzing code patterns of students in a CS course in order to find key insights. CodeKey aims to find these insights by monitoring the interactions (i.e. clicks and keystrokes) of students as each student attempts to solve a coding problem. The goal is to study the code patterns of students in a CS course in order to understand similarities and differences between students who perform well on a problem and students who do not. We also aim to study how revealing these coding patterns to a student can increase his understanding of how to solve a difficult coding problem by showing common mistakes, and by showing simple steps that lead to the correct solution.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {1357},
numpages = {1},
keywords = {computer science education, intelligent tutor systems, web-compilers},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/3350768.3352732,
author = {Gl\'{o}ria, Jo\~{a}o Paulo Barbosa and de Medeiros, Adriana Pereira},
title = {xOOHDM: Integrated development environment for creating and executing models in Web applications design},
year = {2019},
isbn = {9781450376518},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3350768.3352732},
doi = {10.1145/3350768.3352732},
abstract = {Web applications have several characteristics that differentiate them from conventional applications. However, they are often developed without considering such characteristics, even though there are specific methods for the design of these applications. This work proposes the combined use of the OOHDM method and executable models in an integrated environment for the model-driven development of Web applications. This environment provides a DSML for navigation modeling using the notations of the OOHDM and automatically generates the corresponding executable model, which permits simulating and testing this navigation without the need of code generation. It allows developers addressing specific aspects of web applications, such as hypertext, and identifying and fixing design problems beforehand via model execution.},
booktitle = {Proceedings of the XXXIII Brazilian Symposium on Software Engineering},
pages = {273–278},
numpages = {6},
keywords = {DSML, Executable Model, Executable UML, OOHDM, Papyrus},
location = {Salvador, Brazil},
series = {SBES '19}
}

@article{10.5555/2602724.2602752,
author = {Lipman, Derrell},
title = {LearnCS! a new, browser-based C programming environment for CS1},
year = {2014},
issue_date = {June 2014},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {29},
number = {6},
issn = {1937-4771},
abstract = {LearnCS! is a learning environment specifically written for use by first-year computer science students. It provides students with a browser-based programming and execution environment which contains a depiction of the notional machine for the C language, and contains a built-in debugger. Many error messages are customized to assist the beginning student of computer science. These features have seemingly yielded good results in improving students' comprehension of CS1 concepts.},
journal = {J. Comput. Sci. Coll.},
month = {jun},
pages = {144–150},
numpages = {7}
}

@inproceedings{10.1145/2361999.2362003,
author = {Mikkonen, Tommi and Nieminen, Antti},
title = {Elements for a cloud-based development environment: online collaboration, revision control, and continuous integration},
year = {2012},
isbn = {9781450315685},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2361999.2362003},
doi = {10.1145/2361999.2362003},
abstract = {In almost any other field than software development, the World Wide Web, or simply the Web has revolutionized collaboration by providing a platform for cooperative applications and services. In contrast, so far revision control, also referred to as version management, has been the key technology for enabling collaborative software development. However, even today it is feasible to build a cooperative development environment that runs in a cloud, following the spirit of Google Docs, where developers can cooperate in real time. In this paper, we take a step beyond from the design of the technical artifact that allows collaborative coding, and consider the consequences of such an approach to software development in a more general sense, in particular from the perspective of version management. The goal is to integrate collaborative development with traditional facilities commonly associated with software engineering. This in turn will lead to a development approach where new opportunities complement tools that are known to work and provide a lot of added value in software development.},
booktitle = {Proceedings of the WICSA/ECSA 2012 Companion Volume},
pages = {14–20},
numpages = {7},
keywords = {collaboration, revision control, version management},
location = {Helsinki, Finland},
series = {WICSA/ECSA '12}
}

@inproceedings{10.1145/3102113.3102117,
author = {Di Geronimo, Linda and Kalbermatter, Sandro and Norrie, Moira C.},
title = {End-user web development tool for tilting interactions},
year = {2017},
isbn = {9781450350839},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3102113.3102117},
doi = {10.1145/3102113.3102117},
abstract = {Tilting gestures allow end-users to use motion gestures to interact with their mobile devices. While there exist solutions for integrating motion gestures into web applications, they require programming skills to set up the gesture configuration. To allow end-users to easily introduce tilting interactions into their websites, we developed WP-TAT, a WordPress plugin that allows tilt-and-touch gestures to be easily integrated into WordPress websites without any programming. We present WP-TAT and show its potential by describing various demonstrator applications and reporting on a preliminary user study. Moreover, we also discuss how web applications could be adapted to cater for motion gestures.},
booktitle = {Proceedings of the ACM SIGCHI Symposium on Engineering Interactive Computing Systems},
pages = {9–14},
numpages = {6},
keywords = {end-user development, motion sensors, web interaction framework},
location = {Lisbon, Portugal},
series = {EICS '17}
}

@inproceedings{10.3115/1118808.1118817,
author = {Koontz, Eugene},
title = {XML in a web-based grammar development environment},
year = {2002},
publisher = {Association for Computational Linguistics},
address = {USA},
url = {https://doi.org/10.3115/1118808.1118817},
doi = {10.3115/1118808.1118817},
abstract = {Example-based Development of Grammars (EDG) is a natural language parsing and grammatical knowledge representation system, implemented in Common Lisp, that uses XML to display its output. The system parses sentences and allows querying and editing of its linguistic knowledge base. The system's response to user input is in XML, which is then transformed by an XSLT processor to form HTML, which is then displayed by the user's browser. The XML dialect used by the system to represent linguistic structure is described, together with details of how the XSLT stylesheet transforms it into HTML. Further information about the system, including an interactive demonstration of the system, may be found on the Web at http://edg.sf.net},
booktitle = {Proceedings of the 2nd Workshop on NLP and XML - Volume 17},
pages = {1–5},
numpages = {5},
series = {NLPXML '02}
}

@inproceedings{10.1145/3141880.3141906,
author = {Hynninen, Timo and Knutas, Antti and Kasurinen, Jussi},
title = {Plagiarism networks: finding instances of copied answers in an online introductory programming environment},
year = {2017},
isbn = {9781450353014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3141880.3141906},
doi = {10.1145/3141880.3141906},
abstract = {We followed the submissions of automatically evaluated weekly programming assignments on an introductory programming course and searched for identical solutions submitted by students. Our dataset covers three iterations of the course, from 2014 to 2016. From this systematic longitudinal sampling, we were able to scan for plagiarism patterns and build social networks of shared answers. As a result, we present the social networking graphs of identical student-submitted answers over the past three years in which the course has been arranged.},
booktitle = {Proceedings of the 17th Koli Calling International Conference on Computing Education Research},
pages = {187–188},
numpages = {2},
keywords = {CS1, computer science education, online exercises, plagiarism},
location = {Koli, Finland},
series = {Koli Calling '17}
}

@inproceedings{10.1145/1497308.1497368,
author = {Kryvinska, Natalia and Strauss, Christine and Auer, Lukas and Zinterhof, Peter},
title = {Conceptual framework for services creation/development environment in telecom domain},
year = {2008},
isbn = {9781605583495},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1497308.1497368},
doi = {10.1145/1497308.1497368},
abstract = {The telecom service providers (fixed and mobile) understand that they must bring in new smart services in order to attract new customers, retain existing ones and increase revenue. The challenges and goals for doing so are as follows: determining which services are needed; introducing more services in a faster manner and at lower costs; delivering innovative services in a way that allows existing users to migrate smoothly to new ones. These goals could not be achieved with traditional closed and proprietary network infrastructure, as the vendor lock-in involved in that infrastructure results in limited scope of services, and dependency on old business models. New services require a much greater degree of system flexibility, performance and scalability, as well as open standards. Next Generation Network (NGN) provide the means for enabling agile service creation capabilities that facilitate better user experiences by integrating both new and legacy services across any access. However, NGNs involve complex structures even for simple services as they consist of a large number of building blocks and necessitate hierarchical models with a lot of parallel subsystems. Thus, particular attention has to be paid to understanding and modelling the performance of these systems. The rationale of this paper lies in developing a design and engineering methodology (based on a mathematical foundation) that addresses the service creation aspects for those fields in which traditional approaches will not work for NGNs.},
booktitle = {Proceedings of the 10th International Conference on Information Integration and Web-Based Applications &amp; Services},
pages = {324–331},
numpages = {8},
keywords = {hierarchical modeling, next generation network (NGN), parallel queues, queuing theory, service creation environment (SCE), service delivery platform (SDP)},
location = {Linz, Austria},
series = {iiWAS '08}
}

@inproceedings{10.1145/1984701.1984704,
author = {Singer, Leif and Schneider, Kurt},
title = {Supporting the cooperation of end-user programmers through social development environments},
year = {2011},
isbn = {9781450305952},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1984701.1984704},
doi = {10.1145/1984701.1984704},
abstract = {Many programs are being created by end-users without formal training in programming. Spreadsheets are the most popular environment for this, but mashups which combine public services into new, albeit small applications are also becoming more and more popular. Research shows that end-user programmers make potentially costly mistakes. Yet initiatives that aim at bringing software engineering principles to end-users are still rudimentary. In particular, we see much unused potential in approaches that foster and support the cooperation among end-user programmers. Whereas the application of mechanisms from social software to software engineering problems is gaining traction, this has not yet been investigated sufficiently for end-user software engineering.This paper discusses how insights from Communities of Practice research may be implemented using mechanisms from recent developments in social software. From the implementation of the presented social mechanisms, we expect an improvement in cooperation and mutual help in communities of end-user programmers. We plan to combine this approach with lightweight variations of software engineering methods targeted at end-user programmers. This should lead to higher quality in the programs developed by these end-users, as good practices are more likely to spread.},
booktitle = {Proceedings of the 2nd International Workshop on Web 2.0 for Software Engineering},
pages = {13–18},
numpages = {6},
keywords = {community of practice, end-user development, mashups, services, social software},
location = {Waikiki, Honolulu, HI, USA},
series = {Web2SE '11}
}

@inproceedings{10.1145/3456887.3457496,
author = {Zhang, Rongfeng},
title = {Design of Integrated Courseware Development Environment for Computer Education Based on Online Evaluation System},
year = {2021},
isbn = {9781450389969},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3456887.3457496},
doi = {10.1145/3456887.3457496},
abstract = {Distance education based on computer has become the main part of modern education in our country, which has contributed to the popularization of higher education and the improvement of teaching quality. However, at the same time, there are still many deficiencies in the opening of the existing computer education system courseware. Therefore, this paper puts forward a research on the design of integrated courseware development environment for computer education based on online evaluation system. This paper makes a detailed analysis of the classification and selection of computer education courseware, and points out the main problems existing in the existing courseware mode. In view of these shortcomings, according to the characteristics of computer education courseware, this paper puts forward the optimization design of online evaluation system. In this paper, the development ideas and objectives of the integrated courseware system are further studied. SCORM content aggregation model is used to effectively manage the micro teaching units in the courseware. Especially after the establishment of the classroom management module, the computer distance education becomes more flexible. In the application of courseware, it can be combined according to the needs, which greatly expands the computer education department the practicability of the system. The analysis shows that the computer integrated courseware management scheme based on online evaluation system not only improves the courseware editing and demonstration ability of the computer education system, but also greatly improves the comprehensive performance of the system. The teaching effect can be evaluated in real time, so that the students' learning efficiency is higher.},
booktitle = {2021 2nd International Conference on Computers, Information Processing and Advanced Education},
pages = {1231–1234},
numpages = {4},
keywords = {Computer Courseware, Computer Networks, Distance Education, Online Evaluation System},
location = {Ottawa, ON, Canada},
series = {CIPAE 2021}
}

@inproceedings{10.1145/2428736.2428782,
author = {Salinas, C. J. Torrecilla and Escalona, M. J. and Mej\'{\i}as, M.},
title = {A scrum-based approach to CMMI maturity level 2 in web development environments},
year = {2012},
isbn = {9781450313063},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2428736.2428782},
doi = {10.1145/2428736.2428782},
abstract = {Scrum has become one of the most popular agile methodologies, either alone or combined with other agile practices. Besides, CMMI (Capability Maturity Model Integration) is accepted as a suitable model to measure the maturity of the organizations when developing or acquiring software. Although these two approaches are often considered antagonist, the use of an agile approach to reach certain CMMI maturity levels may result beneficial to organizations that develop Web systems, since they would take the advantages of both approaches. In Web community, this union may be very interesting, because agile approaches fits with the special needs of Web development, and they could be a useful tool for companies getting a certain grade of maturity. This work analyzes the goals of CMMI maturity level 2 and the feasibility of achieving them using the practices proposed by Scrum, trying to assess whether the use of this methodology is suitable for meeting the CMMI generic and specific goals or not. Finally, and based on this analysis, this paper raises a possible extension of Scrum, based on agile techniques, to accommodate the CMMI maturity level 2.},
booktitle = {Proceedings of the 14th International Conference on Information Integration and Web-Based Applications &amp; Services},
pages = {282–285},
numpages = {4},
keywords = {CMMI (capability maturity model integration), Scrum, agile methodologies, web engineering},
location = {Bali, Indonesia},
series = {IIWAS '12}
}

@inproceedings{10.1145/1810295.1810330,
author = {van Deursen, Arie and Mesbah, Ali and Cornelissen, Bas and Zaidman, Andy and Pinzger, Martin and Guzzi, Anja},
title = {Adinda: a knowledgeable, browser-based IDE},
year = {2010},
isbn = {9781605587196},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1810295.1810330},
doi = {10.1145/1810295.1810330},
abstract = {In practice, many people have to work together to develop and maintain a software system. However, the programmer's key tool, the Integrated Development Environment (IDE), is a solo-tool, serving to help individual programmers understand and modify the system. Such an IDE does not leverage the knowledge other team members may have of the design and implementation of the system. We propose to resolve this problem by exploring, experimentally, new ways of inferring knowledge from past IDE-interactions, and of maximizing collaboration among developers. Our approach, called Adinda, revolves around transforming the IDE into a set of integrated services, accessible via a web browser, and enriched with Web 2.0 technologies. Such services will not only help developers perform traditional IDE tasks, but also facilitate the required informal communication and collaboration needs of software development projects. In this paper, we report on our vision, approach and challenges for building Adinda, and initial results.},
booktitle = {Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering - Volume 2},
pages = {203–206},
numpages = {4},
keywords = {IDE, Web 2.0, collaboration, interaction mining, programming environments},
location = {Cape Town, South Africa},
series = {ICSE '10}
}

@article{10.1145/1821982.1821984,
author = {Landay, Susan},
title = {Online Learning 101: Part I: Authoring and Course Development Tools},
year = {2010},
issue_date = {June 2010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2010},
number = {6},
url = {https://doi.org/10.1145/1821982.1821984},
doi = {10.1145/1821982.1821984},
abstract = {The first part of this three-part series focuses on authoring and course development tools and techniques for integrating e-learning. In Part II, Susan Landay explores games and interactivity solutions for e-learning. Part III looks at tools used for web conferencing, as well as learning-management systems.},
journal = {ELearn},
month = {jun},
articleno = {2}
}

@inproceedings{10.1145/2076006.2076012,
author = {Chang, Jian and Venkatasubramanian, Krishna and West, Andrew G. and Kannan, Sampath and Sokolsky, Oleg and Kim, Myuhng Joo and Lee, Insup},
title = {ToMaTo: a trustworthy code mashup development tool},
year = {2011},
isbn = {9781450308236},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2076006.2076012},
doi = {10.1145/2076006.2076012},
abstract = {Recent years have seen the emergence of a new programming paradigm for Web applications that emphasizes the reuse of external content, the mashup. Although the mashup paradigm enables the creation of innovative Web applications with emergent features, its openness introduces trust problems. These trust issues are particularly prominent in JavaScript code mashup -- a type of mashup that integrated external Javascript libraries to achieve function and software reuse. With JavaScript code mashup, external libraries are usually given full privileges to manipulate data of the mashup application and executing arbitrary code. This imposes considerable risk on the mashup developers and the end users.One major causes for these trust problems is that the mashup developers tend to focus on the functional aspects of the application and implicitly trust the external code libraries to satisfy security, privacy and other non-functional requirements. In this paper, we present ToMaTo, a development tool that combines a novel trust policy language and a static code analysis engine to examine whether the external libraries satisfy the non-functional requirements. ToMaTo gives the mashup developers three essential capabilities for building trustworthy JavaScript code mashup: (1) to specify trust policy, (2) to assess policy adherence, and (3) to handle policy violation. The contributions of the paper are: (1) a description of JavaScript code mashup and its trust issues, and (2) a development tool (ToMaTo) for building trustworthy JavaScript code mashup.},
booktitle = {Proceedings of the 5th International Workshop on Web APIs and Service Mashups},
articleno = {5},
numpages = {8},
keywords = {JavaScript, code analysis, mashup, trust},
location = {Lugano, Switzerland},
series = {Mashups '11}
}

@inproceedings{10.1145/3351556.3351586,
author = {Cico, Orges and Cico, Betim},
title = {Reliable Cloud Software Development Architectures and Business Models Case Study: RIDEaaS and GAE Launcher},
year = {2019},
isbn = {9781450371933},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3351556.3351586},
doi = {10.1145/3351556.3351586},
abstract = {Development of cloud applications directly on the cloud infrastructure has become a common approach. Reliability concerns have also become more of a challenge during the last years. Our goal is to assert the potentials deriving from an integrated development environment, adopting software reliability concepts and fault tolerant techniques, as part of the cloud core services. As a methodology, we propose the implementation of a new cloud service Reliable Integrated Development Environment as a Service to become part of the existing core services. Our objectives are to 1) fulfill the need of having a development environment independent from personal desktop environments; 2) code development environment should be offered directly from the cloud service providers. With fault tolerant technique integration, we also suggest that the reliability of the cloud system should be handled from the cloud developers at software level when cloud quality assurance services fail to do so at their different levels. We also propose potential business models to become part of this core service for the major cloud providers. We introduce a new High Availability Coding model providing a roadmap for the future.},
booktitle = {Proceedings of the 9th Balkan Conference on Informatics},
articleno = {32},
numpages = {8},
keywords = {Cloud systems, cloud SDK, cloud software development, reliable integrated development environment},
location = {Sofia, Bulgaria},
series = {BCI'19}
}

@inproceedings{10.1145/1753326.1753402,
author = {Brandt, Joel and Dontcheva, Mira and Weskamp, Marcos and Klemmer, Scott R.},
title = {Example-centric programming: integrating web search into the development environment},
year = {2010},
isbn = {9781605589299},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1753326.1753402},
doi = {10.1145/1753326.1753402},
abstract = {The ready availability of online source-code examples has fundamentally changed programming practices. However, current search tools are not designed to assist with programming tasks and are wholly separate from editing tools. This paper proposes that embedding a task-specific search engine in the development environment can significantly reduce the cost of finding information and thus enable programmers to write better code more easily. This paper describes the design, implementation, and evaluation of Blueprint, a Web search interface integrated into the Adobe Flex Builder development environment that helps users locate example code. Blueprint automatically augments queries with code context, presents a code-centric view of search results, embeds the search experience into the editor, and retains a link between copied code and its source. A comparative laboratory study found that Blueprint enables participants to write significantly better code and find example code significantly faster than with a standard Web browser. Analysis of three months of usage logs with 2,024 users suggests that task-specific search interfaces can significantly change how and when people search the Web.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {513–522},
numpages = {10},
keywords = {example-centric development},
location = {Atlanta, Georgia, USA},
series = {CHI '10}
}

@inproceedings{10.1145/2316936.2316947,
author = {Piteira, Martinha and Costa, Carlos and Haddad, Samir R.},
title = {Educational computer programming tools},
year = {2012},
isbn = {9781450315258},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2316936.2316947},
doi = {10.1145/2316936.2316947},
abstract = {Learn programming is a challenging task for many students. Based on this complex challenge educators face problems with unmotivated students and high level drop-out. Technological and pedagogical strategies are recommended to overcome these issues. Technological strategies for instance use educational tools to support teach and learn computer programming topics.Based on these issues were defined the followings objectives for this work: 1) educational computer programming tools identification; 2) tools categorization 3) Programming concepts tools identification; 4) Related the low and high level comprehension computer programming topics with educational tools.To achieve the objectives was performed an extensive online search by educational computer programming tools.The aim of this work in progress is the identification of the main tools and his characterization.},
booktitle = {Proceedings of the Workshop on Open Source and Design of Communication},
pages = {57–60},
numpages = {4},
keywords = {computer programming, novice programming environments, online educational tools},
location = {Lisboa, Portugal},
series = {OSDOC '12}
}

@inproceedings{10.1145/3159450.3162381,
author = {Sharrock, Remi and Gaultier, Baptiste and Taylor, Petra and Goudzwaard, Michael and Hiron, Mathias and Hamonic, Ella},
title = {Coding Tutorials for any Programming Language or Interactive Tutorials for C and Arduino: (Abstract Only)},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3162381},
doi = {10.1145/3159450.3162381},
abstract = {Any CS educator has to explain sooner or later a portion of code or a structured text to learners. The Codecast tool http://www.codecast.info has been specially designed by CS educators and developed initially for MOOCs to replace non-interactive screencasts. This workshop is a hands-on lab to Codecast: an open-source innovative tool to create in-browser interactive coding tutorials. Codecast supports syntax highlighting for over 110 languages and as of 2017 can compile/interpret and execute a subset of the C and Arduino languages. In this workshop, participants will explore how, using our Codecast tool, a CS educator can explain the creation of a computer program while their audio as well as their interactions with the code editor and interpreter are being recorded for interactive playback. Workshop participants will furthermore experience how different aspects of the coding process like testing, running, debugging and optimizing can be illustrated with the help of several data, memory and algorithm visualization modules. Participants will create recordings and experience (like learners) how they can be played back interactively by taking control over and modify the coding process at any time. Codecast enables the learner to interact directly with the code and experiment with different ideas while listening to the instructor's explanation. The learner can make changes to the code, test it with different inputs, run the code step-by-step to better understand its behavior and visualize other parts of the algorithm or the data. Workshop participants will also integrate their creations in their online curricula.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {1051},
numpages = {1},
keywords = {c programming language, code editor, coding tutorials, computer science education, integrated development environment, interactive tutorials, mooc, online courses, programming editor},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@article{10.5555/1734797.1734799,
author = {Jenkins, Jam and Meso, Peter and Brannock, Evelyn and Dekhane, Sonal},
title = {JavaWIDE: innovation in an online IDE},
year = {2010},
issue_date = {April 2010},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {25},
number = {4},
issn = {1937-4771},
abstract = {Over the past decade applications have been moving from the desktop into the cloud. Only relatively recently have integrated development environments begun emerging in cloud computing. The Java Wiki Integrated Development Environment (JavaWIDE) is one of these new online IDEs, and it is designed to be simple enough for novice programmers to use. JavaWIDE is free and provides anyone the capability to create, edit and run programs anytime, anywhere, all from within a web browser -- no specialized software required. JavaWIDE promotes collaboration, integrates well with social networking sites, and includes novel features such as concurrent editing support, a common code base for all users, revision history explorer, automatic posting of programs as applets, annotated and hyperlinked source code, an integrated Java API and many others.},
journal = {J. Comput. Sci. Coll.},
month = {apr},
pages = {6},
numpages = {1}
}

@article{10.5555/2037151.2037170,
author = {Hall, Mark S.},
title = {Java WIDE - Java Wiki Integrated Development environment: nifty tools and assignments},
year = {2011},
issue_date = {October 2011},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {27},
number = {1},
issn = {1937-4771},
abstract = {Over the past decade applications have been moving from the desktop into the cloud. After extensive searching, the only integrated development environments has emerged in cloud computing. The Java Wiki Integrated Development Environment (JavaWIDE) is the new online IDEs, and it is designed to be simple enough for novice programmers to use.},
journal = {J. Comput. Sci. Coll.},
month = {oct},
pages = {91},
numpages = {1}
}

@article{10.5555/2831373.2831399,
author = {Carter, Adam S. and Hundhausen, Christopher D.},
title = {The design of a programming environment to support greater social awareness and participation in early computing courses},
year = {2015},
issue_date = {October 2015},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {31},
number = {1},
issn = {1937-4771},
abstract = {Given the growing and widespread use of online social networking tools, coupled with social learning theory's emphasis on learning through social participation in a community, we believe there is good reason to pursue the development of educational programming environments that support increased social interaction among learners. To that end, we have been exploring the design of a "social programming environment" to support students as they work on individual programming assignments, which are common in early computing courses. We present the design of OSBIDE, an Integrated Development Environment (IDE) plug-in that supports many common features of social networking environments, including an activity feed and a social recommender system that identifies learners who have encountered similar programming issues. We describe the iterative refinement of OSBIDE through its multi-semester deployment in CS 1 and CS 2 courses. Preliminary results indicate that students are generally enthusiastic about the environment's ability to make programming more social. OSBIDE lays a strong foundation for future research into the relationships between learners' programming and social activities, and their learning outcomes. It also has the potential to provide instructors with powerful resources for identifying and assisting struggling students.},
journal = {J. Comput. Sci. Coll.},
month = {oct},
pages = {143–153},
numpages = {11}
}

@inproceedings{10.1145/3408877.3439579,
author = {Ceci, Alana and Tavante, Hanneli C. A. and Pientka, Brigitte and Si, Xujie},
title = {Data Collection for the Learn-OCaml Programming Platform: Modelling How Students Develop Typed Functional Programs},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3439579},
doi = {10.1145/3408877.3439579},
abstract = {Online programming platforms provide unique opportunities to collect and analyze a wealth of information on how students develop programs. In this work, we give an overview of the data collection infrastructure for the Learn-OCaml programming environment which allows students to write, typecheck and run OCaml code directly in their browser. We collect data for three different events: compile reads student's code and type-checks it; eval compiles and evaluates the code; grade runs the auto-grader on the student's well-typed program and provides feedback on the input-output correctness and code style. The data which we aim to gather across semesters serves as a basis for a wide variety of future studies on understanding how students develop programs in the context of typed functional programming.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {1341},
numpages = {1},
keywords = {functional programming, online programming environments},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@article{10.5555/1858583.1858622,
author = {Jenkins, Jam and Brannock, Evelyn and Heinz, Adrian and Dekhane, Sonal},
title = {JavaWIDE: innovation in an online IDE: tutorial presentation},
year = {2010},
issue_date = {December 2010},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {26},
number = {2},
issn = {1937-4771},
abstract = {Over the past decade applications have been moving from the desktop into the cloud. Only relatively recently have integrated development environments begun emerging in cloud computing. The Java Wiki Integrated Development Environment (JavaWIDE) is one of these new online IDEs, and it is designed to be simple enough for novice programmers to use. JavaWIDE is free and provides anyone the capability to create, edit and run programs anytime, anywhere, all from within a web browser -- no specialized software required. JavaWIDE promotes collaboration, integrates well with social networking sites, and includes novel features such as concurrent editing support (multiple people can edit the same code at the same time), a common code base for all users, revision history explorer, automatic posting of programs as applets, hyperlinked source, an integrated Java API and many others.},
journal = {J. Comput. Sci. Coll.},
month = {dec},
pages = {248–250},
numpages = {3}
}

@inproceedings{10.1145/3126594.3126663,
author = {Zhang, Xiong and Guo, Philip J.},
title = {DS.js: Turn Any Webpage into an Example-Centric Live Programming Environment for Learning Data Science},
year = {2017},
isbn = {9781450349819},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3126594.3126663},
doi = {10.1145/3126594.3126663},
abstract = {Data science courses and tutorials have grown popular in recent years, yet they are still taught using production-grade programming tools (e.g., R, MATLAB, and Python IDEs) within desktop computing environments. Although powerful, these tools present high barriers to entry for novices, forcing them to grapple with the extrinsic complexities of software installation and configuration, data file management, data parsing, and Unix-like command-line interfaces. To lower the barrier for novices to get started with learning data science, we created DS.js, a bookmarklet that embeds a data science programming environment directly into any existing webpage. By transforming any webpage into an example-centric IDE, DS.js eliminates the aforementioned complexities of desktop-based environments and turns the entire web into a rich substrate for learning data science. DS.js automatically parses HTML tables and CSV/TSV data sets on the target webpage, attaches code editors to each data set, provides a data table manipulation and visualization API designed for novices, and gives instructional scaffolding in the form of bidirectional previews of how the user's code and data relate.},
booktitle = {Proceedings of the 30th Annual ACM Symposium on User Interface Software and Technology},
pages = {691–702},
numpages = {12},
keywords = {data science, live programming, novice programmers},
location = {Qu\'{e}bec City, QC, Canada},
series = {UIST '17}
}

@article{10.5555/2379703.2379730,
author = {Hall, Mark S.},
title = {JavaWIDE (Wiki Integrated Development Environment: redesigning CS1 distance education labs},
year = {2012},
issue_date = {October 2012},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {28},
number = {1},
issn = {1937-4771},
abstract = {Over the past decade, applications have been moving from the desktop into the cloud. After extensive searching, only one integrated development environments (IDE) has emerged that works in cloud computing. The Java Wiki Integrated Development Environment (JavaWIDE) is the new online IDEs, and it is designed to be simple enough for novice programmers to use. The emergence of this tool was the key design element into redesigning CS1 Labs for a distance education course without losing the necessary functionality of a face-to-face instructor.},
journal = {J. Comput. Sci. Coll.},
month = {oct},
pages = {147},
numpages = {1}
}

@article{10.5555/1747137.1747155,
author = {Jenkins, Jam and Brannock, Evelyn and Dekhane, Sonal},
title = {JavaWIDE: innovation in an online IDE: tutorial presentation},
year = {2010},
issue_date = {May 2010},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {25},
number = {5},
issn = {1937-4771},
abstract = {Over the past decade applications have been moving from the desktop into the cloud. Only relatively recently have integrated development environments begun emerging in cloud computing. The Java Wiki Integrated Development Environment (JavaWIDE) is one of these new online IDEs, and it is designed to be simple enough for novice programmers to use. JavaWIDE is free and provides anyone the capability to create, edit and run programs anytime, anywhere, all from within a web browser -- no specialized software required. JavaWIDE promotes collaboration, integrates well with social networking sites, and includes novel features such as concurrent editing support, a common code base for all users, revision history explorer, automatic posting of programs as applets, annotated and hyperlinked source code, an integrated Java API and many others. This workshop is presented by the developer of JavaWIDE Jam Jenkins, by Evelyn Brannock who has used JavaWIDE in the classroom, and by Sonal Dekhane who has surveyed students about their perceptions of using JavaWIDE.},
journal = {J. Comput. Sci. Coll.},
month = {may},
pages = {102–104},
numpages = {3}
}

@inproceedings{10.1145/2542050.2542083,
author = {Diep, Chi-Kien and Tran, Quynh-Nhu and Tran, Minh-Triet},
title = {Online model-driven IDE to design GUIs for cross-platform mobile applications},
year = {2013},
isbn = {9781450324540},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2542050.2542083},
doi = {10.1145/2542050.2542083},
abstract = {The wide variation in features and capabilities of mobile devices lead to difficulties in the development of the same application on different platforms. Therefore we propose an online model-driven integrated development environment to provide developers with a platform-independent GUI design for mobile applications. Our proposed system transforms an abstract platform-independent GUI into a platform-dependent GUI on a target platform. The generated project is entirely in the form with which an experienced developer on the platform is already familiar. Furthermore, as the generated application is not a web-based one, it can access naturally native features of a platform. The proposed flexible architecture enable the capability to handle and update different abstract UI and non-UI controls needed to design GUIs for mobile applications. Experimental results with volunteers show that our proposed solution can save up to 25--51% time to create GUIs of an application to three different platforms of Android, iOS and Windows Phone.},
booktitle = {Proceedings of the 4th Symposium on Information and Communication Technology},
pages = {294–300},
numpages = {7},
keywords = {GUI design, mobile HCI, online IDE, software development tool},
location = {Danang, Vietnam},
series = {SoICT '13}
}

@inproceedings{10.1145/3626252.3630913,
author = {Jefferson, Thomas and Gregg, Chris and Piech, Chris},
title = {PyodideU: Unlocking Python Entirely in a Browser for CS1},
year = {2024},
isbn = {9798400704239},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626252.3630913},
doi = {10.1145/3626252.3630913},
abstract = {In this paper, we present an education-focused Python IDE and runtime library which can run entirely in desktop, laptop, tablet, and mobile device web browsers. Our solution provides features useful for an engaging CS1 course, and eliminates the need for a server-based runtime. We describe a new, open source, methodology for running interactive Python entirely in the browser by solving the "WebAssembly blocking problem," a core technical challenge to a web-based Python solution.Because our method enables Python entirely in the browser, it unlocks many new features. For example, students can share their code with others, without incurring extra costs to the instructors or institutions. Other features include line by line code highlighting as a program executes, highly intuitive interactive graphics, mouse and touch integration, and use of a wide selection of Python modules such as Numpy and Pandas. Currently, our IDE has been used in 5 classes, covering more than 10,000 students and teachers, with over 350,000 projects created. We found that students and instructors appreciated the variety of tools and abilities the IDE made possible. We benchmark the performance of running code with our method against other online Python solutions and we discuss the benefits and additional possibilities that our method allows, such as mobile device and/or offline code execution. We provide full free public access to our IDE and open source the core libraries which enable the conversion of student written Python to WebAssembly.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 1},
pages = {583–589},
numpages = {7},
keywords = {cs1, ide, integrated development environment, mobile, python, web browser, webassembly},
location = {<conf-loc>, <city>Portland</city>, <state>OR</state>, <country>USA</country>, </conf-loc>},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/3441852.3476553,
author = {Rocha, Filipa and Guimar\~{a}es, Guilherme and Gon\c{c}alves, David and Pires, Ana Cristina and Abreu, L\'{u}cia Ver\'{o}nica and Guerreiro, Tiago},
title = {Fostering collaboration with asymmetric roles in accessible programming environments for children with mixed-visual-abilities},
year = {2021},
isbn = {9781450383066},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3441852.3476553},
doi = {10.1145/3441852.3476553},
abstract = {Introduction of computational thinking training in early childhood potentiates cognitive development and better prepares children to live and prosper in a future heavily computational society. Programming environments are now widely adopted in classrooms to teach programming concepts. However, these tools are often reliant on visual interaction, making them inaccessible to children with visual impairments. Also, programming environments in general are usually designed to promote individual experiences, wasting the potential benefits of group collaborative activities. We propose the design of a programming environment that leverages asymmetric roles to foster collaborative computational thinking activities for children with visual impairments, in particular mixed-visual-ability classes. The multimodal system comprises the use of tangible blocks and auditory feedback, while children have to collaborate to program a robot. We conducted a remote online study, collecting valuable feedback on the limitations and opportunities for future work, aiming to potentiate education and social inclusion.},
booktitle = {Proceedings of the 23rd International ACM SIGACCESS Conference on Computers and Accessibility},
articleno = {67},
numpages = {4},
keywords = {accessible, children, collaboration, robot, tangible, visually impaired},
location = {<conf-loc>, <city>Virtual Event</city>, <country>USA</country>, </conf-loc>},
series = {ASSETS '21}
}

@inproceedings{10.1145/3478431.3499379,
author = {Al-Gahmi, Abdulmalek and Zhang, Yong and Valle, Hugo},
title = {Jupyter in the Classroom: An Experience Report},
year = {2022},
isbn = {9781450390705},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3478431.3499379},
doi = {10.1145/3478431.3499379},
abstract = {Jupyter is an interactive web-based programming environment commonly used by Python programmers and data scientists. It can be used in the classroom either by itself or in addition to a traditional programming environment. This paper documents our experience using Jupyter in multiple computer science courses in a public four-year university using different programming languages (Java, C++, and Python). It describes our motivations for using Jupyter in these courses and how it is made available to students. It also describes the different roles it plays in our pedagogical approaches and the challenges it poses to both instructors and students. A report is presented on the preliminary experimentation conducted to evaluate its effectiveness in improving student performance. While our tests are limited by small sample sizes and did not show that using Jupyter produces a statistically significant improvement in student performance, qualitative analysis of student responses showed the usefulness of this tool in revitalizing teaching and keeping students engaged.},
booktitle = {Proceedings of the 53rd ACM Technical Symposium on Computer Science Education - Volume 1},
pages = {425–431},
numpages = {7},
keywords = {development environment, jupyter, web-based interactive coding},
location = {Providence, RI, USA},
series = {SIGCSE 2022}
}

@inproceedings{10.1145/3545947.3576357,
author = {Gardner-McCune, Christina and Jimenez, Yerika and Magda, David and Kulkarni, Abhishek and Chu, Sharon},
title = {Towards an Adaptable Curriculum-Driven Block-based Learning Environment},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3576357},
doi = {10.1145/3545947.3576357},
abstract = {In this poster, we present the design of a browser-based Arduino programming tool, CASMM, to support computational thinking and making in science classrooms. This tool allows for unique integration of research tools, lesson planning, and scaffolding for learning computational thinking concepts and block-based programming. This poster will describe four key features of a block-based LMS: (1) reduced-scoped programming toolbox, (2) block locking, (3) lesson plans and starter code templates; and (4) low-tech code replay for researchers. Through discussion of this tool, we aim to catalyze conversations about integrating new scaffolding techniques into block-based programming environments to better support classroom use and research.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1414},
numpages = {1},
keywords = {arduino, block-based programming environment, computational thinking, computing education, k-12, learning mangement system (lms), programming, scaffolding, science integration},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1109/ESEM.2017.27,
author = {Wang, Yi},
title = {Characterizing developer behavior in cloud based IDEs},
year = {2017},
isbn = {9781509040391},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ESEM.2017.27},
doi = {10.1109/ESEM.2017.27},
abstract = {Background: Cloud based integrated development environments (IDEs) are rapidly gaining popularity for its native support and potential to accelerate DevOps. However, there is little research of how developers behave when interacting with these environments.Aims: To develop empirical knowledge about how developers behave when interacting with cloud based IDEs to deal with programming tasks at various difficulty levels.Method: We conducted a user study using a cloud based IDE, JazzHub. We collected and coded session trace data, self-reported effort and frustration levels, and screen recordings.Results: We built a Markov activity transition model that describes the transitions among common development activities such as coding, debugging, and searching for information. It also captures extended interactions with remote resources. We correlated activity transition with different code growth trajectories. Conclusion: The findings are an early step toward realizing the potential for enhanced interactions in cloud based IDEs. Our study provides empirical evidence that may inspire the future evolution of cloud based IDE designs and features.},
booktitle = {Proceedings of the 11th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
pages = {48–57},
numpages = {10},
keywords = {activity transition, cloud based IDE, code growth trajectory, developer behavior},
location = {Markham, Ontario, Canada},
series = {ESEM '17}
}

@inproceedings{10.1145/2839509.2844692,
author = {Franke, Baker and Filman, Sarah and Osborne, Brook},
title = {JavaScript Applications for CS0/CS1: Getting Hands-on with Code.org's App Lab (Abstract Only)},
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2844692},
doi = {10.1145/2839509.2844692},
abstract = {App Lab (https://code.org/applab) is Code.org's rapid-prototyping environment for creating HTML, CSS, and JavaScript-powered web applications. It was created as part of a rich set of instructional resources designed for teachers of the new AP Computer Science Principles (CSP) course. Yet, App Lab far exceeds the needs of CSP, and would be an appropriate learning environment for students in any CS0/CS1 class, even at the university level. App Lab gives novice programmers access to capabilities previously reserved for courses that require sophisticated tech setup and knowledge of both front and backend web development, server-side scripting, databases, etc.Rather than focusing on curriculum, this workshop will focus on how App Lab works as a programming tool in its own right, and how it was designed to aid and motivate student learning. Participants will get hands-on time with some of App Lab's more advanced features guided by a Code.org product manager, while working with the education team to help understand the educational philosophy that went into its development. Participants will come away with exemplars that highlight App Lab's possibilities, practice with some of its richer features, and do a hackathon to create something to share with each other (and the world)! Finally, we will end with a discussion about how best to integrate App Lab into existing courses.App Lab was developed as part of collaboration between Code.org and David Bau (Google), creator of PencilCode.net.A laptop is required for this session. All other materials will be provided.},
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
pages = {719},
numpages = {1},
keywords = {app lab, code.org, cs0, cs1, javascript, programming environment, web development},
location = {Memphis, Tennessee, USA},
series = {SIGCSE '16}
}

@inproceedings{10.1145/3017680.3022387,
author = {Broll, Brian and Ledeczi, Akos},
title = {Bringing Real-Time Collaboration to Visual Programming (Abstract Only)},
year = {2017},
isbn = {9781450346986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3017680.3022387},
doi = {10.1145/3017680.3022387},
abstract = {Visual programming environments have been effective educational resources but are typically limited to a single user at a time. Given the amount of collaboration in modern software development and the value of group projects for beginner programmers, providing collaboration capabilities could be invaluable for students using a block-based programming environment. Online collaboration support would not only allow students to more actively work together on projects but would also facilitate other educational activities such as tutoring and interactive demos. Moreover, providing robust collaboration utilities allows the programming environment to more closely reflect the team-based nature of large scale, real-world programming projects. Note that collaborative editing offers a number of additional benefits under the hood: the same underlying software code can easily provide detailed logging of student actions and the capability to replay them. That is, researchers will be able to study how students solve problems and not just the end result. To this end, we have extended the Snap! visual programming environment to support real-time collaboration similar to Google Docs. In our model of collaboration, sprites and scripts can be edited by multiple users simultaneously, but the execution of the programs on the stage remains local. But is this the best collaboration model for students? If not, what alternative model would be better? Should the entire programming environment be synchronized across collaborators? Would simple screen sharing be more effective? Finally, how can we leverage a real-time collaborative environment to promote teamwork on programming projects?},
booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education},
pages = {699},
numpages = {1},
keywords = {Snap!, computer science education, visual programming},
location = {Seattle, Washington, USA},
series = {SIGCSE '17}
}

@inproceedings{10.1145/330560.331079,
author = {Jung, Reinhard and Winter, Robert},
title = {CASE for Web sites: towards an integration of traditional case concepts and novel development tools},
year = {1998},
isbn = {0897919696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/330560.331079},
doi = {10.1145/330560.331079},
booktitle = {Proceedings of the 1998 ACM Symposium on Applied Computing},
pages = {726–731},
numpages = {6},
keywords = {CASE, Internet-based systems, requirements, tools},
location = {Atlanta, Georgia, USA},
series = {SAC '98}
}

@inproceedings{10.1145/2839509.2850509,
author = {Olivares, Daniel M. and Hundhausen, Christopher D.},
title = {OSBLE+: A Next-Generation Learning Management and Analytics Environment for Computing Education},
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2850509},
doi = {10.1145/2839509.2850509},
abstract = {In order best to support learning analytics in computing education, learning management systems (LMS) should be interfaced with computer programming environments, in which computing students spend much of their time. To this end, we have developed OSBLE+, an outgrowth of the OSBLE (Online Studio- Based Learning Environment) LMS we have been developing over the past eight years. OSBLE+ supports two innovations that make it particularly well-suited to supporting learning analytics in computing education. First, it connects to the Microsoft Visual Studio computer programming environment via a plugin that gives it access to all programming process data within Visual Studio, including edits, compilation attempts, compilation errors, debugging attempts, and run-time exceptions. This enables OSBLE+ to provide students and instructors with a visual analytics environment in which they can explore, compare, and contrast the programming activities of students in the class. Second, the plugin turns Visual Studio into a social programming environment by injecting into it a social media-style activity stream, which enables students (a) to pose and answer programming questions, and (b) to see and explore the programming activities of their peers. Students' social activities within the activity stream are sent to OSBLE+, and are subsequently included as data in the visual analytics environment. OSBLE+ is open source and freely hosted at http://plus.osble.org. While OSBLE+ presently interfaces only with Visual Studio, a plug-in for the Eclipse programming environment is under active development.},
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
pages = {5},
numpages = {1},
keywords = {CS ed, learning analytics, learning management systems, programming, social process data, social programming},
location = {Memphis, Tennessee, USA},
series = {SIGCSE '16}
}

@inproceedings{10.1145/3027063.3053268,
author = {Lee, Sang Won and Chen, Yan and Klugman, Noah and Gouravajhala, Sai R. and Chen, Angela and Lasecki, Walter S.},
title = {Exploring Coordination Models for Ad Hoc Programming Teams},
year = {2017},
isbn = {9781450346566},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3027063.3053268},
doi = {10.1145/3027063.3053268},
abstract = {Software development is a complex task with inherently interdependent sub-components. Prior work on crowdsourcing software engineering has addressed this problem by performing an a priori decomposition of the task into well-defined microtasks that individual crowd workers can complete independently. Alternatively, ad hoc teams of experts recruited from online crowds can remotely collaborate, avoiding the up-front cost to end users of task decomposition. However, these temporary ad hoc teams can lead to high coordination costs during the session itself. In this paper, we explore the types and causes of these coordination costs for transient software teams in existing collaborative programming tools: a version control system and a real-time shared editor. Based on our findings, we suggest design elements of shared programming environments that help teams effectively self-coordinate on their task.},
booktitle = {Proceedings of the 2017 CHI Conference Extended Abstracts on Human Factors in Computing Systems},
pages = {2738–2745},
numpages = {8},
keywords = {ad hoc teams, crowdsourcing, software development tools},
location = {<conf-loc>, <city>Denver</city>, <state>Colorado</state>, <country>USA</country>, </conf-loc>},
series = {CHI EA '17}
}

@inproceedings{10.1145/2591062.2591105,
author = {Wang, Yi and Wagstrom, Patrick and Duesterwald, Evelyn and Redmiles, David},
title = {New opportunities for extracting insights from cloud based IDEs},
year = {2014},
isbn = {9781450327688},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2591062.2591105},
doi = {10.1145/2591062.2591105},
abstract = {Traditional integrated development environments (IDEs) provide developers with robust environments for writing, testing, debugging, and deploying code. As the world becomes increasingly networked and more services are delivered via the cloud, it is only natural that the functionality of IDEs be delivered via the cloud. In addition to simplifying the provisioning and deployment of new IDE features, and making it easier to integrate with other web native tools, cloud based IDEs provide some fundamental advantages when it comes to understanding the behavior of a wide community of software developers. One of these advantages for the IDE provider is the ability to transparently monitor and analyze the real-time fine-grained actions of a large number of developers. In this paper, we explore how to leverage these transparent monitoring capabilities of cloud based IDEs to develop advanced analytics to understand developers' behavior and infer their characteristics. We demonstrate the feasibility of this research direction with a preliminary study focusing on the way that source code files grow for different developers, development tasks, and skill levels. We then analyze the trends of source code file growth and find growth is more similar within subjects than within tasks.},
booktitle = {Companion Proceedings of the 36th International Conference on Software Engineering},
pages = {408–411},
numpages = {4},
keywords = {Cloud based IDE, JazzHub, analytics, fine-grained data},
location = {Hyderabad, India},
series = {ICSE Companion 2014}
}

@inproceedings{10.1145/3629296.3629297,
author = {Fischer, Bj\"{o}rn and Birk, Fabian and Iwer, Eva-Maria and Panitz, Sven Eric and D\"{o}rner, Ralf},
title = {Addressing Misconceptions in Introductory Programming: Automated Feedback in Integrated Development Environments},
year = {2024},
isbn = {9798400709111},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3629296.3629297},
doi = {10.1145/3629296.3629297},
abstract = {In recent years, numerous approaches to automated feedback have been presented in the field of programming education. Often, these methods deliver feedback through standalone web-based environments or educational programming environments. However, only few works have explored how such feedback can be provided within Integrated Development Environments (IDEs). We propose MINDFIX, an approach for integrating alternative feedback mechanisms for addressing programming language misconceptions about Java into the Eclipse IDE. These mechanisms include textual hints, code examples, and a personalized pedagogical agent. A laboratory experiment was conducted to investigate their impact on novice programmers in higher education. The results show that MINDFIX addresses missing feedback mechanisms and features. Additionally, there are initial insights that our feedback addresses programming language misconceptions while being perceived as useful and comprehensible. Our findings also suggest that novice programmers with low self-efficacy expectations perceive pedagogical agents as more motivating, useful, and less disruptive compared to their peers.},
booktitle = {Proceedings of the 15th International Conference on Education Technology and Computers},
pages = {1–8},
numpages = {8},
keywords = {affective computing, example-based feedback, intelligent tutoring system, pedagogical agent, programming environment},
location = {<conf-loc>, <city>Barcelona</city>, <country>Spain</country>, </conf-loc>},
series = {ICETC '23}
}

@inproceedings{10.1145/2526968.2526970,
author = {Helminen, Juha and Ihantola, Petri and Karavirta, Ville},
title = {Recording and analyzing in-browser programming sessions},
year = {2013},
isbn = {9781450324823},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2526968.2526970},
doi = {10.1145/2526968.2526970},
abstract = {In this paper, we report on the analysis of a novel type of automatically recorded detailed programming session data collected on a university-level web programming course. We present a method and an implementation of collecting rich data on how students learning to program edit and execute code and explore its use in examining learners' behavior. The data collection instrument is an in-browser Python programming environment that integrates an editor, an execution environment, and an interactive Python console and is used to deliver programming assignments with automatic feedback. Most importantly, the environment records learners' interaction within it. We have implemented tools for viewing these traces and demonstrate their potential in learning about the programming processes of learners and of benefiting computing education research and the teaching of programming.},
booktitle = {Proceedings of the 13th Koli Calling International Conference on Computing Education Research},
pages = {13–22},
numpages = {10},
keywords = {Python, computer science education, computing education research, programming assignment, programming session, web based programming environment},
location = {Koli, Finland},
series = {Koli Calling '13}
}

@inproceedings{10.1145/3167109,
author = {Lincke, Jens and Rein, Patrick and Ramson, Stefan and Hirschfeld, Robert and Taeumel, Marcel and Felgentreff, Tim},
title = {Designing a live development experience for web-components},
year = {2017},
isbn = {9781450355223},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3167109},
doi = {10.1145/3167109},
abstract = {Explorative and live development environments flourish when they can impose restrictions. Forcing a specific programming language or framework, the environment can better enhance the experience of editing code with immediate feedback or direct manipulation. Lively Kernel's user interface (UI) framework Morphic provides such a development experience when working with graphical objects in direct way giving immediate feedback during development. Our new development environment Lively4 achieves a similar development experience, but targeting general HTML elements. Web Components as a new Web standard provide a very powerful abstraction mechanism. Plain HTML elements provide direct building blocks for tools and applications. Unfortunately, Web Components miss proper capabilities to support run-time development. To address this issue, we use object migration to provide immediate feedback when editing UI code. The approach is evaluated by discussing known problems, resulting best practices and future work.},
booktitle = {Proceedings of the 3rd ACM SIGPLAN International Workshop on Programming Experience},
pages = {28–35},
numpages = {8},
keywords = {JavaScript, Live Programming, Web Components, Web-based Programming Environment},
location = {Vancouver, BC, Canada},
series = {PX/17.2}
}

@inproceedings{10.1145/2889160.2889176,
author = {Priefer, Dennis and Kneisel, Peter and Taentzer, Gabriele},
title = {JooMDD: a model-driven development environment for web content management system extensions},
year = {2016},
isbn = {9781450342056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2889160.2889176},
doi = {10.1145/2889160.2889176},
abstract = {Developing software extensions for Web Content Management Systems (WCMSs) like Joomla, WordPress, or Drupal can be a difficult and time consuming process. In this demo we present JooMDD, an environment for model-driven development of software extensions for the WCMS Joomla. JooMDD allows the rapid development of standardised software extensions requiring reduced technological knowledge of Joomla. This implies that even inexperienced developers are able to create their own functional WCMS extensions. This demonstrates that a model-driven approach is suitable for the domain of WCMSs.A supporting video illustrating the main features and a demonstration of JooMDD can be found at: https://youtu.be/Uy_WBIjPldI.},
booktitle = {Proceedings of the 38th International Conference on Software Engineering Companion},
pages = {633–636},
numpages = {4},
keywords = {Joomla, model-driven development, web content management systems},
location = {Austin, Texas},
series = {ICSE '16}
}

@inproceedings{10.1145/3274005.3274016,
author = {Averna, Guido and Lenzitti, Biagio and Taibi, Davide and Tegolo, Domenico},
title = {Iconic framework for cooperative coding},
year = {2018},
isbn = {9781450364256},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3274005.3274016},
doi = {10.1145/3274005.3274016},
abstract = {The description of an innovative framework built on top of Web-based visual programming environment is the primary aim of this contribution. In the last decade, many frameworks oriented to visual languages have been introduced in literature to improve the skill on programming languages, but at the best of our knowledge, no framework has been specially designed to support collaborative work on heterogeneous distributed environments. Therefore, SIRENE introduces a new framework in which beginners and experts can cooperate to develop algorithms by using a visual and iconic paradigm. Students, in the classroom or connected from everywhere, can be involved into the definition of the algorithm, can asynchronously modify the common working space, show a visual function to expert, thus the server hosts a shared space in which the algorithms can be visualised and modified by all of the SIRENE clients. SIRENE is primarily a visual framework oriented to collaborative approaches in which each user can visualise the evolution or implementation of some algorithms and modify it during its development by other users.},
booktitle = {Proceedings of the 19th International Conference on Computer Systems and Technologies},
pages = {165–170},
numpages = {6},
keywords = {Application Programming Interfaces, Collaborative Coding, Interactive learning control, Visual Programming Environments, Web-based Iconic Interface},
location = {Ruse, Bulgaria},
series = {CompSysTech '18}
}

@article{10.1145/2700514,
author = {Park, Thomas H. and Dorn, Brian and Forte, Andrea},
title = {An Analysis of HTML and CSS Syntax Errors in a Web Development Course},
year = {2015},
issue_date = {March 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {15},
number = {1},
url = {https://doi.org/10.1145/2700514},
doi = {10.1145/2700514},
abstract = {Many people are first exposed to code through web development, yet little is known about the barriers beginners face in these formative experiences. In this article, we describe a study of undergraduate students enrolled in an introductory web development course taken by both computing majors and general education students. Using data collected during the initial weeks of the course, we investigate the nature of the syntax errors they make when learning HTML and CSS, and how they resolve them. This is accomplished through the deployment of openHTML, a lightweight web-based code editor that logs user activity. Our analysis reveals that nearly all students made syntax errors that remained unresolved in their assessments, and that these errors continued weeks into the course. Approximately 20% of these errors related to the relatively complex system of rules that dictates when it is valid for HTML elements to be nested in one another. On the other hand, 35% of errors related to the relatively simple tag syntax determining how HTML elements are nested. We also find that validation played a key role in resolving errors: While the majority of unresolved errors were present in untested code, nearly all of the errors that were detected through validation were eventually corrected. We conclude with a discussion of our findings and their implications for computing education.},
journal = {ACM Trans. Comput. Educ.},
month = {mar},
articleno = {4},
numpages = {21},
keywords = {Web development, code editors, computational literacy}
}

@inproceedings{10.1145/2491055.2491088,
author = {Hannebauer, Christoph},
title = {Wiki development environments},
year = {2013},
isbn = {9781450318525},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491055.2491088},
doi = {10.1145/2491055.2491088},
abstract = {The doctoral thesis Wiki Development Environments analyzes contribution barriers to Free, Libre and Open Source Software (FLOSS) projects. Contribution barriers exist between particular subgroups within the community around a FLOSS project. Contribution barriers include social and technical factors. The hurdles that constitute the contribution barrier to become a co-developer receives special emphasis.The doctoral thesis also describes a pattern language for maintainers of FLOSS projects. The patterns in this pattern language describe practices that lower the contribution barriers in FLOSS projects that employ the patterns. The doctoral thesis includes a novel approach that minimizes contribution barriers. This approach comprises the combination of a wiki system and an Integrated Development Environment (IDE) into a Wiki Development Environment (WikiDE). A WikiDE is a web-based code editor that allows anonymous users to edit source code and contribute it to a FLOSS project. From the pattern language perspective, a WikiDE helps to realize some of the patterns described earlier and amplifies their effect.Editing source code of software differs from editing text in a natural language. WikiDE realizations must take these differences into account. This imposes challenges for WikiDEs realization that exceed the requirements of IDEs and wiki systems for natural language text.},
booktitle = {Proceedings of the 9th International Symposium on Open Collaboration},
articleno = {33},
numpages = {1},
keywords = {FLOSS, IDE, WikiDE, Wikis, contribution barrier, open source, software development environment, software engineering},
location = {Hong Kong, China},
series = {WikiSym '13}
}

@inproceedings{10.1145/3007203.3007214,
author = {Blackstock, Michael and Lea, Rodger},
title = {FRED: A Hosted Data Flow Platform for the IoT},
year = {2016},
isbn = {9781450346696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3007203.3007214},
doi = {10.1145/3007203.3007214},
abstract = {IoT developers need to integrate a variety of protocols, backend components and services; they often need to pre and post-process data as well as react to changes in the real world. Data flow programming tools have been introduced in a number of related domains to provide a flexible, but easy to use visual programming environment for rapid development. The open source Node-RED system provides such a tool for IoT applications, but is limited to executing a single flow file in a single thread. In this paper we describe the design of our system called the Front-End for Node-RED (FRED) that manages multiple instances of Node-RED for logged in users, allowing Node-RED to be used as a cloud-hosted data flow mashup tool for the IoT. We present some examples of how some of our 1800+ users are using FRED for IoT mashups, and some of the challenged we faced in implementing the FRED system.},
booktitle = {Proceedings of the 1st International Workshop on Mashups of Things and APIs},
articleno = {2},
numpages = {5},
keywords = {Data Flow Programming, Internet of Things, IoT Mashups, Node-RED},
location = {Trento, Italy},
series = {MOTA '16}
}

@inproceedings{10.1145/3408877.3432501,
author = {Malan, David J. and Zidane, Kareem and Yu, Brian},
title = {Interactive Programming Environments for Teachers and Students},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3432501},
doi = {10.1145/3408877.3432501},
abstract = {This workshop offers hands-on experience with a suite of interactive programming environments for teachers and students, each of them cloud-based and free. The first tool is CS50 Sandbox, via which teachers create temporary programming environments quickly and share copies of those sandboxes with students. The second tool is CS50 Lab, via which teachers can create step-by-step programming lessons, providing incremental feedback at each step, enabling students to progress from an empty file (or starter code) to working code, with hints and feedback along the way. And the third tool is CS50 IDE, via which teachers can provide students with their own cloud-based Linux environment. Each of these environments offers students a built-in file browser and code editor, along with a terminal window with shell access to their very own container. The IDE additionally provides an interactive, graphical debugger. Each tool enables students to write programs in any language for which a compiler or interpreter can be installed in the underlying container, including Java and Python. Not only will we demonstrate each tool, we'll discuss lessons learned from having deployed these tools in CS50 at Harvard to hundreds of students on campus and thousands of students online. We'll compare and contrast with commercial and open-source tools. And we'll discuss challenges encountered and best practices adopted.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {1351},
numpages = {1},
keywords = {ide, lab, linux, programming environment, sandbox},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/3397537.3397549,
author = {Jakubovic, Joel},
title = {What it takes to create with domain-appropriate tools: reflections on implementing the “id” system},
year = {2020},
isbn = {9781450375078},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3397537.3397549},
doi = {10.1145/3397537.3397549},
abstract = {There is a One-Size-Fits-All quality to languages, APIs and even programming itself. Whether you're making a mobile game or a scientific simulation, you will be using a text-based language with similar devices for structuring your code. This is a source of artificial difficulty in creating, understanding, and modifying software systems. No matter the domain, the author's design needs encoding into a form that does not resemble it.  This paper describes a vision where software can be built in a programming environment that is closer to the domain of the software itself. By doing so, users of the system can use familiar abstractions and tools for adapting it. A step towards this vision is presented: a Web version of a minimal OOP system, developed as an executable version of the diagrams of its design, in a substrate meant to facilitate this. The experience of creating such a substrate is analysed, and I suggest deficiencies in programming environments that stand in the way of making this practice commonplace, as well as ways to fill in these gaps.},
booktitle = {Companion Proceedings of the 4th International Conference on Art, Science, and Engineering of Programming},
pages = {197–207},
numpages = {11},
keywords = {adaptation, context-specific, meta-circular, object-oriented, visual programming},
location = {Porto, Portugal},
series = {Programming '20}
}

@inproceedings{10.1145/3017680.3017839,
author = {Malan, David J. and Onken, Nikolai and Armendariz, Dan},
title = {A Web-Based IDE for Teaching with Any Language (Abstract Only)},
year = {2017},
isbn = {9781450346986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3017680.3017839},
doi = {10.1145/3017680.3017839},
abstract = {This workshop introduces participants to CS50 IDE (cs50.io), a web-based integrated development environment based on Amazon's Cloud9 (c9.io). Not only does the IDE enable students to work on programming projects within a browser, without need for local downloads or installations, it also provides students with an integrated terminal window and full sudo privileges. Underneath the hood is a Docker "container" that allows students to experiment with the underlying Ubuntu Linux OS, installing and configuring software at will, adapting it to their particular projects' needs. The IDE supports any compiler, interpreter, or other software that can be installed via a Linux command-line, while the IDE itself provides a fully-featured text editor for text files and source code that reside on the underlying instance. The Cloud9 GUI is fully extensible through a plugin system and is leveraged by CS50 IDE to provide additional functionality for students. Among the additional features implemented through this mechanism are a GUI-based file submission system, an optional "less comfortable" mode that simplifies the GUI to provide a scaffolded experience for students new to programming, and a GUI front end for the GNU Project Debugger, a CLI debugger for many languages, including C. This workshop will highlight useful features of the IDE in the context of classrooms (including the collaborative nature of a workspace to allow pair programming or provide alternative one-on-one instruction), provide tips for writing or adapting assignments based on its architecture, and introduce developing plugins for full customization.},
booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education},
pages = {739},
numpages = {1},
keywords = {CS50, GDB, IDE, cloud-based IDE, cloud9, debugger, docker, linux},
location = {Seattle, Washington, USA},
series = {SIGCSE '17}
}

@inproceedings{10.1145/2839509.2844712,
author = {Armendariz, Dan and Malan, David J. and Onken, Nikolai},
title = {A Web-Based IDE for Teaching with Any Language (Abstract Only)},
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2844712},
doi = {10.1145/2839509.2844712},
abstract = {This workshop introduces participants to CS50 IDE (cs50.io), a web-based integrated development environment based on Cloud9 (c9.io). Not only does the IDE enable students to work on programming projects within a browser, without need for local downloads or installations, it also provides students with an integrated terminal window and full sudo privileges. Underneath the hood is a Docker "container" that allows students to experiment with the underlying Ubuntu Linux OS, installing and configuring software at will, adapting it to their particular projects' needs. The IDE supports any compiler, interpreter, or other software that can be installed via a Linux command-line, while the IDE itself provides a fully-featured text editor for text files and source code that reside on the underlying instance. The Cloud9 GUI is fully extensible through a plugin system and is leveraged by CS50 IDE to provide additional functionality for students. Among the additional features implemented through this mechanism are a GUI-based file submission system, an optional "less comfortable" mode that simplifies the GUI to provide a scaffolded experience for students new to programming, and a GUI front end for the GNU Project Debugger, a CLI debugger for many languages, including C. This workshop will highlight useful features of the IDE in the context of classrooms (including the collaborative nature of a workspace to allow pair programming or provide alternative one-on-one instruction), provide tips for writing or adapting assignments based on its architecture, and introduce developing plugins for full customization.},
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
pages = {711},
numpages = {1},
keywords = {cloud-based ide, cloud9, cs50, debugger, docker, gdb, ide, linux},
location = {Memphis, Tennessee, USA},
series = {SIGCSE '16}
}

@inproceedings{10.1145/3287324.3287554,
author = {Malan, David J. and Lloyd, Doug and Zidane, Kareem},
title = {Interactive Programming Environments for Teachers and Students},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287554},
doi = {10.1145/3287324.3287554},
abstract = {We present in this hands-on workshop a suite of interactive programming environments for teachers and students, each of them cloud-based and free. The first is CS50 Sandbox, a web app at sandbox.cs50.io that enables teachers and students to create temporary programming environments quickly and share copies of those sandboxes with others. With this app can a teacher start programs in class that students can then finish, distribute starter code for problems, and post interactive solutions. The second tool is CS50 Lab, a web app at lab.cs50.io that enables teachers to create step-by-step programming lessons, providing incremental feedback at each step, and enables students to progress from an empty file (or starter code) to working code, with hints and feedback along the way. Via this app can teachers author their own Codecademy-style lessons using just a GitHub repository of their own. And third in the suite is CS50 IDE, a web app at ide.cs50.io built atop Cloud9 that provides students with their own cloud-based Linux environment. Each of these environments offers a built-in file browser and code editor and, most importantly, an interactive terminal window with shell access to their very own container. And each enables students to write programs in any language. Throughout this workshop will we discuss lessons learned from having deployed these tools in CS50 at Harvard to hundreds of students on campus and thousands of students online. And we'll discuss challenges encountered and best practices adopted.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1242},
numpages = {1},
keywords = {ide, programming, sandbox},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3334480.3383154,
author = {Byun, Jeongmin and Park, Jungkook and Oh, Alice},
title = {Cocode: Co-learner Screen Sharing for Social Translucence in Online Programming Courses},
year = {2020},
isbn = {9781450368193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3334480.3383154},
doi = {10.1145/3334480.3383154},
abstract = {Online courses are popular among learners of programming, but many learners have trouble completing the courses. A common approach to increase learner engagement is to provide co-learner presence via chat and forums. In this work, we present Cocode, an online learning system where learners can share their presence without any explicit action; their normal learning activities would signal co-learner presence. Cocode is a web application for online programming courses that shows other learners' code editors and running screens in the programming environment to the learners while working on exercises. Results from our between-subject studies show that learners with Cocode are more engaged and work on more programming exercises compared to the learners using the system without social features.},
booktitle = {Extended Abstracts of the 2020 CHI Conference on Human Factors in Computing Systems},
pages = {1–4},
numpages = {4},
keywords = {education, online course, programming course, social translucence},
location = {<conf-loc>, <city>Honolulu</city>, <state>HI</state>, <country>USA</country>, </conf-loc>},
series = {CHI EA '20}
}

@inproceedings{10.1145/3231644.3231703,
author = {Sharrock, R\'{e}mi and Angrave, Lawrence and Hamonic, Ella},
title = {WebLinux: a scalable in-browser and client-side Linux and IDE},
year = {2018},
isbn = {9781450358866},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3231644.3231703},
doi = {10.1145/3231644.3231703},
abstract = {"WebLinux" is a web app tool providing a standard Linux OS and an IDE in the browser, including a terminal, a code editor and a file browser. It provides a client-side and offline Linux OS environment based on a Javascript emulated processor. By avoiding the use of a Virtual Machine or any Linux server, Weblinux enables learners to directly start experimenting with the Linux OS without installing any software. The tool is entirely client-side which makes it extremely scalable and easy to deploy within a large community of online learners.},
booktitle = {Proceedings of the Fifth Annual ACM Conference on Learning at Scale},
articleno = {45},
numpages = {2},
keywords = {CLI, MOOC, browser, education, emulator, in-browser IDE, javascript, linux, openrisc, scalability},
location = {London, United Kingdom},
series = {L@S '18}
}

@inproceedings{10.1145/2991041.2991045,
author = {Oda, Tomohiro and Araki, Keijiro and Larsen, Peter Gorm},
title = {ViennaTalk and Assertch: Building Lightweight Formal Methods Environments on Pharo 4},
year = {2016},
isbn = {9781450345248},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2991041.2991045},
doi = {10.1145/2991041.2991045},
abstract = {It is possible to make Integrated Development Environments supporting formal methods that can be as flexible as the support for dynamic programming languages. This paper contributes with a demonstration employing different support environments for the Vienna Development Method Specification Language (VDM-SL) and design by contract for visual programming language. This includes ViennaTalk developed on top of Pharo 4 providing Smalltalk-styled LIVE browsers, VDM-SL interpreters, Smalltalk code generators, UI prototyping environments and a prototype Web API server to enable rigorous and flexible modeling during exploratory phases of software development. ViennaTalk uses the Slot mechanism in Pharo to test invariant assertions on instance variables in Smalltalk objects generated from VDM-SL specifications. In addition, we present a plugin named Assertch for Phratch, a scratch-clone visual programming environment on top of Pharo 4, that provides assertion blocks for designing and debugging a series of blocks.Both ViennaTalk and Assertch combine flexible live modeling or coding while still supporting rigorous checking. ViennaTalk has been evaluated by experienced professional engineers of VDM-SL while Assertch has been evaluated by undergraduate students of computer science. ViennaTalk and Assertch both demonstrate that Pharo and its contemporary features support rigorous modeling in formal specification languages as well as flexible prototyping in Smalltalk.},
booktitle = {Proceedings of the 11th Edition of the International Workshop on Smalltalk Technologies},
articleno = {4},
numpages = {7},
keywords = {Lightweight formal methods, Live environment, Specification animation, Validation},
location = {Prague, Czech Republic},
series = {IWST'16}
}

@inproceedings{10.1145/2047196.2047215,
author = {Goldman, Max and Little, Greg and Miller, Robert C.},
title = {Real-time collaborative coding in a web IDE},
year = {2011},
isbn = {9781450307161},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2047196.2047215},
doi = {10.1145/2047196.2047215},
abstract = {This paper describes Collabode, a web-based Java integrated development environment designed to support close, synchronous collaboration between programmers. We examine the problem of collaborative coding in the face of program compilation errors introduced by other users which make collaboration more difficult, and describe an algorithm for error-mediated integration of program code. Concurrent editors see the text of changes made by collaborators, but the errors reported in their view are based only on their own changes. Editors may run the program at any time, using only error-free edits supplied so far, and ignoring incomplete or otherwise error-generating changes. We evaluate this algorithm and interface on recorded data from previous pilot experiments with Collabode, and via a user study with student and professional programmers. We conclude that it offers appreciable benefits over naive continuous synchronization without regard to errors and over manual version control.},
booktitle = {Proceedings of the 24th Annual ACM Symposium on User Interface Software and Technology},
pages = {155–164},
numpages = {10},
keywords = {collaboration, collaborative editing, pair programming},
location = {Santa Barbara, California, USA},
series = {UIST '11}
}

@inproceedings{10.1145/3397537.3397553,
author = {Groenewegen, Danny M. and Chastelet, Elmer van and Visser, Eelco},
title = {Evolution of the WebDSL runtime: reliability engineering of the WebDSL web programming language},
year = {2020},
isbn = {9781450375078},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3397537.3397553},
doi = {10.1145/3397537.3397553},
abstract = {Web applications are ideal for implementing information systems; they can organize and persist the data in a database, do not require installation on client machines, and can be instantly updated everywhere. However, web programming is complex due to its heterogeneous nature, causing web frameworks to suffer from insufficient or leaky abstraction, weak static consistency checking, and security features that are not enforced. We developed the WebDSL web programming language, which supports direct expression of intent, strong static consistency checking, linguistic abstractions for web programming concerns, and automatically enforces security features for web applications. We have used WebDSL for over 10 years to create information systems for academic workflows with thousands of users. Based on our experiences with these applications, we improved the WebDSL compiler and runtime to increase robustness, performance, and security of applications. In this experience report, we reflect on the lessons learned and improvements made to the language runtime.},
booktitle = {Companion Proceedings of the 4th International Conference on Art, Science, and Engineering of Programming},
pages = {77–83},
numpages = {7},
keywords = {compilers, domain-specific languages, experience report, integrated development environments, web applications, web programming, web security},
location = {Porto, Portugal},
series = {Programming '20}
}

@inproceedings{10.1145/3406865.3418566,
author = {Mathews, Noble Saji and Chimalakonda, Sridhar and Venigalla, Akhila Sri Manasa},
title = {YTCoder - Towards Turning YouTube into a Development Environment},
year = {2020},
isbn = {9781450380591},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3406865.3418566},
doi = {10.1145/3406865.3418566},
abstract = {YouTube is one of the most popular video sharing platforms that hosts many video tutorials which aim to teach concepts of various programming languages. Most of these tutorials include code snippets in the videos. However, it is important that the learners have hands-on experience while learning various programming concepts. Providing a code editor along with the video tutorial could help learners get a better learning experience, as they have a scope to learn by practice. Existing solutions of accompanying video tutorials with code editors are either pre-programmed or require a separate web portal. We are not aware of any solutions in the current literature that aim to support Youtube video tutorials. Hence, we present YTCoder in this paper that aims to improve the learning experience by integrating videos related to various programming languages with the development environments of the respective programming languages. Demonstration of YTCoder can be found here - https://youtu.be/iONtO7cuQwo.},
booktitle = {Companion Publication of the 2020 Conference on Computer Supported Cooperative Work and Social Computing},
pages = {43–46},
numpages = {4},
keywords = {code editors, programming languages, video tutorials, youtube},
location = {Virtual Event, USA},
series = {CSCW '20 Companion}
}

@inproceedings{10.1109/ICSE-Companion.2019.00108,
author = {Leisner, Michael and Brune, Philipp},
title = {Good-bye localhost: a cloud-based web IDE for teaching Java EE web development to non-computer science majors},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-Companion.2019.00108},
doi = {10.1109/ICSE-Companion.2019.00108},
abstract = {While cloud- and web-based Integrated Development Environments (IDE) are used in practice and education for some time, these are mainly intended for classical web development. Support for enterprise platforms such as Java Enterprise Edition (EE) is typically lacking. However, in higher education, web-based cloud IDE are particularly useful in software development courses for non-computer science major students, since they could help to overcome the participants' limited IT skills. Thus, a respective easy-to-use web IDE is required. Therefore, in this paper a software platform for a web-based cloud IDE for educational purposes is proposed and evaluated, which in particular supports Java EE and is suitable for non-computer science majors. The platform was evaluated in a classroom experiment. The results indicate that it is useful and beneficial for the students, allowing the lecturer and the students to focus more on the actual learning objectives.},
booktitle = {Proceedings of the 41st International Conference on Software Engineering: Companion Proceedings},
pages = {268–269},
numpages = {2},
keywords = {Java EE, cloud computing, higher education, non-computer science majors, web development education},
location = {Montreal, Quebec, Canada},
series = {ICSE '19}
}

@inbook{10.5555/1074100.1074661,
author = {Denning, Peter J. and Tichy, Walter F. and Lazowska, Edward D. and Liedtke, Jochen},
title = {Operating systems},
year = {2003},
isbn = {0470864125},
publisher = {John Wiley and Sons Ltd.},
address = {GBR},
abstract = {Early operating systems were control programs a few thousand bytes long that scheduled jobs, drove peripheral devices, and kept track of system usage for billing purposes. Modern operating systems are much larger, ranging from hundreds of thousands of bytes for personal computers (e.g. MS-DOS, Xenix) to tens of millions of bytes for mainframes (e.g. Honeywell's Multics, IBM's MVS, AT&amp;T's Unix) and hundreds of millions of bytes for some servers (Microsoft's Windows NT). In addition to managing processors, memory, and dozens of input-output devices, modern operating systems also provide numerous services such as Internet communications, Web communications, interprocess communications, file and directory systems, data transfer over local networks, and command languages and graphical user interfaces for invoking and controlling programs. These high-level services hide the primitive facilities of the base computer, such as interrupts, status registers, and device interfaces, from the user. The operating system builds its high- level services by wrapping the low-level hardware facilities in layers of software, resulting in a powerful virtual machine that is much easier to use than the basic hardware. Thus an operating system provides two classes of functions: orderly allocation of computing resources among processes contending for them, and an extended machine that provides a powerful programming environment. These two classes are not independent; poor structure can make resource allocation a nightmare. The microkernel architecture to be discussed below is a good structure that enables efficient resource allocation and powerful programming environments.},
booktitle = {Encyclopedia of Computer Science},
pages = {1290–1324},
numpages = {35}
}

@inproceedings{10.1145/1501750.1501758,
author = {Niwa, Yoshimasa and Tokuhisa, Satoru and Inakage, Masa},
title = {Talktic: a development environment for pervasive computing applications},
year = {2008},
isbn = {9781605583938},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1501750.1501758},
doi = {10.1145/1501750.1501758},
abstract = {Talktic is a platform for the easy production of entertainment content developed under the keyword of "pervasive computing." The Talktic platform consists of runtime environment, library, and development environment to support applications using an MCU board, personal computer, and network. It uses a virtual machine in the runtime environment and provides a programming environment and library based on a lightweight scripting language for easy development of entertainment content. The linkage with web services and the high degree of compatibility for the virtual machine and scripts are expected to generate new forms of entertainment content.},
booktitle = {Proceedings of the 2008 International Conference on Advances in Computer Entertainment Technology},
pages = {34–41},
numpages = {8},
keywords = {design works, internet networking media, simplicity},
location = {Yokohama, Japan},
series = {ACE '08}
}

@inproceedings{10.1145/1067445.1067479,
author = {Efopoulos, Vassilios and Dagdilelis, Vassilios and Evangelidis, Georgios and Satratzemi, Maya},
title = {WIPE: a programming environment for novices},
year = {2005},
isbn = {1595930248},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1067445.1067479},
doi = {10.1145/1067445.1067479},
abstract = {This paper presents an overview of the design principles and the evaluation of a new programming environment, WIPE (Web Integrated Programming Environment), designed specifically to teach novices the fundamentals of programming. The environment is designed for use in secondary education as a first programming course, in order to help students become familiar with the main programming concepts.},
booktitle = {Proceedings of the 10th Annual SIGCSE Conference on Innovation and Technology in Computer Science Education},
pages = {113–117},
numpages = {5},
keywords = {e-learning, interactive learning environment, programming and programming languages, secondary education, web-based compiler},
location = {Caparica, Portugal},
series = {ITiCSE '05}
}

@inproceedings{10.5555/2486788.2487068,
author = {Burg, Brian and Kuhn, Adrian and Parnin, Chris},
title = {1st international workshop on live programming (LIVE 2013)},
year = {2013},
isbn = {9781467330763},
publisher = {IEEE Press},
abstract = {Live programming is an idea espoused by programming environments from the earliest days of computing (such as Lisp machines and SmallTalk) but have since lain dormant. Recently, the prevalence of asynchronous feedback in programming languages such as Javascript and advances in visualizations and user interfaces have lead to a resurgence of live programming in online education communities (such as Khan Academy) and in experimental IDEs (such as LightTable). The LIVE 2013 workshop includes 12 papers describing visions, implementations, mashups, and new directions of live programming environments. The participants include both practitioners of live coding and researchers in programming languages and software engineering. Finally, several demos curated on the live workshop page are presented.},
booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
pages = {1529–1530},
numpages = {2},
location = {San Francisco, CA, USA},
series = {ICSE '13}
}

@inproceedings{10.1145/1595836.1595839,
author = {Ahmadi, Navid and Jazayeri, Mehdi and Lelli, Francesco and Repenning, Alexander},
title = {Towards the web of applications: incorporating end user programming into the web 2.0 communities},
year = {2009},
isbn = {9781605586823},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1595836.1595839},
doi = {10.1145/1595836.1595839},
abstract = {The Web is evolving from the Web of documents to the Web of applications. Web 2.0 communities need end-user programming tools to create interactive applications according to their skills and domain of interest. However, due to the different domains of programming in different communities, providing a generic EUP tool to all communities is not possible. We aim at encapsulating development of domain-oriented EUP tools as a community-based effort-taking place at two layers: (i) among different communities, and (ii) inside a particular community. Accordingly, we suggest a domain-independent model and its respective Web-based infrastructure to supports different online communities to create and appropriate end user development tools for building interactive artifacts collaboratively.},
booktitle = {Proceedings of the 2nd International Workshop on Social Software Engineering and Applications},
pages = {9–14},
numpages = {6},
keywords = {community-based domain construction, end-user programming, interactive applications, web 2.0, web-based applications},
location = {Amsterdam, The Netherlands},
series = {SoSEA '09}
}

@inproceedings{10.1109/MiSE.2019.00010,
author = {Saini, Rijul and Bali, Shivani and Mussbacher, Gunter},
title = {Towards web collaborative modelling for the user requirements notation using eclipse che and theia IDE},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MiSE.2019.00010},
doi = {10.1109/MiSE.2019.00010},
abstract = {Collaborative modelling has become a necessity when developing a complex system or in a team of modellers with a diverse set of expertise. Textual notations have a long history in software engineering because of their fast editing style, simple usage, and scalability. Therefore, we propose a novel collaborative modelling framework for the graphical User Requirements Notation (URN) which we call tColab. It uses the text-based TGRL (Textual Goal-oriented Requirement Language) to build URN goal models and then automatically generates corresponding graphical models. This framework is based on the architecture of Eclipse Che and Theia. On one side, Theia provides support for LSP (Language Server Protocol) so that textual models can be built and their corresponding graphical models can be generated in a browser IDE (Integrated Development Environment). On the other hand, Eclipse Che adds support for collaboration where multiple modellers can contribute to building the textual models in an online collaborative manner. This initiative aims to replace the jUCMNAV tool, which is the most comprehensive URN modelling tool to date but only supports a single user.},
booktitle = {Proceedings of the 11th International Workshop on Modelling in Software Engineerings},
pages = {15–18},
numpages = {4},
keywords = {ELK, LSP, TGRL, TURN, URN, eclipse che, jUCMNav, sprotty, theia, user requirements notation},
location = {Montreal, Quebec, Canada},
series = {MiSE '19}
}

@inproceedings{10.1145/3290511.3290525,
author = {Nagashima, Kazuhei and Cho, Shinya and Horikoshi, Masayuki and Manabe, Hiroki and Kanemune, Susumu and Namiki, Mitaro},
title = {Design and development of bit arrow: a web-based programming learning environment},
year = {2018},
isbn = {9781450365178},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3290511.3290525},
doi = {10.1145/3290511.3290525},
abstract = {In Japan, all high school students will study programming in next teaching guidelines. It is important to use suitable environment or tool for programming education. Some current textbooks show programs written in JavaScript and instruct students to use text editor and browser as development environment. But such environment has some problems; it requires students to manage multiple applications, to find errors with little information and to type long statements. We developed "Bit Arrow", an online programming environment. The environment helps students to find errors. Also the environment provides API to write statements shortly. In this report, we describe design and evaluation of Bit Arrow from students' log data.},
booktitle = {Proceedings of the 10th International Conference on Education Technology and Computers},
pages = {85–91},
numpages = {7},
keywords = {Javascript, education support, programming education, web-based environment},
location = {Tokyo, Japan},
series = {ICETC '18}
}

@inproceedings{10.1145/2076732.2076770,
author = {Xie, Jing and Chu, Bill and Lipford, Heather Richter and Melton, John T.},
title = {ASIDE: IDE support for web application security},
year = {2011},
isbn = {9781450306720},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2076732.2076770},
doi = {10.1145/2076732.2076770},
abstract = {Many of today's application security vulnerabilities are introduced by software developers writing insecure code. This may be due to either a lack of understanding of secure programming practices, and/or developers' lapses of attention on security. Much work on software security has focused on detecting software vulnerabilities through automated analysis techniques. While they are effective, we believe they are not sufficient. We propose to increase developer awareness and promote practice of secure programming by interactively reminding programmers of secure programming practices inside Integrated Development Environments (IDEs). We have implemented a proof-of-concept plugin for Eclipse and Java. Initial evaluation results show that this approach can detect and address common web application vulnerabilities and can serve as an effective aid for programmers. Our approach can also effectively complement existing software security best practices and significantly increase developer productivity.},
booktitle = {Proceedings of the 27th Annual Computer Security Applications Conference},
pages = {267–276},
numpages = {10},
keywords = {application security, interactive support, secure programming, secure software development},
location = {Orlando, Florida, USA},
series = {ACSAC '11}
}

@inproceedings{10.1145/2593968.2610462,
author = {Katterfeldt, Eva-Sophie and Schelhowe, Heidi},
title = {Considering visual programming environments for documenting physical computing artifacts},
year = {2014},
isbn = {9781450322720},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2593968.2610462},
doi = {10.1145/2593968.2610462},
abstract = {In online communities makers share and give feedback on DIY projects. Such feedback could also help novices who get stuck in their projects. However, documenting work in progress is little considered in current tools. We therefore developed a HowTo related web platform for documenting work in progress and studied how children (aged 1318) used it to document their physical computing projects during workshops. The evaluation outcome questions the appropriateness of our web platform and reveals the benefits of visual programming environments for documenting physical computing artifacts. Suggestions are given how to extend visual programming environments into minimalistic documentation tools that provide ways for children to successfully share their work in progress with other makers.},
booktitle = {Proceedings of the 2014 Conference on Interaction Design and Children},
pages = {241–244},
numpages = {4},
keywords = {children, diy, documentation, physical computing, visual programming},
location = {Aarhus, Denmark},
series = {IDC '14}
}

@inproceedings{10.1145/3368089.3417058,
author = {Svyatkovskiy, Alexey and Deng, Shao Kun and Fu, Shengyu and Sundaresan, Neel},
title = {IntelliCode compose: code generation using transformer},
year = {2020},
isbn = {9781450370431},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368089.3417058},
doi = {10.1145/3368089.3417058},
abstract = {In software development through integrated development environments (IDEs), code completion is one of the most widely used features. Nevertheless, majority of integrated development environments only support completion of methods and APIs, or arguments. In this paper, we introduce IntelliCode Compose – a general-purpose multilingual code completion tool which is capable of predicting sequences of code tokens of arbitrary types, generating up to entire lines of syntactically correct code. It leverages state-of-the-art generative transformer model trained on 1.2 billion lines of source code in Python, C#, JavaScript and TypeScript programming languages. IntelliCode Compose is deployed as a cloud-based web service. It makes use of client-side tree-based caching, efficient parallel implementation of the beam search decoder, and compute graph optimizations to meet edit-time completion suggestion requirements in the Visual Studio Code IDE and Azure Notebook. Our best model yields an average edit similarity of 86.7% and a perplexity of 1.82 for Python programming language.},
booktitle = {Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1433–1443},
numpages = {11},
keywords = {Code completion, naturalness of software, neural networks},
location = {Virtual Event, USA},
series = {ESEC/FSE 2020}
}

@proceedings{10.1145/2688471,
title = {PROMOTO '14: Proceedings of the 2nd Workshop on Programming for Mobile &amp; Touch},
year = {2014},
isbn = {9781450322959},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {It is our great pleasure to welcome you to the proceedings of the PROMOTO'14. The 2nd Workshop on Programming with Mobile and Touch (PROMOTO'14) was held in Portland, OR on October 22, 2014, in conjunction with SPLASH/OOPSLA 2014. The goals of the workshop were to discuss the issues surrounding touch and mobile programming and to plan future directions.Workshop Overview Today, easy-to-use mobile devices like smartphones and tablets are becoming more prevalent than traditional PCs and laptops. New programming languages are emerging to enable programmers to develop software easily, leveraging the exciting advances in existing hardware, and providing abstractions that fit the capabilities of target platforms with multiple sensors, touch and cloud capabilities. PROMOTO'14 brought together researchers who have been exploring new programming paradigms, embracing the new realities of always connected, touch-enabled mobile devices. Specific areas of interest were the technical aspects of cross-platform computing, cloud computing, social applications, and education.Submissions for this event were invited in the general area of mobile and touch-oriented programming languages and programming environments, and teaching of programming for mobile devices. Topics of interest included: Mobile and touch-oriented programming languagesProgramming languages using innovative input mechanismsProgramming environments on or for mobile devicesTeaching of programming on or for mobile devicesProgramming tools such as debuggers on or for mobiles devicesLibraries and programming frameworks that simplify programming for mobile devicesThe workshop received 11 submissions from all over the world. Each paper was reviewed by three members of the program committee and 6 were chosen for presentation as full papers, short papers or tool demos. We also had three additional stimulating sessions: A keynote on "Programming gadgets with gadgets" presented by Jonathan de Halleux of Microsoft Research.A group hands-on session, were participants were challenged to create an app in an hour, and compare results.A lively panel on "Mobile Computing and Education"The Keynote The keynote by de Halleux son "Programming gadgets with gadgets", not reported on elsewhere, was a lively presentation with an array of gadgets on display. Hardware 2.0 is upon us: cheap micro-controller boards like Arduino have gained massive adoption in recent years. Paired with 3D printers, cheap sensors and actuators, Hardware 2.0 allows anyone to prototype the next hot gadget. And yet, the maker will have to learn a soup of software language and framework to build a connected IoC solution: C++ for the micro controller code, HTML + javascript for the client, some backend language and a communication layer to interact with the devices. In this keynote, de Halleux showed a unified approach for compilation of web server code, rich client and embedded firmware under a simple mobile friendly language and IDE.},
location = {Portland, Oregon, USA}
}

@inproceedings{10.1145/3018896.3056782,
author = {Fayed, Mahmoud S. and Al-Qurishi, Muhammad and Alamri, Atif and Al-Daraiseh, Ahmad A.},
title = {PWCT: visual language for IoT and cloud computing applications and systems},
year = {2017},
isbn = {9781450347747},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3018896.3056782},
doi = {10.1145/3018896.3056782},
abstract = {Developing IoT, Data Computing and Cloud Computing software requires different programming skills and different programming languages. This cause a problem for many companies and researchers that need to hires many programmers to develop a complete solution. The problem is related directly to the financial cost and the development time which are very important factors to many research projects. In this paper we present and propose the PWCT visual programming tool for developing IoT, Data Computing and Cloud Computing Applications and Systems without writing textual code directly. Using PWCT increase productivity and provide researchers with one visual programming tool to develop different solutions.},
booktitle = {Proceedings of the Second International Conference on Internet of Things, Data and Cloud Computing},
articleno = {165},
numpages = {5},
keywords = {cloud computing, data computing, internet of things, knowledge representation and reasoning, visual programming},
location = {<conf-loc>, <city>Cambridge</city>, <country>United Kingdom</country>, </conf-loc>},
series = {ICC '17}
}

@article{10.1145/3476041,
author = {Byun, Jeongmin and Park, Jungkook and Oh, Alice},
title = {Cocode: Providing Social Presence with Co-learner Screen Sharing in Online Programming Classes},
year = {2021},
issue_date = {October 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {CSCW2},
url = {https://doi.org/10.1145/3476041},
doi = {10.1145/3476041},
abstract = {Social presence is known to be important for distance education, and a common approach in online classes is to provide chat boxes and forums to provide the social presence. In such a class, however, learners must explicitly act beyond their normal learning activities, so often there is no social presence in the class even when there are several learners working on the same course material. In this paper, we develop an approach where learners can share the social presence without any explicit action; their normal learning activities would be used to provide visual cues for social presence. We present Cocode, a system designed for an online programming class that shows other learners' code editors and running output in the programming environment with minimum privacy issues. For evaluation, we ran two user studies with groups of participants who took an offline class and an online programming class from the university; results from the studies showed that learners felt less social presence in Cocode than in offline classes, but they felt significantly more social presence in Cocode than in online classes with live video lectures, forums, and chat sessions.},
journal = {Proc. ACM Hum.-Comput. Interact.},
month = {oct},
articleno = {300},
numpages = {28},
keywords = {distance learning, education, programming education, social presence}
}

@inproceedings{10.1145/2811681.2811683,
author = {Dietrich, Jens and Tandler, Johannes and Sui, Li and Meyer, Manfred},
title = {The PrimeGame Revolutions: A cloud-based collaborative environment for teaching introductory programming},
year = {2015},
isbn = {9781450337960},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2811681.2811683},
doi = {10.1145/2811681.2811683},
abstract = {The PrimeGame is an established mathematical programming game that has been used successfully in undergraduate computer science teaching since 2003. To meet the increasing demand for innovative programming tools in undergraduate tertiary and secondary education, we have created SoGaCo, a novel platform to deliver the PrimeGame and similar games to a wide audience via standard web browsers. SoGaCo is designed to have a very low total cost of ownership. This is achieved by enabling teachers to provision a customised collaborative development environment on commodity cloud computing infrastructure. Amongst the unique features of the platform are its social networking features and support for polyglot programming.In this paper, we describe the requirements for this system, its design and implementation. We focus on how the scalability and security challenges of an open web-based development environment are addressed. This includes a discussion of the sandboxing and verification techniques we have developed in order to safeguard server-side code execution on the Java Virtual Machine.},
booktitle = {Proceedings of the ASWEC 2015 24th Australasian Software Engineering Conference},
pages = {8–12},
numpages = {5},
location = {Adelaide, SA, Australia},
series = {ASWEC ' 15 Vol. II}
}

@inproceedings{10.1145/2145204.2145399,
author = {Lautam\"{a}ki, Janne and Nieminen, Antti and Koskinen, Johannes and Aho, Timo and Mikkonen, Tommi and Englund, Marc},
title = {CoRED: browser-based Collaborative Real-time Editor for Java web applications},
year = {2012},
isbn = {9781450310864},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2145204.2145399},
doi = {10.1145/2145204.2145399},
abstract = {While the users of completed applications are heavily moving from desktop to the web browser, the majority of developers are still working with desktop IDEs such as Eclipse or Visual Studio. In contrast to professional installable IDEs, current web-based code editors are simple text editors with extra features. They usually understand lexical syntax and can do highlighting and indenting, but lack many of the features seen in modern desktop editors. In this paper, we present CoRED, a browser-based collaborative real-time code editor for Java applications. CoRED is a complete Java editor with error checking and automatic code generation capabilities, extended with some features commonly associated with social media. As a proof of the concept, we have extended CoRED to support Java based Vaadin framework for web applications. Moreover, CoRED can be used either as a stand-alone version or as a component of any other software. It is already used as a part of browser based Arvue IDE.},
booktitle = {Proceedings of the ACM 2012 Conference on Computer Supported Cooperative Work},
pages = {1307–1316},
numpages = {10},
keywords = {collaboration architectures, development tools, vaadin},
location = {<conf-loc>, <city>Seattle</city>, <state>Washington</state>, <country>USA</country>, </conf-loc>},
series = {CSCW '12}
}

@inproceedings{10.1145/3003397.3003403,
author = {Krishnamoorthy, Sai Prasanth and Kapila, Vikram},
title = {Using A Visual Programming Environment and Custom Robots to Learn C Programming and K-12 STEM Concepts},
year = {2016},
isbn = {9781450348027},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3003397.3003403},
doi = {10.1145/3003397.3003403},
abstract = {This paper presents a robot-Visual Programming Environment (VPE) interface that can support K-12 students to learn science, technology, engineering, and math (STEM) concepts. Specifically, we employ Google's Blockly VPE to construct a blocks-based visual programming tool to facilitate easy programming of and interaction with physical robots. Through a careful and intentional integration of the Blockly VPE and physical robots, we illustrate that many K-12 level STEM concepts, which are traditionally treated through lectures and problem-solving, can be explored in a hands-on manner. The use of Blockly VPE obviates the need for prior experience with computer programming or familiarity with advanced programming concepts. Moreover, it permits students to learn various programming constructs, sequentially, starting from the fundamentals and gradually progressing to advanced concepts. The web-based Blockly VPE provides an interface that allows the user to browse through a block library and construct a block code for which a corresponding C program is automatically generated. The default web-based Blockly interface has been modified to permit the user to edit the resulting C program or to create an entirely new C program. Moreover, the Blockly VPE allows the user to wirelessly upload the C program to a Linux server running on a Raspberry Pi computer hosted on the robot. The Raspberry Pi compiles the received C program and serially transfers corresponding instructions to the robot's embedded hardware. The efficacy of the proposed robot-VPE interface is examined through students' experiences in conducting several illustrative robot-based STEM learning activities. The results of content quizzes and surveys show gains in students' understanding of STEM concepts after participation in robotics activities with the VPE interface.},
booktitle = {Proceedings of the 6th Annual Conference on Creativity and Fabrication in Education},
pages = {41–48},
numpages = {8},
keywords = {Blockly, Interface, K-12 STEM Education, Puppet Robot, Robotics, Visual Programming},
location = {Stanford, CA, USA},
series = {FabLearn '16}
}

@inproceedings{10.1145/2567948.2578040,
author = {Arapov, Pavel and Buffa, Michel and Ben Othmane, Amel},
title = {Developing web of data applications from the browser},
year = {2014},
isbn = {9781450327459},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2567948.2578040},
doi = {10.1145/2567948.2578040},
abstract = {WikiNEXT is a wiki engine 100% written in JavaScript that relies on recent APIs and frameworks. It has been designed to author web applications directly in a web browser, which can exploit the web of data. It combines the functionalities of a semantic wiki with those of a Web-based IDE (Integrated Development Environment) in order to develop web applications in addition to writing classic documents. It gives developers a rich internal API (Application Programming Interface) and provides several functionalities to exploit the web of data. Our approach uses templates, a special type of wiki pages that represent the semantic data model. Templates generate wiki pages with semantic annotations that are stored as quadruplets in a triple store engine. To query this semantic data, we provide a SPARQL endpoint. Screencasts are available on YouTube (look for WikiNEXT).},
booktitle = {Proceedings of the 23rd International Conference on World Wide Web},
pages = {599–602},
numpages = {4},
keywords = {ides, knowledge management, semantic web, semantic wikis, web applications, web2.0, wikis},
location = {Seoul, Korea},
series = {WWW '14 Companion}
}

@inproceedings{10.1145/2185677.2185714,
author = {Shen, Chenguang and Herman, Henry and Charbiwala, Zainul and Srivastava, Mani B.},
title = {MiDebug: microcontroller integrated development and debugging environment},
year = {2012},
isbn = {9781450312271},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2185677.2185714},
doi = {10.1145/2185677.2185714},
abstract = {We present MiDebug, a web-based Integrated Development Environment (IDE) for embedded system programming with in-browser debugging capabilities. This web application greatly reduces the time and effort required for rapid prototyping of microcontroller based devices.},
booktitle = {Proceedings of the 11th International Conference on Information Processing in Sensor Networks},
pages = {133–134},
numpages = {2},
keywords = {debugging, integrated development environment, microcontroller programming},
location = {Beijing, China},
series = {IPSN '12}
}

@inproceedings{10.1145/2729094.2754859,
author = {Toll, Daniel and Olsson, Tobias and Ericsson, Morgan and Wingkvist, Anna},
title = {Detailed Recordings of Student Programming Sessions},
year = {2015},
isbn = {9781450334402},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2729094.2754859},
doi = {10.1145/2729094.2754859},
abstract = {Observation is important when we teach programming. It can help identify students that struggle, concepts that are not clearly presented during lectures, poor assignments, etc. However, as development tools become more widely available or courses move off-campus and online, we lose our ability to naturally observe students. Online programming environments provide an opportunity to record how students solve assignments and the data recorded allows for in-depth analysis. For example, file activities, mouse movements, text-selections, and text caret movements provide a lot of information on when a programmer collects information and what task is currently worked on. We developed CSQUIZ to allow us to observe students on our online courses through data analysis. Based on our experience with the tool in a course, we find recorded sessions a sufficient replacement for natural observations.},
booktitle = {Proceedings of the 2015 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {328},
numpages = {1},
keywords = {measurement, programming assignment, programming behavior, programming environments},
location = {Vilnius, Lithuania},
series = {ITiCSE '15}
}

@inproceedings{10.1145/3419635.3419731,
author = {Zhuo, Wang},
title = {Design and Development of Platform System for English Assisted Instruction Based on ASP},
year = {2020},
isbn = {9781450387729},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3419635.3419731},
doi = {10.1145/3419635.3419731},
abstract = {The platform is designed to solve the problem that teachers and students cannot work and communicate in a unified digital learning platform. The purpose of teaching assistant platform system is to establish a unified and convenient digital platform for teachers and students. The online English teaching system is a B/S structure of the system, its release needs the support of WEB server, and database system to facilitate the storage of system, data query, modify, delete, update the information system, also needs a simple, convenient programming tools that can interact with the database. In view of the above requirements, this system chooses IIS as development environment 5.0SQL Server2000 and ASP. The paper presents design and development of platform system for English assisted instruction based on ASP.},
booktitle = {Proceedings of the 2020 International Conference on Computers, Information Processing and Advanced Education},
pages = {481–484},
numpages = {4},
keywords = {ASP, English assisted, SQL Server2000, WEB server},
location = {Ottawa, ON, Canada},
series = {CIPAE 2020}
}

@inproceedings{10.1145/1562877.1563025,
author = {Kagawa, Koji},
title = {WAPPEN: a web-based application framework for programming and its bison/flex plug-in},
year = {2009},
isbn = {9781605583815},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1562877.1563025},
doi = {10.1145/1562877.1563025},
abstract = {This poster presents an Eclipse RCP-based application framework named Wappen for learning programming, and especially, its plugin for Bison and Flex. In courses such as compiler construction and programming languages, learners have to use multiple languages. Time and e ort spent by learners on installation and configuration of programming environments are not negligible. Wappen provides an infrastructure on which teachers can arrange simple Web-based programming environments for various programming languages by writing plug-ins. Wappen for Oolong has been successfully used in our compiler construction lab, where Oolong is an assembly language for the Java Virtual Machine. This poster introduces Wappen for Bison/Flex that tries to help learners avoid pitfalls of Bison/Flex in some respects. It is planned to be put into practical use in our compiler construction lab this year.},
booktitle = {Proceedings of the 14th Annual ACM SIGCSE Conference on Innovation and Technology in Computer Science Education},
pages = {383},
numpages = {1},
keywords = {compiler construction, eclipse, programming languages, web},
location = {Paris, France},
series = {ITiCSE '09}
}

@inproceedings{10.1145/2077489.2077515,
author = {Mazhirin, I. V.},
title = {Applicative information system for the web environment},
year = {2011},
isbn = {9781450310475},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2077489.2077515},
doi = {10.1145/2077489.2077515},
abstract = {Applicative information system for the web environment implemented on the basis of the computing system of general purpose, on the basis of a programming language of high level LISP with its immersing in the combinatory environment in basis {K, S} with possible hardware support of combinators of basis is offered. Environment levels are considered: Interface, Combinatory abstract machine, as a support basic element applicative programming environment, System level, Processor {K, S} - level of hardware units K, S and their conjugation to the personal computer, the circuit of the extension of a programming environment for creation of hardware support of basis {K, S}: LISP -- {K, S} - the Assembler -- the Hardware reducers K, S.},
booktitle = {Proceedings of the International Conference on Management of Emergent Digital EcoSystems},
pages = {143–144},
numpages = {2},
keywords = {applicative, combinator, combinatory basis, information system},
location = {San Francisco, California},
series = {MEDES '11}
}

@article{10.5555/1181849.1181887,
author = {Bi, Yaodong and Beidler, John},
title = {An environment for large software team projects},
year = {2007},
issue_date = {January 2007},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {22},
number = {3},
issn = {1937-4771},
abstract = {This paper describes an advanced integrated development environment that may be used by juniors and seniors for large software team projects. The environment is mainly designed for Java Web-based applications with database support; however, it may be used for other types of software applications in other programming languages with minor adjustments. The key components of this environment include a database management system, a Web server, a concurrent versioning system, and an industrial-strength integrated development environment. All the components are open-source and can be downloaded and installed free of charge.},
journal = {J. Comput. Sci. Coll.},
month = {jan},
pages = {190–197},
numpages = {8}
}

@inproceedings{10.1145/3478432.3499122,
author = {Yagubyan, Abel and Garcia, Dan},
title = {Seamless Embedding of Programming IDEs into Computer-Based Testing Software},
year = {2022},
isbn = {9781450390712},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3478432.3499122},
doi = {10.1145/3478432.3499122},
abstract = {Interest in computer-based assessment has increased in recent years, most certainly due to a shift to online learning due to the COVID pandemic. Instructors are creating questiongenerators for Computer Science classes on PrairieLearn (PL), an open-source platform developed at the University of Illinois at Urbana-Champaign PrairieLearn. The software generates differentvariants of each question to students through randomization. The challenge up to now has been that automatically graded coding problems in RISC-V or Snap!, some of the significant languages used in undergraduate Computer Science courses at our university, weren't possible to do within the software. Thequestion could be displayed, but then the student would have to load their favorite integrated development environment (IDE), code it up, and thenreturn to PL to upload their solution. This poster discusses our approach to embedding interactive development environments for Venus (RISC-V) and Snap! directly into PrairieLearn, so students never have to leave the browser tab!},
booktitle = {Proceedings of the 53rd ACM Technical Symposium on Computer Science Education V. 2},
pages = {1168},
numpages = {1},
keywords = {computer-based testing, mastery learning},
location = {Providence, RI, USA},
series = {SIGCSE 2022}
}

@article{10.5555/2382887.2382892,
author = {Gordon, Aaron},
title = {Introduction to app inventor},
year = {2012},
issue_date = {December 2012},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {28},
number = {2},
issn = {1937-4771},
abstract = {App inventor is a web-based drag-and-drop programming environment for Android applications. This tutorial will introduce App Inventor to the participants, demonstrate App Inventor's capabilities, and discuss ways App Inventor can be used with students.},
journal = {J. Comput. Sci. Coll.},
month = {dec},
pages = {24},
numpages = {1}
}

@inproceedings{10.1145/375735.376094,
author = {Isbister, Katherine and Young, David},
title = {SageTalk: designing a tool for designing successful web-based social agents},
year = {2001},
isbn = {158113326X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/375735.376094},
doi = {10.1145/375735.376094},
abstract = {In this paper, we briefly describe a programming environment and platform for creating successful (engaging and useful) web- based social agents, and offer some general recommendations for others interested in generating programming and presentation environments that support the development of successful social agents.},
booktitle = {Proceedings of the Fifth International Conference on Autonomous Agents},
pages = {182–183},
numpages = {2},
keywords = {agent tools, conversational agents, design methodologies, social agents},
location = {Montreal, Quebec, Canada},
series = {AGENTS '01}
}

@article{10.5555/3417608.3417620,
author = {Canty, Jay and Cerna, Edgar and Hsin, Wen-Jung},
title = {Introduction to Alexa programming},
year = {2020},
issue_date = {April 2020},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {35},
number = {6},
issn = {1937-4771},
abstract = {In this one-hour tutorial, the participants will be introduced to the Alexa programming environment, and learn how to create an Alexa skill. Specifically, this tutorial is designed for the participants who have never programmed any Alexa skills before. The outline of the tutorial is as follows:(0) Prior to coming to the tutorial, the participants are encouraged to sign up for an account in Amazon Developer Services [1], and another account in Amazon Web Services [2] so that the tutorial is primarily designated for learning the actual content.(1) General introduction to Alexa programming environment.(2) General introduction to Alexa related devices.(3) Demonstration of Alexa skills.(4) Build an Alexa skill.(5) Demonstration of additional Alexa skills.(6) Discussion on Alexa programming resources, experience sharing, and Q&amp;A.},
journal = {J. Comput. Sci. Coll.},
month = {apr},
pages = {117},
numpages = {1}
}

@inproceedings{10.1145/988672.988731,
author = {Nguyen, Tien Nhut and Munson, Ethan Vincent and Thao, Cheng},
title = {Fine-grained, structured configuration management for web projects},
year = {2004},
isbn = {158113844X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/988672.988731},
doi = {10.1145/988672.988731},
abstract = {Researchers in Web engineering have regularly noted that existing Web application development environments provide little support for managing the evolution of Web applications. Key limitations of Web development environments include line-oriented change models that inadequately represent Web document semantics and in ability to model changes to link structure or the set of objects making up the Webapplication. Developers may find it difficult to grasp how theoverall structure of the Web application has changed over time and may respond by using ad hoc solutions that lead to problems of maintain ability, quality and reliability. Web applications are software artifacts, and as such, can benefit from advanced version control and software configuration management (SCM)technologies from software engineering. We have modified an integrated development environment to manage the evolution and maintenance of Web applications. The resulting environment is distinguished by itsfine-grained version control framework, fine-grained Web contentchange management, and product versioning configuration management, in which a Web project can be organized at the logical level and itsstructure and components are versioned in a fine-grained manner aswell. This paper describes the motivation for this environment as well as its user interfaces, features, and implementation.},
booktitle = {Proceedings of the 13th International Conference on World Wide Web},
pages = {433–442},
numpages = {10},
keywords = {software configuration management, version control, web engineering},
location = {New York, NY, USA},
series = {WWW '04}
}

@inproceedings{10.1145/3555009.3555035,
author = {Hackett, Phil},
title = {Teaching Programming at a Distance},
year = {2022},
isbn = {9781450397421},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3555009.3555035},
doi = {10.1145/3555009.3555035},
abstract = {Novice programmers face significant barriers when they cannot learn face-to-face with a teacher or with peer support in a physical computer laboratory. Online collaborative programming environments (virtual computing laboratories) enable an overview of multiple students programming at the same time, with tutors able to interact with and support individual students or groups in real-time.},
booktitle = {Proceedings of the 2022 Conference on United Kingdom &amp; Ireland Computing Education Research},
articleno = {24},
numpages = {1},
location = {<conf-loc>, <city>Dublin</city>, <country>Ireland</country>, </conf-loc>},
series = {UKICER '22}
}

@inproceedings{10.1145/2540930.2568483,
author = {Kubitza, Thomas and Schmidt, Albrecht and Pohl, Norman and Petrelli, Daniela and Dingler, Tilman and Dulake, Nick},
title = {Tools and methods for creating interactive artifacts},
year = {2014},
isbn = {9781450326353},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2540930.2568483},
doi = {10.1145/2540930.2568483},
abstract = {Many embedded platforms that support the creation of interactive smart objects have become available over the last years. Arduino, Raspberry Pi, electric imp, mbed, MSP430, and .NET Gadgeteer are examples of hardware platforms with very different properties and capabilities. In order to make interactive artifacts additional sensors, actuators, and networking elements are available for the different platforms. Additionally there are different software environments and development tools that support developers in creating custom applications for embedded systems. It is apparent that one size doesn't fit all and that choosing the right platform and tools is an important step towards an effective solution. In this TEI2014 studio we first provide an overview of available platforms and tools that allow developers to create novel and tangible interactive systems. We will present and discuss developing environments, with a specific focus on browser based programming tools and social coding. In a second step we will have 2 hands-on sessions, where in each we use a different platform and create an initial functional prototype. The aim is to provide the participants with an overview of existing embedded development tools suitable for creating interactive artifacts and to provide some hands on-experience with different new platforms.},
booktitle = {Proceedings of the 8th International Conference on Tangible, Embedded and Embodied Interaction},
pages = {385–388},
numpages = {4},
keywords = {custom device development, development tools, embedded systems, interaction hardware, smart artifacts, social coding, tangible objects},
location = {Munich, Germany},
series = {TEI '14}
}

@inproceedings{10.1145/2538862.2538908,
author = {Tang, Terry and Rixner, Scott and Warren, Joe},
title = {An environment for learning interactive programming},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2538908},
doi = {10.1145/2538862.2538908},
abstract = {We describe a web-based programming environment designed to support teaching introductory programming for a massive open online class. We discuss some of the thought processes behind the design of this environment and then focus on two key innovations incorporated in our environment: a simplified GUI library for interactive Python programming and a browser-based tool for visualizing the execution of event-driven Python programs.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {671–676},
numpages = {6},
keywords = {CS1, interactive, python, visualization},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14}
}

@article{10.1145/2560016,
author = {Kuttal, Sandeep K. and Sarma, Anita and Rothermel, Gregg},
title = {On the benefits of providing versioning support for end users: An empirical study},
year = {2014},
issue_date = {February 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {2},
issn = {1073-0516},
url = {https://doi.org/10.1145/2560016},
doi = {10.1145/2560016},
abstract = {End users with little formal programming background are creating software in many different forms, including spreadsheets, web macros, and web mashups. Web mashups are particularly popular because they are relatively easy to create, and because many programming environments that support their creation are available. These programming environments, however, provide no support for tracking versions or provenance of mashups. We believe that versioning support can help end users create, understand, and debug mashups. To investigate this belief, we have added versioning support to a popular wire-oriented mashup environment, Yahoo! Pipes. Our enhanced environment, which we call “Pipes Plumber,” automatically retains versions of pipes and provides an interface with which pipe programmers can browse histories of pipes and retrieve specific versions. We have conducted two studies of this environment: an exploratory study and a larger controlled experiment. Our results provide evidence that versioning helps pipe programmers create and debug mashups. Subsequent qualitative results provide further insights into the barriers faced by pipe programmers, the support for reuse provided by our approach, and the support for debugging provided.},
journal = {ACM Trans. Comput.-Hum. Interact.},
month = {feb},
articleno = {9},
numpages = {43},
keywords = {End-user software engineering, Mashups, Yahoo! Pipes, debugging, programming barriers, reuse, versioning}
}

@inproceedings{10.1145/319294.319319,
author = {Lopes, Arthur V.},
title = {Ada+SQL—an overview},
year = {1999},
isbn = {1581131275},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/319294.319319},
doi = {10.1145/319294.319319},
abstract = {Ada+SQL is a programming environment for Ada 95 extended with basic SQL single user capabilities. It incorporates a very fast compiler and interpreter, with debugging options, library generator and browser, syntax template editors, programmer wizard, two-dimensional graphics, SQL interactive interface and hypertext documentation on the environment, Ada 95 and SQL. Several implementation aspects are discussed.},
booktitle = {Proceedings of the 1999 Annual ACM SIGAda International Conference on Ada},
pages = {157–162},
numpages = {6},
keywords = {compilers, computer education, environments, interpreters, programming, relational databases},
location = {Redondo Beach, California, USA},
series = {SIGAda '99}
}

@inproceedings{10.1145/3408877.3439572,
author = {Byun, Jeongmin and Park, Jungkook and Oh, Alice},
title = {Pythonpad: Server-free Python Hands-on Exercise for Online Programming Classes},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3439572},
doi = {10.1145/3408877.3439572},
abstract = {We propose Pythonpad, an open-source JavaScript library that supports web-based Python programming exercises. Unlike other standalone web-based programming tools, Pythonpad can be easily integrated into other websites. Although it runs learners' Python code in client-side web browsers, Pythonpad supports a file system, building and importing external modules, and many essential built-in Python libraries to teach basic programming concepts in CS1 classes.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {1328},
numpages = {1},
keywords = {interactive learning, programming education, scalable education},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@article{10.1145/384192.384193,
author = {Vitter, Jeffrey Scott},
title = {External memory algorithms and data structures: dealing with massive data},
year = {2001},
issue_date = {June 2001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {33},
number = {2},
issn = {0360-0300},
url = {https://doi.org/10.1145/384192.384193},
doi = {10.1145/384192.384193},
abstract = {Data sets in large applications are often too massive to fit completely inside the computers internal memory. The resulting input/output communication (or I/O) between fast internal memory and slower external memory (such as disks) can be a major performance bottleneck. In this article we survey the state of the art in the design and analysis of external memory (or EM) algorithms and data structures, where the goal is to exploit locality in order to reduce the I/O costs. We consider a variety of EM paradigms for solving batched and online problems efficiently in external memory. For the batched problem of sorting and related problems such as permuting and fast Fourier transform, the key paradigms include distribution and merging. The paradigm of disk striping offers an elegant way to use multiple disks in parallel. For sorting, however,  disk striping can be nonoptimal with respect to I/O, so to gain further improvements we discuss distribution and merging techniques for using the disks independently. We also consider useful techniques for batched EM problems involving matrices (such as matrix multiplication and transposition), geometric data (such as finding intersections and constructing convex hulls), and graphs (such as list ranking, connected components, topological sorting, and shortest paths). In the online domain, canonical EM applications include dictionary lookup and range searching. The two important classes of indexed data structures are based upon extendible hashing and B-trees. The paradigms of filtering and bootstrapping provide a convenient means in online data structures to make effective use of the data accessed from disk. We also reexamine some of the above EM problems in slightly different settings, such as when the data items are moving, when the data items are variable-length (e.g., text strings), or when the allocated amount of internal memory can change dynamically. Programming tools and environments are available for simplifying the EM programming task. During the course of the survey, we report on some experiments in the domain of spatial databases using the TPIE system (transparent parallel I/O programming environment). The newly developed EM algorithms and data structures that incorporate the paradigms we discuss are significantly faster than methods currently used in practice.},
journal = {ACM Comput. Surv.},
month = {jun},
pages = {209–271},
numpages = {63},
keywords = {B-tree, I/O, batched, block, disk, dynamic, extendible hashing, external memory, hierarchical memory, multidimensional access methods, multilevel memory, online, out-of-core, secondary storage, sorting}
}

@inproceedings{10.1145/1984708.1984722,
author = {Sawadsky, Nicholas and Murphy, Gail C.},
title = {Fishtail: from task context to source code examples},
year = {2011},
isbn = {9781450305990},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1984708.1984722},
doi = {10.1145/1984708.1984722},
abstract = {Implementing software development tools as integrated development environment (IDE) plugins gives tools direct access to a range of useful representations of the program being created and can improve programmer efficiency. These benefits must be weighed against the effort to integrate the tool into the IDE, effort which may need to be repeated for each IDE targeted. In this paper, we introduce Fishtail, a prototype plugin for the Eclipse IDE, which assists programmers in discovering code examples and documentation on the web relevant to their current task. Fishtail uses a detailed history of programmer interactions with the source code to automatically determine relevant web resources. We describe the key factors that make it attractive to implement Fishtail as a plugin, and the requirements Fishtail imposes on the plugin/IDE interface. To reach a broader user base and understand how well our tool supports different programming styles and IDE architectures, we have recently begun investigating how to make a version of Fishtail available in the Visual Studio IDE. We outline some of the challenges we face in trying to reuse code from the original Eclipse plugin.},
booktitle = {Proceedings of the 1st Workshop on Developing Tools as Plug-Ins},
pages = {48–51},
numpages = {4},
keywords = {degree-of-interest, development environment, example-centric development, interaction history, program views},
location = {Waikiki, Honolulu, HI, USA},
series = {TOPI '11}
}

@inproceedings{10.1145/563340.563411,
author = {Rodger, Susan H.},
title = {Introducing computer science through animation and virtual worlds},
year = {2002},
isbn = {1581134738},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/563340.563411},
doi = {10.1145/563340.563411},
abstract = {We describe a course for non-majors that teaches computer science concepts and programming by creating simple animations and building 2D and 3D virtual worlds. Students work with scripting languages, an interactive programming environment, a programmable modeling environment, and finish with a simple programming language. Students work in pairs on computers during class. Each student creates a web portfolio to display their work.},
booktitle = {Proceedings of the 33rd SIGCSE Technical Symposium on Computer Science Education},
pages = {186–190},
numpages = {5},
location = {Cincinnati, Kentucky},
series = {SIGCSE '02}
}

@inproceedings{10.1145/2046396.2046408,
author = {Bhardwaj, Anant P. and Luciano, Dave and Klemmer, Scott R.},
title = {Redprint: integrating API specific "instant example" and "instant documentation" display interface in IDEs},
year = {2011},
isbn = {9781450310147},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2046396.2046408},
doi = {10.1145/2046396.2046408},
abstract = {Software libraries for most of the modern programming languages are numerous, large and complex. Remembering the syntax and usage of APIs is a difficult task for not just novices but also expert programmers. IDEs (Integrated Development Environment) provide capabilities like autocomplete and intellisense to assist programmers; however, programmers still need to visit search engines like Google to find API (Application Program Interface) documentation and samples. This paper evaluates Redprint - a browser based development environment for PHP that integrates API specific "Instant Example" and "Instant Documentation" display interfaces. A comparative laboratory study shows that integrating API specific "Instant Example" and "Instant Documentation" display interfaces into a development environment significantly reduces the cost of searching and thus significantly reduces the time to develop software.},
booktitle = {Proceedings of the 24th Annual ACM Symposium Adjunct on User Interface Software and Technology},
pages = {21–22},
numpages = {2},
keywords = {example centric programming, instant documentation display interface, instant example display interface, redprint},
location = {Santa Barbara, California, USA},
series = {UIST '11 Adjunct}
}

@inproceedings{10.1145/3573260.3573262,
author = {Hackett, Phil and Wermelinger, Michel and Kear, Karen and Douce, Chris},
title = {Using a Virtual Computing Lab to Teach Programming at a Distance},
year = {2023},
isbn = {9781450398213},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3573260.3573262},
doi = {10.1145/3573260.3573262},
abstract = {This paper discusses a pilot research project, which investigated the use of online collaborative IDEs (Integrated development environments) during a first-year computing degree course. The IDEs used can be described as virtual computing labs because they replicate some of the actions possible in physical computing labs. Students were supported by a tutor with real-time help and feedback provided, whilst they were programming, without being collocated. The use of two different platforms is considered with the benefits and drawbacks discussed. Students and tutors indicated that they would like to use a virtual computing lab approach in the future.},
booktitle = {Proceedings of the 7th Conference on Computing Education Practice},
pages = {5–8},
numpages = {4},
keywords = {collaborative programming, novice programmers, virtual computing laboratory},
location = {<conf-loc>, <city>Durham</city>, <country>United Kingdom</country>, </conf-loc>},
series = {CEP '23}
}

@inproceedings{10.1145/2468356.2468690,
author = {Park, Thomas H. and Saxena, Ankur and Jagannath, Swathi and Wiedenbeck, Susan and Forte, Andrea},
title = {OpenHTML: designing a transitional web editor for novices},
year = {2013},
isbn = {9781450319522},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2468356.2468690},
doi = {10.1145/2468356.2468690},
abstract = {We describe the initial design rationale and early findings from studies of a web editor for beginners called openHTML. We explain our strategy of transitional design that views web editors as a part of a complex socio-technical system that spans multiple tools, practices, and actors. Our goal is to create a toolkit that can engage beginners in meaningful activities now and prepare them for more sophisticated activities in the future.},
booktitle = {CHI '13 Extended Abstracts on Human Factors in Computing Systems},
pages = {1863–1868},
numpages = {6},
keywords = {code editors, learner-centered design, web development},
location = {Paris, France},
series = {CHI EA '13}
}

@inproceedings{10.1145/3319647.3325852,
author = {Glikson, Alex and Nie, Shichao and Breitgand, David},
title = {Runbox: serverless interactive computing platform},
year = {2019},
isbn = {9781450367493},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3319647.3325852},
doi = {10.1145/3319647.3325852},
abstract = {Serverless computing revolutionizes cloud software by eliminating the need to manage the underlying infrastructure, while providing efficient scaling, performance and security isolation as well as usage metering.The goal of Runboxes is to bring the benefits of serverless computing to Interactive Computing, involving ad-hoc, stateful, resource-intensive tasks, whose resource demand is directly affected by the observed user behavior. We evaluate Runboxes in the context of cost-efficient hosting of sandbox programming environments for Computer Science students.},
booktitle = {Proceedings of the 12th ACM International Conference on Systems and Storage},
pages = {191},
numpages = {1},
keywords = {interactive computing, kubernetes, runbox, serverless},
location = {Haifa, Israel},
series = {SYSTOR '19}
}

@inproceedings{10.1145/28315.28341,
author = {Stoneburner, D. F.},
title = {Managing APL public code for an in-house APL system (before and after LOGOS)},
year = {1987},
isbn = {0897912268},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/28315.28341},
doi = {10.1145/28315.28341},
abstract = {This paper will present APL Public Library management concepts used in a large in-house APL system development environment and describe a number of tools developed for this purpose. Public libraries, workspaces, functions and variables are discussed as well as documentation, reporting of changes, audit records, backup versions, and test versions. User tools discussed include functions for describing APL public files, libraries, workspaces, functions and variables, locating these objects, keyword searches, and a glossary of terms. Other user facilities include a NEWS system and an online system for submitting problem reports and requests for enhancements. Further maintenance tools include automatic generation of WSDOC listings when changes are made and automatically generated reports providing a variety of information such as libraries or workspaces lacking descriptions, lists of APL public workspaces and files with their status, function source verification, and exception reporting of workspace changes.A discussion of LOGOS, a programming environment for APL offered by IP Sharp Associates, is also presented and how it enhances the capabilities previously described.},
booktitle = {Proceedings of the International Conference on APL: APL in Transition},
pages = {210–215},
numpages = {6},
location = {Dallas, Texas, USA},
series = {APL '87}
}

@inproceedings{10.5555/1041530.1041551,
author = {Neubauer, Bruce J. and Sever, Suzanne},
title = {Web matrix: preliminary experiences in its use to introduce programming to non-majors},
year = {2004},
publisher = {Mid-South College Computing Conference},
address = {Little Rock, Arkansas, USA},
abstract = {Web Matrix is Microsoft's free software development tool. Although it does not have all of the features of Visual Studio it is well suited to introducing students to object-oriented programming and the .NET framework. Students in four sections of a non-majors course at a state university were successful in completing an assignment with Web Matrix and in putting the resulting .aspx files on a remote Web server. None of the limitations of Web Matrix (compared to Visual Studio) compromised its value as a teaching tool at this level of instruction. Some of the qualities of Web Matrix may actually make it preferable to Visual Studio for introductory teaching purposes.Web Matrix is a Microsoft integrated development environment (IDE) including visual development and automatic code generation available as a free download from http://www.asp.net. It is the result of the "Web Matrix Project" initiated by a small team of ASP.NET developers at Microsoft Corporation, lead by Scott Guthrie and Nikhil Korthari. What began as primarily an internal testing tool evolved quickly into a popular personal development environment for the development of ASP.NET applications and Web services. It also includes support for development of applications for mobile devices. It requires no product registration and comes with its own personal Web server. Now in its second version, the tool provides developers a quick and easy way to create small .NET projects and, in our opinion, has features and qualities that make it an excellent teaching tool.},
booktitle = {Proceedings of the 2nd Annual Conference on Mid-South College Computing},
pages = {141–147},
numpages = {7},
location = {<conf-loc>, <city>Little Rock</city>, <state>Arkansas</state>, <country>USA</country>, </conf-loc>},
series = {MSCCC '04}
}

@inproceedings{10.1145/3550356.3561591,
author = {Anderson, Lachlan and Barker, Briana and Reid, Alice and Lin, Kaijie and Khalajzadeh, Hourieh and Grundy, John},
title = {Node-read: a visually accessible low-code software development extension},
year = {2022},
isbn = {9781450394673},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3550356.3561591},
doi = {10.1145/3550356.3561591},
abstract = {Low-code software development environments are reliant on spatial and graphical user interfaces. As a result, many of these tools are in some way inaccessible to the visually impaired, and very few of these tools are built with visual accessibility in mind. In this paper, we evaluate the accessibility of existing low-code Integrated Development Environments (IDEs), for persons with partial or distorted vision. The aim of this study is to motivate making citizen/end-user software development accessible for users who are reliant on screen readers. We conducted a preliminary review of several low-code development environments which were open source and had a large existing user base, and identified that browser-based low-code IDEs did not integrate well with screen reader software. An extension of an open-source software, Node-RED, was created, as it was found to be suitable to our selection criteria. The extension, referred to as "Node-Read", focuses on improving compatibility with JAWS and NVDA screen readers. Node-Read's keyboard shortcuts, along with their inclusion in critical user documentation, were reported by study participants to be helpful in the basic operation of the software.},
booktitle = {Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
pages = {808–815},
numpages = {8},
location = {Montreal, Quebec, Canada},
series = {MODELS '22}
}

@inproceedings{10.1145/3426425.3426947,
author = {Coulon, Fabien and Auvolat, Alex and Combemale, Benoit and Bromberg, Y\'{e}rom-David and Ta\"{\i}ani, Fran\c{c}ois and Barais, Olivier and Plouzeau, No\"{e}l},
title = {Modular and distributed IDE},
year = {2020},
isbn = {9781450381765},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3426425.3426947},
doi = {10.1145/3426425.3426947},
abstract = {Integrated Development Environments (IDEs) are indispensable companions to programming languages. They are increasingly turning towards Web-based infrastructure. The rise of a protocol such as the Language Server Protocol (LSP) that standardizes the separation between a language-agnostic IDE, and a language server that provides all language services (e.g., auto completion, compiler...) has allowed the emergence of high quality generic Web components to build the IDE part that runs in the browser. However, all language services require different computing capacities and response times to guarantee a user-friendly experience within the IDE. The monolithic distribution of all language services prevents to leverage on the available execution platforms (e.g., local platform, application server, cloud). In contrast with the current approaches that provide IDEs in the form of a monolithic client-server architecture, we explore in this paper the modularization of all language services to support their individual deployment and dynamic adaptation within an IDE. We evaluate the performance impact of the distribution of the language services across the available execution platforms on four EMF-based languages, and demonstrate the benefit of a custom distribution.},
booktitle = {Proceedings of the 13th ACM SIGPLAN International Conference on Software Language Engineering},
pages = {270–282},
numpages = {13},
keywords = {Generative approach, IDE, Microservice},
location = {Virtual, USA},
series = {SLE 2020}
}

@inproceedings{10.1145/305786.305835,
author = {Arnow, David and Barshay, Oleg},
title = {On-line programming examinations using Web to teach},
year = {1999},
isbn = {1581130872},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/305786.305835},
doi = {10.1145/305786.305835},
abstract = {Using the automated code-checking capability of the WebToTeach system, we have built WebToTest, a system for administering on-line programming examination.The system successfully addresses many of the issues raised by recent work in on-line exams by providing reliable automatic checking of exam questions and a secure, restricted programming environment useable by the students during the exam. Its web-based character makes it amenable to distance education applications. Furthermore, because examinations may be administered on any collection of computers that provide a browser, and thus do not require reservation of the student programming labs.},
booktitle = {Proceedings of the 4th Annual SIGCSE/SIGCUE ITiCSE Conference on Innovation and Technology in Computer Science Education},
pages = {21–24},
numpages = {4},
keywords = {distance learning, instructional technology, on-line testing},
location = {Cracow, Poland},
series = {ITiCSE '99}
}

@inproceedings{10.1145/2445196.2445336,
author = {Brennan, Karen and Resnick, Mitchel},
title = {Stories from the scratch community: connecting with ideas, interests, and people},
year = {2013},
isbn = {9781450318686},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2445196.2445336},
doi = {10.1145/2445196.2445336},
abstract = {This special session aims to provoke discussion about new strategies for engaging young people in computer programming, drawing on experiences of educators and young people using the Scratch programming environment and online communities. The session will combine several different formats, including research presentations and analysis by two members of the team that develops and supports Scratch, short presentations and demonstrations by five educators and young people working with Scratch, and discussions among audience participants.},
booktitle = {Proceeding of the 44th ACM Technical Symposium on Computer Science Education},
pages = {463–464},
numpages = {2},
keywords = {community, computational thinking, education, learning, programming, scratch},
location = {Denver, Colorado, USA},
series = {SIGCSE '13}
}

@article{10.5555/2168874.2168901,
author = {Brandon, Dan},
title = {Building smartphone apps via HTML5, CSS, and JavaScript},
year = {2012},
issue_date = {May 2012},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {27},
number = {5},
issn = {1937-4771},
abstract = {HTML5 has become the new international web markup standard replacing XHTML and earlier versions of HTML. It has become the main web programming tool not only for traditional devices such as PC's and laptops but also for emerging mobile devices such as tablets and smartphones (iPhone, Android, etc.). As a result, CS/IT/IS students are showing a keen interest in both this new HTML platform and developing applications for these new devices as the job market for expertise in these technologies is booming.},
journal = {J. Comput. Sci. Coll.},
month = {may},
pages = {116–117},
numpages = {2}
}

@inproceedings{10.1145/3561833.3568496,
author = {Rajamani, Sriram},
title = {AI Assisted Programming},
year = {2022},
isbn = {9781450397759},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3561833.3568496},
doi = {10.1145/3561833.3568496},
abstract = {We present a vision for a futuristic programming environment, where ML models and logical rules co-exist and evolve over time. We substantiate our vision using three case studies: (1) safe code generation using large language models, (2) heterogeneous data extraction, and (2) regulatory compliance for online advertising. Using these case studies, we hypothesize how such a futuristic programming system can balance productivity with safety, security and reliability, present new research results, and point to directions for future work.},
booktitle = {Proceedings of the 15th Annual ACM India Compute Conference},
pages = {5},
numpages = {1},
location = {<conf-loc>, <city>Jaipur</city>, <country>India</country>, </conf-loc>},
series = {COMPUTE '22}
}

@inproceedings{10.1145/2811237.2811301,
author = {Mason, Dave},
title = {Performance from Aligning Smalltalk &amp; Javascript Classes},
year = {2015},
isbn = {9781450338578},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2811237.2811301},
doi = {10.1145/2811237.2811301},
abstract = {Amber is a wonderful Smalltalk programming environment that runs on top of Javascript, including a browser-based IDE and compiler, as well as command-line support. The only challenge is that execution performance can be 1--2 orders of magnitude slower than native Javascript code. Amber-Direct is a series of modest changes to the compiler and some infrastructure classes and methods that bring most generated programs to within a factor of two of native Javascript.The challenge we faced was maintaining a seamless integration into existing Javascript classes while maximizing fidelity to Smalltalk execution semantics.},
booktitle = {Proceedings of the International Workshop on Smalltalk Technologies},
articleno = {4},
numpages = {8},
location = {Brescia, Italy},
series = {IWST '15}
}

@inproceedings{10.1145/2034773.2034809,
author = {Chyzak, Fr\'{e}d\'{e}ric and Darrasse, Alexis},
title = {Using camlp4 for presenting dynamic mathematics on the web: DynaMoW, an OCaml language extension for the run-time generation of mathematical contents and their presentation on the web},
year = {2011},
isbn = {9781450308656},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2034773.2034809},
doi = {10.1145/2034773.2034809},
abstract = {We report on the design and implementation of a programming tool, DynaMoW, to control interactive and incremental mathematical calculations to be presented on the web. This tool is implemented as a language extension of OCaml using Camlp4. Fragments of mathematical code written for a computer-algebra system as well as fragments of mathematical web documents are embedded directly and naturally inside OCaml code. A DynaMoW-based application is made of independent web services, whose parameter types are checked by the OCaml extension. The approach is illustrated by two implementations of online mathematical encyclopedias on top of DynaMoW.},
booktitle = {Proceedings of the 16th ACM SIGPLAN International Conference on Functional Programming},
pages = {259–265},
numpages = {7},
keywords = {antiquotations, mathematical encyclopedias, metaprogramming, quotations, web services},
location = {Tokyo, Japan},
series = {ICFP '11}
}

@inproceedings{10.1145/2023607.2023610,
author = {Jazayeri, Mehdi and Ahmadi, Navid},
title = {End-user programming of web-native interactive applications},
year = {2011},
isbn = {9781450309172},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2023607.2023610},
doi = {10.1145/2023607.2023610},
abstract = {Web 2.0 has enabled Web users to create and share a variety of hyper-text based artifacts including embedded images, sound, and video on the Web. Creating Web-based interactive artifacts such as computer games, however, has remained a challenge: to end users due to the lack of end user programming tools; and to programmers due to the poor interactivity performance of the Web. With the emergence of HTML5 and improving performance of JavaScript engines, professional Web programmers have only just begun to develop Web-native interactive artifacts. Today's standard Web technologies make the Web a hospitable platform for efficient interactive applications both for professional programmers and end-users. With proper support, in tools and languages, end-user programming of interactive applications is feasible. In this paper, we review the current state of Web application development and the possibilities and potential benefits of end-user programming on the Web. We will use a case study, AgentWeb, a Web-based end-user development environment, as a representative of interactive Web applications. It is based completely on open Web technologies, rather than on any proprietary technologies. Given that 2D graphic interactive applications may be developed and efficiently executed on the Web, we discuss some of the potential applications in educational settings, including individual and collaborative learning.},
booktitle = {Proceedings of the 12th International Conference on Computer Systems and Technologies},
pages = {11–16},
numpages = {6},
keywords = {HTML5, World Wide Web, end-user programming, open web, web applications, web native applications, web programming},
location = {Vienna, Austria},
series = {CompSysTech '11}
}

@inproceedings{10.1145/2839509.2844682,
author = {Johnson, Chris and Amthauer, Heather and Hardt, Ryan and Bui, Peter},
title = {Mixing Code and 3D Printers with Madeup (Abstract Only)},
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2844682},
doi = {10.1145/2839509.2844682},
abstract = {Madeup is a text- and blocks-based programming language for making things up---literally. Programmers write sequences of commands to move and turn through space, tracing out printable 3D shapes with algorithms and mathematical operations. The language is designed to teach computation from a tangible, first-person perspective and help students integrate computation back into the physical world. In this workshop, we empower educators to use the freely-available and browser-based Madeup programming environment in their classrooms. Participants should expect to learn actively.},
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
pages = {721},
numpages = {1},
keywords = {3d printing, media computation, syntonic learning},
location = {Memphis, Tennessee, USA},
series = {SIGCSE '16}
}

@inproceedings{10.1145/1247480.1247578,
author = {Wen, Ji-Rong and Ma, Wei-Ying},
title = {Webstudio: building infrastructure for web data management},
year = {2007},
isbn = {9781595936868},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1247480.1247578},
doi = {10.1145/1247480.1247578},
abstract = {To explore various ideas and algorithms for improving relevance of a search engine, we found it necessary to build an infrastructure to provide large-scale data management and data processing capabilities. WebStudio is an infrastructure we have constructed to provide an integrated development environment (IDE) for researchers and developers to use in quickly building prototypes and conducting experiments at Web-scale. It is also a Web data management system to allow users to easily store, access, and manipulate Web data.},
booktitle = {Proceedings of the 2007 ACM SIGMOD International Conference on Management of Data},
pages = {875–876},
numpages = {2},
keywords = {web data management, web search},
location = {Beijing, China},
series = {SIGMOD '07}
}

@inproceedings{10.1145/2647868.2654949,
author = {Roberts, Charles and Wright, Matthew and Kuchera-Morin, JoAnn and H\"{o}llerer, Tobias},
title = {Gibber: Abstractions for Creative Multimedia Programming},
year = {2014},
isbn = {9781450330633},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647868.2654949},
doi = {10.1145/2647868.2654949},
abstract = {We describe design decisions informing the development of Gibber, an audiovisual programming environment for the browser. Our design comprises a consistent notation across modalities in addition to high-level abstractions affording intuitive declarations of multimodal mappings, unified timing constructs, and rapid, iterative reinvocations of constructors while preserving the state of audio and visual graphs. We discuss the features of our environment and the abstractions that enable them. We close by describing use cases, including live audiovisual performances and computer science education.},
booktitle = {Proceedings of the 22nd ACM International Conference on Multimedia},
pages = {67–76},
numpages = {10},
keywords = {audio, creative coding, graphics, javascript, live coding, multimodal programming, web},
location = {Orlando, Florida, USA},
series = {MM '14}
}

@inproceedings{10.1145/1753846.1753953,
author = {Myers, Brad A. and Burnett, Margaret M. and Ko, Amy J. and Rosson, Mary Beth and Scaffidi, Christopher and Wiedenbeck, Susan},
title = {End user software engineering: CHI 2010 special interest group meeting},
year = {2010},
isbn = {9781605589305},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1753846.1753953},
doi = {10.1145/1753846.1753953},
abstract = {End users create software whenever they create, for instance, interactive web pages, games, educational simulations, or spreadsheets. Researchers are working to bring the benefits of rigorous software engineering methodologies to these end users to try to make their software more reliable. Unfortunately, errors are pervasive in end-user software, and the resulting impact is sometimes enormous. This special interest group meeting will bring together the community of researchers who are addressing this topic with the companies that are creating and using end-user programming tools.},
booktitle = {CHI '10 Extended Abstracts on Human Factors in Computing Systems},
pages = {3189–3192},
numpages = {4},
keywords = {empirical studies of programmers (esp), end users shaping effective software (euses), end-user development (eud), end-user software engineering (euse), natural programming, psychology of programming, web authoring},
location = {Atlanta, Georgia, USA},
series = {CHI EA '10}
}

@inproceedings{10.1145/3408877.3439620,
author = {Singh, Utkarsh and Crawford, Chris},
title = {AvaFlow: Learning to Design Intelligent Virtual Agents through Flow-Based Programming},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3439620},
doi = {10.1145/3408877.3439620},
abstract = {Modern Intelligent Virtual Agents (IVAs) are gradually progressing from just voice control tools to interactive, rich, humanlike social systems. However, creating these social humanlike IVAs is usually a daunting task and may present challenges for novice programmers, given the high technical complexity of practical implementation. In this work, we present AvaFlow, a web-based educational flow-based programming tool designed to assist novice programmers with creating and deploying IVA prototypes. We also aim to expand the use of the tool beyond IVAs to teach additional CS concepts related to data-driven applications.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {1307},
numpages = {1},
keywords = {data-driven applications, flow-based programming, intelligent virtual agents, multimodal applications},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@article{10.5555/3469581.3469594,
author = {White, Laurie},
title = {Programming with the cloud: conference tutorial},
year = {2021},
issue_date = {April 2021},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {36},
number = {7},
issn = {1937-4771},
abstract = {While there's a lot to learn about cloud computing, the cloud can also be used in classes as fundamental as programming courses with little change to the material being taught. The cloud can provide a uniform programming environment for students regardless of the computers they use to access it remotely. It can provide computing resources beyond what some students may have on their own computers. And there are even some cloud services that can be used to make even the simplest programming assignments more interesting.},
journal = {J. Comput. Sci. Coll.},
month = {apr},
pages = {93},
numpages = {1}
}

@inproceedings{10.1145/1562100.1562106,
author = {Boella, Guido and Grenna, Roberto and Cerisara, Andrea},
title = {Roles in building web applications using Java},
year = {2009},
isbn = {9781605585499},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1562100.1562106},
doi = {10.1145/1562100.1562106},
abstract = {In this paper we apply the powerJava model of roles and relationships to a web application programming environment. First we show how the notion of role, as defined in powerJava, combines and automates several aspects which are important in web application programming, and which are now unrelated and dealt with separately and mostly by hand, and thus prone to errors. Second we show how from the powerJava code a web application can be automatically constructed using Struts and Spring.},
booktitle = {Proceedings of the Workshop on Relationships and Associations in Object-Oriented Languages},
pages = {32–39},
numpages = {8},
location = {Genova, Italy},
series = {RAOOL '09}
}

@article{10.5555/3447080.3447082,
author = {White, Laurie},
title = {Programming with the cloud},
year = {2020},
issue_date = {October 2020},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {36},
number = {3},
issn = {1937-4771},
abstract = {While there's a lot to learn about cloud computing, the cloud can also be used in classes as fundamental as programming courses with little change to the material being taught. The cloud can provide a uniform programming environment for students regardless of the computers they use to access it remotely. It can provide computing resources beyond what some students may have on their own computers. And there are even some cloud services that can be used to make even the simplest programming assignments more interesting.},
journal = {J. Comput. Sci. Coll.},
month = {oct},
pages = {18},
numpages = {1}
}

@inproceedings{10.1145/3544549.3585642,
author = {Read, Jake Robert and Mcelroy, Leo and Bolsee, Quentin and Smith, B and Gershenfeld, Neil},
title = {Modular-Things: Plug-and-Play with Virtualized Hardware},
year = {2023},
isbn = {9781450394222},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3544549.3585642},
doi = {10.1145/3544549.3585642},
abstract = {We present a collection of tools for building plug-and-play modular physical computing systems that we call Modular-Things. Our tools consist of a set of single purpose embedded devices, a link layer agnostic message passing system for communication between devices, and a web-based programming environment. The devices are dynamically discovered and virtualized into software objects that can be programmed in the web IDE. We tested Modular-Things in a classroom setting where groups of novice machine builders constructed custom machines that integrated embedded systems modules with high-level responsive interfaces built with web and computer vision technologies. Users also extended our system by constructing new customized devices.},
booktitle = {Extended Abstracts of the 2023 CHI Conference on Human Factors in Computing Systems},
articleno = {210},
numpages = {6},
keywords = {composability, modular physical systems, prototyping frameworks, virtualization},
location = {<conf-loc>, <city>Hamburg</city>, <country>Germany</country>, </conf-loc>},
series = {CHI EA '23}
}

@inproceedings{10.1145/1984642.1984658,
author = {Goldman, Max and Little, Greg and Miller, Robert C.},
title = {Collabode: collaborative coding in the browser},
year = {2011},
isbn = {9781450305761},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1984642.1984658},
doi = {10.1145/1984642.1984658},
abstract = {Collaborating programmers should use a development environment designed specifically for collaboration, not the same one designed for solo programmers with a few collaborative processes and tools tacked on. This paper describes Collabode, a web-based Java integrated development environment built to support close, synchronous collaboration between programmers. We discuss three collaboration models in which participants take on distinct roles: micro-outsourcing to combine small contributions from many assistants; test-driven pair programming for effective pairwise development; and a mobile instructor connected to the work of many students. In particular, we report very promising preliminary results using Collabode to support micro-outsourcing.},
booktitle = {Proceedings of the 4th International Workshop on Cooperative and Human Aspects of Software Engineering},
pages = {65–68},
numpages = {4},
keywords = {collaboration, outsourcing},
location = {Waikiki, Honolulu, HI, USA},
series = {CHASE '11}
}

@inproceedings{10.1145/1062745.1062814,
author = {Frasincar, Flavius and Houben, Geert-Jan and Barna, Peter},
title = {Hera presentation generator},
year = {2005},
isbn = {1595930515},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1062745.1062814},
doi = {10.1145/1062745.1062814},
abstract = {Semantic Web Information Systems (SWIS) are Web Information Systems that use Semantic Web technologies. Hera is a model-driven design methodology for SWIS. In Hera, models are represented in RDFS and model instances in RDF. The Hera Presentation Generator (HPG) is an integrated development environment that supports the presentation generation layer of the Hera methodology. The HPG is based on a pipeline of data transformations driven by different Hera models.},
booktitle = {Special Interest Tracks and Posters of the 14th International Conference on World Wide Web},
pages = {952–953},
numpages = {2},
keywords = {RDF(S), SWIS, WIS, design environment, semantic web},
location = {Chiba, Japan},
series = {WWW '05}
}

@inproceedings{10.1145/1520340.1520393,
author = {Myers, Brad A. and Burnett, Margaret M. and Wiedenbeck, Susan and Ko, Amy J. and Rosson, Mary Beth},
title = {End user software engineering: CHI: 2009 special interest group meeting},
year = {2009},
isbn = {9781605582474},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1520340.1520393},
doi = {10.1145/1520340.1520393},
abstract = {End users create software whenever they write, for instance, educational simulations, spreadsheets, or dynamic e-business web applications. Researchers are working to bring the benefits of rigorous software engineering methodologies to these end users to try to make their software more reliable. Unfortunately, errors are pervasive in end-user software, and the resulting impact is sometimes enormous. This special interest group meeting will bring together the community of researchers who are addressing this topic with the companies that are creating and using end-user programming tools.},
booktitle = {CHI '09 Extended Abstracts on Human Factors in Computing Systems},
pages = {2731–2734},
numpages = {4},
keywords = {empirical studies of programmers (ESP), end users shaping effective software (EUSES), end-user development (EUD), end-user software engineering (EUSE), natural programming, psychology of programming},
location = {<conf-loc>, <city>Boston</city>, <state>MA</state>, <country>USA</country>, </conf-loc>},
series = {CHI EA '09}
}

@inproceedings{10.1145/985921.985976,
author = {Rode, Jochen},
title = {Nonprogrammer web application development},
year = {2004},
isbn = {1581137036},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/985921.985976},
doi = {10.1145/985921.985976},
abstract = {We propose to investigate the feasibility of nonprogrammer web application development. The main target audience for this research is webmasters without programming experience - a group likely to be interested in building web applications. We choose a subset of web applications as the target for our analysis: basic web-based data collection, storage &amp; retrieval applications. We propose to study the mental models of our target audience, collect requirements for a sufficiently powerful end-user programming tool, evaluate new programming paradigms, and implement a proof-of-concept prototype using participatory design techniques.},
booktitle = {CHI '04 Extended Abstracts on Human Factors in Computing Systems},
pages = {1055–1056},
numpages = {2},
keywords = {end-user programming, web application development, web engineering},
location = {Vienna, Austria},
series = {CHI EA '04}
}

@inproceedings{10.5555/3378680.3378817,
author = {Lee, Dong-Hoon and Jang, Seyun and Cho, Hye-Kyung},
title = {MOCCA studio: a graphical tool for high-level programming of human-robot social interaction},
year = {2020},
isbn = {9781538685556},
publisher = {IEEE Press},
abstract = {In this paper, we introduce a handy and affordable solution we are developing, for education of human-robot social interaction. The solution consists of a smart device-controlled robot with a 3D printed body, a cloud-based integrated development environment that provides intuitive programming and simulation of the robot, and embedded functions enabling intelligent, natural response of the robot. The outline and architecture of the proposed system are briefly explained.},
booktitle = {Proceedings of the 14th ACM/IEEE International Conference on Human-Robot Interaction},
pages = {620–621},
numpages = {2},
keywords = {graphical programming tool, human-robot social interaction, robot control architecture},
location = {Daegu, Republic of Korea},
series = {HRI '19}
}

@inproceedings{10.5555/3400397.3400621,
author = {\"{O}nder, Sait Tuna and Balci, Osman},
title = {Architecture and design of a cloud-based visual simulation environment},
year = {2020},
isbn = {9781728132839},
publisher = {IEEE Press},
abstract = {Doing things "in the cloud" has become ubiquitous and the "cloud" has become a rich platform for the use of modeling and simulation (M&amp;S) anywhere and anytime to provide solutions to complex problems. Creation of an Integrated Development Environment (IDE) for building and executing visual M&amp;S applications "in the cloud" poses significant technical challenges. This paper presents an architecture and a design of a cloud-based visual M&amp;S IDE for the example problem domain "traffic networks". The IDE consists of integrated software tools that provide computer-aided assistance in the composition and visualization of simulation models under a web browser on a client computer while the simulation model is being executed on a server computer. Based on a client-server architecture enabling distributed multitiered M&amp;S development, the design employs an asynchronous visualization protocol with efficient resource utilization. The architecture and design can assist researchers and developers to create other cloud-based visual M&amp;S IDEs.},
booktitle = {Proceedings of the Winter Simulation Conference},
pages = {2737–2748},
numpages = {12},
location = {National Harbor, Maryland},
series = {WSC '19}
}

@inproceedings{10.1145/369028.369115,
author = {Dincer, Kivanc and Fox, Geoffrey C.},
title = {Building a World-Wide virtual machine based on web and HPCC technologies},
year = {1996},
isbn = {0897918541},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1145/369028.369115},
doi = {10.1145/369028.369115},
abstract = {In today's high performance computing arena, there is a strong trend toward building virtual computers from heterogeneous resources on a network. In this paper we describe our experiences in building a world-wide virtual machine (WWVM) based on emerging Web and existing HPCC technologies. We have constructed a Web-based parallel/distributed programming environment on top of this machine demonstrating MPI and PVM message-passing programs and High Performance Fortran programs. Alternatively, the WWVM can be configured as a metacomputer for the solution of metaproblems.},
booktitle = {Proceedings of the 1996 ACM/IEEE Conference on Supercomputing},
pages = {42–es},
keywords = {HPCC, HPF, MPI, PVM, Perl, WWW, metacomputing},
location = {Pittsburgh, Pennsylvania, USA},
series = {Supercomputing '96}
}

@inproceedings{10.1145/3468264.3468535,
author = {Luo, Linghui and Sch\"{a}f, Martin and Sanchez, Daniel and Bodden, Eric},
title = {IDE support for cloud-based static analyses},
year = {2021},
isbn = {9781450385626},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3468264.3468535},
doi = {10.1145/3468264.3468535},
abstract = {Integrating static analyses into continuous integration (CI) or continuous delivery (CD) has become the best practice for assuring code quality and security. Static Application Security Testing (SAST) tools fit well into CI/CD, because CI/CD allows time for deep static analyses on large code bases and prevents vulnerabilities in the early stages of the development lifecycle. In CI/CD, the SAST tools usually run in the cloud and provide findings via a web interface. Recent studies show that developers prefer seeing the findings of these tools directly in their IDEs. Most tools with IDE integration run lightweight static analyses and can give feedback at coding time, but SAST tools used in CI/CD take longer to run and usually are not able to do so. Can developers interact directly with a cloud-based SAST tool that is typically used in CI/CD through their IDE? We investigated if such a mechanism can integrate cloud-based SAST tools better into a developers’ workflow than web-based solutions. We interviewed developers to understand their expectations from an IDE solution. Guided by these interviews, we implemented an IDE prototype for an existing cloud-based SAST tool. With a usability test using this prototype, we found that the IDE solution promoted more frequent tool interactions. In particular, developers performed code scans three times more often. This indicates better integration of the cloud-based SAST tool into developers’ workflow. Furthermore, while our study did not show statistically significant improvement on developers’ code-fixing performance, it did show a promising reduction in time for fixing vulnerable code.},
booktitle = {Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1178–1189},
numpages = {12},
keywords = {IDE integration, SAST tools, cloud service, security testing, static analysis},
location = {Athens, Greece},
series = {ESEC/FSE 2021}
}

@article{10.5555/2904127.2904135,
author = {Stanley, Timothy D. and Doggett, Dana and Cook, Loren and Fairclough, Dennis},
title = {Simple emulated computer improvements to facilitate understanding in introductory computer programming and computer organization/architecture classes},
year = {2016},
issue_date = {April 2016},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {31},
number = {4},
issn = {1937-4771},
abstract = {This paper describes improvements to a very simple, four instruction CPU, originally designed using digital logic simulation software, and used briefly in introductory C# programming classes to illustrate computer architecture concepts needed to appreciate the programming process. It is also used in a quick introduction to computer organization. One improvement is a C# version of this simple computer that hides the details of the complete logic simulation design. This implementation can also be used in a web programming environment of online classes. The other improvement provides an assembler again for use in an introduction to computer organization classes.},
journal = {J. Comput. Sci. Coll.},
month = {apr},
pages = {56–62},
numpages = {7}
}

@inproceedings{10.1145/2307636.2307686,
author = {Konstantinidis, Andreas and Costa, Constantinos and Larkou, Georgios and Zeinalipour-Yazti, Demetrios},
title = {Demo: a programming cloud of smartphones},
year = {2012},
isbn = {9781450313018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2307636.2307686},
doi = {10.1145/2307636.2307686},
abstract = {In this demonstration we present SmartLab1, an exciting experimental testbed of approximately 40+ real Android Smartphones, plus emulated devices, deployed at the Department of Computer Science building at the University of Cyprus. SmartLab provides a public, permanent testbed for the development and testing of smartphone network applications via an intuitive web-based interface. Registered users can upload and install Android executables (APKs) on a number of Android smartphones, capture their output, reboot the devices, create concurrent interactive jobs using MonkeyRunner scripts, interact with the remote devices and many other exciting features. SmartLab aims to facilitate research in smartphone network programming environments, communication protocols, system design, and applications.},
booktitle = {Proceedings of the 10th International Conference on Mobile Systems, Applications, and Services},
pages = {465–466},
numpages = {2},
keywords = {android smartphones, programming cloud, system design},
location = {Low Wood Bay, Lake District, UK},
series = {MobiSys '12}
}

@inproceedings{10.1145/3379337.3415869,
author = {Ferdowsifard, Kasra and Ordookhanians, Allen and Peleg, Hila and Lerner, Sorin and Polikarpova, Nadia},
title = {Small-Step Live Programming by Example},
year = {2020},
isbn = {9781450375146},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3379337.3415869},
doi = {10.1145/3379337.3415869},
abstract = {Live programming is a paradigm in which the programming environment continually displays runtime values. Program synthesis is a technique that can generate programs or program snippets from examples. deltextThis paper presents a new programming paradigm called Synthesis-Aided Live Programming that combines these two prior ideas in a synergistic way. When using Synthesis-Aided Live Programming, programmers can change the runtime values displayed by the live addtextPrevious works that combine the two have taken a holistic approach to the way examples describe the behavior of functions and programs. This paper presents a new programming paradigm called Small-Step Live Programming by Example that lets the user apply Programming by Example locally. When using Small-Step Live Programming by Example, programmers can change the runtime values displayed by the live visualization to generate local program snippets. % Live programming and program % synthesis work perfectly together because the live programming environment % reifies values, which makes it easy for programmers to provide the examples % needed by the synthesizer. We implemented this new paradigm in a tool called toolname, and performed a user study on $13$ programmers. Our study finds that Small-Step Live Programming by Example with toolname helps users solve harder problems faster, and that for certain types of queries, users prefer it to searching the web. Additionally, we identify the usersynthgap, in which users' mental models of the tool do not match its ability, and needs to be taken into account in the design of future synthesis tools.},
booktitle = {Proceedings of the 33rd Annual ACM Symposium on User Interface Software and Technology},
pages = {614–626},
numpages = {13},
keywords = {live programming, program synthesis},
location = {Virtual Event, USA},
series = {UIST '20}
}

@inproceedings{10.1145/2897586.2897613,
author = {Ghorashi, Soroush and Jensen, Carlos},
title = {Jimbo: a collaborative IDE with live preview},
year = {2016},
isbn = {9781450341554},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2897586.2897613},
doi = {10.1145/2897586.2897613},
abstract = {Team collaboration plays a key role in the success of any multi-user activity. Software engineering is a highly collaborative activity, where multiple developers and designers work together to solve a common problem. Meaningful and effective designer-developer collaboration improves the user experience, which can improve the chances of success for the project. Learning to program is another activity that can be implemented in a more collaborative way, students can learn in an active style by working with others. The growth of online classes, from small structured seminars to massive open online courses (MOOCs), and the isolation and impoverished learning experience some students report in these, points to an urgent need for tools that support remote pair programming in a distributed educational setting.In this paper, we describe Jimbo, a collaborative integrated development environment (IDE) that we believe is beneficial and effective in both aforementioned activities. Jimbo integrates many features that support better collaboration and communication between designers and developers, to bridge communication gaps and develop mutual understanding. These novel features can improve today's CS education by bringing students closer to each other and their instructors as well as training them to collaborate which is consistent with current practices in software engineering.},
booktitle = {Proceedings of the 9th International Workshop on Cooperative and Human Aspects of Software Engineering},
pages = {104–107},
numpages = {4},
keywords = {IDE, Jimbo, collaboration, collaborative learning, communication, designer-developer collaboration, distance learning, live preview, pair programming, user awareness, web development},
location = {<conf-loc>, <city>Austin</city>, <state>Texas</state>, </conf-loc>},
series = {CHASE '16}
}

@inproceedings{10.1145/1358628.1358687,
author = {Myers, Brad A. and Burnett, Margaret M. and Rosson, Mary Beth and Ko, Amy J. and Blackwell, Alan},
title = {End user software engineering: chi'2008 special interest group meeting},
year = {2008},
isbn = {9781605580128},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1358628.1358687},
doi = {10.1145/1358628.1358687},
abstract = {End users create software whenever they write, for instance, educational simulations, spreadsheets, or dynamic e-business web applications. Researchers are working to bring the benefits of rigorous software engineering methodologies to these end users to try to make their software more reliable. Unfortunately, errors are pervasive in end-user software, and the resulting impact is sometimes enormous. This special interest group meeting has two purposes: to incorporate attendees' and feedback into an emerging survey of the state of this interesting new sub-area, and generally to bring together the community of researchers who are addressing this topic, with the companies that are creating end-user programming tools.},
booktitle = {CHI '08 Extended Abstracts on Human Factors in Computing Systems},
pages = {2371–2374},
numpages = {4},
keywords = {empirical studies of programmers (esp), end users shaping effective software (euses), end-user software engineering (euse), natural programming, psychology of programming},
location = {Florence, Italy},
series = {CHI EA '08}
}

@inproceedings{10.1145/2839509.2851058,
author = {Trower, Jake A.},
title = {Web-based Visual Programming for Media Computation Using Blockly (Abstract Only)},
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2851058},
doi = {10.1145/2839509.2851058},
abstract = {Tunely and Pixly are web-based programming environments for media computation built using the Blockly visual programming editor library. These language environments were inspired by Georgia Tech's Media Computation approach and allow images (Pixly) and sounds (Tunely) to be transformed programmatically. Tunely and Pixly provided an approachable environment to students who have little to no experience in programming, and allow younger students to explore programming in a fun way without the challenges and frustration of learning syntax in a textual language. This SRC poster summarizes the design and implementation of these languages. We also briefly introduce initial work on integrating an accessibility tool to allow children with disabilities to explore these opportunities.},
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
pages = {725},
numpages = {1},
keywords = {blockly, image processing, media computation, sound processing, visual programming language},
location = {Memphis, Tennessee, USA},
series = {SIGCSE '16}
}

@article{10.5555/1961574.1961589,
author = {Brandon, Dan},
title = {HTML 5 programming: conference tutorial},
year = {2011},
issue_date = {May 2011},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {26},
number = {5},
issn = {1937-4771},
abstract = {HTML5 will soon become the new international HTML standard replacing XHTML and earlier versions of HTML. It will be the main web programming tool not only for traditional devices such as PC's and laptops but also for emerging mobile devices such as iPhone and Android smartphones. It may also displace proprietary software such as Flash and Silverlight for rich web media presentations. Key web industry players are quickly adopting HTML5 and incorporating it into their browsers and applications. As a result, students are showing keen interest in this new HTML platform and CS/IT/IS instructors should soon be redesigning their web courses accordingly.},
journal = {J. Comput. Sci. Coll.},
month = {may},
pages = {61},
numpages = {1}
}

@inproceedings{10.1145/3017680.3025046,
author = {Resnick, Mitchel},
title = {Fulfilling Papert's Dream: Computational Fluency for All},
year = {2017},
isbn = {9781450346986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3017680.3025046},
doi = {10.1145/3017680.3025046},
abstract = {Fifty years ago, Seymour Papert and colleagues developed Logo as the first programming language for children. Today, millions of children are participating in learn-to-code initiatives, but Papert's dream remains unfulfilled. Papert (who passed away last summer) saw programming not as a set of technical skills but as a new form of fluency - a new way for all children to explore, experiment, and express themselves. In this presentation, I will examine strategies for fulfilling Papert's dream. Drawing on examples from our Scratch online coding community, I will discuss how we can design programming environments and activities to help all children, from all backgrounds, to develop their thinking, develop their voices, and develop their identities.},
booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education},
pages = {5},
numpages = {1},
keywords = {computational thinking, creativity, education, learning, programming, scratch},
location = {Seattle, Washington, USA},
series = {SIGCSE '17}
}

@inproceedings{10.1109/WI-IAT.2013.67,
author = {Rouached, Mohsen and Messai, Nizar},
title = {SCoME: A Web Services Composition Modeling and Engineering Framework},
year = {2013},
isbn = {9780769551456},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/WI-IAT.2013.67},
doi = {10.1109/WI-IAT.2013.67},
abstract = {To exploit the true potential of Web services, it is critical to develop technologies and tools for composing new services from existing ones. Indeed, to reduce development time and integration efforts, this process of service composition requires an effective development environment to facilitate quick and simple composition of Web services, and remains a key challenge to realize the true potential of Web services. While numerous composition approaches have been developed, very little has been done towards providing an Integrated Development Environment to ease the process of composition. In this context, this paper introduces a new incremental approach to service composition engineering and considers the composition global life-cycle, i.e. specifying, composing, verifying, deploying, monitoring, and analyzing to achieve a full governance of the composition.},
booktitle = {Proceedings of the 2013 IEEE/WIC/ACM International Joint Conferences on Web Intelligence (WI) and Intelligent Agent Technologies (IAT) - Volume 01},
pages = {481–486},
numpages = {6},
series = {WI-IAT '13}
}

@inproceedings{10.1145/2951913.2951916,
author = {Serrano, Manuel and Prunet, Vincent},
title = {A glimpse of Hopjs},
year = {2016},
isbn = {9781450342193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2951913.2951916},
doi = {10.1145/2951913.2951916},
abstract = {Hop.js is a multitier programming environment for JavaScript. It allows a single JavaScript program to describe the client-side and the server-side components of a web application. Its runtime environment ensures consistent executions of the application on the server and on the client.  This paper overviews the Hop.js design. It shows the JavaScript extensions that makes it possible to conceive web applications globally. It presents how Hop.js interacts with the outside world. It also briefly presents the Hop.js implementation. It presents the Hop.js web server implementation, the handling of server-side parallelism, and the JavaScript and HTML compilers.},
booktitle = {Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming},
pages = {180–192},
numpages = {13},
keywords = {Functional Programming, Web Programming},
location = {Nara, Japan},
series = {ICFP 2016}
}

@inproceedings{10.1145/3319921.3319922,
author = {Zhong, Chaoliang and Yang, Ming and Sun, Jun},
title = {JavaScript Code Suggestion Based on Deep Learning},
year = {2019},
isbn = {9781450361286},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3319921.3319922},
doi = {10.1145/3319921.3319922},
abstract = {Code suggestion system is widely used in integrated development environments (IDEs) for generating code recommendations while editing to improve program efficiency. Current most common systems focus on the settings that complete a single code unit or predict likely next single unit. In this paper, we describe a code suggestion prototype system for JavaScript based on Jupyter Notebook [1] (an IDE) to provide multiple successive code units completion. Our main work is as follows: 1. Provide a JavaScript pre-processing solution for feature extraction; 2. Apply several deep learning technologies, including LSTM [2], attention mechanism (AM) [3] and sparse point network (SPN) [4] to support system performance; 3. Design a solution for model deployment and provide post-processing methods to improve user experience. Offline model performance shows that the LSTM + SPN has achieved a 79.73% all-token accuracy rate and 44.34% identifier accuracy rate among top 5 predictions respectively. Online evaluation shows that the demo system fits practical application experience.},
booktitle = {Proceedings of the 2019 3rd International Conference on Innovation in Artificial Intelligence},
pages = {145–149},
numpages = {5},
keywords = {Code completion, Code suggestion, Deep learning},
location = {Suzhou, China},
series = {ICIAI '19}
}

@inproceedings{10.1145/236452.236531,
author = {Jones, Rhys Price and Ruehr, Fritz and Salter, Richard},
title = {Web-based laboratories in the introductory curriculum enhance formal methods},
year = {1996},
isbn = {089791757X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/236452.236531},
doi = {10.1145/236452.236531},
abstract = {In order to be effective, the content of the introductory curriculum must strike a proper balance between the highly motivating (i.e. "fun") aspects of programming and the development of sound scientific background and analytical thinking. As part of an NSF-funded Education Infrastructure project at Oberlin College, we have developed a curriculum that maintains a high level of scientific rigor, while making use of the new technology of HTML and the World Wide Web to instruct and motivate. We provide our students with an integrated experience which includes web-based guided-study laboratory materials, an interactive programming environment and a syllabus which emphasizes the interplay between abstract and formal concepts on the one hand, and concrete implementations and experimental investigations on the other. Scheme is used as the primary programming environment, to illustrate the salient features of the imperative and the object-oriented paradigms, along with the functional paradigm with which it is usually associated. We believe that our approach: 1) revitalizes the material for students who expect a more modern presentation; 2) provides a balanced view of competing perspectives on programming style and methodology; and 3) provides a well-balanced mixture of formal analysis and experimental measurement.In order to produce laboratory materials without the overhead entailed by creating them directly in HTML, we have developed a tool capable of abstracting the functionality and style of HTML documents; thus we can engage both faculty and student authors in the development of laboratories with a uniform style. The very tools used to develop the online materials are themselves an excellent illustration of the empowerment which results from a thorough understanding of the principles of abstraction.},
booktitle = {Proceedings of the Twenty-Seventh SIGCSE Technical Symposium on Computer Science Education},
pages = {160–164},
numpages = {5},
location = {Philadelphia, Pennsylvania, USA},
series = {SIGCSE '96}
}

@inproceedings{10.1145/3328778.3372541,
author = {Stehlik, Mark and Cawley, Erin and Kosbie, David},
title = {CMU CS Academy: A Browser-based, Text-based Introduction to Programming through Graphics and Animations in Python},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3372541},
doi = {10.1145/3328778.3372541},
abstract = {There are a great number of resources to introduce CS in the K-8 space, most notably Scratch and code.org. There are two AP CS courses at the High School level, but there are not nearly as many resources to bridge the gap between the engaging, fun, K-8 resources and those AP courses. And what is available tends to lack continuity and rigor. It is generally accepted that coding and creativity go hand-in-hand. This is apparent in the learning opportunities in the K-8 space but as programming courses get more challenging, they tend to lose the creative aspect. In this demo, attendees will be able to unpack how students can learn to code as they learn to create, They will also discover resources that support creativity while introducing students to text-based programming through coding in Python with CMU Graphics. The goal of this session is to provide teachers with an opportunity to learn how they can bridge the gap from block-based coding experiences to the AP courses with a text-based, year-long, introduction to programming course whose only recommended prerequisite is algebra readiness. We will be using CMU CS Academy which teaches students to code in Python through a browser-based graphics and animation framework that provides instant, automated feedback and has a strong focus on creativity and problem-solving.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {1420},
numpages = {1},
keywords = {auto-graded-graphics-and-animations, free-browser-based-programming-environment, python-programming},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/1822090.1822134,
author = {Friese, Stefan},
title = {Measuring of and reacting to learners' progress in logic programming courses},
year = {2010},
isbn = {9781605588209},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1822090.1822134},
doi = {10.1145/1822090.1822134},
abstract = {To be able to support learners adequately in logic programming courses, it is crucial to know about their current level of competency during the learning process. Based on this, the course can be adapted and individual support can be given. In a traditional lecture the learning process is often a black box for the teacher, so there is no possibility to incorporate it. This paper describes how an architecture consisting of an online programming environment, private blogs and a reporting application can be used to solve the problem and shows how it was applied in the context of university lectures.},
booktitle = {Proceedings of the Fifteenth Annual Conference on Innovation and Technology in Computer Science Education},
pages = {152–154},
numpages = {3},
keywords = {learning process evaluation, programming language education, reflection},
location = {Bilkent, Ankara, Turkey},
series = {ITiCSE '10}
}

@inproceedings{10.1145/2556325.2567868,
author = {Wang, Qianxiang and Li, Wenxin and Xie, Tao},
title = {Educational programming systems for learning at scale},
year = {2014},
isbn = {9781450326698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2556325.2567868},
doi = {10.1145/2556325.2567868},
abstract = {Learning programming at scale underlies computer science education ranging from basic programming to advanced software engineering topics. There are strong needs of providing effective system supports for learning programming at scale. Among various desirable characteristics of such system supports, system supports shall allow students to write programs via an online Integrated Development Environment (IDE), allow students to get feedback on how they perform on the given programming exercises, etc. To aim for such effective system supports for learning programming at scale, research teams from Peking University have developed two systems: POP (denoting Peking University Online Programming System) and POJ (denoting Peking University Online Judge System). These two systems have achieved high impact among students around the world (especially those in China). In this paper, we present the overview of the two systems, along with our ongoing and future work on extending the systems for achieving higher effectiveness in supporting learning programming at scale.},
booktitle = {Proceedings of the First ACM Conference on Learning @ Scale Conference},
pages = {177–178},
numpages = {2},
keywords = {online ide, programming systems},
location = {Atlanta, Georgia, USA},
series = {L@S '14}
}

@inproceedings{10.1145/2485760.2485785,
author = {Flannery, Louise P. and Silverman, Brian and Kazakoff, Elizabeth R. and Bers, Marina Umaschi and Bont\'{a}, Paula and Resnick, Mitchel},
title = {Designing ScratchJr: support for early childhood learning through computer programming},
year = {2013},
isbn = {9781450319188},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2485760.2485785},
doi = {10.1145/2485760.2485785},
abstract = {ScratchJr is a graphical programming language based on Scratch and redesigned for the unique developmental and learning needs of children in kindergarten to second grade. The creation of ScratchJr addresses the relative lack of powerful technologies for digital creation and computer programming in early childhood education. ScratchJr will provide software for children to create interactive, animated stories as well as curricula and online resources to support adoption by educators. This paper describes the goals and challenges of creating a developmentally appropriate programming tool for children ages 5-7 and presents the path from guiding principles and studies with young children to current ScratchJr designs and plans for future work.},
booktitle = {Proceedings of the 12th International Conference on Interaction Design and Children},
pages = {1–10},
numpages = {10},
keywords = {STEM, early childhood, education, graphical programming},
location = {New York, New York, USA},
series = {IDC '13}
}

@inbook{10.5555/1074100.1074737,
author = {Spohrer, James C.},
title = {Programming support environments},
year = {2003},
isbn = {0470864125},
publisher = {John Wiley and Sons Ltd.},
address = {GBR},
abstract = {Programming support environments are software tools that improve programmer productivity and enhance the usability of programming languages. All modern programming languages provide some programming support features, such as debugging tools. The Ada (q.v.) language project, in particular, has emphasized its programming support environment (APSE) from the start. Advanced environments can support programmers in designing, coding, debugging, testing, maintaining, browsing, documenting, project tracking, reverse engineering, and customizing software. In addition, online help and embedded instructions assist programmers learning to use programming environments. Some environments support groups of programmers who work collaboratively on large software development projects. CASE (computer-aided software engineering) tools automate aspects of the software development process and encourage the use of particular programming methodologies.},
booktitle = {Encyclopedia of Computer Science},
pages = {1485–1486},
numpages = {2}
}

@inproceedings{10.1145/3624486.3624494,
author = {Horozal, Fulya and Reimer, Philip and Scholze, Sebastian},
title = {Tool Support for Architectural Pattern Selection and Application in Cloud-Centric Service-Oriented IDEs},
year = {2023},
isbn = {9798400708350},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3624486.3624494},
doi = {10.1145/3624486.3624494},
abstract = {Architectural patterns are high-level design guidelines and principles for designing the architecture of software systems. They play a crucial role laying the foundations to the organization and structure of software systems and have high impact on their quality and success both in terms of engineering and business aspects. Deciding for a concrete software architecture design requires careful analysis of several factors regarding the software system including system characteristics, constraints, required quality attributes and any trade-offs made along with the design decision; and hence is often not trivial. This paper presents a framework for architectural pattern selection and application that (i) supports the decision-making process of choosing an appropriate architectural pattern as well as (ii) the organization of the software structure based on the chosen pattern in an automated fashion when integrated within IDEs. In particular, the paper presents how this framework is implemented and integrated within an innovative open source cloud-native integration development environment.},
booktitle = {Proceedings of the 3rd Eclipse Security, AI, Architecture and Modelling Conference on Cloud to Edge Continuum},
pages = {53–61},
numpages = {9},
keywords = {Architectural patterns, IDE integration, Software architecture decision support},
location = {<conf-loc>, <city>Ludwigsburg</city>, <country>Germany</country>, </conf-loc>},
series = {ESAAM '23}
}

@inproceedings{10.1145/1375783.1375808,
author = {Wu, Song and Xiao, Kang and Qi, Li},
title = {GPE4CGSP: interoperability between heterogeneous grid infrastructures},
year = {2007},
isbn = {9781595939036},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1375783.1375808},
doi = {10.1145/1375783.1375808},
abstract = {In this paper we present GPE4CGSP, which targets the interoperability between GPE (Grid Programming Environment) and CGSP (ChinaGrid Support Platform). The web services technique and gridftp data transfer protocol are used to implement the interoperation between GPE and CGSP. Grid application can be deployed to CGSP through GPE. Without modification, GPE client can freely visit and use the resources in CGSP. Typically, end users can submit jobs to CGSP through GPE application client. GPE4CGSP provides one feasible way for the interoperability of heterogeneous grid infrastructures. The evaluation proves that the job execution time of GPE4CGSP is less than that of GPE4GTK.},
booktitle = {Proceedings of the 2007 Asian Technology Information Program's (ATIP's) 3rd Workshop on High Performance Computing in China: Solution Approaches to Impediments for High Performance Computing},
pages = {110–114},
numpages = {5},
keywords = {grid, interoperability, middleware},
location = {Reno, Nevada},
series = {CHINA HPC '07}
}

@inproceedings{10.1145/2567948.2577010,
author = {Arapov, Pavel and Buffa, Michel and Ben Othmane, Amel},
title = {Semantic mashup with the online IDE WikiNEXT},
year = {2014},
isbn = {9781450327459},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2567948.2577010},
doi = {10.1145/2567948.2577010},
abstract = {The proposed demonstration requests DBPedia.org, gets the results and uses them to populate wiki pages with semantic annotations using RDFaLite. These annotations are persisted in a RDF store and we will show how this data can be reused by other applications, e.g. for a semantic mashup that displays all collected metadata about cities on a single map page. It has been developed using WikiNEXT, a mix between a semantic wiki and a web-based IDE. The tool is online , open source ; screencasts are available on YouTube (look for "WikiNext").},
booktitle = {Proceedings of the 23rd International Conference on World Wide Web},
pages = {119–122},
numpages = {4},
keywords = {web based IDE, web of data, wiki},
location = {Seoul, Korea},
series = {WWW '14 Companion}
}

@inproceedings{10.1145/3584748.3584783,
author = {Li, Ting},
title = {Design of online course management system based on Python},
year = {2023},
isbn = {9781450397827},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3584748.3584783},
doi = {10.1145/3584748.3584783},
abstract = {With the continuous progress and development of Internet technology, computer information management technology is also developing continuously, and all walks of life have developed their own management systems. The course management system uses educational technology and network technology to realize the online release of course resources, which is convenient for students to learn and assist teachers in teaching. The development of the visual programming environment based on Python language in this paper has gone through three stages: system requirements analysis, structure and coding design, detailed design and implementation of each module, and realized a complete and standardized course management system based on project teaching.},
booktitle = {Proceedings of the 2022 5th International Conference on E-Business, Information Management and Computer Science},
pages = {207–211},
numpages = {5},
keywords = {Internet, Python, course resources, information management technology, management system},
location = {Hong Kong, Hong Kong},
series = {EBIMCS '22}
}

@inproceedings{10.1145/1953163.1953299,
author = {Denny, Paul and Luxton-Reilly, Andrew and Tempero, Ewan and Hendrickx, Jacob},
title = {CodeWrite: supporting student-driven practice of java},
year = {2011},
isbn = {9781450305006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1953163.1953299},
doi = {10.1145/1953163.1953299},
abstract = {Drill and practice exercises enable students to master skills needed for more sophisticated programming. A barrier to providing such activities is the effort required to set up the programming environment. Testing is an important component to writing good software, but it is difficult to motivate students to write tests. In this paper we describe and evaluate CodeWrite, a web-based tool that provides drill and practice support for Java programming, and for which testing plays a central role in its use. We describe how we have used CodeWrite in a CS1 course, and demonstrate its effectiveness in providing good coverage of the language features presented in the course.},
booktitle = {Proceedings of the 42nd ACM Technical Symposium on Computer Science Education},
pages = {471–476},
numpages = {6},
keywords = {CodeWrite, assessment, constructive evaluation, contributing student pedagogy, online, student-generated content},
location = {Dallas, TX, USA},
series = {SIGCSE '11}
}

@inproceedings{10.1145/1240624.1240842,
author = {Wong, Jeffrey and Hong, Jason I.},
title = {Making mashups with marmite: towards end-user programming for the web},
year = {2007},
isbn = {9781595935939},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1240624.1240842},
doi = {10.1145/1240624.1240842},
abstract = {There is a tremendous amount of web content available today, but it is not always in a form that supports end-users' needs. In many cases, all of the data and services needed to accomplish a goal already exist, but are not in a form amenable to an end-user. To address this problem, we have developed an end-user programming tool called Marmite, which lets end-users create so-called mashups that re-purpose and combine existing web content and services. In this paper, we present the design, implementation, and evaluation of Marmite. An informal user study found that programmers and some spreadsheet users had little difficulty using the system.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {1435–1444},
numpages = {10},
keywords = {end-user programming, mashup, spreadsheet, web services},
location = {<conf-loc>, <city>San Jose</city>, <state>California</state>, <country>USA</country>, </conf-loc>},
series = {CHI '07}
}

@article{10.5555/2602724.2602739,
author = {Turbak, Franklyn and Sherman, Mark and Martin, Fred and Wolber, David and Pokress, Shaileen Crawford},
title = {Events-first programming in APP inventor},
year = {2014},
issue_date = {June 2014},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {29},
number = {6},
issn = {1937-4771},
abstract = {Events are a central concept in computer science. They are becoming more important with the prevalence of mobile and web platforms that use event-based programming. Yet, events are typically taught late in the CS curriculum -- e.g., in a web programming or operating systems course. We have introduced events to CS0 students from day one using MIT App Inventor, a blocks-based programming environment that enables students to create apps for Android devices. This paper presents the system's event-based model, along with typical coding problems and best-practice approaches for solving them. We advocate for increasing early emphasis on events in the CS curriculum.},
journal = {J. Comput. Sci. Coll.},
month = {jun},
pages = {81–89},
numpages = {9}
}

@inproceedings{10.1145/1529282.1529321,
author = {Mikkonen, Tommi and Taivalsaari, Antero},
title = {Creating a mobile web application platform: the lively kernel experiences},
year = {2009},
isbn = {9781605581668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1529282.1529321},
doi = {10.1145/1529282.1529321},
abstract = {The software industry is currently in the middle of two transitions -- towards web-based software and towards web-enabled mobile devices. In this paper, we summarize our experiences in porting the Sun Labs Lively Kernel - an interactive web programming environment developed at Sun Microsystems Laboratories - onto a Nokia N810 mobile device. We report our experiences based on two different approaches that were used. First, we ported the system onto a regular web browser running in the mobile device. Second, we developed a custom-built native execution environment that provides more direct and extensive access to the underlying resources of the system. Based on these experiments, we will discuss the lessons learned as well as provide directions and guidance for future work.},
booktitle = {Proceedings of the 2009 ACM Symposium on Applied Computing},
pages = {177–184},
numpages = {8},
keywords = {mobile devices, rich internet applications, web programming},
location = {Honolulu, Hawaii},
series = {SAC '09}
}

@inproceedings{10.1145/3450329.3476859,
author = {Malone, Mac and Wang, Yicheng and Monrose, Fabian},
title = {An Online Gamified Learning Platform for Teaching Cybersecurity and More},
year = {2021},
isbn = {9781450383554},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3450329.3476859},
doi = {10.1145/3450329.3476859},
abstract = {We present an online gamified learning platform for computer science and cybersecurity education. Exercises within the platform revolve around a custom game wherein students can demonstrate learned skills regarding password security, web security, traffic analysis, reverse engineering, cryptanalysis, and much more. We describe some key features that together make our platform novel, including its distributed infrastructure, game engine, integrated development environment, automated feedback system, and support for individualization. We demonstrate how these features assist in the learning process --- both in theory and in practice --- and report on the use of the platform in a cybersecurity course.},
booktitle = {Proceedings of the 22nd Annual Conference on Information Technology Education},
pages = {29–34},
numpages = {6},
keywords = {cybersecurity, distance learning, gamification, learning platform},
location = {SnowBird, UT, USA},
series = {SIGITE '21}
}

@inproceedings{10.1145/2538862.2539022,
author = {Harvey, Brian and Garcia, Daniel D. and Barnes, Tiffany and Titterton, Nathaniel and Miller, Omoju and Armendariz, Dan and McKinsey, Jon and Machardy, Zachary and Lemon, Eugene and Morris, Sean and Paley, Josh},
title = {Snap! (build your own blocks) (abstract only)},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2539022},
doi = {10.1145/2538862.2539022},
abstract = {This workshop is for high school and college teachers of general-interest ("CS 0") computer science courses, especially the AP CS: Principles course. SNAP! (Build Your Own Blocks) is a free, browser-based, graphical, drag-and-drop language inspired by Scratch. The beauty of the Scratch programming environment, designed for 8-14 year olds, is that it makes abstract concepts more concrete and understandable to a broader audience. SNAP! extends Scratch to support older learners (14-20) with built-in named procedures (thus recursion), procedures as data (thus higher order functions), structured lists, and sprites as first class objects with inheritance.Participants will learn SNAP! hands-on. See http://snap.berkeley.edu for details. Network connected laptop required.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {749},
numpages = {1},
keywords = {computer science education, snap!, visual programming},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14}
}

@inproceedings{10.1145/2846661.2846672,
author = {Protzenko, Jonathan and Burckhardt, Sebastian and Moskal, Micha\l{} and McClurg, Jedidiah},
title = {Implementing real-time collaboration in TouchDevelop using AST merges},
year = {2015},
isbn = {9781450339063},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2846661.2846672},
doi = {10.1145/2846661.2846672},
abstract = {Collaborating on a piece of code is notoriously difficult when the number of people involved goes above 1. In particular, every computer programmer dreads the "merge conflict", a brutal, unforgiving experience, where they must reconcile their changes with someone else's. If offline collaboration is already so painful, real-time collaboration seems even less of an option. It turns out, though, that by reasoning on changes at the level of the program AST, rather than the program text, we can devise a new conflict-free merge algorithm. The algorithm is particularly well-suited to real-time collaboration: we implemented it in the TouchDevelop web programming environment and dub the algorithm diffTree.},
booktitle = {Proceedings of the 3rd International Workshop on Mobile Development Lifecycle},
pages = {25–27},
numpages = {3},
keywords = {Merge, collaborative editing, diff},
location = {Pittsburgh, PA, USA},
series = {MobileDeLi 2015}
}

@inproceedings{10.1145/1178477.1178524,
author = {Carrozzino, Marcello and Tecchia, Franco and Bacinelli, Sandro and Cappelletti, Carlo and Bergamasco, Massimo},
title = {Lowering the development time of multimodal interactive application: the real-life experience of the XVR project},
year = {2005},
isbn = {1595931104},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1178477.1178524},
doi = {10.1145/1178477.1178524},
abstract = {In this paper we present XVR, an integrated development environment for the rapid development of Virtual Reality applications. Using a modular architecture and a VR-oriented scripting language, XVR contents can be embedded on a variety of container applications. This makes it suitable to write contents ranging from web-oriented presentations to more complex VR installations involving advanced devices, such as real-time trackers, haptic interfaces, sensorized gloves and stereoscopic devices, including HMDs. Some case studies are also presented to illustrate the development processes related to XVR and its features.},
booktitle = {Proceedings of the 2005 ACM SIGCHI International Conference on Advances in Computer Entertainment Technology},
pages = {270–273},
numpages = {4},
keywords = {3D graphics, 3D web, developer framework, virtual reality},
location = {Valencia, Spain},
series = {ACE '05}
}

@inproceedings{10.1145/2538862.2538977,
author = {Edwards, Stephen H. and Tilden, Daniel S. and Allevato, Anthony},
title = {Pythy: improving the introductory python programming experience},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2538977},
doi = {10.1145/2538862.2538977},
abstract = {Pythy is a web-based programming environment for Python that eliminates software-related barriers to entry for novice programmers, such as installing an IDE or the Python runtime. Using only a web browser, within minutes students can begin writing code, watch it run, and access support materials and tutorials. While there are a number of web-based Python teaching tools, Pythy differs in several respects: it manages student assignment work, including deadlines, turn-in, and grading; it supports live, interactive code examples that instructors can write and students can explore; it provides auto-saving of student work in the cloud, with full, transparent version control; and it supports media-computation-style projects that manipulate images and sounds. Pythy provides a complete ecosystem for student learning, with a user interface that follows a more familiar web browsing model, rather than a developer-focused IDE interface. An evaluation compares student perceptions of Pythy in relation to JES, another student-friendly beginner Python environment. Classroom experiences indicate that Pythy does reduce the novice obstacles that it aims to address.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {641–646},
numpages = {6},
keywords = {browser, interactive, media computation, on-line, python, skulpt, web-based},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14}
}

@inproceedings{10.1145/2668332.2668360,
author = {Chang, Marcus and Crosby, James and Vincent, Hugo},
title = {Yottos operating system connecting low-power devices with high-level programming},
year = {2014},
isbn = {9781450331432},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2668332.2668360},
doi = {10.1145/2668332.2668360},
abstract = {We present Yottos, an event driven operating system for wireless embedded devices that reduces energy consumption by coalescing tasks into workloads with similar resource requirements thereby reducing time and energy consumed from power cycling peripherals. With Yottos we target a different group of programmers than the ones well-versed in embedded C, TinyOS and Contiki, namely web and app developers who on one hand are familiar with event driven programming in the form of user interaction events, but on the other have no experience with low-level hardware access. We trade off memory footprint (both data and code) in support of a programming environment more akin to iOS and Android development by supporting Objective-C and C/C++.},
booktitle = {Proceedings of the 12th ACM Conference on Embedded Network Sensor Systems},
pages = {336–337},
numpages = {2},
location = {Memphis, Tennessee},
series = {SenSys '14}
}

@inproceedings{10.1145/2591062.2591156,
author = {Kilamo, Terhi and Nieminen, Antti and Lautam\"{a}ki, Janne and Aho, Timo and Koskinen, Johannes and Palviainen, Jarmo and Mikkonen, Tommi},
title = {Knowledge transfer in collaborative teams: experiences from a two-week code camp},
year = {2014},
isbn = {9781450327688},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2591062.2591156},
doi = {10.1145/2591062.2591156},
abstract = {Software engineering has both technological and social dimensions. As development teams spanning across the globe are increasingly the norm and while the web enables massive online collaboration, there is a growing need for effective collaboration tools. In this paper, we describe experiences on collaborative programming as a tool for learning software development. To investigate the nature of collaboration in software engineering education, we arranged a two-week-long course experiment where students used a collaborative online integrated development environment to create different kinds of web services. We present lessons learned from the experiment and discuss how collaboration can act as a tool for knowledge transfer among learners.},
booktitle = {Companion Proceedings of the 36th International Conference on Software Engineering},
pages = {264–271},
numpages = {8},
keywords = {Case study, Collaboration, Software engineerin education},
location = {Hyderabad, India},
series = {ICSE Companion 2014}
}

@inproceedings{10.1145/1176617.1176635,
author = {Burke, Michael G. and Morris, Cheryl and Orso, Alessandro and Robillard, Martin},
title = {Eclipse technology eXchange (ETX) workshop},
year = {2006},
isbn = {159593491X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1176617.1176635},
doi = {10.1145/1176617.1176635},
abstract = {The Eclipse platform (http://www.eclipse.org) is designed for building integrated development environments (IDEs) for object-oriented application development. Building on the success of the Eclipse Technology eXchange workshops at OOPSLA 2003, 2004, and 2005, we invite original papers that describe potential new uses of Eclipse and how the core Eclipse technology can be leveraged, improved and/or extended for research and teaching projects. Accepted papers will be presented at the workshop. Due to the popularity of this workshop in the past, this year's ETX will be a 1.5 day event. Workshop topics include (but are not limited to) the use of Eclipse for: IDEs, supporting the software development process, debugging or testing, design requirements/specification, modeling environments or frameworks, aspect-oriented programming, program analysis and transformation, such as for refactoring, optimization, or obfuscation, computer-based learning, software engineering education, teaching foundations of object-oriented programming courseware, teaching an introductory undergraduate programming course, web service applications, rich client application.},
booktitle = {Companion to the 21st ACM SIGPLAN Symposium on Object-Oriented Programming Systems, Languages, and Applications},
pages = {619},
numpages = {1},
location = {Portland, Oregon, USA},
series = {OOPSLA '06}
}

@inproceedings{10.5555/2486788.2486792,
author = {Lee, Yun Young and Chen, Nicholas and Johnson, Ralph E.},
title = {Drag-and-drop refactoring: intuitive and efficient program transformation},
year = {2013},
isbn = {9781467330763},
publisher = {IEEE Press},
abstract = {Refactoring is a disciplined technique for restructuring code to improve its readability and maintainability. Almost all modern integrated development environments (IDEs) offer built-in support for automated refactoring tools. However, the user interface for refactoring tools has remained largely unchanged from the menu and dialog approach introduced in the Smalltalk Refactoring Browser, the first automated refactoring tool, more than a decade ago. As the number of supported refactorings and their options increase, invoking and configuring these tools through the traditional methods have become increasingly unintuitive and inefficient. The contribution of this paper is a novel approach that eliminates the use of menus and dialogs altogether. We streamline the invocation and configuration process through direct manipulation of program elements via drag-and-drop. We implemented and evaluated this approach in our tool, Drag-and-Drop Refactoring (DNDRefactoring), which supports up to 12 of 23 refactorings in the Eclipse IDE. Empirical evaluation through surveys and controlled user studies demonstrates that our approach is intuitive, more efficient, and less error-prone compared to traditional methods available in IDEs today. Our results bolster the need for researchers and tool developers to rethink the design of future refactoring tools.},
booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
pages = {23–32},
numpages = {10},
location = {San Francisco, CA, USA},
series = {ICSE '13}
}

@inproceedings{10.1145/1185448.1185521,
author = {Sanchez, Arturo and Vega, Brandon and Gonzalez, Alexander and Jackson, Gregory},
title = {Automatic support for testing web-based enterprise applications},
year = {2006},
isbn = {1595933158},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1185448.1185521},
doi = {10.1145/1185448.1185521},
abstract = {In this paper we consider the problem of automatically generating test suites associated with web-based enterprise systems. In particular, we discuss the construction of a tool deployed as a plugin for the popular open source Integrated Development Environment (IDE) Eclipse. Our tool allows developers to automatically generate and reuse test classes, test data, as well as manually define test data. Once these components are in place, developers can launch so-called "in-container" test suites, and gather information about the results by using the also popular (and open source) JUnit framework. All features are provided to the developer through a wizard-like graphical user interface embedded in the IDE. Our tool is available from &lt;u&gt;sourceforge.net&lt;/u&gt; under "strutstest".},
booktitle = {Proceedings of the 44th Annual Southeast Regional Conference},
pages = {325–330},
numpages = {6},
keywords = {Eclipse), Struts), applications - web-based systems (J2EE, methods and tools - testing tools (JUnit, software testing - automation},
location = {Melbourne, Florida},
series = {ACM-SE 44}
}

@article{10.5555/775742.775759,
author = {Knuckles, Craig D.},
title = {A net-centric curricular focus},
year = {2002},
issue_date = {May 2002},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {17},
number = {6},
issn = {1937-4771},
abstract = {Many view JavaScript as merely a scripting language to support Web pages. However, when JavaScript is used more like a traditional language (Web page gimmicks aside), the Web can be used as a viable programming platform upon which to teach programming fundamentals. We describe a Net-Centric curricular revision at Lake Forest College that uses the Web as the programming environment in CS1. We discuss the relationship of the new CS1 to the existing CS0 JavaScript course, and the ramifications that using the Web as the programming platform in CS1 has on other aspects of the curriculum. In particular, our early focus on Web programming facilitates expanded coverage in upper-level courses where the Internet is a factor.},
journal = {J. Comput. Sci. Coll.},
month = {may},
pages = {75–81},
numpages = {7}
}

@inproceedings{10.5555/2655780.2655801,
author = {Dorn, Brian and Stankiewicz, Adam and Roggi, Chris},
title = {Lost while searching: difficulties in information seeking among end-user programmers},
year = {2013},
isbn = {0877155453},
publisher = {American Society for Information Science},
address = {USA},
abstract = {End-user programmers, those who write code but lack formal training in computer science, are often reliant on various tools such as API documentation or searching the Web for information in order to complete a specific task. This study examines the information foraging behaviors of a group of web and graphic designers engaged in a series of code modification tasks. We find that users were largely unsuccessful in their foraging activities, with few information seeking events resulting in noticeable changes to participants' source code. Participants viewed remarkably few results generated by their queries and rarely refined queries multiple times. However, these kinds of activities were positively correlated with task success metrics. We conclude with a discussion of the study's results and their implications on the design of future programming environments and search tools for end-user programmers.},
booktitle = {Proceedings of the 76th ASIS&amp;T Annual Meeting: Beyond the Cloud: Rethinking Information Boundaries},
articleno = {21},
numpages = {11},
keywords = {end-user programming, information foraging, novice programmers, search behaviors},
location = {Montreal, Quebec, Canada},
series = {ASIST '13}
}

@inproceedings{10.5555/2666719.2666725,
author = {Bacchelli, Alberto and Ponzanelli, Luca and Lanza, Michele},
title = {Harnessing stack overflow for the IDE},
year = {2012},
isbn = {9781467317597},
publisher = {IEEE Press},
abstract = {Developers often consult online tutorials and message boards to find solutions to their programming issues. Among the many online resources, Question &amp; Answer websites are gaining popularity. This is no wonder if we consider a case like Stack Overflow, where more than 92% questions on expert topics are answered in a median time of 11 minutes. This new resource has scarcely been acknowledged by any Integrated Development Environment (IDE): Even though developers spend a large part of their working time in IDEs, and the usage of Q&amp;A services has dramatically increased, developers can only use such resources using external applications.We introduce Seahawk, an Eclipse plugin to integrate Stack Overflow crowd knowledge in the IDE. It allows developers to seamlessly access Stack Overflow data, thus obtaining answers without switching the context. We present our preliminary work on Seahawk: It allows users to (1) retrieve Q&amp;A from Stack Overflow, (2) link relevant discussions to any source code in Eclipse, and (3) attach explanative comments to the links.},
booktitle = {Proceedings of the Third International Workshop on Recommendation Systems for Software Engineering},
pages = {26–30},
numpages = {5},
keywords = {Q&amp;A websites, seahawk, stack overflow},
location = {Zurich, Switzerland},
series = {RSSE '12}
}

@inproceedings{10.1145/2688471.2688482,
author = {Schiller, Jeffrey and Turbak, Franklyn and Abelson, Hal and Dominguez, Jos\'{e} and McKinney, Andrew and Okerlund, Johanna and Friedman, Mark},
title = {Live Programming of Mobile Apps in App Inventor},
year = {2014},
isbn = {9781450322959},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2688471.2688482},
doi = {10.1145/2688471.2688482},
abstract = {MIT App Inventor is a programming environment that lowers the barriers to creating mobile apps for Android devices, especially for people with little or no programming experience. App Inventor apps for a mobile device are constructed by arranging components with a WYSIWYG editor in a computer web browser, where the development computer is connected to the device by WiFi or USB. The behavior of the components is specified using a blocks-based graphical programming language. A key feature in making App Inventor accessible to beginning programmers is live programming: developers interact directly with the state of the evolving program as it is being constructed, and changes made in the web browser are realized instantaneously in the running app on the device. This paper describes the live programming features of App Inventor and explains how they are implemented.},
booktitle = {Proceedings of the 2nd Workshop on Programming for Mobile &amp; Touch},
pages = {1–8},
numpages = {8},
keywords = {android, interpretation, live programming, mobile app development},
location = {Portland, Oregon, USA},
series = {PROMOTO '14}
}

@inproceedings{10.1109/ICSE-Companion52605.2021.00032,
author = {Allan\c{c}on, Thibault and Pietri, Antoine and Zacchiroli, Stefano},
title = {The software heritage filesystem (SwhFS): integrating source code archival with development},
year = {2021},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-Companion52605.2021.00032},
doi = {10.1109/ICSE-Companion52605.2021.00032},
abstract = {We introduce the Software Heritage filesystem (SwhFS), a user-space filesystem that integrates large-scale open source software archival with development workflows. SwhFS provides a POSIX filesystem view of Software Heritage, the largest public archive of software source code and version control system (VCS) development history.Using SwhFS, developers can quickly "checkout" any of the 2 billion commits archived by Software Heritage, even after they disappear from their previous known location and without incurring the performance cost of repository cloning. SwhFS works across unrelated repositories and different VCS technologies. Other source code artifacts archived by Software Heritage---individual source code files and trees, releases, and branches---can also be accessed using common programming tools and custom scripts, as if they were locally available.A screencast of SwhFS is available online at dx.doi.org/10.5281/zenodo.4531411.},
booktitle = {Proceedings of the 43rd International Conference on Software Engineering: Companion Proceedings},
pages = {45–48},
numpages = {4},
keywords = {FUSE, digital libraries, digital preservation, filesystem, open source, source code, version control system},
location = {Virtual Event, Spain},
series = {ICSE '21}
}

@inproceedings{10.1145/2554850.2554962,
author = {Arapov, Pavel and Buffa, Michel and Ben Othmane, Amel},
title = {WikiNEXT: a wiki for exploiting the web of data},
year = {2014},
isbn = {9781450324694},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2554850.2554962},
doi = {10.1145/2554850.2554962},
abstract = {This paper presents WikiNEXT, a semantic application wiki. WikiNEXT lies on the border between application wikis and modern web based IDEs (Integrated Development Environments) like jsbin.com, jsfiddle.net, cloud9ide.com, etc. It has been initially created for writing documents that integrate data from external data sources of the web of data, such as DBPedia.org or FreeBase.com, or for writing interactive tutorials (e.g. an HTML5 tutorial, a semantic web programming tutorial) that mix text and interactive examples in the same page. The system combines some powerful aspects from (i) wikis, such as ease of use, collaboration and openness, (ii) semantic web/wikis such as making information processable by machines and (iii) web-based IDEs such as instant development and code testing in a web browser. WikiNEXT is for writing documents/pages as well as for writing web applications that manipulate semantic data, either locally or coming from the web of data. These applications can be created, edited or cloned in the browser and can be used for integrating data visualizations in wiki pages, for annotating content with metadata, or for any kind of processing. WikiNEXT is particularly suited for teaching web technologies or for writing documents that integrate data from the web of data.},
booktitle = {Proceedings of the 29th Annual ACM Symposium on Applied Computing},
pages = {727–734},
numpages = {8},
keywords = {knowledge management, semantic web, semantic wikis, web applications, web2.0, wikis},
location = {Gyeongju, Republic of Korea},
series = {SAC '14}
}

@inproceedings{10.1145/2839509.2844688,
author = {Brown, Richard A. and Shoop, Elizabeth and Adams, Joel C.},
title = {CSinParallel: Using WebMapReduce to Teach Parallel Computing Concepts, Hands-on (Abstract Only)},
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2844688},
doi = {10.1145/2839509.2844688},
abstract = {Map-reduce computation is the on-ramp to data-intensive cloud computing, and arguably the most widely deployed form of parallel/distributed computing. Participants will carry out exercises designed for students at CS1, intermediate, and advanced levels that introduce data-intensive scalable computing concepts using WebMapReduce (WMR), a simplified open-source interface to the dominant Hadoop map-reduce programming environment. WMR supports programming in a choice of languages including Python, Java, C++, and C#. Besides a hands-on experience with introductory teaching materials, the workshop includes an overview of teaching advanced map-reduce programming using WMR, and a comparison of WMR to direct Hadoop programming. All materials will reside on csinparallel.org, and the demonstration WMR system is reservable for participants' courses. Intended audience: CS instructors. Web-enabled laptop required.},
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
pages = {716–717},
numpages = {2},
keywords = {advanced courses, cs1, csinparallel, curriculum, design patterns, distributed computing, education, exemplars, map-reduce, parallel and distributed computing, parallel computing, parallel design patterns, parallelism, webmapreduce, wmr},
location = {Memphis, Tennessee, USA},
series = {SIGCSE '16}
}

@inproceedings{10.1145/3242587.3242632,
author = {Zhang, Xiong and Guo, Philip J.},
title = {Fusion: Opportunistic Web Prototyping with UI Mashups},
year = {2018},
isbn = {9781450359481},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3242587.3242632},
doi = {10.1145/3242587.3242632},
abstract = {Modern web development is rife with complexity at all layers, ranging from needing to configure backend services to grappling with frontend frameworks and dependencies. To lower these development barriers, we introduce a technique that enables people to prototype opportunistically by borrowing pieces of desired functionality from across the web without needing any access to their underlying codebases, build environments, or server backends. We implemented this technique in a browser extension called Fusion, which lets users create web UI mashups by extracting components from existing unmodified webpages and hooking them together using transclusion and JavaScript glue code. We demonstrate the generality and versatility of Fusion via a case study where we used it to create seven UI mashups in domains such as programming tools, data science, web design, and collaborative work. Our mashups include replicating portions of prior HCI systems (Blueprint for in-situ code search and DS.js for in-browser data science), extending the p5.js IDE for Processing with real-time collaborative editing, and integrating Python Tutor code visualizations into static tutorials. These UI mashups each took less than 15 lines of JavaScript glue code to create with Fusion.},
booktitle = {Proceedings of the 31st Annual ACM Symposium on User Interface Software and Technology},
pages = {951–962},
numpages = {12},
keywords = {opportunistic programming, ui mashups, web prototyping},
location = {<conf-loc>, <city>Berlin</city>, <country>Germany</country>, </conf-loc>},
series = {UIST '18}
}

@inproceedings{10.1145/1774088.1774257,
author = {Kuuskeri, Janne and Lautam\"{a}ki, Janne and Mikkonen, Tommi},
title = {Peer-to-peer collaboration in the lively kernel},
year = {2010},
isbn = {9781605586397},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1774088.1774257},
doi = {10.1145/1774088.1774257},
abstract = {With the increasing popularity of the World Wide Web, end-user applications are moving from the desktop to the browser. More and more applications that we have come to know as desktop applications are now making their way into the web. This has made online collaboration a key aspect for many applications. Collaborative applications like Facebook, Flickr and Google Docs are just an early hint of how we can benefit from users being able to share data. Still, collaborative features are not easy to implement in web applications. Most web programming environments aim at easy user interface creation and persistence, but not for online collaboration and pushing data from one user to another. The Lively Kernel is a highly dynamic web programming platform and runtime environment developed at Sun Microsystems Laboratories. By utilizing the Lively Kernel platform, it is easy to implement desktop like applications for the web using JavaScript. In this paper we summarize the experiences from adding peer-to-peer collaboration into the Lively Kernel. These additions include persistent data storage, communication channels between users and user identification.},
booktitle = {Proceedings of the 2010 ACM Symposium on Applied Computing},
pages = {812–817},
numpages = {6},
keywords = {JavaScript, Lively Kernel, collaboration, web application},
location = {Sierre, Switzerland},
series = {SAC '10}
}

@inproceedings{10.1145/3328778.3366907,
author = {Kurniawan, Oka and Lee, Norman Tiong Seng and Poskitt, Christopher M.},
title = {Securing Bring-Your-Own-Device (BYOD) Programming Exams},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3366907},
doi = {10.1145/3328778.3366907},
abstract = {Traditional pen and paper exams are inadequate for modern university programming courses as they are misaligned with pedagogies and learning objectives that target practical coding ability. Unfortunately, many institutions lack the resources or space to be able to run assessments in dedicated computer labs. This has motivated the development of bring-your-own-device~(BYOD) exam formats, allowing students to program in a similar environment to how they learnt, but presenting instructors with significant additional challenges in preventing plagiarism and cheating. In this paper, we describe a BYOD exam solution based on lockdown browsers, software which temporarily turns students' laptops into secure workstations with limited system or internet access. We combine the use of this technology with a learning management system and cloud-based programming tool to facilitate conceptual and practical programming questions that can be tackled in an interactive but controlled environment. We reflect on our experience of implementing this solution for a major undergraduate programming course, highlighting our principal lesson that policies and support mechanisms are as important to consider as the technology itself.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {880–886},
numpages = {7},
keywords = {byod exams, cloud-based ides, learning management systems, lockdown browsers, plagiarism prevention, programming exams},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/2567948.2577349,
author = {Arapov, Pavel and Buffa, Michel and Ben Othmane, Amel},
title = {A wiki way of programming for the web of data},
year = {2014},
isbn = {9781450327459},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2567948.2577349},
doi = {10.1145/2567948.2577349},
abstract = {WikiNEXT is a wiki engine that enables users to write rapidly applications directly from the browser, in particular applications that can exploit the web of data. WikiNEXT relies on semantic web formalisms and technologies (RDF/RDFa lite) to describe wiki page content and embedded metadata, and to manipulate them (for example, using the SPARQL language). WikiNEXT is a mix between a web-based IDE (Integrated Development Environment) and a semantic wiki. It embeds several editors (a WYSIWYG editor, and an HTML/JavaScript editor + a JavaScript library manager) for coding in the browser, provides an API for exploiting semantic metadata, and uses a graph based data store and an object oriented database for persistence on the server side. It has been specially designed for writing online programming tutorials (i.e. an HTML5 tutorial, a semantic web tutorial on how to consume linked data, etc.), or more generally for developing web applications that can be mixed with more classical wiki documents (in fact all WikiNEXT pages are web applications). The tool is online, open source ; screencasts are available on YouTube (look for 'WikiNEXT').},
booktitle = {Proceedings of the 23rd International Conference on World Wide Web},
pages = {231–232},
numpages = {2},
keywords = {knowledge management, semantic web, semantic wikis, web applications, wikis},
location = {Seoul, Korea},
series = {WWW '14 Companion}
}

@inproceedings{10.1145/2824823.2824824,
author = {Xie, Benjamin and Shabir, Isra and Abelson, Hal},
title = {Measuring the usability and capability of App inventor to create mobile Applications},
year = {2015},
isbn = {9781450339087},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2824823.2824824},
doi = {10.1145/2824823.2824824},
abstract = {MIT App Inventor is a web service that enables users with little to no previous programming experience to create mobile applications using a visual blocks language. We analyze a sample of 5,228 random projects from the corpus of 9.7 million and group projects by functionality. We then use the number of unique blocks in projects as a metric to better understand the usability and realized capability of using App Inventor to implement specific functionalities. We introduce the notion of a usability score and our results indicate that introductory tutorials heavily influence the usability of App Inventor to implement particular functionalities. Our findings suggest that the sequential nature of App Inventor's learning resources results in users realizing only a portion of App Inventor's capabilities and propose improvements to these learning resources that are transferable to other programming environments and tools.},
booktitle = {Proceedings of the 3rd International Workshop on Programming for Mobile and Touch},
pages = {1–8},
numpages = {8},
keywords = {Computer Science Education, End-User Programming, Mobile Computing, Quantitative Study, Visual Languages},
location = {Pittsburgh, PA, USA},
series = {PROMOTO 2015}
}

@inproceedings{10.1145/3180155.3180175,
author = {Beller, Moritz and Spruit, Niels and Spinellis, Diomidis and Zaidman, Andy},
title = {On the dichotomy of debugging behavior among programmers},
year = {2018},
isbn = {9781450356381},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3180155.3180175},
doi = {10.1145/3180155.3180175},
abstract = {Debugging is an inevitable activity in most software projects, often difficult and more time-consuming than expected, giving it the nickname the "dirty little secret of computer science." Surprisingly, we have little knowledge on how software engineers debug software problems in the real world, whether they use dedicated debugging tools, and how knowledgeable they are about debugging. This study aims to shed light on these aspects by following a mixed-methods research approach. We conduct an online survey capturing how 176 developers reflect on debugging. We augment this subjective survey data with objective observations on how 458 developers use the debugger included in their integrated development environments (IDEs) by instrumenting the popular Eclipse and IntelliJ IDEs with the purpose-built plugin WatchDog 2.0. To clarify the insights and discrepancies observed in the previous steps, we followed up by conducting interviews with debugging experts and regular debugging users. Our results indicate that IDE-provided debuggers are not used as often as expected, as "printf debugging" remains a feasible choice for many programmers. Furthermore, both knowledge and use of advanced debugging features are low. These results call to strengthen hands-on debugging experience in computer science curricula and have already refined the implementation of modern IDE debuggers.},
booktitle = {Proceedings of the 40th International Conference on Software Engineering},
pages = {572–583},
numpages = {12},
location = {<conf-loc>, <city>Gothenburg</city>, <country>Sweden</country>, </conf-loc>},
series = {ICSE '18}
}

@inproceedings{10.1145/1822090.1822167,
author = {Kiesmueller, Ulrich and Sossalla, Sebastian and Brinda, Torsten and Riedhammer, Korbinian},
title = {Online identification of learner problem solving strategies using pattern recognition methods},
year = {2010},
isbn = {9781605588209},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1822090.1822167},
doi = {10.1145/1822090.1822167},
abstract = {Learning and programming environments used in computer science education give feedback to the users by system messages. These are triggered by programming errors and give only "technical" hints without regard to the learners' problem solving process. To adapt the messages not only to the factual but also to the procedural knowledge of the learners, their problem solving strategies have to be identified automatically and in process. This article describes a way to achieve this with the help of pattern recognition methods. Using data from a study with 65 learners aged 12 to 13 using a learning environment for programming, a classification system based on hidden Markov models is trained and integrated in the very same environment. We discuss findings in that data and the performance of the automatic online identification, and present first results using the developed software in class.},
booktitle = {Proceedings of the Fifteenth Annual Conference on Innovation and Technology in Computer Science Education},
pages = {274–278},
numpages = {5},
keywords = {algorithms, computer science education, pattern recognition, problem solving strategies, secondary education, tool-based analysis},
location = {Bilkent, Ankara, Turkey},
series = {ITiCSE '10}
}

@inproceedings{10.5555/1082161.1082177,
author = {Cooney, Dominic and Dumas, Marlon and Roe, Paul},
title = {A programming language for web service development},
year = {2005},
isbn = {1920682201},
publisher = {Australian Computer Society, Inc.},
address = {AUS},
abstract = {There is now widespread acceptance of Web services and service-oriented architectures. But despite the agreement on key Web services standards there remain many challenges. Programming environments based on WSDL support go some way to facilitating Web service development. However Web services fundamentally rely on XML and Schema, not on contemporary programming language type systems such as those of Java or .NET. Moreover, Web services are based on a messaging paradigm and hence bring forward the traditional problems of messaging systems including concurrency control and message correlation. It is easy to write simple synchronous Web services using traditional programming languages; however more realistic scenarios are surprisingly difficult to implement. To alleviate these issues we propose a programming language which directly supports Web service development. The language leverages XQuery for native XML processing, supports implicit message correlation and has high level join calculus-style concurrency control. We illustrate the features of the language through a motivating example.},
booktitle = {Proceedings of the Twenty-Eighth Australasian Conference on Computer Science - Volume 38},
pages = {143–150},
numpages = {8},
location = {<conf-loc>, <city>Newcastle</city>, <country>Australia</country>, </conf-loc>},
series = {ACSC '05}
}

@inproceedings{10.1145/3173574.3173983,
author = {Kelly, Annie and Shapiro, R. Benjamin and de Halleux, Jonathan and Ball, Thomas},
title = {ARcadia: A Rapid Prototyping Platform for Real-time Tangible Interfaces},
year = {2018},
isbn = {9781450356206},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3173574.3173983},
doi = {10.1145/3173574.3173983},
abstract = {Paper-based fabrication techniques offer powerful opportunities to prototype new technological interfaces. Typically, paper-based interfaces are either static mockups or require integration with sensors to provide real-time interactivity. The latter can be challenging and expensive, requiring knowledge of electronics, programming, and sensing. But what if computer vision could be combined with prototyping domain-aware programming tools to support the rapid construction of interactive, paper-based tangible interfaces? We designed a toolkit called ARcadia that allows for rapid, low-cost prototyping of TUIs that only requires access to a webcam, a web browser, and paper. ARcadia brings paper prototypes to life through the use of marker based augmented reality (AR). Users create mappings between real-world tangible objects and different UI elements. After a crafting and programming phase, all subsequent interactions take place with the tangible objects. We evaluated ARcadia in a workshop with 120 teenage girls and found that tangible AR technologies can empower novice technology designers to rapidly construct and iterate on their ideas.},
booktitle = {Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems},
pages = {1–8},
numpages = {8},
keywords = {augmented reality, block-based programming, paper prototyping, real-time interactivity, tangible user interfaces},
location = {<conf-loc>, <city>Montreal QC</city>, <country>Canada</country>, </conf-loc>},
series = {CHI '18}
}

@inproceedings{10.5555/2819009.2819174,
author = {Konopka, Martin and Navrat, Pavol and Bielikova, Maria},
title = {Discovering code dependencies by harnessing developer's activity},
year = {2015},
publisher = {IEEE Press},
abstract = {Monitoring software developer's interactions in an integrated development environment is sought for revealing new information about developers and developed software. In this paper we present an approach for identifying potential source code dependencies solely from interaction data. We identify three kinds of potential dependencies and additionally assign them to developer's activity as well, to reveal detailed task-related connections in the source code. Interaction data as a source allow us to identify these candidates for dependencies even for dynamically typed programming languages, or across multiple languages in the source code. After first evaluations and positive results we continue with collecting data in professional environment of Web developers, and evaluating our approach.},
booktitle = {Proceedings of the 37th International Conference on Software Engineering - Volume 2},
pages = {801–802},
numpages = {2},
keywords = {dynamic typing, implicit feedback, interaction data, source code dependency, task context},
location = {Florence, Italy},
series = {ICSE '15}
}

@inproceedings{10.1145/2445196.2445396,
author = {Zhu, Jun and Lipford, Heather Richter and Chu, Bill},
title = {Interactive support for secure programming education},
year = {2013},
isbn = {9781450318686},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2445196.2445396},
doi = {10.1145/2445196.2445396},
abstract = {Software flaws are a root cause of many of today's information security vulnerabilities. Current curricula emphasis on traditional information security issues does not address this root cause. We propose educating students on secure programming techniques through interactive tool support in the Integrated Development Environment (IDE). We believe this approach can complement other curricula efforts by teaching and providing continuous reinforcement of practices throughout programming tasks. In this paper, we evaluate our prototype tool, ASIDE, which provides instant security warnings, detailed explanations of vulnerabilities, and code generation. We report the results of an observational study on 20 students from an advanced Web programming course. The results provide early evidence that our tool could potentially help students learn about and practice secure programming in the context of their programming assignments.},
booktitle = {Proceeding of the 44th ACM Technical Symposium on Computer Science Education},
pages = {687–692},
numpages = {6},
keywords = {IDE, secure programming, security education},
location = {Denver, Colorado, USA},
series = {SIGCSE '13}
}

@inproceedings{10.5555/1331740.1331817,
author = {Fujima, Jun and Yoshihara, Shohei and Tanaka, Yuzuru},
title = {Web Application Orchestration Using Excel},
year = {2007},
isbn = {0769530265},
publisher = {IEEE Computer Society},
address = {USA},
abstract = {Form-based Web applications described in HTML can be easily used by end-users. In order to enable end-users to define a series of tasks by combining multiple Web resources, it is necessary to provide an orchestration environment for Web applications. A spreadsheet is one of the most popular applications for office workers. It provides an enduser programming environment. In this paper, we propose a spreadsheet-based environment for end-users to orchestrate multiple Web applications. First, we provide a method for embedding various Web resources in spreadsheet cells as visual components in order to reuse them on the spreadsheet. Second, we propose an access method for embedded components using the special function in the formula language. Our approach enables users to define the complex coordination of multiple Web applications on the spreadsheet using the formula language.},
booktitle = {Proceedings of the IEEE/WIC/ACM International Conference on Web Intelligence},
pages = {743–749},
numpages = {7},
series = {WI '07}
}

@inproceedings{10.1145/2307096.2307141,
author = {Gritschacher, Tobias and Slany, Wolfgang},
title = {Standing on the shoulders of their peers: success factors for massive cooperation among children creating open source animations and games on their smartphones},
year = {2012},
isbn = {9781450310079},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2307096.2307141},
doi = {10.1145/2307096.2307141},
abstract = {We developed a website for kids where they can share new as well as remixed animations and games, e.g., interactive music videos, which they created on their smartphones or tablets using a visual "LEGO-style" programming environment called Catroid. Online communities for children like our website have unique requirements, and keeping the commitment of kids on a high level is a continuous challenge. For instance, one key motivator for kids is the ability to entertain their friends. Another success factor is the ability to learn from and cooperate with other children. In this short position paper we attempt at identifying the requirements for the success of such an online community, both from the point of view of the kids as well as of their parents, and at finding ways to make it attractive for both.},
booktitle = {Proceedings of the 11th International Conference on Interaction Design and Children},
pages = {264–267},
numpages = {4},
keywords = {animation, children, collaboration, education, games, kids, music, parents, programming, remixing, smartphones, tablets},
location = {Bremen, Germany},
series = {IDC '12}
}

@inproceedings{10.1145/1984701.1984703,
author = {Hattori, Takashi},
title = {Wikigramming: a wiki-based training environment for programming},
year = {2011},
isbn = {9781450305952},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1984701.1984703},
doi = {10.1145/1984701.1984703},
abstract = {Wiki is one of the most successful technologies in Web 2.0 because it is so simple that anyone can start using it instantly. The main aim of this research is to realize a collaborative programming environment that is as simple as Wiki. Each Wiki page contains source code of a Scheme function which is executed on the server. Users can edit any function at any time without complicated procedure, and see the results of their changes instantly. In order to avoid intentional or unintentional destruction of working programs, when users attempt to modify existing functions, the modified version must pass unit tests written by other users. Though changes are made anonymously, we can have some confidence if test cases are written by many users.},
booktitle = {Proceedings of the 2nd International Workshop on Web 2.0 for Software Engineering},
pages = {7–12},
numpages = {6},
keywords = {programming environment, training, unit test, wiki},
location = {Waikiki, Honolulu, HI, USA},
series = {Web2SE '11}
}

@inproceedings{10.1145/2305484.2305520,
author = {Aghaee, Saeed and Nowak, Marcin and Pautasso, Cesare},
title = {Reusable decision space for mashup tool design},
year = {2012},
isbn = {9781450311687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2305484.2305520},
doi = {10.1145/2305484.2305520},
abstract = {Mashup tools are a class of integrated development environments that enable rapid, on-the-fly development of mashups - a type of lightweight Web applications mixing content and services provided through the Web. In the past few years there have been growing number of projects, both from academia and industry, aimed at the development of innovative mashup tools. From the software architecture perspective, the massive effort behind the development of these tools creates a large pool of reusable architectural decisions from which the design of future mashup tools can derive considerable benefits. In this paper, focusing on the design of mashup tools, we explore a design space of decisions comprised of design issues and alternatives. The design space knowledge not only is broad enough to explain the variability of existing tools, but also provides a road-map towards the design of next generation mashup tools.},
booktitle = {Proceedings of the 4th ACM SIGCHI Symposium on Engineering Interactive Computing Systems},
pages = {211–220},
numpages = {10},
keywords = {design rationale, mashup tools, software architecture},
location = {Copenhagen, Denmark},
series = {EICS '12}
}

@inproceedings{10.1145/3053600.3053633,
author = {Gil, Marc and Joubert, Christophe and Torres, Ismael},
title = {Model-driven Engineering IDE for Quality Assessment of Data-intensive Applications},
year = {2017},
isbn = {9781450348997},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3053600.3053633},
doi = {10.1145/3053600.3053633},
abstract = {This article introduces a model-driven engineering (MDE) integrated development environment (IDE) for Data-Intensive Cloud Applications (DIA) with iterative quality enhancements. As part of the H2020 DICE project (ICT-9-2014, id 644869), a framework is being constructed and it is composed of a set of tools developed to support a new MDE methodology. One of these tools is the IDE which acts as the front-end of the methodology and plays a pivotal role in integrating the other tools of the framework. The IDE enables designers to produce from the architectural structure of the general application along with their properties and QoS/QoD annotations up to the deployment model. Administrators, quality assurance engineers or software architects may also run and examine the output of the design and analysis tools in addition to the designer in order to assess the DIA quality in an iterative process.},
booktitle = {Proceedings of the 8th ACM/SPEC on International Conference on Performance Engineering Companion},
pages = {173–174},
numpages = {2},
keywords = {data-intensive technologies, eclipse, ide, model-driven engineering, quality-assessment},
location = {L'Aquila, Italy},
series = {ICPE '17 Companion}
}

@inproceedings{10.1145/1810543.1810581,
author = {Meyers, Jane and LaMarche, Jeffrey and Eisenberg, Michael},
title = {Craftopolis: blending tangible, informal construction into virtual multiuser communities},
year = {2010},
isbn = {9781605589510},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1810543.1810581},
doi = {10.1145/1810543.1810581},
abstract = {The last decade has seen a blossoming of creative online activities for children in which groups, or communities, of youngsters participate within (e.g.) multiplayer games, social networks, shared programming environments, and so forth. Despite the marvelous features of these environments, they all share the limitation of being exclusively "virtual" in their design: children can play in virtual worlds, create virtual buildings and farms, or design programs, but they cannot experiment or create with tangible materials in these activities. In this paper, we present a prototype of a shared online children's "world" in which the basic elements are tangible, informal, "rooms" or constructions that can be controlled computationally and accessed over the World Wide Web. This system, Craftopolis, enables users to make their own computationally-enriched physical models (e.g., of dollhouse rooms, dioramas, game boards, and so forth), using any materials whatever, and to link those rooms into a shared online space.},
booktitle = {Proceedings of the 9th International Conference on Interaction Design and Children},
pages = {242–245},
numpages = {4},
keywords = {Craftopolis, children's crafts, multiuser environments, tangible interaction},
location = {Barcelona, Spain},
series = {IDC '10}
}

@inproceedings{10.1145/3059009.3059035,
author = {Haaranen, Lassi},
title = {Programming as a Performance: Live-streaming and Its Implications for Computer Science Education},
year = {2017},
isbn = {9781450347044},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3059009.3059035},
doi = {10.1145/3059009.3059035},
abstract = {This article discusses an emerging phenomenon of streaming programming to a live audience who in turn can interact with the streamer. In essence, this means broadcasting the programming environment and typically a web camera feed of the streamer to viewers. Streaming programming bears many similarities with live-streaming playing of video games, which has become extremely popular among gamers over the recent years. In fact, streaming programming often use the same web services as streaming gaming, and the audiences overlap.In this article, we describe this novel approach to programming and situate it in the broader context of computer science education. To gain a deeper insight into this phenomena, we analyzed viewer discussions during a particular programming stream broadcasted during a game programming competition. Finally, we discuss the benefits this approach could offer to computer science education.},
booktitle = {Proceedings of the 2017 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {353–358},
numpages = {6},
keywords = {computer science education, game-based learning, online communities, streaming},
location = {Bologna, Italy},
series = {ITiCSE '17}
}

@inproceedings{10.1145/2663761.2664213,
author = {Smith, Michael and Dehlinger, Josh},
title = {Enabling static security vulnerability analysis in PHP applications for novice developers with SSVChecker},
year = {2014},
isbn = {9781450330602},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2663761.2664213},
doi = {10.1145/2663761.2664213},
abstract = {Web-based systems pervade our society, supporting business-critical applications frequently requesting/storing customer's personal information, necessitating increasingly higher levels of information assurance. Novice web programmers, with little or no secure programming skills, unknowingly develop web applications ripe with security vulnerabilities, thus compromising the integrity of the application. As a result, a number of static analysis security tools have been developed to flag potential security vulnerabilities. Yet, these tools are difficult to use, divorced from the software integrated development environments (IDE) and remain unknown to novice developers. This paper contributes an Eclipse plugin that enables static analysis of PHP source code using existing tools directly within a common IDE to enable novice developers to build more secure web applications. We make two claims for the extension of SSVChecker. First, it seamlessly embeds into a common IDE making it easy/familiar to use for novice developers. Second, it provides functionality leveraging multiple tools to reduce reported false positives and better focus novice developers on potential security vulnerabilities. To demonstrate these claims, we use SSVChecker on a popular, open source, PHP-based web application with known security vulnerabilities.},
booktitle = {Proceedings of the 2014 Conference on Research in Adaptive and Convergent Systems},
pages = {278–283},
numpages = {6},
keywords = {secure programming, security auditing, static analysis},
location = {Towson, Maryland},
series = {RACS '14}
}

@article{10.5555/3447065.3447066,
author = {Sjodin, Robert and Lotfy, Mohamed},
title = {Integrating cloud-based file storage and NoSQL databases with mobile app SQLite},
year = {2020},
issue_date = {October 2020},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {36},
number = {2},
issn = {1937-4771},
abstract = {Mobile apps typically make use of user data that needs to be persisted across multiple executions of the app. The primary data source can be stored either locally on the device or remotely in the cloud. A combination of the two approaches can be used to back up the data to a secondary source. In this tutorial we will illustrate two operational scenarios:• The primary data source located on the device, and a backup located in file storage in the cloud.• The primary data source located in the cloud, with a transient backup stored on the device when remote connectivity is unavailableThe ACM/IEEE Computer Science Curricula 2013[1] added platform-based development (PBD) as a new knowledge area to the Computer Science body of knowledge. CS2013 recommended adding web application development and applying it over a wide range of ecosystems as part of the PBD knowledge area. CS2013 acknowledged the "increasing use of platform-specific programming environments, both at the introductory level and in upper-level electives"[1].},
journal = {J. Comput. Sci. Coll.},
month = {oct},
pages = {11–13},
numpages = {3}
}

@inproceedings{10.1145/3372782.3408118,
author = {Le, Thuc Nhi and Saidov, Shokhzodbek and Smith, Justin},
title = {MatchingRef: Matching Variable Names in a Reference Page to Help Introductory CS Students Fix Compiler Errors},
year = {2020},
isbn = {9781450370929},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3372782.3408118},
doi = {10.1145/3372782.3408118},
abstract = {Debugging compiler errors is essential to programming and can be challenging for novice programmers. In introductory computer science courses, challenging errors can discourage students. One reason these errors are difficult to resolve is that most online help systems do not match a student's code. For example, online reference pages use different variable names, identifiers, and method names compared with a student's particular code. To utilize existing resources, students must wade through other people's code (which is often too advanced for novices to comprehend). This is time-consuming and does not provide novices with solutions.To address this problem, we developed MatchingRef -a reference system that helps novices resolve compiler errors. It is a web-based reference guide that catalogs common Processing/Java compiler errors. MatchingRef integrates with the Processing programming environment to provide users with explanations and that match users' particular code. It includes a list of strategies to fix each error, accompanied by one or more concrete examples. Importantly, the key feature that distinguishes MatchingRef from prior reference systems (e.g., Decaf [1], HelpMeOut [4], CodeWrite [2]) is that MatchingRef examples are all dynamically generated using variable, method, and class names from users' programming environments.There are four guiding design principles behind MatchingRef. First is readability, which is listed as a criterion that good error messages should exhibit [5]. The description from Java documentation is usually technical and causes confusion for novice programmers. Hence, we provide explanations that are less cryptic and more familiar in wording. Second is learning by examples. Examples have been shown to be effective way to learn and fix programming errors, such as in online forum like Stack Overflow [7]. Therefore, we include examples in each suggestion so that users can have a concrete idea on how to fix the problems. Third is familiarity, a common design principle across domains [3]. MatchingRef matches elements in the fixing examples with the original code of the users. Finally, our system is intended to reduce cognitive load by customizing the pages to users' code to show the relevant information. According to Cognitive Load Theory (CLT), humans have a finite ability to efficiently process input [6]. As MatchingRef provide users with matching error messages and matching names, their brain only needs to process useful information such as ways to fix the errors or roots of the errors. Users can avoid reading some information in the page multiple times such as variable names or class names because they are already familiar with them.We conducted a within-subjects pilot study (n = 4) to evaluate whether MatchingRef improved novices' performance and comprehension while debugging compiler errors. Participants interacted with two designs of our system, one with matching variable names in the examples and one without this feature. Otherwise, the systems were identical. The participants were students in introductory computer science courses that use Processing. Due to the small sample size, we could not detect significant differences in task completion time. Although the conclusions we can draw are limited, we are encouraged to evaluate MatchingRef in a more formal study.},
booktitle = {Proceedings of the 2020 ACM Conference on International Computing Education Research},
pages = {302},
numpages = {1},
keywords = {compiler errors, computing education, introductory programming, processing development environment, software engineering},
location = {Virtual Event, New Zealand},
series = {ICER '20}
}

@inproceedings{10.1145/2538862.2538881,
author = {Hulsey, Caitlin and Pence, Toni B. and Hodges, Larry F.},
title = {Camp CyberGirls: using a virtual world to introduce computing concepts to middle school girls},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2538881},
doi = {10.1145/2538862.2538881},
abstract = {In this paper we report on the design and results of a one-week, residential summer camp experience that introduced computing concepts to middle school girls in the context of an online, multiplayer, virtual world known as the Curiosity Grid. In contrast to programming environments designed specifically as teaching tools to introduce children to programming, virtual world programming exposes novice learners to a more representative computer science experience. Students write real code and get real syntax errors when their code is not correct. They also design objects in a three-dimensional world where knowledge of mathematical concepts such as 3-D global and local coordinate systems, and 3-D transformations are important to the creation of objects and behaviors. Programming artifacts from the camp and feedback from the camp participants provide a strong argument that middle school girls can handle the challenge of this approach and even be enthusiastic about it.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {331–336},
numpages = {6},
keywords = {educational programming environments, middle school girls, outreach, virtual worlds},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14}
}

@inproceedings{10.1145/2470654.2466213,
author = {Kuttal, Sandeep Kaur and Sarma, Anita and Rothermel, Gregg},
title = {Debugging support for end user mashup programming},
year = {2013},
isbn = {9781450318990},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2470654.2466213},
doi = {10.1145/2470654.2466213},
abstract = {Programming for the web can be an intimidating task, particularly for non-professional ("end-user") programmers. Mashup programming environments attempt to remedy this by providing support for such programming. It is well known, however, that mashup programmers create applications that contain bugs. Furthermore, mashup programmers learn from examples and reuse other mashups, which causes bugs to propagate to other mashups. In this paper we classify the bugs that occur in a large corpus of Yahoo! Pipes mashups. We describe support we have implemented in the Yahoo! Pipes environment to provide automatic error detection techniques that help mashup programmers localize and correct these bugs. We present the results of a think-aloud study comparing the experiences of end-user mashup programmers using and not using our support. Our results show that our debugging enhancements do help these programmers localize and correct bugs more effectively and efficiently.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {1609–1618},
numpages = {10},
keywords = {debugging, end-user programming, end-user software engineering, mashups, programming barriers, yahoo! pipes},
location = {Paris, France},
series = {CHI '13}
}

@article{10.5555/374685.374706,
author = {Denny, William F. and Cuellar, Luis},
title = {OpenGL (tutorial presentation)},
year = {2001},
issue_date = {March 2001},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {16},
number = {3},
issn = {1937-4771},
abstract = {OpenGL is a standard for creating graphics in many different programming environments. This tutorial will show how to use OpenGL using Borland's C++ Builder. More precisely, the GL Utility Toolkit (GLUT) will be examined. Methods of initializing your program to use GLUT, drawing pictures, creating menus, inputting information, and using the mouse will be developed. The following topics will be covered: Example programs will be given. The code will be handed out and will also be available on the web after the meeting.},
journal = {J. Comput. Sci. Coll.},
month = {mar},
pages = {69},
numpages = {1}
}

@inproceedings{10.1145/632716.632824,
author = {Goodell, Howie and Traynor, Carol},
title = {End-user programming and blended-user programming},
year = {1999},
isbn = {1581131585},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/632716.632824},
doi = {10.1145/632716.632824},
abstract = {End-User Programming has not lived up to expectations: today's computer world is dominated by "fatware" programs with hundreds of features, not simple applications built by the users themselves. Yet a strange convergence is taking place between the roles of programmers and end-users. Professional programmers are now end users of complex IDEs (Integrated Development Environments) similar to tools for non-programmers. On the other end of the scale, end users of major applications are gradually eased into real programming by extensive customization, macro recorders, "wizards", and GUI builders. In between are the informally-trained software professionals we call "blended-user programmers" who configure computers and networks, control industrial machines, and build active Web pages and business applications. Like conventional programmers, they are paid to program full-time, and develop skills in a variety of tools. Like end-users, their knowledge is applied and experimental rather than theoretical. Many started as end users, but moved into these software careers instead of becoming "gurus" or "gardeners" [1] who help other users.},
booktitle = {CHI '99 Extended Abstracts on Human Factors in Computing Systems},
pages = {174},
numpages = {1},
keywords = {blended-user programming, end-user computing, end-user programming, psychology of programming, sociology of programming},
location = {Pittsburgh, Pennsylvania},
series = {CHI EA '99}
}

@inproceedings{10.1145/1273360.1273373,
author = {Avellino, Giuseppe and Beco, Stefano and Cantalupo, Barbara and Cavallini, Andrea},
title = {A semantic workflow authoring tool for programming grids},
year = {2007},
isbn = {9781595937155},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1273360.1273373},
doi = {10.1145/1273360.1273373},
abstract = {Workflows have an increasing role in scientific applications programming and business environment development because they are an effective technology to define composition of different pieces of knowledge, both in the application domain and in the business context. However, workflows are addressed in a number of different perspectives and no consensus has been reached yet on the language, modelling, and systems, to adopt in advanced contexts like Grid or semantic Web. In this paper, we describe a graphical tool for supporting different kinds of users in authoring workflows running on next generation Grids. The tool, named Semantic Workflow Programming Tool, is based on a reference workflow model that has been developed to provide advanced functionality with respect to the currently available workflow description. Design and functionality of the tool resulted from requirements and scenarios emerged in the EU funded NextGRID project, in whose context the tool is developed.},
booktitle = {Proceedings of the 2nd Workshop on Workflows in Support of Large-Scale Science},
pages = {69–74},
numpages = {6},
keywords = {grid, semantics, workflow},
location = {Monterey, California, USA},
series = {WORKS '07}
}

@article{10.1145/979743.979764,
author = {Shimomura, Takao},
title = {A page-transition framework for image-oriented Web programming},
year = {2004},
issue_date = {March 2004},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {2},
issn = {0163-5948},
url = {https://doi.org/10.1145/979743.979764},
doi = {10.1145/979743.979764},
abstract = {To develop Web applications, various integrated development environments have been used. In addition, several frameworks for efficiently developing those applications have been proposed. This paper presents the image-oriented page-transition framework that models a Web application as a set of transitions of Web pages, and using visual components, makes it easier to write processes executed when a Web page transfers to another Web page. This page-transition framework has the following novel features: (1) The developers of Web applications do not need to write any processes for receiving and analyzing submitted form data. (2) The data submitted by page transfers are stored in the appropriate variables that are automatically generated. Using these automatically generated variables, the developers can write necessary actions for each Web page from which control transfers. (3) The developers can deal with tables used inside the programs as visual components, and can use these components to design dynamic Web pages.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {mar},
pages = {10},
numpages = {1},
keywords = {Web application, automatic code generation, image-oriented design, page-transition framework}
}

@inproceedings{10.1145/3377812.3390907,
author = {Ardimento, Pasquale and Bernardi, Mario Luca and Cimitile, Marta},
title = {Towards automatic assessment of object-oriented programs},
year = {2020},
isbn = {9781450371223},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3377812.3390907},
doi = {10.1145/3377812.3390907},
abstract = {The computing education community has shown a long-time interest in how to analyze the Object-Oriented (OO) source code developed by students to provide them with useful formative tips. In this paper, we propose and evaluate an approach to analyze how students use Java and its language constructs. The approach is implemented through a cloud-based integrated development environment (IDE) and it is based on the analysis of the most common violations of the OO paradigm in the student source code. Moreover, the IDE supports the automatic generation of reports about student's mistakes and misconceptions that can be used by instructors to improve the course design. The paper discusses the preliminary results of an experiment performed in a class of a Programming II course to investigate the effects of the provided reports in terms of coding ability (concerning the correctness of the produced code).},
booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering: Companion Proceedings},
pages = {276–277},
numpages = {2},
keywords = {abstract data types, inheritance, object oriented development, polymorphism, student assessment},
location = {Seoul, South Korea},
series = {ICSE '20}
}

@article{10.5555/2591468.2591479,
author = {Wang, Xusheng},
title = {Design, develop and teach the second web programming course in computer science curriculum},
year = {2014},
issue_date = {April 2014},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {29},
number = {4},
issn = {1937-4771},
abstract = {In current Computer Science curriculum, teaching web programming courses has become a consensus. Web programming involves many web technologies. How to design and integrate these technologies into web programming courses is still a challenging task for web programming instructors in computer science program. Many universities have been offering one web programming course as an elective in their computer science curriculum. This paper presents our strategies and experiences to teach the second web programming course in CS curriculum. We answered some questions regarding what topics and technologies should be involved, what textbooks might be chosen, what programming environment needs to be set up to support the course, and what assignments and projects could be assigned for students. This paper intends to share some useful information and experience for other instructors teaching the second web programming course in Computer Science curriculum.},
journal = {J. Comput. Sci. Coll.},
month = {apr},
pages = {52–59},
numpages = {8}
}

@inproceedings{10.1145/3170427.3186535,
author = {Kelly, Annie and Shapiro, R. Benjamin and de Halleux, Jonathan and Ball, Thomas},
title = {ARcadia: A Rapid Prototyping Platform for Real-time Tangible Interfaces},
year = {2018},
isbn = {9781450356213},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3170427.3186535},
doi = {10.1145/3170427.3186535},
abstract = {Paper-based fabrication techniques offer powerful opportunities to prototype new technological interfaces. Typically, paper-based interfaces are either static mockups or require integration with sensors to provide real-time interactivity. The latter can be challenging and expensive, requiring knowledge of electronics, programming, and sensing. But what if computer vision could be combined with prototyping domain-aware programming tools to support the rapid construction of interactive, paper-based tangible interfaces? We designed a toolkit called ARcadia that allows for rapid, low-cost prototyping of TUIs that only requires access to a webcam, a web browser, and paper. ARcadia brings paper prototypes to life through the use of marker based augmented reality (AR). Users create mappings between real-world tangible objects and different UI elements. After a crafting and programming phase, all subsequent interactions take place with the tangible objects. We evaluated ARcadia in a workshop with 120 teenage girls and found that tangible AR technologies can empower novice technology designers to rapidly construct and iterate on their ideas.},
booktitle = {Extended Abstracts of the 2018 CHI Conference on Human Factors in Computing Systems},
pages = {1–4},
numpages = {4},
keywords = {augmented reality, block-based programming, paper prototyping, real-time interactivity, tangible user interfaces},
location = {<conf-loc>, <city>Montreal QC</city>, <country>Canada</country>, </conf-loc>},
series = {CHI EA '18}
}

@inproceedings{10.1145/2839509.2844597,
author = {Repenning, Alexander and Basawapatna, Ashok and Assaf, Dorit and Maiello, Carmine and Escherle, Nora},
title = {Retention of Flow: Evaluating a Computer Science Education Week Activity},
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2844597},
doi = {10.1145/2839509.2844597},
abstract = {High profile computer science education events such as the Hour of Code can reach millions of students but without proper evaluation it is not clear what motivational and educational consequences the participation has. If, for instance, participants' levels of motivation towards the end of an hour long activity are significantly fading, then their perception of programming to be "hard and boring" may actually get reinforced. By simply measuring how far participants progressed with their projects we have been able to collect retention data from thousands of participants in a way that allows us to interpret these data in terms of not only cognitive but also technical and practical activity challenges. Inflection points overlaying a negative exponential retention distribution serve as indicators of these challenges with potential impact on Flow. Retention of Flow is an evaluation approach to analyze computer science education activities, including interactive tutorials and online programming environments, with respect to cognitive as well as affective challenges.},
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
pages = {633–638},
numpages = {6},
keywords = {computer science education, computer science education week, flow, hour of code, retention},
location = {Memphis, Tennessee, USA},
series = {SIGCSE '16}
}

@inproceedings{10.1145/2688130.2688131,
author = {Karmarkar, Anish},
title = {CAMP: a standard for managing applications on a PaaS cloud},
year = {2014},
isbn = {9781450325301},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2688130.2688131},
doi = {10.1145/2688130.2688131},
abstract = {Cloud Application Management for Platforms (CAMP) is a standard that addresses the problem of portability of artifacts and interoperability of APIs in a Platform as a Service (PaaS) environment. It defines the artifacts and APIs that need to be offered by a PaaS to manage building, running, administering, monitoring and patching of applications in the cloud. This is a collaborative open standard that is being developed in OASIS. One of the goals for this effort is to allow developers, users, and vendors to create tools and services that interact with any conforming PaaS. The interoperability between platform clouds that CAMP offers means that a CAMP client such as an Integrated Development Environment (IDE) can target multiple clouds with a single common interface/implementation. In addition to various vendors, OpenStack Solum and Apache Brooklyn have both adopted CAMP and it is central to their design.},
booktitle = {Proceedings of the 2014 Workshop on Eclipse Technology EXchange},
pages = {1–2},
numpages = {2},
keywords = {camp, cloud computing, cloud standard, paas, paas management, paas resource model, paas rest api},
location = {Portland, Oregon, USA},
series = {ETX '14}
}

@inproceedings{10.1145/1240866.1240964,
author = {Myers, Brad A. and Burnett, Margaret M. and Wiedenbeck, Susan and Ko, Amy J.},
title = {End user software engineering: CHI 2007 special interest group meeting},
year = {2007},
isbn = {9781595936424},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1240866.1240964},
doi = {10.1145/1240866.1240964},
abstract = {Recently, researchers have been working to bring the benefits of rigorous software engineering methodologies to end users who find themselves in programming situations, to try to make their software more reliable. End users create software whenever they write, for instance, educational simulations, spreadsheets, or dynamic e-business web applications. Unfortunately, errors are pervasive in end-user software, and the resulting impact is sometimes enormous. This special interest group meeting has three purposes: to bring the results of a recent (February 2007) week-long "Dagstuhl" meeting on end-user software engineering to interested researchers at CHI; to incorporate attendees' ideas and feedback into an emerging survey of the state of this interesting new subarea; and generally to bring together the community of researchers who are addressing this topic, with the companies that are creating end-user programming tools.},
booktitle = {CHI '07 Extended Abstracts on Human Factors in Computing Systems},
pages = {2125–2128},
numpages = {4},
keywords = {empirical studies of programmers (ESP), end users shaping effective software (EUSES), end-user software engineering (EUSE), natural programming, psychology of programming},
location = {San Jose, CA, USA},
series = {CHI EA '07}
}

@inproceedings{10.1145/3147213.3155012,
author = {Fox, Geoffrey},
title = {Components and Rationale of a Big Data Toolkit Spanning HPC, Grid, Edge and Cloud Computing},
year = {2017},
isbn = {9781450351492},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3147213.3155012},
doi = {10.1145/3147213.3155012},
abstract = {We look again at Big Data Programming environments such as Hadoop, Spark, Flink, Heron, Pregel; HPC concepts such as MPI and Asynchronous Many-Task runtimes and Cloud/Grid/Edge ideas such as event-driven computing, serverless computing, workflow, and Services. These cross many research communities including distributed systems, databases, cyberphysical systems and parallel computing which sometimes have inconsistent worldviews. There are many common capabilities across these systems which are often implemented differently in each packaged environment. For example, communication can be bulk synchronous processing or data flow; scheduling can be dynamic or static; state and fault-tolerance can have different models; execution and data can be streaming or batch, distributed or local. We suggest that one can usefully build a toolkit (called Twister2 by us) that supports these different choices and allows fruitful customization for each application area. We illustrate the design of Twister2 by several point studies. We stress the many open questions in very traditional areas including scheduling, messaging and checkpointing.},
booktitle = {Proceedings of The10th International Conference on Utility and Cloud Computing},
pages = {1},
numpages = {1},
keywords = {cloud computing, dataflow, edge computing, global machine learning, hpc, mapreduce, mpi},
location = {Austin, Texas, USA},
series = {UCC '17}
}

@inproceedings{10.1145/3586182.3616660,
author = {Arawjo, Ian and Vaithilingam, Priyan and Wattenberg, Martin and Glassman, Elena},
title = {ChainForge: An open-source visual programming environment for prompt engineering},
year = {2023},
isbn = {9798400700965},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3586182.3616660},
doi = {10.1145/3586182.3616660},
abstract = {Prompt engineering for large language models (LLMs) is a critical to effectively leverage their capabilities. However, due to the inherent stochastic and opaque nature of LLMs, prompt engineering is far from an exact science. Crafting prompts that elicit the desired responses still requires a lot of trial and error to gain a nuanced understanding of a model’s strengths and limitations for one’s specific task context and target application. To support users in sensemaking around the outputs of LLMs, we create ChainForge, an open-source visual programming environment for prompt engineering. ChainForge is publicly available, both on the web (https://chainforge.ai) and as a locally installable Python package hosted on PyPI. We detail some features of ChainForge and how we iterated the design in response to internal and external feedback.},
booktitle = {Adjunct Proceedings of the 36th Annual ACM Symposium on User Interface Software and Technology},
articleno = {4},
numpages = {3},
keywords = {language models, prompt engineering, visual programming},
location = {<conf-loc>, <city>San Francisco</city>, <state>CA</state>, <country>USA</country>, </conf-loc>},
series = {UIST '23 Adjunct}
}

@inproceedings{10.1145/1584322.1584328,
author = {Jadud, Matthew C. and Henriksen, Poul},
title = {Flexible, reusable tools for studying novice programmers},
year = {2009},
isbn = {9781605586151},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1584322.1584328},
doi = {10.1145/1584322.1584328},
abstract = {We would like more computer science education research studies to be easily replicable. Unfortunately, the tools used for data collection are often too specialized, unstable, or just plain unavailable for use in experimental replication. Here, we present two tools to aid in the replication and extension of existing research regarding novice programmers--or to support entirely new and unrelated enquiries. The first tool is specific to the BlueJ pedagogic programming environment, and provides a starting point for replicating or extending existing studies regarding novice programmers learning Java. The second tool is a portable, stand-alone web-server with a language-agnostic interface for storing data. The distinguishing feature of this server is that it is schema free, meaning it can easily support a wide range of data collection projects simultaneously with no reconfiguration whatsoever.},
booktitle = {Proceedings of the Fifth International Workshop on Computing Education Research Workshop},
pages = {37–42},
numpages = {6},
keywords = {CS education research, blueJ, data logging, tools},
location = {Berkeley, CA, USA},
series = {ICER '09}
}

@inproceedings{10.1109/MSR.2017.10,
author = {Chatterjee, Preetha and Gause, Benjamin and Hedinger, Hunter and Pollock, Lori},
title = {Extracting code segments and their descriptions from research articles},
year = {2017},
isbn = {9781538615447},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MSR.2017.10},
doi = {10.1109/MSR.2017.10},
abstract = {The availability of large corpora of online software-related documents today presents an opportunity to use machine learning to improve integrated development environments by first automatically collecting code examples along with associated descriptions. Digital libraries of computer science research and education conference and journal articles can be a rich source for code examples that are used to motivate or explain particular concepts or issues. Because they are used as examples in an article, these code examples are accompanied by descriptions of their functionality, properties, or other associated information expressed in natural language text. Identifying code segments in these documents is relatively straightforward, thus this paper tackles the problem of extracting the natural language text that is associated with each code segment in an article. We present and evaluate a set of heuristics that address the challenges of the text often not being colocated with the code segment as in developer communications such as online forums.},
booktitle = {Proceedings of the 14th International Conference on Mining Software Repositories},
pages = {91–101},
numpages = {11},
keywords = {code snippet description, information extraction, mining software repositories, text analysis},
location = {Buenos Aires, Argentina},
series = {MSR '17}
}

@inproceedings{10.1145/2157136.2157195,
author = {Scaffidi, Christopher and Dahotre, Aniket and Zhang, Yan},
title = {How well do online forums facilitate discussion and collaboration among novice animation programmers?},
year = {2012},
isbn = {9781450310987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2157136.2157195},
doi = {10.1145/2157136.2157195},
abstract = {Animation programming is a widely-respected approach for helping students to learn programming skills, and online forums are a widely-used approach for helping students to interact with one another. But in what ways, if any, does combining animation programming with online forums lead to useful discussion and collaboration among learners? To answer this question, we analyzed online forum discussions among people who were learning to create animation programs using the Scratch programming environment. We discovered that specific kinds of online posts were more likely than others to be followed by discussion, and we found that the ensuing collaboration often involved the exchange of design ideas and feedback within small groups of users. These findings reveal opportunities for enhancing online forums and surrounding tools so they more effectively facilitate discussion, collaboration, and ultimately development of programming skills.},
booktitle = {Proceedings of the 43rd ACM Technical Symposium on Computer Science Education},
pages = {191–196},
numpages = {6},
keywords = {forums, novice programming environments, scratch},
location = {Raleigh, North Carolina, USA},
series = {SIGCSE '12}
}

@inproceedings{10.1145/1942793.1942799,
author = {Yamamiya, Takashi and Ohshima, Yoshiki},
title = {Tamacola --- a meta language kit for the web: a report on creating a self-hosting lisp compiler on the Tamarin VM},
year = {2010},
isbn = {9781450304917},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1942793.1942799},
doi = {10.1145/1942793.1942799},
abstract = {Tamacola is a dynamic, self-sustaining meta-language system grounded upon the Tamarin VM. Tamacola compiles a Scheme-like S-expression language into ActionScript bytecodes, and contains meta-linguistic features, such as a PEG parser generator and macro system, which make it useful for defining new languages. In fact, Tamacola is written in itself, using its meta-linguistic features.Since the Tamarin VM can load ActionScript bytecode files to extend and replace running programs, Tamacola can extend itself and define new languages while it is running. Furthermore, since the Tamarin VM is part of the ubiquitous Adobe Flash player, this self-modification can be accomplished while running in a web browser, with no extra installation requirement.Objects in Tamacola are intimately tied to their Action-Script counterparts, providing good interoperability between Tamacola and the Flash Player. To show that the system is ready for practical use, we used Tamacola to implement both an interactive programming environment ("Workspace") and a simple particle language.},
booktitle = {Workshop on Self-Sustaining Systems},
pages = {41–53},
numpages = {13},
keywords = {Adobe Flash, compiler, self hosting},
location = {Tokyo, Japan},
series = {S3 '10}
}

@inproceedings{10.1145/3592626.3592659,
author = {Arisland, Kjell \O{}ystein and Johansen, Svein and R\o{}nning, Gunnar},
title = {Introducing CandleWeb and \r{A} (awe), Bringing Animation Power to the World Wide Web},
year = {1995},
isbn = {1565921690},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3592626.3592659},
doi = {10.1145/3592626.3592659},
abstract = {The World Wide Web has limited interactive capabilities, and does not support animated graphics well. To allow real-time interaction and animated graphics that are both pedagogically and commercially motivating, we must extend the Web. A new tool called CandleWeb is presented. CandleWeb works together with standard HTML browsers, and uses the hypertext transport protocol (HTTP). The tool has been implemented for X11, and interprets a language called \r{A} (awe) which combines a simple C-like syntax with standardized graphics objects to provide a programming environment in which presentations including animation can be produced efficiently. An authoring tool called \r{A} (awe) Composer allows programmers to save considerable time in implementing animated presentations, compared to text-based programming, using graphics libraries. The CandleWeb client for X11 V1.0beta and the \r{A} (awe) language are openly available on the Internet at the site http://www.oslonett.no/~candle/.},
booktitle = {Proceedings of the Fourth International Conference on World Wide Web},
pages = {411–421},
numpages = {11},
keywords = {advertising, animation, awe, authoring, browser, C, CandleWeb, client, commercial, composer, education, graphics, HTML, HTTP, interactive, interpretation, language, programming, realtime, tool, world wide web, \r{A}},
location = {Boston, Massachusetts, USA},
series = {WWW4}
}

@inproceedings{10.1145/2676723.2693616,
author = {Bart, Austin Cory},
title = {Situating Computational Thinking with Big Data: Pedagogy and Technology (Abstract Only)},
year = {2015},
isbn = {9781450329668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2676723.2693616},
doi = {10.1145/2676723.2693616},
abstract = {As Computational Thinking becomes pervasive in undergraduate programs, new students must be educated in meaningful, authentic contexts that they find both motivating and relatable. I propose working with big data as a novel context for introductory programming, authentic given its importance in diverse fields such as agriculture, history, and more. Big data is considered difficult to use because of its inherent technical obstacles. To overcome these difficulties, I introduce a new project: CORGIS - a "Collection of Real-time, Giant, Interesting, Situated Datasets". The CORGIS project comprises a collection of libraries that provide an interface to big data for students, architectures for rapidly enabling new datasets, and a web-based textbook platform for disseminating relevant course materials. This textbook features an online block-based programming environment, real-time collaborative text editing, and continuous server-side storage. In this poster, I describe the educational theory guiding this work, the novel technolgy created and deployed, and the initial, promising results.},
booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer Science Education},
pages = {719},
numpages = {1},
keywords = {Big data, CORGIS, Computational Thinking, Motivation},
location = {Kansas City, Missouri, USA},
series = {SIGCSE '15}
}

@inproceedings{10.1145/1926354.1926358,
author = {Chakravarty, Manuel M.T. and Keller, Gabriele and Lee, Sean and McDonell, Trevor L. and Grover, Vinod},
title = {Accelerating Haskell array codes with multicore GPUs},
year = {2011},
isbn = {9781450304863},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1926354.1926358},
doi = {10.1145/1926354.1926358},
abstract = {Current GPUs are massively parallel multicore processors optimised for workloads with a large degree of SIMD parallelism. Good performance requires highly idiomatic programs, whose development is work intensive and requires expert knowledge.To raise the level of abstraction, we propose a domain-specific high-level language of array computations that captures appropriate idioms in the form of collective array operations. We embed this purely functional array language in Haskell with an online code generator for NVIDIA's CUDA GPGPU programming environment. We regard the embedded language's collective array operations as algorithmic skeletons; our code generator instantiates CUDA implementations of those skeletons to execute embedded array programs.This paper outlines our embedding in Haskell, details the design and implementation of the dynamic code generator, and reports on initial benchmark results. These results suggest that we can compete with moderately optimised native CUDA code, while enabling much simpler source programs.},
booktitle = {Proceedings of the Sixth Workshop on Declarative Aspects of Multicore Programming},
pages = {3–14},
numpages = {12},
keywords = {arrays, data parallelism, dynamic compilation, gpgpu, haskell, skeletons},
location = {Austin, Texas, USA},
series = {DAMP '11}
}

@inproceedings{10.1145/2820783.2820796,
author = {Tahboub, Ruby Y. and Shin, Jaewoo and Abdelsalam, Aya and Aref, Jalaleldeen W. and Aref, Walid G. and Prabhakar, Sunil},
title = {LIMO: learning programming using interactive map activities},
year = {2015},
isbn = {9781450339674},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2820783.2820796},
doi = {10.1145/2820783.2820796},
abstract = {Advances in geographic information, interactive two- and three-dimensional map visualization accompanied with the proliferation of mobile devices and location data have tremendously benefited the development of geo-educational applications. We demonstrate LIMO; a web-based programming environment that is centered around operations on interactive geographical maps, location-oriented data, and the operations of synthetic objects that move on the maps. LIMO materializes a low-cost open-ended environment that integrates interactive maps and spatial data (e.g., OpenStreetMap). The unique advantage of LIMO is that it relates programming concepts to interactive geographical maps and location data. LIMO offers an environment for students to learn how to program by providing: 1. An easy-to-program library of map and spatial operations, 2. High-quality interactive map graphics, and 3. Example programs that introduce users to writing programs in the LIMO environment.},
booktitle = {Proceedings of the 23rd SIGSPATIAL International Conference on Advances in Geographic Information Systems},
articleno = {98},
numpages = {4},
keywords = {computer programming education, interactive maps},
location = {Seattle, Washington},
series = {SIGSPATIAL '15}
}

@article{10.5555/2602724.2602729,
author = {Turbak, Franklyn and Pokress, Shaileen Crawford and Sherman, Mark},
title = {Mobile computational thinking with APP inventor 2},
year = {2014},
issue_date = {June 2014},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {29},
number = {6},
issn = {1937-4771},
abstract = {Computational Thinking Through Mobile Computing is an NSF-funded project for introducing students to computational thinking through creating mobile apps. In this hands-on workshop, which is targeted at undergraduate and secondary school computer science teachers, participants will develop Android apps using MIT App Inventor 2. This is a new version of the visual blocks-based programming environment with additional language features (local variables, improved handling of procedure and event parameters) and browser-based blocks editing. The workshop will focus on computational concepts relevant to mobile apps: event-based programming, location awareness, social computing, persistence and sharing, and leveraging the sensors and actuators of mobile devices. The workshop will also present pedagogical materials (lessons, tutorials, assignments), evaluation materials (blocks-based quizzes, surveys, project rubrics), and student projects. A laptop and gmail account are required for this workshop. Participants can borrow an Android device to use during the workshop, or they may use their own Android device if they have one.},
journal = {J. Comput. Sci. Coll.},
month = {jun},
pages = {15–17},
numpages = {3}
}

@inproceedings{10.5555/1082424.1082439,
author = {Truong, Nghi and Roe, Paul and Bancroft, Peter},
title = {Automated feedback for "fill in the gap" programming exercises},
year = {2005},
isbn = {1920682244},
publisher = {Australian Computer Society, Inc.},
address = {AUS},
abstract = {Timely feedback is a vital component in the learning process. It is especially important for beginner students in Information Technology since many have not yet formed an effective internal model of a computer that they can use to construct viable knowledge. Research has shown that learning efficiency is increased if immediate feedback is provided for students. Automatic analysis of student programs has the potential to provide immediate feedback for students and to assist teaching staff in the marking process. This paper describes a "fill in the gap" programming analysis framework which tests students' solutions and gives feedback on their correctness, detects logic errors and provides hints on how to fix these errors. Currently, the framework is being used with the Environment for Learning to Programming (ELP) system at Queensland University of Technology (QUT); however, the framework can be integrated into any existing online learning environment or programming Integrated Development Environment (IDE).},
booktitle = {Proceedings of the 7th Australasian Conference on Computing Education - Volume 42},
pages = {117–126},
numpages = {10},
keywords = {C#, XML, automated testing, black box, dynamic analysis, fill in the gap, instant feedback, java, white box},
location = {<conf-loc>, <city>Newcastle</city>, <state>New South Wales</state>, <country>Australia</country>, </conf-loc>},
series = {ACE '05}
}

@inproceedings{10.1145/3330430.3333627,
author = {Chen, Charles H. and Guo, Philip J.},
title = {Improv: Teaching Programming at Scale via Live Coding},
year = {2019},
isbn = {9781450368049},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3330430.3333627},
doi = {10.1145/3330430.3333627},
abstract = {Computer programming instructors frequently perform live coding in settings ranging from MOOC lecture videos to online livestreams. However, there is little tool support for this mode of teaching, so presenters must now either screen-share or use generic slideshow software. To overcome the limitations of these formats, we propose that programming environments should directly facilitate live coding for education. We prototyped this idea by creating Improv, an IDE extension for preparing and delivering code-based presentations informed by Mayer's principles of multimedia learning. Improv lets instructors synchronize blocks of code and output with slides and create preset waypoints to guide their presentations. A case study on 30 educational videos containing 28 hours of live coding showed that Improv was versatile enough to replicate approximately 96% of the content within those videos. In addition, a preliminary user study on four teaching assistants showed that Improv was expressive enough to allow them to make their own custom presentations in a variety of styles and improvise by live coding in response to simulated audience questions. Users mentioned that Improv lowered cognitive load by minimizing context switching and made it easier to fix errors on-the-fly than using slide-based presentations.},
booktitle = {Proceedings of the Sixth (2019) ACM Conference on Learning @ Scale},
articleno = {9},
numpages = {10},
location = {Chicago, IL, USA},
series = {L@S '19}
}

@inproceedings{10.1145/2261605.2261631,
author = {Corral-Garc\'{\i}a, Javier and Cort\'{e}s-Polo, David and G\'{o}mez-Mart\'{\i}n, C\'{e}sar and Gonz\'{a}lez-S\'{a}nchez, Jos\'{e}-Luis},
title = {Methodology and framework for the development of scientific applications with high-performance computing through web services},
year = {2012},
isbn = {9781450310123},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2261605.2261631},
doi = {10.1145/2261605.2261631},
abstract = {One of the biggest problems in the development of high-performance scientific applications is the need for programming environments that allow source code development in an efficient way. However, there is a clear lack of approaches with specific methodologies or optimal working environments to develop high-performance computing software systems. Additionally, existing frameworks are focused on the design and implementation phases, forgetting software component reuse from the earliest stages of the development process.An aspect-oriented and component-based approach is proposed for the development of complex parallel applications from existing functional components and new component definitions, according to business rules established by the users, through a web service entry of the platform. The proposed approach includes a specific methodology to develop high-performance scientific applications through the reuse of components from the earliest stages. Finally, an additional supercomputing-oriented framework aims to facilitate the development of these systems and to make creation, cataloguing, validation and reuse of each application and its components easier.},
booktitle = {Proceedings of the 6th Euro American Conference on Telematics and Information Systems},
pages = {173–180},
numpages = {8},
keywords = {AOP, CBSE, HPC, framework, high-performance computing, methodology, reuse},
location = {Valencia, Spain},
series = {EATIS '12}
}

@inproceedings{10.1145/2538862.2544312,
author = {Anton, Gabriella and Berland, Matthew},
title = {Studio K: a game development environment designed for gains in computational thinking (abstract only)},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2544312},
doi = {10.1145/2538862.2544312},
abstract = {Studio K is a game design curriculum constructed to provide middle school students an engaging entry into computer science and programming. Developed at the University of Wisconsin-Madison, the program employs Microsoft's 3D programming environment, Kodu, in tandem with support and analytic tools for facilitators, and an online community that provides players with a support system. These key features are bolstered with incorporation of telemetry data gathered through design sessions that are used to improve site functioning, curriculum relevancy, and administrative tools. This program is applied across contexts, with applications in formal classrooms, informal extracurricular clubs or camps, and alternative learning environments such as library systems or home schools. Studio K provides a well-supported, unique entry into computer science in which programming knowledge becomes a tool that supports learners' goals in designing and developing games.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {723},
numpages = {1},
keywords = {computer science education, game design},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14}
}

@inproceedings{10.1145/1562877.1562939,
author = {Sooriamurthi, Raja},
title = {Introducing abstraction and decomposition to novice programmers},
year = {2009},
isbn = {9781605583815},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1562877.1562939},
doi = {10.1145/1562877.1562939},
abstract = {This paper discusses a learning exercise we use in our beginning programming classes to introduce students to the concepts of abstraction and decomposition. The assignment is to write a perpetual calendar generation program: given a month and a year the program will display the correct monthly calendar. The learning goals of the exercise include how to decompose a large problem into smaller pieces and how to specify what each piece needs to do. This exercise helps students learn the process of incremental and iterative development. More than the actual solution, the value of this exercise is in the several themes of software development that are discussed during its development. We have successfully used this assignment for several years in a variety of CS1/CS2 programming environments (Pascal, C, Java and .net) and also as a Java servlet based web application exercise. Over this period, the case-study has received very favorable feedback from students as to its interestingness and pedagogical value.},
booktitle = {Proceedings of the 14th Annual ACM SIGCSE Conference on Innovation and Technology in Computer Science Education},
pages = {196–200},
numpages = {5},
keywords = {cs1/cs2, programming case study},
location = {Paris, France},
series = {ITiCSE '09}
}

@inproceedings{10.1145/2485760.2485764,
author = {Harms, Kyle J. and Cosgrove, Dennis and Gray, Shannon and Kelleher, Caitlin},
title = {Automatically generating tutorials to enable middle school children to learn programming independently},
year = {2013},
isbn = {9781450319188},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2485760.2485764},
doi = {10.1145/2485760.2485764},
abstract = {Enabling middle school children to learn from code shared on the internet may provide computer science learning opportunities to those who would not otherwise have them. We augmented a programming environment designed for middle school children to automatically generate tutorials from code snippets in order to help users learn new programming skills. In our new system, users select code snippets from a program shared on the web and then complete an automatically generated tutorial in order to re-create that snippet within their own program. To evaluate the potential learning gains from our generated tutorials, we conducted a between-subjects study in which we evaluated the performance of children introduced to new programming constructs through automatically generated tutorials. Participants who used the automatically generated tutorials performed 64% better on a near transfer task compared to participants without generated tutorials.},
booktitle = {Proceedings of the 12th International Conference on Interaction Design and Children},
pages = {11–19},
numpages = {9},
keywords = {automatically generated tutorials, code reuse, programming systems for children},
location = {New York, New York, USA},
series = {IDC '13}
}

@inproceedings{10.1145/2723742.2723750,
author = {Sinha, Nishant and Karim, Rezwana and Gupta, Monika},
title = {Simplifying Web Programming},
year = {2015},
isbn = {9781450334327},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2723742.2723750},
doi = {10.1145/2723742.2723750},
abstract = {Modern web programming is plagued by a jungle of heterogeneous programming frameworks and lacks adequate abstractions for end-to-end rapid, structured, design and development. We studied the current problems faced by developers using an online survey, and found that integrating client-side interactivity with the back-end is a major source of inefficiency. Based on the reported issues, we developed a new programming environment, called WebNat, to reduce the burden of client-server programming. WebNat makes it easy to specify bindings of client-side views with server-side data and provides multiple abstractions that enable succinct specifications for interactive web applications. We conducted a user study to understand its usefulness and barriers to adoption. Our participants were able to learn and use WebNat in less than 2 hours showing minimal learning curve. We also discovered that although novices embrace the system readily, experience developers are more cautious about adopting a new web programming framework.},
booktitle = {Proceedings of the 8th India Software Engineering Conference},
pages = {80–89},
numpages = {10},
location = {Bangalore, India},
series = {ISEC '15}
}

@inproceedings{10.1145/1600150.1600162,
author = {Chilton, Lydia B. and Sims, Clayton T. and Goldman, Max and Little, Greg and Miller, Robert C.},
title = {Seaweed: a web application for designing economic games},
year = {2009},
isbn = {9781605586724},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1600150.1600162},
doi = {10.1145/1600150.1600162},
abstract = {Seaweed is a web application for experimental economists with no programming background to design two-player symmetric games in a visual-oriented interface. Games are automatically published to the web where players can play against each other remotely and game play is logged so that the game's designer can analyze the data. The design and implementation challenge in Seaweed is to provide an end user programming environment that creates games responsive to events and controlled by logic without the designer understanding programming concepts such as events and synchronization, or being burdened by specifying low-level programming detail. Seaweed achieves this by providing high-level visual representations for variables, control flow, and logic, and by automating behaviors for event handling, synchronization, and function evaluation. Seaweed's evaluation demonstrates that Amazon's Mechanical Turk (MTurk) is a viable platform for forming partnerships between people and paying them to perform cooperative tasks in real-time, cheaply and with high throughput},
booktitle = {Proceedings of the ACM SIGKDD Workshop on Human Computation},
pages = {34–35},
numpages = {2},
keywords = {end-user programming, experimental economics, mechanical Turk},
location = {Paris, France},
series = {HCOMP '09}
}

@inproceedings{10.5555/1599503.1599529,
author = {Brennan, Karen},
title = {Scratch-Ed: an online community for scratch educators},
year = {2009},
isbn = {9781409285984},
publisher = {International Society of the Learning Sciences},
abstract = {Scratch is a programming environment that enables users to easily construct a wide variety of interactive projects - and share these creations with an online community. A main goal of Scratch is to enable young people to engage in construction-oriented acts of personal expression. From community narratives to role-playing games to mathematical simulations to consciousness-raising presentations, the potential for creative production with Scratch is boundless. However, for those who are primarily concerned with assisting others' Scratch learning, there is a disconnect between what individuals want to do and the resources that are presently available. In response, we have developed Scratch-Ed, an online environment for educators. Using the lens of situated learning, Scratch-Ed has been designed to enable users to organize a community of practice for Scratch around the processes of mutual engagement, joint enterprise, and shared repertoire by sharing stories, exchanging resources, facilitating discussions, and establishing relationships.},
booktitle = {Proceedings of the 9th International Conference on Computer Supported Collaborative Learning - Volume 2},
pages = {76–78},
numpages = {3},
location = {Rhodes, Greece},
series = {CSCL'09}
}

@article{10.1145/166635.166643,
author = {Arpinar, undefinedsmailcem Budak and Do\u{g}a\c{c}, Asuman and Evrendilek, Cem},
title = {MoodView: an advanced graphical user interface for OODBMSs},
year = {1993},
issue_date = {Dec. 1993},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {22},
number = {4},
issn = {0163-5808},
url = {https://doi.org/10.1145/166635.166643},
doi = {10.1145/166635.166643},
abstract = {OODBMSs need more than declarative query languages and programming languages as their interfaces since they are designed and implemented for complex applications requiring more advanced and easy to use visual interfaces. We have developed a complete programming environment for this purpose, called MoodView. MoodView translates all the user actions performed through its graphical interface to SQL statements and therefore it can be ported onto any object-oriented database systems using SQL.MoodView provides the database programmer with tools and functionalities for every phase of object oriented database application development. Current version of MoodView allows a database user to design, browse, and modify database schema interactively and to display class inheritance hierarchy as a directed acyclic graph. MoodView can automatically generate graphical displays for complex and multimedia database objects which can be updated through the object browser. Furthermore, a database administration tool, a full screen text-editor, a SQL based query manager, and a graphical indexing tool for the spatial data, i.e., R Trees are also implemented.},
journal = {SIGMOD Rec.},
month = {dec},
pages = {11–18},
numpages = {8},
keywords = {graphical user interfaces, object-oriented databases}
}

@inproceedings{10.1145/2839509.2844598,
author = {Escherle, Nora A. and Ramirez-Ramirez, Silvia I. and Basawapatna, Ashok R. and Assaf, Dorit and Repenning, Alexander and Maiello, Carmine and Endo, Yasko Ch. and Nolazco-Flores, Juan A.},
title = {Piloting Computer Science Education Week in Mexico},
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2844598},
doi = {10.1145/2839509.2844598},
abstract = {Computer Science Education Week activities, featuring online? programming tools embedded with tutorials, report large participation numbers. However, to truly broaden participation, activities need to be made accessible in international contexts. In 2014, Tecnol\'{o}gico de Monterrey and Instituto de Innovaci\'{o}n y Transferencia de Tecnolog\'{\i}a de Nuevo Le\'{o}n, modified the Scalable Game Design CS Ed Week activity to include a Mexican feasibility pilot study. The goal of the pilot was to broaden participation in Computer Science in Mexico by creating interest and demand in further activities, including launching of 2015 Mexico CS Ed Week. This paper reviews the initial results of this 2014 pilot, including the discussion of the unique challenges faced in this context, and examines efforts to make this activity more accessible and successful. In addition to pilot data highlighting future activity improvements, initial retention results show that despite challenges, Mexican students were able to effectively use the modified activity to create games on par with U.S. students.},
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
pages = {431–436},
numpages = {6},
keywords = {broadening participation, computer science education, computer science education in mexico, computer science education week, experience report, globalization of programming activities., international research},
location = {Memphis, Tennessee, USA},
series = {SIGCSE '16}
}

@inproceedings{10.1145/1595836.1595842,
author = {Calefato, Fabio and Gendarmi, Domenico and Lanubile, Filippo},
title = {Embedding social networking information into jazz to foster group awareness within distributed teams},
year = {2009},
isbn = {9781605586823},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1595836.1595842},
doi = {10.1145/1595836.1595842},
abstract = {A Collaborative Development Environments (CDE) provides a project workspace with a standardized toolset to help distributed development teams cope with geographical distance. However, there is a lack of support to reduce socio-cultural distance, which poses practical barriers to the development of connections and shared context/culture between team members. The rise of the Social Web has created several opportunities to publish personal information, often further composed through Web mashups, which can be regarded as a valuable data source in order to establish a shared context among remote developers, with little or no chances to meet.In this paper we present our preliminary work that aims to provide distributed software teams with overall, contextual awareness aggregated in one place. Using the IBM Jazz as CDE, which already provides both presence and workspace awareness, we leveraged the FriendFeed aggregator service to embed personal information about distributed co-workers, collected from social networks. Disseminating additional group awareness information to developers, who have little or no chances to meet, can help to speed up the establishment of organizational values, attitudes, and trust-based inter-personal connections.},
booktitle = {Proceedings of the 2nd International Workshop on Social Software Engineering and Applications},
pages = {23–28},
numpages = {6},
keywords = {cde, collaborative development environment, eclipse, group awareness, jazz, mashup, social web, web 2.0},
location = {Amsterdam, The Netherlands},
series = {SoSEA '09}
}

@inproceedings{10.5555/2393536.2393558,
author = {Mota, Marcelle Pereira and Faria, Leonardo Serra and de Souza, Clarisse Sieckenius},
title = {Documentation comes to life in computational thinking acquisition with agentsheets},
year = {2012},
isbn = {9788576692621},
publisher = {Brazilian Computer Society},
address = {Porto Alegre, BRA},
abstract = {This paper is about the use of live documentation in Computational Thinking Acquisition (CTA) programs with AgentSheets. AgentSheets is a visual programming environment to build games. Based on previous studies showing that semiotic relations among visual game elements could be further explored to the benefit of the learners, we designed PoliFacets, a Web extension to AgentSheets cast as a live conversational document. With it, teachers and learners can follow different threads of conversation about (multiple representations of) game elements and relations between them. We present a qualitative evaluation study of PoliFacets with two experienced AgentSheets instructors and three school teachers trained to coach students in CTA programs. Findings show that although our system has not yet completely fulfilled our design intent, it has led participants to gain relevant insights about their teaching and learning, as well as to articulating doubts and misunderstandings that otherwise could have gone unnoticed.},
booktitle = {Proceedings of the 11th Brazilian Symposium on Human Factors in Computing Systems},
pages = {151–160},
numpages = {10},
keywords = {agentsheets, computational thinking acquisition, end-user programming, live documentation, metacommunication},
location = {Cuiaba, Brazil},
series = {IHC '12}
}

@inproceedings{10.1145/2543728.2543746,
author = {F\"{a}hndrich, Manuel},
title = {Lessons from a web-based IDE and runtime},
year = {2014},
isbn = {9781450326193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2543728.2543746},
doi = {10.1145/2543728.2543746},
abstract = {At Microsoft Research, we have built a purely web-based IDE called TouchDevelop that enables anyone to pick up a device and start programming. The IDE is geared towards touch based devices without keyboards, ranging from phones, over tablets, to large display screens. Programs can be edited and run on the device without an auxiliary PC. Transitioning between programming on one device, and continuing on another device is seamless. The web application also works offline.TouchDevelop has been successfully applied to teaching introductory programming classes at the high-school level and at some college level for non-CS majors. For researchers, TouchDevelop provides a green-field platform to explore IDE and programming language design, as well as runtime techniques and distributed data storage abstractions.In this talk, I will provide an overview of TouchDevelop from a language, IDE, and runtime perspective, while diving into some of the novel techniques enabled by our particular platform.},
booktitle = {Proceedings of the ACM SIGPLAN 2014 Workshop on Partial Evaluation and Program Manipulation},
pages = {1–2},
numpages = {2},
keywords = {introductory programming, smart phone, tablet, touch-based entry, web ide},
location = {San Diego, California, USA},
series = {PEPM '14}
}

@inproceedings{10.1145/2380296.2380342,
author = {Lieber, Thomas and Miller, Rob},
title = {Programming with everybody: tightening the copy-modify-publish feedback loop},
year = {2012},
isbn = {9781450315821},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2380296.2380342},
doi = {10.1145/2380296.2380342},
abstract = {People write more code than they ever share online. They also copy and tweak code more often than they contribute their modifications back to the public. These situations can lead to widespread duplication of effort. However, the copy-modify-publish feedback loop which could solve the problem is inhibited by the effort required to publish code online. In this paper we present our preliminary, ongoing effort to create Ditty, a programming environment that attacks the problem by sharing changes immediately, making all code public by default. Ditty tracks the changes users make to code they find and exposes the modified versions alongside the original so that commonly-used derivatives can eventually become canonical. Our work will examine mechanical and social methods to consolidate global effort on common code snippets, and the effects of designing a programming interface that inspires a feeling of the whole world programming together.},
booktitle = {Adjunct Proceedings of the 25th Annual ACM Symposium on User Interface Software and Technology},
pages = {101–102},
numpages = {2},
keywords = {awareness, collaboration, open source software development, programming environments, social computing},
location = {Cambridge, Massachusetts, USA},
series = {UIST Adjunct Proceedings '12}
}

@inproceedings{10.5555/3014904.3014920,
author = {Sawada, Jun and Akopyan, Filipp and Cassidy, Andrew S. and Taba, Brian and Debole, Michael V. and Datta, Pallab and Alvarez-Icaza, Rodrigo and Amir, Arnon and Arthur, John V. and Andreopoulos, Alexander and Appuswamy, Rathinakumar and Baier, Heinz and Barch, Davis and Berg, David J. and Nolfo, Carmelo di and Esser, Steven K. and Flickner, Myron and Horvath, Thomas A. and Jackson, Bryan L. and Kusnitz, Jeff and Lekuch, Scott and Mastro, Michael and Melano, Timothy and Merolla, Paul A. and Millman, Steven E. and Nayak, Tapan K. and Pass, Norm and Penner, Hartmut E. and Risk, William P. and Schleupen, Kai and Shaw, Benjamin and Wu, Hayley and Giera, Brian and Moody, Adam T. and Mundhenk, Nathan and Van Essen, Brian C. and Wang, Eric X. and Widemann, David P. and Wu, Qing and Murphy, William E. and Infantolino, Jamie K. and Ross, James A. and Shires, Dale R. and Vindiola, Manuel M. and Namburu, Raju and Modha, Dharmendra S.},
title = {Truenorth ecosystem for brain-inspired computing: scalable systems, software, and applications},
year = {2016},
isbn = {9781467388153},
publisher = {IEEE Press},
abstract = {This paper describes the hardware and software ecosystem encompassing the brain-inspired TrueNorth processor - a 70mW reconfigurable silicon chip with 1 million neurons, 256 million synapses, and 4096 parallel and distributed neural cores. For systems, we present a scale-out system loosely coupling 16 single-chip boards and a scale-up system tightly integrating 16 chips in a 4 \texttimes{} 4 configuration by exploiting TrueNorth's native tiling. For software, we present an end-to-end ecosystem consisting of a simulator, a programming language, an integrated programming environment, a library of algorithms and applications, firmware, tools for deep learning, a teaching curriculum, and cloud enablement. For the scale-up systems we summarize our approach to physical placement of neural network, to reduce intra- and inter-chip network traffic. The ecosystem is in use at over 30 universities and government/corporate labs. Our platform is a substrate for a spectrum of applications from mobile and embedded computing to cloud and supercomputers.},
booktitle = {Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis},
articleno = {12},
numpages = {12},
location = {Salt Lake City, Utah},
series = {SC '16}
}

@inproceedings{10.1145/1384271.1384341,
author = {Pedroni, Michela and Oriol, Manuel and Meyer, Bertrand and Albonico, Enrico and Angerer, Lukas},
title = {Course management with TrucStudio},
year = {2008},
isbn = {9781605580784},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1384271.1384341},
doi = {10.1145/1384271.1384341},
abstract = {Ever growing expectations from students, university management and other stakeholders make course preparation increasingly time-consuming. Setting up a course from scratch requires producing many supporting documents such as syllabi, schedules, and course web sites listing the concepts being taught. This can be a considerable effort, taking time away from tasks with a more immediate pedagogical value, such as answering student questions and refining the concepts themselves.The TrucStudio course development framework supports a systematic approach to these necessary but arduous tasks. TrucStudio is organized like a modern programming environment, but its elements of discourse, rather than software modules, are units of knowledge such as notions, Trucs and clusters.In addition to course development, applications of TrucStudio include checking sound coverage of topics and comparing courses on an objective basis. This presentation focuses on two novel features of TrucStudio: version management of knowledge units and course information; and generation of output documents in various formats from knowledge units and other material managed by TrucStudio.},
booktitle = {Proceedings of the 13th Annual Conference on Innovation and Technology in Computer Science Education},
pages = {260–264},
numpages = {5},
keywords = {course design, curriculum design, knowledge modeling, output generation, versioning},
location = {Madrid, Spain},
series = {ITiCSE '08}
}

@inproceedings{10.1145/3051457.3053970,
author = {Sharrock, R\'{e}mi and Hamonic, Ella and Hiron, Mathias and Carlier, Sebastien},
title = {CODECAST: An Innovative Technology to Facilitate Teaching and Learning Computer Programming in a C Language Online Course},
year = {2017},
isbn = {9781450344500},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3051457.3053970},
doi = {10.1145/3051457.3053970},
abstract = {This paper introduces the CODECAST tool: an in-browser C language interpreter, paired with an event and voice recorder and player that facilitates teaching and learning to program by synchronizing audio with source code edition, visualization, step by step execution and testing.},
booktitle = {Proceedings of the Fourth (2017) ACM Conference on Learning @ Scale},
pages = {147–148},
numpages = {2},
keywords = {audio, code edition, code editor, code execution, code test, code visualization, mooc, online learning, programming, teaching},
location = {Cambridge, Massachusetts, USA},
series = {L@S '17}
}

@inproceedings{10.1145/1111360.1111367,
author = {Vouligny, Luc and Robert, Jean-Marc},
title = {Online help system design based on the situated action theory},
year = {2005},
isbn = {1595932240},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1111360.1111367},
doi = {10.1145/1111360.1111367},
abstract = {Nowadays, different forms of assistance are available in interactive computer-based systems. However, current online help systems, which correspond to the main components of online assistance, often are unsuccessful in providing support to users. The help that is offered is not well-suited to the problem the users encounter and to the particular needs they have. This paper reports on a new approach to online help system design based on the situated action theory. The approach has been implemented in a system called AIDE. The system has been evaluated with 15 subjects having to do programming tasks in C++, and compared to the online help available in the programming environment they were using and on the Web. The main results show that the assistance provided by AIDE was three times as effective as the two other forms of assistance to help in defining the problem, and twice as effective to help in resolving it. Results also show that with the AIDE system, students had much less recourse to human assistance when trying to complete their tasks.},
booktitle = {Proceedings of the 2005 Latin American Conference on Human-Computer Interaction},
pages = {64–75},
numpages = {12},
keywords = {contextual help, mixed-initiative interactions, online help, situated action},
location = {Cuernavaca, Mexico},
series = {CLIHC '05}
}

@inproceedings{10.1145/3362966.3362977,
author = {Emon, Ismail Siddiqi and Ahmed, Sabiha Sunjida and Milu, Sharmin Akter and Mahtab, S. S.},
title = {Sentiment analysis of bengali online reviews written with english letter using machine learning approaches},
year = {2019},
isbn = {9781450376990},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3362966.3362977},
doi = {10.1145/3362966.3362977},
abstract = {In this paper, we have done sentiment analysis for English written Bengali words given in different online shops in Bangladesh. For this work we have chosen 4 latest mobile phone popular in Bangladesh. For this purpose we have used Multinomial na\"{\i}ve bayes classification system. The dataset that has been used for this work has been taken from some online shops websites that is been publicly available. The only data taken hasbeen related to selected popular cellphone sets. For better understanding and realistic understanding some common features were selected that people looks for. In this work 6 feature were selected. They are-Camera, Battery, Screen, Sounds, Design and Hardware/Software performance. We went for these feature related comments and reviews for constructing our dataset. 90% of them were trained and 10% of them were tested. They were tested in algorithm showed process. The programming tool has been used for this job was PYTHON .The algorithm calculates the positive and negative features to get the result of the reviews. Then the results are compared by graphical representation..},
booktitle = {Proceedings of the 6th International Conference on Networking, Systems and Security},
pages = {109–115},
numpages = {7},
keywords = {bengali, machine learning approaches, na\"{\i}ve, natural language processing, python, sentiment analysis},
location = {Dhaka, Bangladesh},
series = {NSysS '19}
}

@inproceedings{10.1145/2642918.2647371,
author = {Chang, Kerry Shih-Ping and Myers, Brad A.},
title = {Creating interactive web data applications with spreadsheets},
year = {2014},
isbn = {9781450330695},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2642918.2647371},
doi = {10.1145/2642918.2647371},
abstract = {While more and more data are available through web services, it remains difficult for end-users to create web applications that make use of these data without having to write complex code. We present Gneiss, a live programming environment that extends the spreadsheet metaphor to support creating interactive web applications that dynamically use local or web data from multiple sources. Gneiss closely integrates a spreadsheet editor with a web interface builder to let users demonstrate bindings between properties of web GUI elements and cells in the spreadsheet while working with real web service data. The spreadsheet editor provides two-way connections to web services, to both visualize and retrieve different data based on the user input in the web interface. Gneiss achieves rich interactivity without the need for event-based programming by extending the 'pull model' of formulas that is familiar to the spreadsheet users. We use a series of examples to demonstrate Gneiss's ability to create a variety of interactive web data applications.},
booktitle = {Proceedings of the 27th Annual ACM Symposium on User Interface Software and Technology},
pages = {87–96},
numpages = {10},
keywords = {end-user programming, live programming, mashups, spreadsheets, web applications, web services},
location = {Honolulu, Hawaii, USA},
series = {UIST '14}
}

@inproceedings{10.1145/2889160.2889208,
author = {Dig, Danny and Johnson, Ralph and Marinov, Darko and Bailey, Brian and Batory, Don},
title = {COPE: vision for a change-oriented programming environment},
year = {2016},
isbn = {9781450342056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2889160.2889208},
doi = {10.1145/2889160.2889208},
abstract = {Software engineering involves a lot of change as code artifacts are not only created once but maintained over time. In the last 25 years, major paradigms of program development have arisen -- agile development with refactorings, software product lines, moving sequential code to multicore or cloud, etc. Each is centered on particular kinds of change; their conceptual foundations rely on transformations that (semi-) automate these changes.We are exploring how transformations can be placed at the center of software development in future IDEs, and when such a view can provide benefits over the traditional view. COPE, a Change-Oriented Programming Environment, looks at 5 activities: (1) analyze what changes programmers typically make and how they perceive, recall, and communicate changes, (2) automate transformations to make it easier to apply and script changes, (3) develop tools that compose and manipulate transformations to make it easier to reuse them, (4) integrate transformations with version control to provide better ways for archiving and understanding changes, and (5) develop tools that infer higher-level transformations from lower-level changes. Characterizing software development in terms of transformations is an essential step to take software engineering from manual development to (semi-) automated development of software.},
booktitle = {Proceedings of the 38th International Conference on Software Engineering Companion},
pages = {773–776},
numpages = {4},
location = {Austin, Texas},
series = {ICSE '16}
}

@inproceedings{10.1145/2445196.2445504,
author = {Brown, Richard A. and Shoop, Elizabeth and Adams, Joel},
title = {CSinParallel: using map-reduce to teach parallel programming concepts across the CS curriculum (abstract only)},
year = {2013},
isbn = {9781450318686},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2445196.2445504},
doi = {10.1145/2445196.2445504},
abstract = {Map-reduce, the cornerstone computational framework for cloud computing applications, has star appeal to draw students to the study of parallelism. Participants will carry out hands-on exercises designed for students at CS1/intermediate/advanced levels that introduce data-intensive scalable computing concepts, using WebMapReduce (WMR), a simplified open-source interface to the widely used Hadoop map-reduce programming environment. These hands-on exercises enable students to perform data-intensive scalable computations carried out on the most widely deployed map-reduce framework, used by Facebook, Microsoft, Yahoo, and other companies. WMR supports programming in a choice of languages (including Java, Python, C++, C#, Scheme); participants will be able to try exercises with languages of their choice. Workshop includes brief introduction to direct Hadoop programming, and information about access to cluster resources supporting WMR. Workshop materials will reside on csinparallel.org, along with WMR software. Intended audience: CS instructors. Laptop required (Windows, Mac, or Linux).},
booktitle = {Proceeding of the 44th ACM Technical Symposium on Computer Science Education},
pages = {758},
numpages = {1},
keywords = {cs1, csinparallel, curriculum, data-intensive scalable computing, distributed computing, education, hadoop, introductory course, map-reduce computing, webmapreduce, wmr},
location = {Denver, Colorado, USA},
series = {SIGCSE '13}
}

@inproceedings{10.1145/3408877.3439556,
author = {Abu Deeb, Fatima and Hickey, Timothy},
title = {Reflective Debugging with a Python Web IDE},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3439556},
doi = {10.1145/3408877.3439556},
abstract = {In this lightning talk, we explore the impact of adding reflective debugging to a web-based problem-solving IDE, Spinoza, that we created to support teaching programming with Python. Spinoza allows the instructor to create (or select from a library) Python problems with automatic unit tests. Each time a student attempts a new problem, the system randomly decides if reflective debugging will be required; in which case each time the student runs their code and the code does not pass the unit tests, the student will be required to classify the type of error (syntax, logic or runtime error), provide a description of the bug, and explain how they plan to fix it before they are allowed to revise and run the code again. Our main result from this pilot study is that the number of debugging steps to reach a correct solution was statistically significantly less when students were required to use reflective debugging. Our hope was that by being required to analyze each error for some problems (about one out of three), students would see the benefits and develop the habit of reflective debugging even when it was not required.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {1368},
numpages = {1},
keywords = {learning analytics, novice web-based ide, reflective debugging},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/3299869.3319858,
author = {Hu, Sheng and Xiao, Chuan and Qin, Jianbin and Ishikawa, Yoshiharu and Ma, Qiang},
title = {Autocompletion for Prefix-Abbreviated Input},
year = {2019},
isbn = {9781450356435},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3299869.3319858},
doi = {10.1145/3299869.3319858},
abstract = {Query autocompletion (QAC) is an important interactive feature that assists users in formulating queries and saving keystrokes. Due to the convenience it brings to users, QAC has been adopted in many applications, including Web search engines, integrated development environments (IDEs), and mobile devices. For existing QAC methods, users have to manually type delimiters to separate keywords in their inputs. In this paper, we propose a novel QAC paradigm through which users may abbreviate keywords by prefixes and do not have to explicitly separate them. Such paradigm is useful for applications where it is inconvenient to specify delimiters, such as desktop search, text editors, and input method editors. E.g., in an IDE, users may input getnev and we suggest GetNextValue. We show that the query processing method for traditional QAC, which utilizes a trie index, is inefficient under the new problem setting. A novel indexing and query processing scheme is hence proposed to efficiently complete queries. To suggest meaningful results, we devise a ranking method based on a Gaussian mixture model, taking into consideration the way in which users abbreviate keywords, as opposed to the traditional ranking method that merely considers popularity. Efficient top-k query processing techniques are developed on top of the new index structure. Experiments demonstrate the effectiveness of the new QAC paradigm and the efficiency of the proposed query processing method.},
booktitle = {Proceedings of the 2019 International Conference on Management of Data},
pages = {211–228},
numpages = {18},
keywords = {autocompletion, prefix-abbreviated input, query suggestion},
location = {Amsterdam, Netherlands},
series = {SIGMOD '19}
}

@inproceedings{10.1145/1753326.1753477,
author = {Cao, Jill and Riche, Yann and Wiedenbeck, Susan and Burnett, Margaret and Grigoreanu, Valentina},
title = {End-user mashup programming: through the design lens},
year = {2010},
isbn = {9781605589299},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1753326.1753477},
doi = {10.1145/1753326.1753477},
abstract = {Programming has recently become more common among ordinary end users of computer systems. We believe that these end-user programmers are not just coders but also designers, in that they interlace making design decisions with coding rather than treating them as two separate phases. To better understand and provide support for the programming and design needs of end users, we propose a design theory-based approach to look at end-user programming. Toward this end, we conducted a think-aloud study with ten end users creating a web mashup. By analyzing users' verbal and behavioral data using Sch\"{o}n's reflection-in-action design model and the notion of ideations from creativity literature, we discovered insights into end-user programmers' problem-solving attempts, successes, and obstacles, with accompanying implications for the design of end-user programming environments for mashups. The contribution of our work is three-fold: 1) the methodology of using a design lens to view programming, 2) evidence, through insights gained, of the usefulness of this approach, and 3) the implications themselves.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {1009–1018},
numpages = {10},
keywords = {design, end-user programming, mashups},
location = {Atlanta, Georgia, USA},
series = {CHI '10}
}

@article{10.5555/2168874.2168903,
author = {Garcia, Daniel D.},
title = {The beauty and joy of computing (BJC), AP CS principles, and the CS 10K effort},
year = {2012},
issue_date = {May 2012},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {27},
number = {5},
issn = {1937-4771},
abstract = {BJC was chosen as one of the initial pilots for a new "AP CS:Principles" exam to be introduced in 2015. The purpose of this course is to attract nontraditional computing students (especially women and minorities, but also English majors) to the breadth and depth of ideas in modern computer science. The National Science Foundation wants to prepare 10,000 new high school computer science teachers to teach the new AP course by 2015 (the "CS10K" effort). Under their CE21 (Computing Education for the 21st Century) initiative, we were funded to provide paid intensive six-week summer workshops for high school teachers, including two weeks of face-to-face training, one before and one after four weeks of our online course. This talk will review the status of all of these projects, the development of Build Your Own Blocks (BYOB), a graphical programming environment based on MIT's Scratch that is used in the curriculum, and how faculty, students and high school teachers can engage with these important efforts.},
journal = {J. Comput. Sci. Coll.},
month = {may},
pages = {126–127},
numpages = {2}
}

@inproceedings{10.1145/322609.323172,
author = {Khorshid, Wafa},
title = {Generating environments for programming-in-the-large},
year = {1988},
isbn = {0897912608},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/322609.323172},
doi = {10.1145/322609.323172},
abstract = {In order to provide better programming environments, language-based tools are introduced. These are tools which use knowledge of a programming language's structure to provide special program development facilities. However, current software environment generators are geared towards generating environments which have language-based tools for programming-in-the-small only. They generate environments with language-based syntax-directed editors [1,2,3].Further improvements for programming environments could be achieved by extending the concept of providing language-based tools to include tools for programming-in-the-large [4]. To create a new environment, the designer supplies a declarative description for the target programming language objects and their interactions. The description of the programming language objects is given in a meta language based on the E-R model. The environment generator then processes and links this information together with a kernel supplied by the generator to produce a new environment. All the generated environments will have a uniform data model representing programs. A program is represented as a set of attributed entities which are linked together by a set of relations. The generated environments are a collection of integrated tools which are tailored according to the definition of the target programming language as well as tools which are standard for all environments (kernel) and do not depend on a language. Below is a brief description of these tools.Graphical Interface Manager: This tool represents the communication medium between the user and the environment. It interprets the user's command and accordingly invokes the relevant system component which, in turn, will perform the operation requested by the user.System Manager: It contains a set of operations which allow the user to save, load, and initialize the objects of software system stored in the database. It also contains operations for executing the code generated from the information stored in the database.Entity editor: used to build and manipulate the architecture of a program. With this tool, software objects and their relationships can be added or deleted.Browser: It provides mechanisms to display information. The main feature of the Browser, is the support for displaying multiple views of a program through multiple windows. Each window is equipped with mechanisms to invoke all the tools in the environment.Information Viewer: Views are subsets of a software system graph. They contain a particular structural information. Information Viewer displays such information based on criteria set by the user.Database: It is a repository of all the information about software components and their interconnections.Parser: Extracts all entities and their relations which appear in a source code and stores them in the database.},
booktitle = {Proceedings of the 1988 ACM Sixteenth Annual Conference on Computer Science},
pages = {712},
location = {Atlanta, Georgia, USA},
series = {CSC '88}
}

@inproceedings{10.1145/2687233.2687247,
author = {Grigorev, Semen and Verbitskaia, Ekaterina and Ivanov, Andrei and Polubelova, Marina and Mavchun, Ekaterina},
title = {String-embedded language support in integrated development environment},
year = {2014},
isbn = {9781450328890},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2687233.2687247},
doi = {10.1145/2687233.2687247},
abstract = {Most general-purpose programming languages allow to use string literals as source code in other languages (they are named string-embedded languages). Such strings can be executed or interpreted by dedicated runtime component. This way host program can communicate with DBMS or web browser. The most common example of string-embedded language is Dynamic SQL or SQL embedded into C#, C++, Java or other general-purpose programming languages. Standard Integrated Development Environment functionality such as syntax highlighting or static error checking in embedded languages can help developers who use such technique, but it is necessary to process string literals as a code to provide these features. We present a platform allowing to create tools for string-embedded languages processing easily, and compare it with other similar tools like IntelliLang. We also demonstrate a plug-in for ReSharper created by using the platform. The plug-in provides code highlighting and static error checking for string-embedded T-SQL in C#.},
booktitle = {Proceedings of the 10th Central and Eastern European Software Engineering Conference in Russia},
articleno = {21},
numpages = {11},
keywords = {Dynamic SQL, IDE, abstract parsing, integrated development environment, lexer generator, parser generator, parsing, string-embedded language},
location = {Moscow, Russia},
series = {CEE-SECR '14}
}

@inproceedings{10.1145/2591062.2591081,
author = {Ponzanelli, Luca},
title = {Holistic recommender systems for software engineering},
year = {2014},
isbn = {9781450327688},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2591062.2591081},
doi = {10.1145/2591062.2591081},
abstract = {Software maintenance is a relevant and expensive phase of the software development process. Developers have to deal with legacy and undocumented code that hinders the comprehension of the software system at hand. Enhancing program comprehension by means of recommender systems in the Integrated Development Environment (IDE) is a solution to assist developers in these tasks. The recommender systems proposed so far generally share common weaknesses: they are not proactive, they consider a single type of data-source, and in case of multiple data-source, relevant items are suggested together without considering interactions among them. We envision a future where recommender systems follow a holistic approach: They provide knowledge regarding a programming context by considering information beyond the one provided by single elements in the context of the software development. The recommender system should consider different elements such as development artifact (e.g., bug reports, mailing lists), and online resources (e.g., blogs, Q&amp;A web sites, API documentation), developers activities, repository history etc. The provided information should be novel and emerge from the semantic links created by the analysis of the interactions among these elements.},
booktitle = {Companion Proceedings of the 36th International Conference on Software Engineering},
pages = {686–689},
numpages = {4},
keywords = {Developer Support, Recommender Systems},
location = {Hyderabad, India},
series = {ICSE Companion 2014}
}

@inproceedings{10.1145/2996890.2996901,
author = {Leitner, Philipp and Cito, J\"{u}rgen and St\"{o}ckli, Emanuel},
title = {Modelling and managing deployment costs of microservice-based cloud applications},
year = {2016},
isbn = {9781450346160},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2996890.2996901},
doi = {10.1145/2996890.2996901},
abstract = {We present an approach to model the deployment costs, including compute and IO costs, of Microservice-based applications deployed to a public cloud. Our model, which we dubbed CostHat, supports both, Microservices deployed on traditional IaaS or PaaS clouds, and services that make use of novel cloud programming paradigms, such as AWS Lambda. CostHat is based on a network model, and allows for what-if and cost sensitivity analysis. Further, we have used this model to implement tooling that warns cloud developers directly in the Integrated Development Environment (IDE) about certain classes of potentially costly code changes. We illustrate our work based on a case study, and evaluate the CostHat model using a standalone Python implementation. We show that, once instantiated, cost calculation in CostHat is computationally inexpensive on standard hardware (below 1 ms even for applications consisting of thousand services and endpoints). This enables its use in real-time for developer tooling which continually re-evaluates the costs of an application in the background, while the developer is working on the code.},
booktitle = {Proceedings of the 9th International Conference on Utility and Cloud Computing},
pages = {165–174},
numpages = {10},
location = {Shanghai, China},
series = {UCC '16}
}

@inproceedings{10.1145/3397537.3397558,
author = {Dong, Tao and Yang, Gale},
title = {Towards a pattern language for interactive coding tutorials},
year = {2020},
isbn = {9781450375078},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3397537.3397558},
doi = {10.1145/3397537.3397558},
abstract = {Online, text-based coding tutorials are popular among programming learners. Though they are relatively easy to create, it's challenging to ensure their pedagogical effectiveness. Computer Science Education researchers have advocated for interactive tutorials, because they provide learners with opportunities to practice and receive feedback while completing a tutorial. Nonetheless, little guidance exists on how to best leverage interactivity in tutorials. We set out to develop a pattern language for interactive tutorials to fill this gap. Through a human-centered design process, we created and evolved three instructional patterns and their supporting interaction components in a tutorial on asynchronous programming. We describe the preliminary results of our work towards this pattern language in this paper.},
booktitle = {Companion Proceedings of the 4th International Conference on Art, Science, and Engineering of Programming},
pages = {102–105},
numpages = {4},
keywords = {coding tutorials, online code editors, pattern language, programming education},
location = {Porto, Portugal},
series = {Programming '20}
}

@inproceedings{10.1145/2839509.2850492,
author = {Hundhausen, Christopher D. and Carter, Adam S.},
title = {Exploring Learning Analytics for Computing Education (Abstract Only)},
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2850492},
doi = {10.1145/2839509.2850492},
abstract = {Computing educators have become increasingly interested in learning analytics, which involves collecting and analyzing data on students' learning processes and outcomes for the purpose of improving learning and instructional practices. A variety of computer programming environments enable the automated collection of log data on students' programming processes. In addition, log data on students' online social behavior can be easily collected. All of these data can be analyzed alongside data on students' learning outcomes in order to identify correlations between learning processes and outcomes, and ultimately to better tailor instruction to students' needs. This BOF will provide a platform for discussing the emerging field of learning analytics within the context of computing education. The following questions will serve as a starting point for our discussions: (1) What types of data should we be collecting on computing students' (2) How can we best analyze these data in order to gain meaningful insights into students' learning processes? (3) How can we design effective instructional interventions based on the data we collect and analyze?},
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
pages = {707},
numpages = {1},
keywords = {computer science education, learning analytics, learning management systems},
location = {Memphis, Tennessee, USA},
series = {SIGCSE '16}
}

@inproceedings{10.1145/3159450.3162177,
author = {Shaffer, Clifford A. and Brusilovsky, Peter and Koedinger, Kenneth R. and Edwards, Stephen H.},
title = {CS Education Infrastructure for All: Interoperability for Tools and Data Analytics (Abstract Only)},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3162177},
doi = {10.1145/3159450.3162177},
abstract = {CS Education makes heavy use of online educational tools like IDEs, Learning Management Systems, eTextbooks, interactive programming environments, and other smart content. Instructors and students would benefit from greater interoperability between tools. CS Ed researchers increasingly make use of the large collections of data generated by click streams coming from them. However, we all face barriers that slow progress: (1) Educational tools do not integrate well. (2) Information about CS learning process and outcome data generated by one system is not compatible with that from other systems. (3) CS problem solving and learning (e.g., coding solutions) is different from the type of data (discrete answers to questions or verbal responses) that current educational data mining focuses on. This BOF will discuss ways that we might support and better coordinate efforts to build community and capacity among CS Ed researchers, data scientists, and learning scientists toward reducing these barriers. CS Ed infrastructure should support broader re-use of innovative learning content that is instrumented for rich data collection, formats and tools for analysis of learner data, and best practices to make large collections of learner data available to researchers. Achieving these goals requires engaging a large community of researchers to define, develop, and use critical elements of this infrastructure to address specific data-intensive research questions.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {1063},
numpages = {1},
keywords = {LTI, computer science education research, infrastructure, interoperability, smart content, student analytics},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@article{10.1145/3548562.3548569,
author = {Bertini, Marco and Lux, Mathias},
title = {nteract: a desktop-based tool for notebooks},
year = {2022},
issue_date = {June 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {2},
url = {https://doi.org/10.1145/3548562.3548569},
doi = {10.1145/3548562.3548569},
abstract = {Writing source code for programs with lightweight text editors or fully featured integrated development environments is considered the main method of programming. Notebooks, however, are an extremely practical tool. In contrast to IDEs, projects are set up more easily and they allow for running programs in a read-eval-print loop (REPL) environment. The Jupyter Notebooks Quick Start Guide [1] describes notebook documents as "… both human-readable documents containing the analysis description and the results (figures, tables, etc..) as well as executable documents which can be run to perform data analysis." Basically, markdown text can be mixed with program source code in a sequence of sections, each dedicated to either programming or description and documentation. Source code sections can be executed and the output is appended to the section, even formatted in the form of graphs, diagrams, or tables.REPL and notebook based environments have proven to be useful in many scenarios including when exploring new libraries and frameworks, to prototype code, or as an educational tool to create interactive lecture material. A prominent example is Jupyter, which is the highly successful project behind Jupyter Notebooks and the recent JupyterLab, i.e. web-based systems to run and share notebooks that contain code, equations, data visualizations, and data exploration and narrative text.},
journal = {SIGMultimedia Rec.},
month = {jul},
articleno = {7},
numpages = {1}
}

@inproceedings{10.1145/3017680.3017741,
author = {Broll, Brian and L\'{e}deczi, Akos and Volgyesi, Peter and Sallai, Janos and Maroti, Miklos and Carrillo, Alexia and Weeden-Wright, Stephanie L. and Vanags, Chris and Swartz, Joshua D. and Lu, Melvin},
title = {A Visual Programming Environment for Learning Distributed Programming},
year = {2017},
isbn = {9781450346986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3017680.3017741},
doi = {10.1145/3017680.3017741},
abstract = {This paper introduces NetsBlox, a visual programming environment for learning distributed programming principles. Extending both the visual formalism and open source code base of Snap!, NetsBlox provides two accessible distributed programming abstractions to simplify the process of creating networked applications: message passing and Remote Procedure Calls (RPC). Messaging passing allows NetsBlox applications to send data to other connected NetsBlox clients. Remote Procedure Calls enable seamless integration of third party services, such as Google Maps, weather, traffic and other public domain data sources, into NetsBlox applications. Other RPCs help coordinating distributed clients which may be difficult for novice programmers allowing the user to more quickly create captivating and sophisticated applications. These abstractions empower users to develop networked programs, including multi-player games and client-server applications. By providing networking support, NetsBlox not only allows users to learn distribute programming concepts but also makes programming more engaging by incorporating diverse services available on the web.},
booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education},
pages = {81–86},
numpages = {6},
keywords = {computer science education, distributed programming, snap!, visual programming},
location = {Seattle, Washington, USA},
series = {SIGCSE '17}
}

@article{10.5555/1734797.1734824,
author = {Amerikaner, Erik W.},
title = {Introduction to computer science using Alice 2.0: tutorial presentation},
year = {2010},
issue_date = {April 2010},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {25},
number = {4},
issn = {1937-4771},
abstract = {This tutorial will introduce Alice 2.0, an interactive programming course developed at Carnegie Mellon University. This program is an ideal introductory high school or college one-semester Computer Science course. This program is especially useful for recruiting female students into the work of Computer Science. Alice is an innovative 3D programming environment that makes it easy to create an animation for telling a story, playing an interactive game, or a video to share on the web. Alice is a freely available teaching tool designed to be a student's first exposure to object-oriented programming. In Alice's interactive interface, students drag and drop graphic tiles to create a program, where the instructions correspond to standard statements in a production oriented programming language, such as Java. By manipulating the objects in their virtual world, students gain experience with all the programming constructs typically taught in an introductory programming course. Attendees will gain knowledge on how to incorporate Alice 2.0 into their introductory curriculum.},
journal = {J. Comput. Sci. Coll.},
month = {apr},
pages = {141},
numpages = {1}
}

@inproceedings{10.1145/944519.944526,
author = {Mayora-Ibarra, Oscar and de la Paz-Arroyo, Oscar and Cambranes-Mart\'{\i}nez, Edgar and Fuentes-Penna, Alejandro},
title = {A visual programming environment for device independent generation of user interfaces},
year = {2003},
isbn = {9781450343244},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/944519.944526},
doi = {10.1145/944519.944526},
abstract = {The promise of information anytime, anywhere has become a reality. Today, it is possible to access information through multiple kinds of devices. However, the design of user interfaces for such devices is restricted to the use of specific adhoc programming languages that may vary from one device to the other. In this sense, the existence of generic programming languages for creating device-independent user interfaces is becoming a strong necessity. One emerging approach to device independent developments require the construction of generic vocabularies for transcoding into specific target codes for web browsers, PDAs, voice systems, mobile phones, etc. In this work, we present an authoring tool for designing generic user interfaces with automatic transcoding to multiple target languages. The tool is a visual programming environment with drag and drop generic widgets created in UIML and transcoded into VoiceXML, J2ME, HTML and WML languages. This tool takes advantage of the UIML language and visual programming paradigms for providing flexibility, consistency and decrease in development time.},
booktitle = {Proceedings of the Latin American Conference on Human-Computer Interaction},
pages = {61–68},
numpages = {8},
keywords = {J2ME, UIML, VXML, WML, XSLT, generic vocabulary, visual programming},
location = {Rio de Janeiro, Brazil},
series = {CLIHC '03}
}

@inproceedings{10.5555/3398761.3399086,
author = {Amaral, Cleber Jorge and Kampik, Timotheus and Cranefield, Stephen},
title = {A Framework for Collaborative and Interactive Agent-oriented Developer Operations},
year = {2020},
isbn = {9781450375184},
publisher = {International Foundation for Autonomous Agents and Multiagent Systems},
address = {Richland, SC},
abstract = {Considering the increasing prevalence of autonomous systems in today's society, one could expect that agent-oriented programming (AOP) is gaining traction among mainstream software engineering practitioners. However, the tools and frameworks that are used and developed in the academic multi-agent systems engineering community struggle to keep up with recent developments in the software industry in regards to how complex information systems are developed and maintained. An important aspect of recent changes in software engineering practices is the application of technologies that supports the increasingly fast iteration of a programming-testing-deployment cycle. Such approaches require intense collaboration that crosses boundaries between traditionally separated roles like software development, quality assurance, and operations; these approaches are often referred to as DevOps. Researchers need to explore what additional value AOP has to offer in the context of new paradigms and practices. In this paper, we work towards the integration of DevOps and AOP by introducing an extension of jacamo-web, an Integrated Development Environment (IDE) that supports the collaborative, web-based development and real-time continuous integration of autonomous agents and Multi-Agent Systems (MAS).},
booktitle = {Proceedings of the 19th International Conference on Autonomous Agents and MultiAgent Systems},
pages = {2092–2094},
numpages = {3},
keywords = {agent-oriented programming, engineering multi-agent systems, ide, iterative software development},
location = {Auckland, New Zealand},
series = {AAMAS '20}
}

@inproceedings{10.1145/2538862.2539023,
author = {Turbak, Franklyn and Martin, Fred and Pokress, Shaileen Crawford and Morelli, Ralph and Sherman, Mark and Wolber, David},
title = {Mobile computational thinking with app inventor 2 (abstract only)},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2539023},
doi = {10.1145/2538862.2539023},
abstract = {Computational Thinking Through Mobile Computing is an NSF-funded project for introducing students to computational thinking through creating mobile apps. In this hands-on workshop, which is targeted at undergraduate and secondary school computer science teachers, participants will develop Android apps using MIT App Inventor 2. This is a new version of the visual blocks-based programming environment with additional language features (e.g., local variables) and browser-based blocks editing. The workshop will also present pedagogical materials (lessons, tutorials, assignments), evaluation materials (blocks-based quizzes, surveys, project rubrics), and student projects. All of the pedagogical materials presented in the workshop, as well as all of the materials used by the workshop presenters in their individual courses, are posted on the Web and are available to everyone under a Creative Commons license. A laptop is required for this workshop. Each participant will be provided with an Android mobile device to use during the workshop. Participants who have their own Android phones or tablets can use them if they choose. This workshop is based upon work supported by the National Science Foundation under Grant Numbers 1225680, 1225719, 1225745, 1225976, and 1226216.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {745},
numpages = {1},
keywords = {CS0, blocks programming, computational thinking, event-based programming, mobile computing},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14}
}

@inproceedings{10.1145/3287324.3287450,
author = {L\'{e}deczi, \'{A}kos and Mar\'{O}ti, Mikl\'{O}s and Zare, Hamid and Yett, Bernard and Hutchins, Nicole and Broll, Brian and V\"{o}lgyesi, P\'{e}ter and Smith, Michael B. and Darrah, Timothy and Metelko, Mary and Koutsoukos, Xenofon and Biswas, Gautam},
title = {Teaching Cybersecurity with Networked Robots},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287450},
doi = {10.1145/3287324.3287450},
abstract = {The paper presents RoboScape, a collaborative, networked robotics environment that makes key ideas in computer science accessible to groups of learners in informal learning spaces and K-12 classrooms. RoboScape is built on top of NetsBlox, an open-source, networked, visual programming environment based on Snap! that is specifically designed to introduce students to distributed computation and computer networking. RoboScape provides a twist on the state of the art of robotics learning platforms. First, a user's program controlling the robot runs in the browser and not on the robot. There is no need to download the program to the robot and hence, development and debugging become much easier. Second, the wireless communication between a student's program and the robot can be overheard by the programs of the other students. This makes cybersecurity an immediate need that students realize and can work to address. We have designed and delivered a cybersecurity summer camp to 24 students in grades between 7 and 12. The paper summarizes the technology behind RoboScape, the hands-on curriculum of the camp and the lessons learned.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {885–891},
numpages = {7},
keywords = {block-based programming, computer science education, cybersecurity, netsblox, robotics, snap!, visual programming},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@article{10.1145/3158136,
author = {Grossman, Shelly and Abraham, Ittai and Golan-Gueta, Guy and Michalevsky, Yan and Rinetzky, Noam and Sagiv, Mooly and Zohar, Yoni},
title = {Online detection of effectively callback free objects with applications to smart contracts},
year = {2017},
issue_date = {January 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {POPL},
url = {https://doi.org/10.1145/3158136},
doi = {10.1145/3158136},
abstract = {Callbacks are essential in many programming environments, but drastically complicate program understanding and reasoning because they allow to mutate object's local states by external objects in unexpected fashions, thus breaking modularity. The famous DAO bug in the cryptocurrency framework Ethereum, employed callbacks to steal $150M. We define the notion of Effectively Callback Free (ECF) objects in order to allow callbacks without preventing modular reasoning.  An object is ECF in a given execution trace if there exists an equivalent execution trace without callbacks to this object. An object is ECF if it is ECF in every possible execution trace. We study the decidability of dynamically checking ECF in a given execution trace and statically checking if an object is ECF. We also show that dynamically checking ECF in Ethereum is feasible and can be done online. By running the history of all execution traces in Ethereum, we were able to verify that virtually all existing contract executions, excluding these of the DAO or of contracts with similar known vulnerabilities, are ECF. Finally, we show that ECF, whether it is verified dynamically or statically, enables modular reasoning about objects with encapsulated state.},
journal = {Proc. ACM Program. Lang.},
month = {dec},
articleno = {48},
numpages = {28},
keywords = {Modular reasoning, Program analysis, Smart contracts}
}

@inproceedings{10.1145/3468264.3473928,
author = {Terra-Neves, Miguel and Nadkarni, Jo\~{a}o and Ventura, Miguel and Resende, Pedro and Veiga, Hugo and Alegria, Ant\'{o}nio},
title = {Duplicated code pattern mining in visual programming languages},
year = {2021},
isbn = {9781450385626},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3468264.3473928},
doi = {10.1145/3468264.3473928},
abstract = {Visual Programming Languages (VPLs), coupled with the high-level abstractions that are commonplace in visual programming environments, enable users with less technical knowledge to become proficient programmers. However, the lower skill floor required by VPLs also entails that programmers are more likely to not adhere to best practices of software development, producing systems with high technical debt, and thus poor maintainability. Duplicated code is one important example of such technical debt. In fact, we observed that the amount of duplication in the OutSystems VPL code bases can reach as high as 39%. Duplicated code detection in text-based programming languages is still an active area of research with important implications regarding software maintainability and evolution. However, to the best of our knowledge, the literature on duplicated code detection for VPLs is very limited. We propose a novel and scalable duplicated code pattern mining algorithm that leverages the visual structure of VPLs in order to not only detect duplicated code, but also highlight duplicated code patterns that explain the reported duplication. The performance of the proposed approach is evaluated on a wide range of real-world mobile and web applications developed using OutSystems.},
booktitle = {Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1348–1359},
numpages = {12},
keywords = {duplicated code, maximum common sub-graph, maximum satisfiability, visual programming},
location = {Athens, Greece},
series = {ESEC/FSE 2021}
}

@inproceedings{10.1145/3609437.3609460,
author = {Xu, Hao and Zhao, Yongwang},
title = {Isabelle/Cloud: Delivering Isabelle/HOL as a Cloud IDE for Theorem Proving},
year = {2023},
isbn = {9798400708947},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3609437.3609460},
doi = {10.1145/3609437.3609460},
abstract = {As online coding technology advances, various related products are emerging, but we observe that there are not many examples of introducing online coding into the field of theorem proving. We introduce Isabelle/Cloud, an online coding platform and user environment for the Isabelle theorem proving assistant. The primary objective of Isabelle/Cloud is to cloudify Isabelle using online coding technology, thereby addressing the issue of loading large projects. Leveraging the understanding of the Isabelle architecture, we have modified, replaced, and added some modules, encapsulated the Isabelle environment using containers, and developed the front-end and back-end. As a cloud platform, Isabelle/Cloud enables users to create a complete Isabelle environment with different versions that are isolated from each other, while providing basic cloud coding and theorem proving services. The current version integrates most of the popular Isabelle libraries with excellent tutorials and cases, enabling users to directly create projects from the tutorial code for practical exercises. Evaluation of the platform shows that Isabelle/Cloud performs better when dealing with large projects. The new platform opens up new possibilities for interaction and presentation, and it is currently in use.},
booktitle = {Proceedings of the 14th Asia-Pacific Symposium on Internetware},
pages = {313–322},
numpages = {10},
keywords = {Cloud-based IDEs, Isabelle, cloud applications},
location = {<conf-loc>, <city>Hangzhou</city>, <country>China</country>, </conf-loc>},
series = {Internetware '23}
}

@inproceedings{10.1109/ICSE-Companion52605.2021.00030,
author = {P\'{e}rez-Soler, Sara and Guerra, Esther and de Lara, Juan},
title = {Creating and migrating chatbots with conga},
year = {2021},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-Companion52605.2021.00030},
doi = {10.1109/ICSE-Companion52605.2021.00030},
abstract = {Chatbots are agents that enable the interaction of users and software by means of written or spoken natural language conversation. Their use is growing, and many companies are starting to offer their services via chatbots, e.g., for booking, shopping or customer support. For this reason, many chatbot development tools have emerged, which makes choosing the most appropriate tool difficult. Moreover, there is hardly any support for migrating chatbots between tools.To alleviate these issues, we propose a model-driven engineering solution that includes: (i) a domain-specific language to model chatbots independently of the development tool; (ii) a recommender that suggests the most suitable development tool for the given chatbot requirements and model; (iii) code generators that synthesize the chatbot code for the selected tool; and (iv) parsers to extract chatbot models out of existing chatbot implementations. Our solution is supported by a web IDE called Conga that can be used for both chatbot creation and migration. A demo video is available at https://youtu.be/3sw1FDdZ7XY.},
booktitle = {Proceedings of the 43rd International Conference on Software Engineering: Companion Proceedings},
pages = {37–40},
numpages = {4},
keywords = {chatbots, domain-specific languages, migration, model-driven engineering},
location = {Virtual Event, Spain},
series = {ICSE '21}
}

@inproceedings{10.1145/1120212.1120342,
author = {Smith, Ian},
title = {Java-based user interface development},
year = {1997},
isbn = {0897919262},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1120212.1120342},
doi = {10.1145/1120212.1120342},
abstract = {This tutorial provide attendees with an understanding of the possibilities provided by the World Wide Web for application development and a more detailed understanding of the issues involved in developing user interfaces for the Web in Java.},
booktitle = {CHI '97 Extended Abstracts on Human Factors in Computing Systems},
pages = {200–201},
numpages = {2},
keywords = {Java, applets, development tools, user interfaces, world wide web},
location = {Atlanta, Georgia},
series = {CHI EA '97}
}

@inproceedings{10.1145/3079368.3079403,
author = {Kato, Jun and Goto, Masataka},
title = {User-Generated Variables: Streamlined Interaction Design for Feature Requests and Implementations},
year = {2017},
isbn = {9781450348362},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3079368.3079403},
doi = {10.1145/3079368.3079403},
abstract = {Programmers write source code that compiles to programs, and users execute the programs to benefit from their features. While issue-tracking systems help communication between these two groups of people, feature requests have usually been written in text with optional figures that follows community guidelines and needs human interpretation to understand what to implement in which part of the source code. To make this process more direct, intuitive, and efficient, a streamlined interaction design called "User-Generated Variables (UGV)" is proposed. First, the users can declare parameters that they want to tweak in existing programs without reading or understanding the source code. Then, the system turns the proposal into variable declarations in the relevant part of the source code. Finally, the programmers are notified of the proposal and can implement the actual features to reflect changes in the variable value. The proposed interaction is implemented in two existing Web-based Integrated Development Environments, and its user experience is briefly tested with eight users and programmers. Its technical requirements, limitations, and potentials are discussed. The content of this paper with live examples is available at http://junkato.jp/ugv.},
booktitle = {Companion Proceedings of the 1st International Conference on the Art, Science, and Engineering of Programming},
articleno = {28},
numpages = {7},
keywords = {User-generated content (UGC), integrated development environment, live programming, programming experience},
location = {Brussels, Belgium},
series = {Programming '17}
}

@article{10.14778/3476311.3476332,
author = {Wu, Renzhi and Sakala, Prem and Li, Peng and Chu, Xu and He, Yeye},
title = {Demonstration of panda: a weakly supervised entity matching system},
year = {2021},
issue_date = {July 2021},
publisher = {VLDB Endowment},
volume = {14},
number = {12},
issn = {2150-8097},
url = {https://doi.org/10.14778/3476311.3476332},
doi = {10.14778/3476311.3476332},
abstract = {Entity matching (EM) refers to the problem of identifying tuple pairs in one or more relations that refer to the same real world entities. Supervised machine learning (ML) approaches, and deep learning based approaches in particular, typically achieve state-of-the-art matching results. However, these approaches require many labeled examples, in the form of matching and non-matching pairs, which are expensive and time-consuming to label.In this paper, we introduce Panda, a weakly supervised system specifically designed for EM. Panda uses the same labeling function abstraction as Snorkel, where labeling functions (LF) are user-provided programs that can generate large amounts of (somewhat noisy) labels quickly and cheaply, which can then be combined via a labeling model to generate accurate final predictions. To support users developing LFs for EM, Panda provides an integrated development environment (IDE) that lives in a modern browser architecture. Panda's IDE facilitates the development, debugging, and life-cycle management of LFs in the context of EM tasks, similar to how IDEs such as Visual Studio or Eclipse excel in general-purpose programming. Panda's IDE includes many novel features purpose-built for EM, such as smart data sampling, a builtin library of EM utility functions, automatically generated LFs, visual debugging of LFs, and finally, an EM-specific labeling model. We show in this demo that Panda IDE can greatly accelerate the development of high-quality EM solutions using weak supervision.},
journal = {Proc. VLDB Endow.},
month = {jul},
pages = {2735–2738},
numpages = {4}
}

@inproceedings{10.1145/1463160.1463163,
author = {Atterer, Richard},
title = {Model-based automatic usability validation: a tool concept for improving web-based UIs},
year = {2008},
isbn = {9781595937049},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1463160.1463163},
doi = {10.1145/1463160.1463163},
abstract = {This paper describes an approach for improving automated usability tool support during the development of websites. Existing usability and accessibility validators only analyse the HTML code of a page when they create a report of possible problems. However, when a web engineering method is used to create a website, additional information is available in the form of models which describe the site. An automated validator can use these models to verify usability guidelines (such as "text on the web page should be easy to understand by the target audience") with higher accuracy. It can also perform automatic validation in situations where existent tools only output instructions for manual inspection by the developer. The paper systematically analyses existent guidelines and tools, and identifies ways in which the use of a model can improve verification quality. An extension to existing web engineering models is necessary to support automated checkers. It specifies properties of the users, the technical platform and the environment of use. A flexible approach allows the models to be used by validators running inside an integrated development environment, but also at a later time, without access to the development environment. Finally, the prototype of a model-based automatic usability validator is presented. It features verification of a number of guidelines which cannot be automated by existent validation approaches.},
booktitle = {Proceedings of the 5th Nordic Conference on Human-Computer Interaction: Building Bridges},
pages = {13–22},
numpages = {10},
keywords = {accessibility, automated validation, usability model, web engineering, web usability},
location = {Lund, Sweden},
series = {NordiCHI '08}
}

@inproceedings{10.1145/3593434.3593443,
author = {Wang, Siwei and Mao, Xue and Cao, Ziguang and Gao, Yujun and Shen, Qucheng and Peng, Chao},
title = {NxtUnit: Automated Unit Test Generation for Go},
year = {2023},
isbn = {9798400700446},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3593434.3593443},
doi = {10.1145/3593434.3593443},
abstract = {Automated test generation has been extensively studied for dynamically compiled or typed programming languages like Java and Python. However, Go, a popular statically compiled and typed programming language for server application development, has received limited support from existing tools. To address this gap, we present NxtUnit, an automatic unit test generation tool for Go that uses random testing and is well-suited for microservice architecture. NxtUnit employs a random approach to generate unit tests quickly, making it ideal for smoke testing and providing quick quality feedback. It comes with three types of interfaces: an integrated development environment (IDE) plugin, a command-line interface (CLI), and a browser-based platform. The plugin and CLI tool allow engineers to write unit tests more efficiently, while the platform provides unit test visualization and asynchronous unit test generation. We evaluated NxtUnit by generating unit tests for 13 open-source repositories and 500 ByteDance in-house repositories, resulting in a code coverage of 20.74% for in-house repositories. We conducted a survey among Bytedance engineers and found that NxtUnit can save them 48% of the time on writing unit tests. We have made the CLI tool available at https://github.com/bytedance/nxt_unit.},
booktitle = {Proceedings of the 27th International Conference on Evaluation and Assessment in Software Engineering},
pages = {176–179},
numpages = {4},
keywords = {Automated Test Generation, Go},
location = {Oulu, Finland},
series = {EASE '23}
}

@inproceedings{10.1109/MODELS-C.2019.00056,
author = {Louren\c{c}o, Hugo and Eug\'{e}nio, Rui},
title = {TrueChange™ under the hood: how we check the consistency of large models (almost) instantly},
year = {2021},
isbn = {9781728151250},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MODELS-C.2019.00056},
doi = {10.1109/MODELS-C.2019.00056},
abstract = {The OutSystems Platform is a visual model-driven development and delivery platform that allows developers to create enterprise-grade web and mobile applications.The models created with the platform are translated by its compiler into a set of standard-technology artifacts (C#, JavaScript, SQL, etc). The model must be checked for consistency (i.e., that it is well-formed and well-typed) before compilation can proceed. Our Integrated Development Environment (IDE) does this in real-time: after each change made a developer, the IDE either automatically heals the other parts of the model that are impacted by the change, or provides immediate feedback on the errors that must be manually corrected.It is not uncommon for an OutSystems model to contain in excess of 200,000 individual elements. Handling large models efficiently is thus of paramount importance: consistency checks must run as fast as possible, otherwise the developer's experience is significantly impaired.In this paper we present the techniques we have developed to speed up consistency checks, and which resulted in the TrueChange™ engine. We use an incremental approached paired with automatically managed back pointers. We believe these techniques are of general application and not limited to our particular case.},
booktitle = {Proceedings of the 22nd International Conference on Model Driven Engineering Languages and Systems},
pages = {362–369},
numpages = {8},
keywords = {consistency check, domain specific language, large models, model driven development},
location = {Munich, Germany},
series = {MODELS '19}
}

@inproceedings{10.1145/3412382.3458778,
author = {Jean, Devin and Stein, Gordon and L\'{e}deczi, \'{A}kos},
title = {Hands-On IoT Education with Mobile Devices: Demo Abstract},
year = {2021},
isbn = {9781450380980},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3412382.3458778},
doi = {10.1145/3412382.3458778},
abstract = {Distributed computing, computer networking, cyber-physical systems and the Internet of Things (IoT) are all around us, yet very little of the underlying concepts are being taught in introductory computer science courses in K12. Teaching IoT is especially problematic since it requires hardware with its own cost and maintenance requirements that many under-resourced schools cannot afford. However, smartphones are commonplace networked devices that boast a wide range of sensors. With the right approach, they can be used to introduce many advanced computing concepts even to novices. We have created a mobile app, PhoneIoT, which makes all available sensors accessible to the user's computer through NetsBlox, a block-based educational programming environment specializing in networking and distributed computing. Accessing PhoneIoT uses the same simple networking primitives as other NetsBlox services, so no additional knowledge is required. PhoneIoT makes it possible to collect sensor data, build a custom graphical interface on the device and receive corresponding events, all without leaving your browser running NetsBlox. This demonstration will showcase a few simple projects such as an exercise tracking app and how to turn your phone into a game controller.},
booktitle = {Proceedings of the 20th International Conference on Information Processing in Sensor Networks (Co-Located with CPS-IoT Week 2021)},
pages = {390–391},
numpages = {2},
keywords = {computer science education, internet of things, networking, sensors},
location = {Nashville, TN, USA},
series = {IPSN '21}
}

@inproceedings{10.1145/2627369.2627648,
author = {Lee, Wonjun and Kim, Channoh and Song, Houp and Lee, Jae W.},
title = {QPR.js: a runtime framework for QoS-aware power optimization for parallel JavaScript programs},
year = {2014},
isbn = {9781450329750},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2627369.2627648},
doi = {10.1145/2627369.2627648},
abstract = {JavaScript has become a general-purpose programming environment that enables complex, media-rich web applications. An increasing number of JavaScript programs are parallelized to run efficiently on today's multicore CPUs, which are capable of dynamic core scaling (DCS) and voltage/frequency scaling (DVFS). However, significant power savings are still left on the table since an operating point (in terms of the number of active cores and CPU voltage/frequency) is selected by monitoring CPU utilization or OS events, without considering the user's performance goal. To address this, we propose QPR.js, a QoS-aware power-optimizing runtime system for JavaScript. Using the QPR.js API, the application developer can specify a QoS goal and provide a fitness function to quantify the current level of QoS. During execution the QPR.js runtime system uses this information to autonomously find an optimal operating point minimizing power consumption while satisfying the QoS goal. Our evaluation with five parallel JavaScript programs demonstrates an average of 35.2% power savings over the Linux Ondemand governor without degrading user experience.},
booktitle = {Proceedings of the 2014 International Symposium on Low Power Electronics and Design},
pages = {251–254},
numpages = {4},
keywords = {dvfs, javascript, multi-core, power optimization},
location = {La Jolla, California, USA},
series = {ISLPED '14}
}

@inproceedings{10.1145/2993318.2993320,
author = {Esteves, Diego and Mendes, Pablo N. and Moussallem, Diego and Duarte, Julio Cesar and Zaveri, Amrapali and Lehmann, Jens},
title = {MEX Interfaces: Automating Machine Learning Metadata Generation},
year = {2016},
isbn = {9781450347525},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2993318.2993320},
doi = {10.1145/2993318.2993320},
abstract = {Despite recent efforts to achieve a high level of interoperability of Machine Learning (ML) experiments, positively collaborating with the Reproducible Research context, we still run into problems created due to the existence of different ML platforms: each of those have a specific conceptualization or schema for representing data and metadata. This scenario leads to an extra coding-effort to achieve both the desired interoperability and a better provenance level as well as a more automatized environment for obtaining the generated results. Hence, when using ML libraries, it is a common task to re-design specific data models (schemata) and develop wrappers to manage the produced outputs. In this article, we discuss this gap focusing on the solution for the question: "What is the cleanest and lowest-impact solution, i.e., the minimal effort to achieve both higher interoperability and provenance metadata levels in the Integrated Development Environments (IDE) context and how to facilitate the inherent data querying task?". We introduce a novel and low-impact methodology specifically designed for code built in that context, combining Semantic Web concepts and reflection in order to minimize the gap for exporting ML metadata in a structured manner, allowing embedded code annotations that are, in run-time, converted in one of the state-of-the-art ML schemas for the Semantic Web: MEX Vocabulary.},
booktitle = {Proceedings of the 12th International Conference on Semantic Systems},
pages = {17–24},
numpages = {8},
keywords = {Annotation, Interoperability, MEX, Machine Learning Outputs, Metadata, Provenance, Reflection, Reproducible Research},
location = {Leipzig, Germany},
series = {SEMANTiCS 2016}
}

@article{10.5555/1229688.1229710,
author = {Smith, Lon A. and Smith, Elizabeth Turner},
title = {Using Camtasia to develop and enhance online learning: tutorial presentation},
year = {2007},
issue_date = {May 2007},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {22},
number = {5},
issn = {1937-4771},
abstract = {Camtasia Studio is an inexpensive screen recording software that allows the user to create multi-platform video and audio recordings of anything that can be displayed or demonstrated on a computer screen, including computer labs assignments, the use of integrated development environments, PowerPoint lectures, demonstrations of Java applets, and software tutorials. Picture-in-picture video is also possible with the addition of an inexpensive web camera. With this screen recording software, a multitude of possibilities exist for developing learning objects and enhancing existing ones, which can then be easily integrated into both in class and online instruction.Camtasia Studio is a screen recording package that captures both the video and audio components of any activity that can be demonstrated or presented on a computer screen including PowerPoint lectures, demonstrations of Java applets, software tutorials, computer labs assignments, demonstrations of integrated development environments, and much more. This format appeals to both auditory and visual learners. These videos can be converted to Flash, Media Player, Real Player, QuickTime, streaming Flash videos, and even pod casts, which then can be made available for easy viewing on the Internet.Viewing by the students, as well as creating the videos, is simple. All that is needed to view these videos is the current plug-in for the video format used and an updated browser. The Camtasia Studio software package and a microphone is all that is needed to create the videos. With the addition of a web camera, picture-in-picture is possible. Recording PowerPoint lectures in video format, brings distance learners into the classroom lectures and preserves the classroom discussions for those who are absent or merely need to see or hear the content one or more time. Camtasia Studio not only records the text and images that are shown on the screen, but it also captures all animations, transitions, and any markings that the presenter may add during the lecture.Camtasia is also perfect for creating tutorials for software packages and learning management systems. When demonstrated in the classroom, the demonstrated actions are often too quick or too difficult to see. But with Camtasia, the viewer has everything directly in front of him or her, available for easy viewing and re-viewing. Likewise, many learning objects utilize written explanations and instructions in conjunction with java applets. For those who understand the concepts behind the object, it is rather easy to understand how to use the learning objects and see their educational value, but for the average student who is being directed to these learning objects through oftentimes brief demonstrations, the purpose and means of use is not so clear. Through video screen recorders such as Camtasia, instructors can record a demonstration of a learning object that walks the student through the use of the object, helps the student discover its purpose and then encourages the student to utilize it.},
journal = {J. Comput. Sci. Coll.},
month = {may},
pages = {121–122},
numpages = {2}
}

@inproceedings{10.1145/3434581.3434721,
author = {Luo, Liangfu},
title = {Design of Big Data Algorithm Based on MapReduce},
year = {2020},
isbn = {9781450375764},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3434581.3434721},
doi = {10.1145/3434581.3434721},
abstract = {With the widespread application of Internet technology, the utilization rate of similar blogs and social networks has been significantly improved. With the intervention of cloud computing and other technologies, a large amount of data generated during browsing the Internet can be effectively accumulated and processed, which indicates that big data has been integrated into people's daily life. MapReduce, as a parallel programming environment, can effectively deal with big data related problems, and has been applied in large Internet companies such as Google and Amazon Maxdiff, an efficient histogram algorithm based on MapReduce, includes accurate algorithm and approximate algorithm, and proposes two-table equijoin algorithm and multistandard equijoin algorithm for data skew And optimize the efficiency of the connection algorithm when one or more data in the data set appear too much. This paper starts with the efficiency optimization of big data connection algorithm based on MapReduce, and studies the efficiency optimization of equijoin algorithm, data skew connection algorithm and connection algorithm in detail, and then puts forward an algorithm that can effectively improve the program execution efficiency, hoping to provide reference for the follow-up research work.},
booktitle = {Proceedings of the 2020 International Conference on Aviation Safety and Information Technology},
pages = {722–724},
numpages = {3},
keywords = {Algorithm, Big data, MapReduce},
location = {Weihai City, China},
series = {ICASIT 2020}
}

@inproceedings{10.1145/3491418.3530766,
author = {Song, X. Carol and Smith, Preston and Kalyanam, Rajesh and Zhu, Xiao and Adams, Eric and Colby, Kevin and Finnegan, Patrick and Gough, Erik and Hillery, Elizabett and Irvine, Rick and Maji, Amiya and St. John, Jason},
title = {Anvil - System Architecture and Experiences from Deployment and Early User Operations},
year = {2022},
isbn = {9781450391610},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3491418.3530766},
doi = {10.1145/3491418.3530766},
abstract = {Anvil is a new XSEDE advanced capacity computational resource funded by NSF. Designed with a systematic strategy to meet the ever increasing and diversifying research needs for advanced computational capacity, Anvil integrates a large capacity high-performance computing (HPC) system with a comprehensive ecosystem of software, access interfaces, programming environments, and composable services in a seamless environment to support a broad range of current and future science and engineering applications of the nation’s research community. Anchored by a 1000-node CPU cluster featuring the latest AMD EPYC 3rd generation (Milan) processors, along with a set of 1TB large memory and NVIDIA A100 GPU nodes, Anvil integrates a multi-tier storage system, a Kubernetes composable subsystem, and a pathway to Azure commercial cloud to support a variety of workflows and storage needs. Anvil was successfully deployed and integrated with XSEDE during the world-wide COVID-19 pandemic. Entering production operation in February 2022, Anvil will serve the nation’s science and engineering research community for five years. This paper describes the Anvil system and services, including its various components and subsystems, user facing features, and shares the Anvil team’s experience through its early user access program from November 2021 through January 2022.},
booktitle = {Practice and Experience in Advanced Research Computing},
articleno = {23},
numpages = {9},
location = {Boston, MA, USA},
series = {PEARC '22}
}

@inproceedings{10.1145/2157136.2157155,
author = {Gregg, Chris and Tychonievich, Luther and Cohoon, James and Hazelwood, Kim},
title = {EcoSim: a language and experience teaching parallel programming in elementary school},
year = {2012},
isbn = {9781450310987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2157136.2157155},
doi = {10.1145/2157136.2157155},
abstract = {Traditional introductory programming classes teach sequential programming using a single-threaded programming model. It is typical to wait until a student has developed proficiency in sequential programming before teaching parallel programming. As computer hardware becomes increasingly parallel, there is a greater need for software engineers who are proficient in designing parallel programs, and not just by "parallelizing" sequential designs. Teaching parallelism first is an important step towards educating tomorrow's programmers.We present an overview of a five-day introductory parallel programming course. We taught the course to nine and ten year-olds with no prior programming experience. Our course utilized a fundamentally parallel language we designed for the course, one with a near-natural language syntax that exposed the parallel processors throughout the code. This language, coupled with an interactive online programming environment, allowed us to teach a wide range of parallel programming concepts in a very limited timeframe.We also present examples of student-written code that demonstrates their understanding of some basic parallel programming concepts, and we describe the overall course goal and specific lesson plans geared towards teaching students how to "think parallel."},
booktitle = {Proceedings of the 43rd ACM Technical Symposium on Computer Science Education},
pages = {51–56},
numpages = {6},
keywords = {K-12, concurrent languages, education, elementary school, instructional design, introductory programming, parallel languages, pedagogy, readability},
location = {Raleigh, North Carolina, USA},
series = {SIGCSE '12}
}

@article{10.1145/1959022.1959026,
author = {Obrenovic, \v{Z}eljko and Martens, Jean-Bernard},
title = {Sketching interactive systems with sketchify},
year = {2011},
issue_date = {April 2011},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {1},
issn = {1073-0516},
url = {https://doi.org/10.1145/1959022.1959026},
doi = {10.1145/1959022.1959026},
abstract = {Recent discussions in the interaction design community have called attention to sketching as an omnipresent element of any disciplined activity of design, and have pointed out that sketching should be extended beyond the simple creation of a pencil trace on paper. More specifically, the need to deal with all attributes of a user experience, especially the timing, phrasing, and feel of the interaction, has been identified. In this article, we propose extending the concept of sketching with a pencil on paper to the more generic concept of fluent exploration of interactive materials. We define interactive materials as any piece of software or hardware that represents or simulates a part of the interactive user experience, such as input from sensors, output in the form of sound, video, or image, or interaction with Web services or specialized programs. We have implemented the proposed concept within Sketchify, a tool for sketching user interfaces. Sketchify gives designers the freedom to manipulate interactive materials by combining elements of traditional freehand sketching with functional extensions and end-user programming tools, such as spreadsheets and scripting. We have evaluated Sketchify in the education of interaction designers, identifying both successful aspects and aspects that need further improvements.},
journal = {ACM Trans. Comput.-Hum. Interact.},
month = {may},
articleno = {4},
numpages = {38},
keywords = {Sketching, design process, interaction design, rapid prototyping, user interface software tools}
}

@inproceedings{10.1145/3587102.3588836,
author = {Caspari, Laura and Greifenstein, Luisa and Heuer, Ute and Fraser, Gordon},
title = {ScratchLog: Live Learning Analytics for Scratch},
year = {2023},
isbn = {9798400701382},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3587102.3588836},
doi = {10.1145/3587102.3588836},
abstract = {Scratch is a hugely popular block-based programming environment that is often used in educational settings, and has therefore recently also become a focus for research on programming education. Scratch provides dedicated teacher accounts that make it easy and convenient to handle lessons with school classes. However, once learners join a Scratch classroom, it is challenging to keep track of what they are doing: Both teachers and researchers may be interested in learning analytics to help them monitor students or evaluate teaching material. Researchers may also be interested in understanding how programs are created and how learners use Scratch. Neither use case is supported by Scratch itself currently. In this paper, we introduce ScratchLog, a tool that collects data from learners using Scratch. ScratchLog provides custom user management and makes it easy to set up courses and assignments. Starting from a task description and a starter project, learners transparently use Scratch while ScratchLog collects usage data, such as the history of code edits, or statistics about how the Scratch user interface was used. This data can be viewed on the ScratchLog web interface, or exported for further analysis, for example to inspect the functionality of programs using automated tests.},
booktitle = {Proceedings of the 2023 Conference on Innovation and Technology in Computer Science Education V. 1},
pages = {403–409},
numpages = {7},
keywords = {block-based programming, learning analytics, scratch},
location = {<conf-loc>, <city>Turku</city>, <country>Finland</country>, </conf-loc>},
series = {ITiCSE 2023}
}

@inproceedings{10.1145/3317960.3321617,
author = {Burch, Michael},
title = {Interaction graphs: visual analysis of eye movement data from interactive stimuli},
year = {2019},
isbn = {9781450367097},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3317960.3321617},
doi = {10.1145/3317960.3321617},
abstract = {Eye tracking studies have been conducted to understand the visual attention in different scenarios like, for example, how people read text, which graphical elements in a visualization are frequently attended, how they drive a car, or how they behave during a shopping task. All of these scenarios - either static or dynamic - show a visual stimulus in which the spectators are not able to change the visual content they see. This is different if interaction is allowed like in (graphical) user interfaces (UIs), integrated development environments (IDEs), dynamic web pages (with different user-defined states), or interactive displays in general as in human-computer interaction, which gives a viewer the opportunity to actively change the stimulus content. Typically, for the analysis and visualization of time-varying visual attention paid to a web page, there is a big difference for the analytics and visualization approaches - algorithmically as well as visually - if the presented web page stimulus is static or dynamic, i.e. time-varying, or dynamic in the sense that user interaction is allowed. In this paper we discuss the challenges for visual analysis concepts in order to analyze the recorded data, in particular, with the goal to improve interactive stimuli, i.e., the layout of a web page, but also the interaction concept. We describe a data model which leads to interaction graphs, a possible way to analyze and visualize this kind of eye movement data.},
booktitle = {Proceedings of the 11th ACM Symposium on Eye Tracking Research &amp; Applications},
articleno = {89},
numpages = {5},
keywords = {eye tracking, information visualization, visual analytics},
location = {Denver, Colorado},
series = {ETRA '19}
}

@inproceedings{10.1145/319151.319161,
author = {Chiueh, Tzi-cker and Venkitachalam, Ganesh and Pradhan, Prashant},
title = {Integrating segmentation and paging protection for safe, efficient and transparent software extensions},
year = {1999},
isbn = {1581131402},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/319151.319161},
doi = {10.1145/319151.319161},
abstract = {The trend towards extensible software architectures and component-based software development demands safe, efficient, and easy-to-use extension mechanisms to enforce protection boundaries among software modules residing in the same address space. This paper describes the design, implementation, and evaluation of a novel intra-address space protection mechanism called Palladium, which exploits the segmentation and paging hardware in the Intel X86 architecture and efficiently supports safe kernel-level and user-level extensions in a way that is largely transparent to programmers and existing programming tools. Based on the considerations on ease of extension programming and systems implementation complexity, Palladium uses different approaches to support user-level and kernel-level extension mechanisms. To demonstrate the effectiveness of the Palladium architecture, we built a Web server that exploits the user-level extension mechanism to invoke CGI scripts as local function calls in a safe way, and we constructed a compiled network packet filter that exploits the kernel-level extension mechanism to run packet-filtering binaries safely inside the kernel at native speed. The current Palladium prototype implementation demonstrates that a protected procedure call and return costs 142 CPU cycles on a Pentium 200MHz machine running Linux.},
booktitle = {Proceedings of the Seventeenth ACM Symposium on Operating Systems Principles},
pages = {140–153},
numpages = {14},
location = {Charleston, South Carolina, USA},
series = {SOSP '99}
}

@inproceedings{10.1145/3287324.3287499,
author = {Schanzer, Emmanuel and Bahram, Sina and Krishnamurthi, Shriram},
title = {Accessible AST-Based Programming for Visually-Impaired Programmers},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287499},
doi = {10.1145/3287324.3287499},
abstract = {Most programmers rely on visual tools (block-based editors, auto-indentation, bracket matching, syntax highlighting, etc.), which are inaccessible to visually-impaired programmers. While prior language-specific, downloadable tools have demonstrated benefits for the visually-impaired, we lack language-independent, cloud-based tools, both of which are critically needed. We present a new toolkit for building fully-accessible, browser-based programming environments for multiple languages. Given a parser that meets certain specifications, this toolkit will generate a block editor familiar to sighted users that also communicates the structure of a program using spoken descriptions, and allows for navigation using standard (accessible) keyboard shortcuts.This paper presents the toolkit and a first evaluation of it. While the toolkit allows for full editing of code, we chose to focus strictly on navigation for this evaluation, using the navigation-only study design of Baker, Milne and Ladner. Visually-impaired programmers completed several tasks with and without our tool, and we compared their results and experience. Users had improved accuracy when completing tasks, were significantly better able to orient when reading code, and felt better about completing the tasks when using the tool. Moreover, these improvements came with no significant change in task completion time over plain text, even for experienced programmers who navigate text using screen readers set to high words-per-minutes.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {773–779},
numpages = {7},
keywords = {accessibility, blocks, code navigation, code structure, screen reader, visually impaired/blind programmers},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3594671.3594688,
author = {Miszczak, Jaros\l{}aw Adam},
title = {Symbolic Quantum Programming for Supporting Applications of Quantum Computing Technologies},
year = {2023},
isbn = {9798400707551},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3594671.3594688},
doi = {10.1145/3594671.3594688},
abstract = {The goal of this paper is to deliver the overview of the current state of the art, provide experience report on developing quantum software tools, and outline the perspective for developing quantum programming tools supporting symbolic programming for the needs of quantum computing technologies. The main focus of this paper is on quantum computing technologies, as they can in the most direct way benefit from developing tools enabling the symbolic manipulation of quantum circuits and providing software tools for creating, optimizing, and testing quantum programs. We deliver a short survey of the most popular approaches in the field of quantum software development, pointing their strengths and weaknesses. This helps to formulate a list of desirable characteristics which should be included in quantum computing frameworks. Next, we describe a software architecture and its preliminary implementation supporting the development of quantum programs using symbolic approach, encouraging the functional programming paradigm, and, at the same, time enabling the integration with high-performance and cloud computing. The described software consists of several packages developed to address different needs, but nevertheless sharing common design concepts. We also outline how the presented approach could be used in tasks in quantum software engineering: quantum software testing and quantum circuit construction.},
booktitle = {Companion Proceedings of the 7th International Conference on the Art, Science, and Engineering of Programming},
pages = {101–108},
numpages = {8},
keywords = {computer algebra, functional programming, quantum computing, quantum technologies, symbolic manipulation},
location = {<conf-loc>, <city>Tokyo</city>, <country>Japan</country>, </conf-loc>},
series = {Programming '23}
}

@inproceedings{10.1145/2991041.2991051,
author = {Bouraqadi, Noury and Mason, Dave},
title = {Mocks, Proxies, and Transpilation as Development Strategies for Web Development},
year = {2016},
isbn = {9781450345248},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2991041.2991051},
doi = {10.1145/2991041.2991051},
abstract = {With the advent of HTML 5, we can now develop rich web apps that rival classical standalone apps. This richness together with the portability of web technologies, turned HTML 5 into a viable (and in the case of mobile - essential) solution to develop cross-platform apps. This possibility is heavily dependent on Javascript having acceptable performance, good testability, and a modern development environment. Despite its extensive use in creating highly interactive environments, most Javascript development environments currently use a compile/run paradigm. Similarly, testing is frequently tacked on, rather than being an integrated part of the development cycle. We propose PharoJS which leverages the Smalltalk IDE with a seamless transition from native Smalltalk tests, through proxied browser tests, to full browser-resident tests. We support the standard event-driven browser model and transpile Smalltalk code into efficient Javascript for execution in the browser. We further support testing - both manually and automatically - in a range of browsers to provide assured consistency upon deployment. In addition to transpiling the Smalltalk code to Javascript to perform tests in the browser, we can also run non-interactive tests within the Smalltalk environment. The unique feature we provide is the ability to run interactive tests largely within the Smalltalk IDE, so as to fully exploit the debugging and development environment, while the actual interaction occurs on the browser. We exhibit this new mode of development via a simple application.},
booktitle = {Proceedings of the 11th Edition of the International Workshop on Smalltalk Technologies},
articleno = {10},
numpages = {6},
location = {Prague, Czech Republic},
series = {IWST'16}
}

@inproceedings{10.1145/3197091.3197114,
author = {Silva, Yasin N. and Nieuwenhuyse, Anthony and Schenk, Thomas G. and Symons, Alaura},
title = {DBSnap++: creating data-driven programs by snapping blocks},
year = {2018},
isbn = {9781450357074},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3197091.3197114},
doi = {10.1145/3197091.3197114},
abstract = {A key development in Computer Science Education has been the introduction of block-based programming environments where programs are created by connecting blocks and the focus is on the program's logic instead of its syntax. Most of these environments support conventional (imperative) programming instructions. More recently, some systems have been proposed to enable the specification of database queries. While these two types of environments have been independently studied, there is significantly less work on the development and study of integrated environments that allow the creation of complete data-driven programs (real-world like programs that integrate conventional instructions and database queries). This paper introduces DBSnap++, a web-based environment that enables the specification of dynamic data-driven programs. DBSnap++ supports the specification of intuitive database query trees, a new type of list that dynamically gets its content executing a database query, and programs that generate different results when the underlying data changes. This paper presents DBSnap++'s design and implementation details, an array of programs to demonstrate how it can be effectively used as a learning tool, and a thorough comparison with other environments. DBSnap++ is publicly available and aims to enable learners to fully understand and utilize the capabilities of data-driven programs.},
booktitle = {Proceedings of the 23rd Annual ACM Conference on Innovation and Technology in Computer Science Education},
pages = {170–175},
numpages = {6},
keywords = {Data-driven programs, databases curricula, query languages},
location = {Larnaca, Cyprus},
series = {ITiCSE 2018}
}

@inproceedings{10.1145/2647868.2655064,
author = {Wyse, Lonce},
title = {Interactive Audio Web Development Workflow},
year = {2014},
isbn = {9781450330633},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647868.2655064},
doi = {10.1145/2647868.2655064},
abstract = {New low-level sound synthesis capabilities have recently become available in Web browsers. However, there is a considerable gap between the enabling technology for interactive audio and its wide-spread adoption in Web media content. We identify several areas where technologies are necessary to support the various stages of development and deployment, describe systems we have developed to address those needs, and show how they work together within a specific Web content development scenario.},
booktitle = {Proceedings of the 22nd ACM International Conference on Multimedia},
pages = {1065–1068},
numpages = {4},
keywords = {development tools, interactive audio, w3c web audio api, web development workflow},
location = {Orlando, Florida, USA},
series = {MM '14}
}

@inproceedings{10.1145/3478432.3499259,
author = {Stein, Gordon and L\'{e}deczi, \'{A}kos},
title = {Shared Virtual Worlds for Accessible Classroom Robotics},
year = {2022},
isbn = {9781450390712},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3478432.3499259},
doi = {10.1145/3478432.3499259},
abstract = {RoboScape Online is a robotics simulation platform designed to reduce the barriers to entry for teachers to use robots as an educational tool in their classrooms. With simulated robots in a shared virtual 3D environment, students can be provided with "hardware" at no cost, no maintenance required, and free for them to "take home" while simultaneously collaborating with peers anywhere in the world. The environment supports remote, hybrid and in- person learning equally well. Programming support is provided through NetsBlox, a block-based programming environment, creating a novice-friendly experience while providing strong distributed computing and collaboration tools. Existing curricula focused on computational thinking and cybersecurity in NetsBlox have been used with physical robots for several years. These activities have been recreated with virtual robots, and the exact same code works in the simulated environment as well. However, virtual robots and their environments aren't limited to only the same experiences as before. New robots can be designed equipped with sensors and actuators previously infeasible for classroom use, giving students more interesting "missions" to work on solutions to. The software is open source, with free servers available, and tools are also provided to create new scenarios and environments. Handouts explaining the basics of the RoboScape environment will be provided. A computer with a web browser is required to use the software.},
booktitle = {Proceedings of the 53rd ACM Technical Symposium on Computer Science Education V. 2},
pages = {1177},
numpages = {1},
keywords = {educational robotics, educational simulations, k-12 computer science education},
location = {Providence, RI, USA},
series = {SIGCSE 2022}
}

@inproceedings{10.1145/1852786.1852825,
author = {Dahotre, Aniket and Zhang, Yan and Scaffidi, Christopher},
title = {A qualitative study of animation programming in the wild},
year = {2010},
isbn = {9781450300391},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1852786.1852825},
doi = {10.1145/1852786.1852825},
abstract = {Scratch is the latest iteration in a series of animation tools aimed at teaching programming skills. Scratch, in particular, aims not only to teach technical skills, but also skills related to collaboration and code reuse. In order to assess the strengths and weaknesses of Scratch relative to these goals, we have performed an empirical field study of Scratch animations and associated user comments from the online animation repository. Overall, we found that Scratch represents substantial progress toward its designers' goals, though we also identified several opportunities for significant improvement. In particular, many Scratch programs revealed significant technical mastery of the programming environment by programmers, and some animations even demonstrated design patterns. On the other hand, while the Scratch repository has successfully served as a supportive environment for generating constructive feedback among users, we did not find any occasions within our sample where this interaction led to online collaboration. In addition, we found low levels of code reuse, in terms of both frequency and success. Based on these results, we identify implications for improving the design of animation tools, for using these tools to teach programming skills, and for fostering successful collaboration and code reuse among end-user programmers.},
booktitle = {Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement},
articleno = {29},
numpages = {10},
keywords = {animation, collaboration, end-user programming, repositories},
location = {Bolzano-Bozen, Italy},
series = {ESEM '10}
}

@inproceedings{10.1145/3484272.3484970,
author = {Anderson, Boyd and Henz, Martin and Low, Kok-Lim and Tan, Daryl},
title = {Shrinking JavaScript for CS1},
year = {2021},
isbn = {9781450390897},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3484272.3484970},
doi = {10.1145/3484272.3484970},
abstract = {In teaching and learning programming at first-year-university level, simple languages with small feature sets are preferable over industry-strength languages with extensive feature sets, to reduce the learners' cognitive load. At the same time, there is increasing pressure to familiarise students with mainstream languages early in their learning journey, and these languages accumulate features as years go by. In response to these competing requirements, we developed Source, a collection of JavaScript sublanguages with feature sets just expressive enough to introduce first-year computer science students to the elements of computation. These languages are supported by a web-based programming environment custom-built for learning at beginner's level, which provides transpiler, interpreter, virtual machine, and algebraic-stepper-based implementations of the languages, and includes tracing, debugging, visualization, type-inference, and smart-editor features. This paper motivates the choice of JavaScript as starting point and describes the syntax and semantics of the Source languages compared to their parent language, and their implementations in the system. We report our experiences in developing and improving the languages and implementations over a period of three years, teaching a total of 1561 computer science first-year students at a university.},
booktitle = {Proceedings of the 2021 ACM SIGPLAN International Symposium on SPLASH-E},
pages = {87–96},
numpages = {10},
keywords = {JavaScript, learning environments, learning tools, teaching programming},
location = {Chicago, IL, USA},
series = {SPLASH-E 2021}
}

@inproceedings{10.1145/1869459.1869490,
author = {Lerner, Benjamin S. and Venter, Herman and Grossman, Dan},
title = {Supporting dynamic, third-party code customizations in JavaScript using aspects},
year = {2010},
isbn = {9781450302036},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1869459.1869490},
doi = {10.1145/1869459.1869490},
abstract = {Web sites and web browsers have recently evolved into platforms on top of which entire applications are delivered dynamically, mostly as JavaScript source code. This delivery format has sparked extremely enthusiastic efforts to customize both individual web sites and entire browsers in ways the original authors never expected or accommodated. Such customizations take the form of yet more script dynamically injected into the application, and the current idioms to do so exploit arcane JavaScript features and are extremely brittle. In this work, we accept the popularity of extensions and seek better linguistic mechanisms to support them.We suggest adding to JavaScript aspect-oriented features that allow straightforward and declarative ways for customization code to modify the targeted application. Compared to most prior aspect-related research, our work has a different motivation and a different target programming environment, both of which lead to novel design and implementation techniques. Our aspect weaving is entirely integrated into a new dynamic JIT compiler, which lets us properly handle advice to first-class functions in the presence of arbitrary aliasing, without resorting to whole-program code transformations. Our prototype demonstrates that an aspect-oriented approach to web-application customization is often more efficient than current idioms while simplifying the entire process.},
booktitle = {Proceedings of the ACM International Conference on Object Oriented Programming Systems Languages and Applications},
pages = {361–376},
numpages = {16},
keywords = {JavaScript, aspects, extensions},
location = {Reno/Tahoe, Nevada, USA},
series = {OOPSLA '10}
}

@inproceedings{10.1145/3468044.3468049,
author = {Suzuki, Hiroaki and Takahashi, Wataru and Wakabayashi, Kazutoshi and Amano, Hideharu},
title = {A programming environment for multi-FPGA systems based on CyberWorkBench: an integrated design tool},
year = {2021},
isbn = {9781450385497},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3468044.3468049},
doi = {10.1145/3468044.3468049},
abstract = {This paper proposes a multi-FPGA programming environment based on NEC's integrated design tool CyberWorkBench (CWB) for a multi-FPGA system FiC (Flow-in-Cloud). Programmers describe their program in SystemC as small modules connected with FIFO channels, then verify the operation with the behavioral simulation considering parallel execution. After the high-level synthesis (HLS) is done with CWB, modules distributed to each board are decided, and the interface module is inserted. The cycle accurate simulation is applied to ensure the operation and estimate the performance. Finally, generated Verilog HDL code for each board is implemented with Xilinx's Vivado just like the traditional design and configuration is obtained. As an example, a simple convolutional neural network LeNet is described and implemented on a real system using the tool. Although the cycle accurate simulation takes 105.34sec, the estimated cycles are only 2.2% difference from the real boards execution result. Since the example CNN LeNet is too small, it can be implemented into a single board with a traditional design tool. However, considering the pipeline execution, parallel execution with two boards can distribute the input and output into different FPGAs, and relax the bottleneck.},
booktitle = {Proceedings of the 11th International Symposium on Highly Efficient Accelerators and Reconfigurable Technologies},
articleno = {5},
numpages = {6},
location = {Online, Germany},
series = {HEART '21}
}

@inproceedings{10.1145/3358711.3361630,
author = {Ball, Thomas and Chatra, Abhijith and de Halleux, Peli and Hodges, Steve and Moskal, Micha\l{} and Russell, Jacqueline},
title = {Microsoft MakeCode: embedded programming for education, in blocks and TypeScript},
year = {2019},
isbn = {9781450369893},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3358711.3361630},
doi = {10.1145/3358711.3361630},
abstract = {Microsoft MakeCode (https://www.makecode.com) is a platform and accompanying web app for simplifying the programming of microcontroller-based devices in the classroom. For each device, MakeCode provides a customized end-to-end experience in the web browser consisting of code editors, device simulator, debugger, compiler to machine code, and linker to a pre-compiled C++ runtime, as well as a documentation and tutorial system. We present an overview of MakeCode and detail the major design decisions behind the platform.},
booktitle = {Proceedings of the 2019 ACM SIGPLAN Symposium on SPLASH-E},
pages = {7–12},
numpages = {6},
keywords = {Blockly, CS education, JavaScript, TypeScript, microcontrollers},
location = {Athens, Greece},
series = {SPLASH-E 2019}
}

@inproceedings{10.1145/3545947.3573232,
author = {Henz, Martin},
title = {Source Academy: A Web-based Environment for Learning Programming with SICP},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3573232},
doi = {10.1145/3545947.3573232},
abstract = {The Source Academy is a community-built immersive online environment for learning computing with the book Structure and Interpretation of Computer Programs (SICP). An interactive version of the textbook is integrated into the system, and the programming environment of the Source Academy allows learners to focus on SICP-specific sublanguages of JavaScript (Python and Scheme versions in preparation). The environment includes tools to support SICP's mental models for computational processes and data, including a stepper that animates the substitution model of Chapter 1, a data visualizer that supports the box-and-pointer diagrams of Chapter 2, and a visualizer for the environment model of Chapter 3.The system is web-based (no software installation required) and supports dynamically loadable plugins (modules) for programming with graphics, audio, image, and video processing. An extension called Source Academy @ X provides Learning Management System features such as the management of programming assessments and their manual and automatic grading. Source Academy @ X includes gamification components such as achievements, contests, levels, and a game that offers a narrative to contextualize the assessments.The 45-minute demo provides CS educators with an overview of the Source Academy, including its tools, modules, and textbook integration, the Source Academy @ X extension for course management and a preview of Python and Scheme versions.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1261},
numpages = {1},
keywords = {computational thinking, learning management systems, structure and interpretation of computer programs},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3441852.3476516,
author = {De Le\'{o}n Cordero, Dayanlee and Ayala, Christopher and Ord\'{o}\~{n}ez, Patricia},
title = {Kavita Project: Voice Programming for People with Motor Disabilities},
year = {2021},
isbn = {9781450383066},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3441852.3476516},
doi = {10.1145/3441852.3476516},
abstract = {Most computer programs are designed in a way that requires interaction based on finger movements and hand gestures. This type of environment, which assumes the dexterity of human hands, presents limitations for those with motor disabilities. This limitation excludes this population from learning to code and, for those who develop a musculoskeletal disorder in later stages, could jeopardize their programming careers. The objective of this research is to design a Voice User Interface (or VUI for its acronym in English) that allows the use of the user’s voice to program in an Integrated Development Environment (or IDE for its acronym in English). For this, a basic programming structure was defined using Alexa Skills, which allows the user to declare variables, print values, solve basic mathematical expressions, insert conditional expressions, and create loops. An online text editor was created using CodeMirror to run user input using the Python programming language. However, the results could not yet be evaluated since the application does not have a compiler integrated. In future work it is desired to add the compiler, and thus to be able to execute the user’s program in the online editor. The aim is to also add the ability to edit, debug and move the cursor using the Alexa Skill.},
booktitle = {Proceedings of the 23rd International ACM SIGACCESS Conference on Computers and Accessibility},
articleno = {75},
numpages = {3},
keywords = {accessibility, open-source, programming languages, universal design, voice programming},
location = {<conf-loc>, <city>Virtual Event</city>, <country>USA</country>, </conf-loc>},
series = {ASSETS '21}
}

@inproceedings{10.1145/1822018.1822074,
author = {Feiner, Johannes},
title = {The fluid software metadata framework (FSM)},
year = {2010},
isbn = {9781450300834},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1822018.1822074},
doi = {10.1145/1822018.1822074},
abstract = {The Fluid Software Metadata (FSM) framework is a dynamic and flexible framework for software repository metadata generation and analysis. FSM aims to improve the setup time for the mining, analysis, and interactive visualisation of repository artefacts. FSM supports the integration of usability findings through XML-based usability reports. Viewing usability issues side-by-side with source code provides several advantages in holistic software development.},
booktitle = {Proceedings of the 2nd ACM SIGCHI Symposium on Engineering Interactive Computing Systems},
pages = {333–336},
numpages = {4},
keywords = {development tools, framework, metrics, software repositories, usability issues, visualisation, web interface},
location = {Berlin, Germany},
series = {EICS '10}
}

@article{10.5555/1181811.1181841,
author = {Wang, Xusheng},
title = {A practical way to teach web programming in computer science},
year = {2006},
issue_date = {October 2006},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {22},
number = {1},
issn = {1937-4771},
abstract = {Nowadays, web-based applications have become more and more popular in computer-based applications. Learning and mastering web programming environment, techniques, and methods are becoming necessary for undergraduate students in computer science. Traditional curriculum in computer science usually does not include web programming course. It is a great challenge to design and implement an effective course to teach web programming so that a computer science student can learn and master necessary knowledge and skills for efficiently developing interactive web-based database-driven applications. Recently, I designed and taught a web programming course for junior and senior undergraduate students in computer science. The course mainly focused on teaching the server-side programming techniques with open source software PHP and MySQL. Considering that many students had not systematically learned the basic client-side web development techniques and software tools, the course allotted 1/3 time to review and teach XHTML, CSS, HTTP, JavaScript, and Macromedia Dreamweaver and Fireworks. This paper discusses the details of the design and implementation for the web programming course including course contents, structure, implementation, demonstration, assignments, final project, outcomes and feedback. The paper can provide some useful information and directions for other instructors teaching the same course in computer science.},
journal = {J. Comput. Sci. Coll.},
month = {oct},
pages = {211–220},
numpages = {10}
}

@article{10.14778/2733004.2733054,
author = {Anderson, Michael R. and Cafarella, Michael and Jiang, Yixing and Wang, Guan and Zhang, Bochun},
title = {An integrated development environment for faster feature engineering},
year = {2014},
issue_date = {August 2014},
publisher = {VLDB Endowment},
volume = {7},
number = {13},
issn = {2150-8097},
url = {https://doi.org/10.14778/2733004.2733054},
doi = {10.14778/2733004.2733054},
abstract = {The application of machine learning to large datasets has become a core component of many important and exciting software systems being built today. The extreme value in these trained systems is tempered, however, by the difficulty of constructing them. As shown by the experience of Google, Netflix, IBM, and many others, a critical problem in building trained systems is that of feature engineering. High-quality machine learning features are crucial for the system's performance but are difficult and time-consuming for engineers to develop. Data-centric developer tools that improve the productivity of feature engineers will thus likely have a large impact on an important area of work.We have built a demonstration integrated development environment for feature engineers. It accelerates one particular step in the feature engineering development cycle: evaluating the effectiveness of novel feature code. In particular, it uses an index and runtime execution planner to process raw data objects (e.g., Web pages) in order of descending likelihood that the data object will be relevant to the user's feature code. This demonstration IDE allows the user to write arbitrary feature code, evaluate its impact on learner quality, and observe exactly how much faster our technique performs compared to a baseline system.},
journal = {Proc. VLDB Endow.},
month = {aug},
pages = {1657–1660},
numpages = {4}
}

@inproceedings{10.1145/3287324.3287556,
author = {Cetinkaya-Rundel, Mine},
title = {Computing Infrastructure and Curriculum Design for Introductory Data Science},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287556},
doi = {10.1145/3287324.3287556},
abstract = {The goal of this workshop is to equip educators with concrete information on content and infrastructure for designing and painlessly running a modern data science course. This is a three-part workshop. Part 1 will outline a curriculum for an introductory data science course and discuss pedagogical decisions that go into the choice of topics and concepts as well as the choice of programming language (R) and syntax (primarily tidyverse), and the emphasis on literate programming for reproducibility (with R Markdown). Part 2 will discuss infrastructure choices around teaching data science with R: RStudio as an integrated development environment, cloud-based access with RStudio Cloud and Server, version control with Git, and collaboration with GitHub. Part 3 will focus on classroom management on GitHub (with ghclass). Workshop attendees will work through several exercises from the course and get first-hand experience with using the tool-chains and techniques described above. While the workshop content will focus on usage of R, many of the pedagogical takeaways will be language agnostic. All workshop content, including teacher facing documentation and student facing course materials, will also be available to participants via datasciencebox.org. Please bring a laptop with you.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1236},
numpages = {1},
keywords = {data science, pedagogy, r, reproducibility, version control},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/2157136.2157206,
author = {Abelson, Hal},
title = {From computational thinking to computational values},
year = {2012},
isbn = {9781450310987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2157136.2157206},
doi = {10.1145/2157136.2157206},
abstract = {SIGCSE members love the beauty of computational thinking. They know the joy of bringing those ideas to young people. That love for computational thinking entails respect for the computational values that empower people in the digital world. For academics, those values have been central to the flowering of computing as an intellectual endeavor. Today, those values are increasingly threatened by stresses from both within and outside academia: squabbles over who owns academic work, increasingly stringent and overreaching intellectual property laws, and the replacement of open computing platforms by closed applications and walled-garden application markets.In this talk I'll describe some things we've done at MIT to support computational values, like open publication of all our course materials, our faculty policy on open publication of academic research, and our recently announced initiative for open online instruction based on non-proprietary software platforms. I'll discuss Creative Commons licensing and Free Software, and the importance of tinkerability for empowering citizens in an information society. And I'll describe App Inventor for Android, a new programming tool motivated by the vision that all of us us can experience mobile computing as creators using tools that we can control and reshape, rather than only as consumers of packaged applications.},
booktitle = {Proceedings of the 43rd ACM Technical Symposium on Computer Science Education},
pages = {239–240},
numpages = {2},
keywords = {keynote},
location = {Raleigh, North Carolina, USA},
series = {SIGCSE '12}
}

@inproceedings{10.1145/3472538.3472572,
author = {Moskal, Michal and Ball, Thomas and Chatra, Abhijith and Devine, James and de Halleux, Peli and Hodges, Steve and Kao, Shannon and Knoll, Richard and Nickel, Galen and Russell, Jacqueline and Wunderlich, Joey and Zuniga, Daryl},
title = {Web-based Programming for Low-cost Gaming Handhelds},
year = {2021},
isbn = {9781450384223},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3472538.3472572},
doi = {10.1145/3472538.3472572},
abstract = {Low-cost microcontroller boards like the BBC micro:bit are used to engage and inspire students worldwide to learn more about computing. Easy-to-use web-based programming environments and low-cost hardware allow novices to build physical computing systems with the micro:bit – systems that sense and respond to the real world. However, devices such as the micro:bit may not capture the attention of every student, as the interests of some may lie in graphic design, animation, or other areas that are not the main focus of physical computing. Video game creation offers the opportunity for students to engage with computing concepts from a different angle, while keeping open the possibilities for physical computing. To date however, there is no game creation platform that has both the same low-barrier to entry and low-cost hardware as the BBC micro:bit. We present MakeCode Arcade, a web app for creating video games for gaming handhelds, built on the same technologies as the BBC micro:bit, extended to support multiple microcontrollers and including a 2D game engine and easy-to-use sprite and music editors. We also designed a simple hardware specification that resulted in five different companies creating seven Arcade-compatible handhelds. Qualitative and quantitative evaluation demonstrates that Arcade enables a modern and fully web-based programming experience for low-cost microcontroller-based gaming handhelds.},
booktitle = {Proceedings of the 16th International Conference on the Foundations of Digital Games},
articleno = {38},
numpages = {12},
keywords = {gaming handhelds, programming, video games, web browser},
location = {Montreal, QC, Canada},
series = {FDG '21}
}

@inproceedings{10.1145/3620666.3651347,
author = {Prakriya, Neha and Chi, Yuze and Basalama, Suhail and Song, Linghao and Cong, Jason},
title = {TAPA-CS: Enabling Scalable Accelerator Design on Distributed HBM-FPGAs},
year = {2024},
isbn = {9798400703867},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3620666.3651347},
doi = {10.1145/3620666.3651347},
abstract = {Despite the increasing adoption of FPGAs in compute clouds, there remains a significant gap in programming tools and abstractions which can leverage network-connected, cloud-scale, multi-die FPGAs to generate accelerators with high frequency and throughput. We propose TAPA-CS, a task-parallel dataflow programming framework which automatically partitions and compiles a large design across a cluster of FPGAs while achieving high frequency and throughput. TAPA-CS has three main contributions. First, it is an open-source framework which allows users to leverage virtually "unlimited" accelerator fabric, high-bandwidth memory (HBM), and on-chip memory. Second, given as input a large design, TAPA-CS automatically partitions the design to map to multiple FPGAs, while ensuring congestion control, resource balancing, and overlapping of communication and computation. Third, TAPA-CS couples coarse-grained floor-planning with interconnect pipelining at the inter- and intra-FPGA levels to ensure high frequency. FPGAs in our multi-FPGA testbed communicate through a high-speed 100Gbps Ethernet infrastructure. We have evaluated the performance of TAPA-CS on designs, including systolic-array based CNNs, graph processing workloads such as page rank, stencil applications, and KNN. On average, the 2-, 3-, and 4-FPGA designs are 2.1\texttimes{}, 3.2\texttimes{}, and 4.4\texttimes{} faster than the single FPGA baselines generated through Vitis HLS. TAPA-CS also achieves a frequency improvement between 11%-116% compared with Vitis HLS.},
booktitle = {Proceedings of the 29th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, Volume 3},
pages = {966–980},
numpages = {15},
location = {<conf-loc>, <city>La Jolla</city>, <state>CA</state>, <country>USA</country>, </conf-loc>},
series = {ASPLOS '24}
}

@inproceedings{10.1145/3408877.3439542,
author = {L\'{e}deczi, \'{A}kos and Grover, Shuchi and Catete, Veronica and Broll, Brian},
title = {Beyond CS Principles: Bringing the Frontiers of Computing to K12},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3439542},
doi = {10.1145/3408877.3439542},
abstract = {The AP Computer Science Principles (CSP) high school course introduces students to computer science and programming. What should motivated students study after successful completion of AP CSP? The AP CSA class teaches Java programming and it has traditionally not attracted students from underrepresented groups. We are working on an alternative, projects-based course that will teach cutting edge CS concepts, such as distributed computing, computer networking, cybersecurity, the internet of things and machine learning, in a hands-on, accessible manner. Such an approach enables students to work on problems that interest them making computing more relevant and the curriculum more engaging. We utilize NetsBlox, a collaborative, block-based programming environment that extends Snap! with a few carefully selected abstractions that open up the vast array of resources freely available on the internet for student programs. Moreover, the tool enables students to work together on the same project remotely similarly to how Google Docs operate. This demonstration will introduce the environment and highlight its utility in creating distributed applications such as a shared whiteboard app and projects that access public domain scientific data sources and visualize them in various ways using online services such as Google Maps or charting. More information is available at https://netsblox.org.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {1379},
numpages = {1},
keywords = {block-based programming, computer networking, cybersecurity, distributed computing, internet of things},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/2676723.2677337,
author = {Garcia, Daniel D. and Ding, Wei and Cohen, Joseph and Ericson, Barbara and Gray, Jeff and Reed, Dale},
title = {One-Day Activities for K-12 Face-to-Face Outreach},
year = {2015},
isbn = {9781450329668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2676723.2677337},
doi = {10.1145/2676723.2677337},
abstract = {The recent successes of Computer Science Education Week and code.org's Hour of Code have meant that more K-12 students than ever are being given an authentic, engaging and eye-opening exposure to the wonders of computer science. There are resources aplenty to help high school and college faculty with outreach. These range from easy-to-learn, open-ended programming environments (Scratch, Alice, Snap!), to online coding challenges (code.org, Lite-bot), to non-computer activities with live performances (CS Unplugged, cs4fn), to having the entire outreach experience delivered "in a box", thanks to NCWIT.We wanted to bring educators together to share experiences with what they've done specifically with a one-day event, given these vast resources. Now that there are so many online coding experiences, it is enough to shuttle young students into a computer room, point their browser at one of these experiences, and answer questions as they come up? Is it important to include hands-on and hands-off (e.g., nifty demos, inspiring talks) components, and if so, in what order? What do different demographics find the most engaging? Is there any chance that we can do "damage", since these highlight-reel experiences might over-simplify how hard some of the problems are, and that not every important result has a flashy payoff? Do some of the early experiences leave students with the impression that computer science is only (say) apps, interactive multimedia programs or solving mazes? Finally, when it's over, what follow-up is appropriate? Participants on the panel will share best practices, common pitfalls, and advice.},
booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer Science Education},
pages = {520–521},
numpages = {2},
keywords = {computer science education, k-12, outreach},
location = {Kansas City, Missouri, USA},
series = {SIGCSE '15}
}

@inproceedings{10.1145/3408877.3439554,
author = {Palti, Amit and Rosenberg-Kima, Rinat},
title = {A Microlearning Online Framework for Teaching Programming Basics},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3439554},
doi = {10.1145/3408877.3439554},
abstract = {This lightning talk describes the authors' initiative to deliver effective and enjoyable online learning of programming-basics to middle-school and beyond students with no programming background. With the COVID-19 long-term implications that have driven school systems to online learning, students face new challenges as they struggle to maintain their focus during long online sessions, with some experiencing physical impacts (e.g., 'zoom fatigue'). Microlearning, a set of small (5-8 min of length) learning units targeting small learning objectives and usually delivered online, appears as a promising direction for educators to face these challenges. However, because of its fragmented nature, and difficulty to provide immediate 'value-based' feedback to the learner, it is hard to apply microlearning in complex domains such as Computer-Science and programming. We are looking to develop a task-driven online microlearning environment for learning programming-basics. The environment will include motivating microtasks as well as formative feedback per microlearning unit. In a pilot study, we included short recorded lectures and project-driven activities. For the learning Integrated Development Environment (IDE) we used the application Tinkercad, which enables building programmable electronic devices. This learning IDE enabled the students to exercise 'micro-projects' (involving software and simulated hardware) in which their code had to 'operate' electronic device. We believe this concept can inspire a pedagogical framework that utilizes Microlearning for teaching programming and we will welcome the audience's input.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {1369},
numpages = {1},
keywords = {microlearning, online-learning, programming-basics},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@article{10.1145/3617174,
author = {Huang, Qing and Yuan, Zhiqiang and Xing, Zhenchang and Peng, Xin and Xu, Xiwei and Lu, Qinghua},
title = {FQN Inference in Partial Code by Prompt-tuned Language Model of Code},
year = {2023},
issue_date = {February 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {33},
number = {2},
issn = {1049-331X},
url = {https://doi.org/10.1145/3617174},
doi = {10.1145/3617174},
abstract = {Partial code usually involves non-fully-qualified type names (non-FQNs) and undeclared receiving objects. Resolving the FQNs of these non-FQN types and undeclared receiving objects (referred to as type inference) is the prerequisite to effective search and reuse of partial code. Existing dictionary-lookup based methods build a symbolic knowledge base of API names and code contexts, which involve significant compilation overhead and are sensitive to unseen API names and code context variations. In this article, we propose using a prompt-tuned code masked language model (MLM) as a neural knowledge base for type inference, called POME, which is lightweight and has minimal requirements on code compilation. Unlike the existing symbol name and context matching for type inference, POME infers the FQNs syntax and usage knowledge encapsulated in prompt-tuned code MLM through a colze-style fill-in-blank strategy. POME is integrated as a plug-in into web and integrated development environments (IDE) to assist developers in inferring FQNs in the real world. We systematically evaluate POME on a large amount of source code from GitHub and Stack Overflow, and explore its generalization and hybrid capability. The results validate the effectiveness of the POME design and its applicability for partial code type inference, and they can be easily extended to different programming languages (PL). POME can also be used to generate a PL-hybrid type inference model for providing a one-for-all solution. As the first of its kind, our neural type inference method opens the door to many innovative ways of using partial code.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {dec},
articleno = {31},
numpages = {32},
keywords = {Type inference, fully qualified names, code masked language model, neural knowledge base}
}

@inproceedings{10.1145/3587135.3594557,
author = {Lordan, Francesc},
title = {Novel Data and Processing Approaches for the Development of Hyper-distributed Applications},
year = {2023},
isbn = {9798400701405},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3587135.3594557},
doi = {10.1145/3587135.3594557},
abstract = {Although data is mostly collected in IoT devices, 80% of its processing takes place in data centers and centralized computing facilities such as clouds. This paradigm strongly relies on the network infrastructure and incurs high communication latencies and significant energy consumption while under-utilizing the computing resources embedded in the IoT devices. Fostering architectures that empower end-users leveraging the collaborative capacities of IoT, edge and far-edge devices will reduce the dependence on the Cloud and the network overload and will enable IT systems with higher responsiveness, accuracy, and energy efficiency.Currently, IoT and Edge devices are treated as surrogates to the Cloud not only from an application processing point of view; the control of the application and the infrastructure are hosted in the Cloud too. This has a strong impact on the design of hyper-distributed applications since developers must be concerned about the deployment of the different components of the application instead of focusing on solving the problems specific to their core business and area of knowledge.Novel data management and processing frameworks oppose this resource-greedy, centralised management mechanisms and establish new control planes distributed across the Continuum integrating the -- compute, store, connectivity and cyber-physical -- capabilities of the devices with seamless management across providers, connectivity types and network zone. These next-generation computing and data technologies pave the way for the raise of new programming environments that ease the programming, deployment, and maintenance of hyper-distributed applications on the Continuum.},
booktitle = {Proceedings of the 20th ACM International Conference on Computing Frontiers},
pages = {263},
numpages = {1},
location = {Bologna, Italy},
series = {CF '23}
}

@inproceedings{10.1145/2025113.2025125,
author = {Jensen, Simon Holm and Madsen, Magnus and M\o{}ller, Anders},
title = {Modeling the HTML DOM and browser API in static analysis of JavaScript web applications},
year = {2011},
isbn = {9781450304436},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2025113.2025125},
doi = {10.1145/2025113.2025125},
abstract = {Developers of JavaScript web applications have little tool support for catching errors early in development. In comparison, an abundance of tools exist for statically typed languages, including sophisticated integrated development environments and specialized static analyses. Transferring such technologies to the domain of JavaScript web applications is challenging. In this paper, we discuss the challenges, which include the dynamic aspects of JavaScript and the complex interactions between JavaScript, HTML, and the browser. From this, we present the first static analysis that is capable of reasoning about the flow of control and data in modern JavaScript applications that interact with the HTML DOM and browser API.One application of such a static analysis is to detect type-related and dataflow-related programming errors. We report on experiments with a range of modern web applications, including Chrome Experiments and IE Test Drive applications, to measure the precision and performance of the technique. The experiments indicate that the analysis is able to show absence of errors related to missing object properties and to identify dead and unreachable code. By measuring the precision of the types inferred for object properties, the analysis is precise enough to show that most expressions have unique types. By also producing precise call graphs, the analysis additionally shows that most invocations in the programs are monomorphic. We furthermore study the usefulness of the analysis to detect spelling errors in the code. Despite the encouraging results, not all problems are solved and some of the experiments indicate a potential for improvement, which allows us to identify central remaining challenges and outline directions for future work.},
booktitle = {Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering},
pages = {59–69},
numpages = {11},
keywords = {program analysis, scripting languages},
location = {Szeged, Hungary},
series = {ESEC/FSE '11}
}

@inproceedings{10.1145/2501988.2502006,
author = {Liang, Hsiang-Sheng and Kuo, Kuan-Hung and Lee, Po-Wei and Chan, Yu-Chien and Lin, Yu-Chin and Chen, Mike Y.},
title = {SeeSS: seeing what i broke -- visualizing change impact of cascading style sheets (css)},
year = {2013},
isbn = {9781450322683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2501988.2502006},
doi = {10.1145/2501988.2502006},
abstract = {Cascading Style Sheet (CSS) is a fundamental web language for describing the presentation of web pages. CSS rules are often reused across multiple parts of a page and across multiple pages throughout a site to reduce repetition and to provide a consistent look and feel. When a CSS rule is modified, developers currently have to manually track and visually inspect all possible parts of the site that may be impacted by that change. We present SeeSS, a system that automatically tracks CSS change impact across a site and enables developers to easily visualize all of them. The impacted page fragments are sorted by severity and the differences before and after the change are highlighted using animation.},
booktitle = {Proceedings of the 26th Annual ACM Symposium on User Interface Software and Technology},
pages = {353–356},
numpages = {4},
keywords = {cascading style sheet, development tools, toolkits, web development, world wide web and hypermedia},
location = {St. Andrews, Scotland, United Kingdom},
series = {UIST '13}
}

@inproceedings{10.1145/2676723.2678293,
author = {Bau, David and Dawson, Matthew and Bau, Anthony},
title = {Using Pencil Code to Bridge the Gap between Visual and Text-Based Coding (Abstract Only)},
year = {2015},
isbn = {9781450329668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2676723.2678293},
doi = {10.1145/2676723.2678293},
abstract = {This workshop introduces a new educational programming environment Pencil Code, which helps bridge the learning gap between visual programming and text-based coding. The free open-source online tool allows students to work with programs using either blocks or Coffeescript or Javascript text code. Students can switch between visual and text modes at any time.The workshop will begin with a collaborative discussion of the opportunities, challenges, and differences presented when learning with block code and moving to text code. Then we will give a short presentation of how Pencil Code is used in classrooms, with some preliminary findings.The main part of the workshop is a hands-on activity where participants gain experience with Pencil Code. Participants will use the tool with lessons in a curriculum framework, for teaching functions and interactivity using both text code and block code. Finally, there will be a discussion of best practices for teaching students in the transition, and an opportunity to create your own lessons using Pencil Code or other tools.Attendees will come away with an understanding the issues faced by students transitioning to text code for the first time, and they will gain practical experience with teaching lessons with Pencil Code. Participants will receive curriculum material appropriate for middle-school and high-school classrooms. The tool is open-source and free to use at http://pencilcode.net/.},
booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer Science Education},
pages = {706},
numpages = {1},
keywords = {coffeescript, computer science education, curriculum, javascript, k-12, pencil code, visual programming},
location = {Kansas City, Missouri, USA},
series = {SIGCSE '15}
}

@inproceedings{10.1145/3597503.3623329,
author = {Fronchetti, Felipe and Ritschel, Nico and Schorr, Logan and Barfield, Chandler and Chang, Gabriella and Spinola, Rodrigo and Holmes, Reid and Shepherd, David C.},
title = {Block-based Programming for Two-Armed Robots: A Comparative Study},
year = {2024},
isbn = {9798400702174},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3597503.3623329},
doi = {10.1145/3597503.3623329},
abstract = {Programming industrial robots is difficult and expensive. Although recent work has made substantial progress in making it accessible to a wider range of users, it is often limited to simple programs and its usability remains untested in practice. In this article, we introduce Duplo, a block-based programming environment that allows end-users to program two-armed robots and solve tasks that require coordination. Duplo positions the program for each arm side-by-side, using the spatial relationship between blocks from each program to represent parallelism in a way that end-users can easily understand. This design was proposed by previous work, but not implemented or evaluated in a realistic programming setting. We performed a randomized experiment with 52 participants that evaluated Duplo on a complex programming task that contained several sub-tasks. We compared Duplo with RobotStudio Online YuMi, a commercial solution, and found that Duplo allowed participants to solve the same task faster and with greater success. By analyzing the information collected during our user study, we further identified factors that explain this performance difference, as well as remaining barriers, such as debugging issues and difficulties in interacting with the robot. This work represents another step towards allowing a wider audience of non-professionals to program, which might enable the broader deployment of robotics.},
booktitle = {Proceedings of the IEEE/ACM 46th International Conference on Software Engineering},
articleno = {43},
numpages = {12},
keywords = {two-armed, robots, end-users, block-based, programming},
location = {<conf-loc>, <city>Lisbon</city>, <country>Portugal</country>, </conf-loc>},
series = {ICSE '24}
}

@inproceedings{10.1145/3428029.3428059,
author = {Grover, Shuchi and Catet\'{e}, Veronica and Barnes, Tiffany and Hill, Marnie and Ledeczi, Akos and Broll, Brian},
title = {FIRST Principles to Design for Online, Synchronous High School CS Teacher Training and Curriculum Co-Design},
year = {2020},
isbn = {9781450389211},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3428029.3428059},
doi = {10.1145/3428029.3428059},
abstract = {The Covid-19 pandemic has offered new challenges and opportunities for teaching and research. It has forced constraints on in-person gathering of researchers, teachers, and students, and conversely, has also opened doors to creative instructional design. This paper describes a novel approach to designing an online, synchronous teacher professional development (PD) and curriculum co-design experience. It shares our work in bringing together high school teachers and researchers in four US states. The teachers participated in a 3-week summer PD on ideas of Distributed Computing and how to teach this advanced topic to high school students using NetsBlox, an extension of the Snap! block-based programming environment. The goal of the PD was to prepare teachers to engage in collaborative co-design of a 9-week curricular module for use in classrooms and schools. Between their own training and the co-design process, teachers co-taught a group of high school students enrolled in a remote summer internship at a university in North Carolina to pilot the learned units and leverage ideas from their teaching experience for subsequent curricular co-design. Formative and summative feedback from teachers suggest that this PD model was successful in meeting desired outcomes. Our generalizable FIRST principles—Flexibility, Innovativeness, Responsiveness (and Respect), Supports, and Teamwork (collaboration)—that helped make this unique PD successful, can help guide future CS teacher PD designs.},
booktitle = {Proceedings of the 20th Koli Calling International Conference on Computing Education Research},
articleno = {21},
numpages = {5},
location = {Koli, Finland},
series = {Koli Calling '20}
}

@inproceedings{10.1145/3545945.3569740,
author = {Anderson, Boyd and Henz, Martin and Low, Kok-Lim},
title = {Community-driven Course and Tool Development for CS1},
year = {2023},
isbn = {9781450394314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545945.3569740},
doi = {10.1145/3545945.3569740},
abstract = {In 2012, the authors took responsibility for a CS1 course with 45 students. This experience report reviews the subsequent 10-year learning process of engaging undergraduate students to facilitate small-group teaching and to design and develop an online learning environment to conduct what became our university's flagship CS1 course, currently enrolling 749 students. The course inherited an emphasis on small-group learning from its role model, MIT's 6.001. The size of the learning groups is limited to eight students per group, which currently requires a team of 105 student facilitators. The resulting need for student engagement and scaling motivated the development of a new web-based programming environment and assessment management system custom-made for the course. The system was conceived, designed, and implemented by students of the course, which provided the glue for building a sustainable and scalable community of learners, educators, and student software developers. This experience report describes the pedagogic approach, the course structure, and software system to accommodate the needs of this community. A qualitative and quantitative analysis of the impact of the course over the last four years provides evidence for its efficacy. We hope that this report serves as inspiration for similar large-scale pedagogic efforts that bring learners, educators, and student developers together to form sustainable and scalable learning communities.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1},
pages = {834–840},
numpages = {7},
keywords = {introductory programming, learning management system for programming, structure and interpretation of computer programs},
location = {<conf-loc>, <city>Toronto ON</city>, <country>Canada</country>, </conf-loc>},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3328778.3366838,
author = {Piwek, Paul and Savage, Simon},
title = {Challenges with Learning to Program and Problem Solve: An Analysis of Student Online Discussions},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3366838},
doi = {10.1145/3328778.3366838},
abstract = {Students who study problem solving and programming (in a language such as Python) at University level encounter a range of challenges, from low-level issues with code that won't compile to misconceptions about the threshold concepts and skills. The current study complements existing findings on errors, misconceptions, difficulties and challenges obtained from students after-the-fact through instruments such as questionnaires and interviews. In our study, we analysed the posts from students of a large cohort (textasciitilde1500) of first-year University distance learning students to an online 'Python help forum' - recording issues and discussions as the students encountered specific challenges. Posts were coded in terms of topics, and subsequently thematically grouped into Python-related, problem solving/generic programming related, and module specific. We discuss the set of topics and rank these in terms of the number of forum discussions in which they occur (as a proxy for their prevalence). The top challenges we identified concern student understanding and use of a mix of programming environments (in particular, Python IDLE for offline programming and CodeRunner for programming quizzes) and code fragment problems. Apart from these, Python-specific topics include, among others, collections, functions, error messages, iteration, outputting results, indentation, variables and imports. We believe that the results provide a good insight into the challenges that students encounter em as they learn to program. In future work we intend to study the discussions in further detail in terms of theories of conceptual change.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {494–499},
numpages = {6},
keywords = {challenges, misconceptions, online student discussions, problem solving, programming, python, threshold concepts and skills},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/3324884.3416554,
author = {Stahlbauer, Andreas and Fr\"{a}drich, Christoph and Fraser, Gordon},
title = {Verified from scratch: program analysis for learners' programs},
year = {2021},
isbn = {9781450367684},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3324884.3416554},
doi = {10.1145/3324884.3416554},
abstract = {Block-based programming languages like Scratch support learners by providing high-level constructs that hide details and by preventing syntactically incorrect programs. Questions nevertheless frequently arise: Is this program satisfying the given task? Why is my program not working? To support learners and educators, automated program analysis is needed for answering such questions. While adapting existing analyses to process blocks instead of textual statements is straightforward, the domain of programs controlled by block-based languages like Scratch is very different from traditional programs: In Scratch multiple actors, represented as highly concurrent programs, interact on a graphical stage, controlled by user inputs, and while the block-based program statements look playful, they hide complex mathematical operations that determine visual aspects and movement. Analyzing such programs is further hampered by the absence of clearly defined semantics, often resulting from ad-hoc decisions made by the implementers of the programming environment. To enable program analysis, we define the semantics of Scratch using an intermediate language. Based on this intermediate language, we implement the Bastet program analysis framework for Scratch programs, using concepts from abstract interpretation and software model checking. Like Scratch, Bastet is based on Web technologies, written in TypeScript, and can be executed using NodeJS or even directly in a browser. Evaluation on 279 programs written by children suggests that Bastet offers a practical solution for analysis of Scratch programs, thus enabling applications such as automated hint generation, automated evaluation of learner progress, or automated grading.},
booktitle = {Proceedings of the 35th IEEE/ACM International Conference on Automated Software Engineering},
pages = {150–162},
numpages = {13},
keywords = {education, scratch, software model checking},
location = {Virtual Event, Australia},
series = {ASE '20}
}

@inproceedings{10.1145/2491055.2491074,
author = {Lincke, Jens and Hirschfeld, Robert},
title = {User-evolvable tools in the web},
year = {2013},
isbn = {9781450318525},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491055.2491074},
doi = {10.1145/2491055.2491074},
abstract = {Self-supporting development environments like Smalltalk and Emacs can be used to directly evolve themselves, making their tools very malleable and adaptable. In Web-based software development environments users can collaborate in creating software without having to install the environment locally. Bringing these two together and making Web-based environments self-supportive is challenging, since users have to take care of to breaking the system, since there might be others using it also. Environments aimed at end-users usually provide a scripting level above the base system. Instead of providing users with a fixed set of tools, we propose to make the tools user-evolvable by building them as scriptable objects in a shared user editable repository. In our system, the Lively Kernel, the core system is developed using modules and classes, and on top of it users create active content by directly manipulating and scripting objects. By leveraging the scripting level for the development of tools themselves, we allow users to adapt their tools in a self-supporting way, without the need to invasively change the system's core. In this paper we show how development tools in Lively are collaboratively evolved. Tools can be directly explored, adapted, and published in a shared manner while they are being used.},
booktitle = {Proceedings of the 9th International Symposium on Open Collaboration},
articleno = {19},
numpages = {8},
location = {Hong Kong, China},
series = {WikiSym '13}
}

@article{10.5555/2037151.2037164,
author = {Gestwicki, Paul and Ahmad, Khuloud},
title = {App inventor for Android with studio-based learning},
year = {2011},
issue_date = {October 2011},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {27},
number = {1},
issn = {1937-4771},
abstract = {App Inventor for Android allows people with little or no programming experience to create smart phone applications on the Android platform. This is accomplished by using drag-and-drop UI design and blocks-oriented visual programming. We offered an experimental section during the closed beta testing of App Inventor for Android in which we used Studio-Based Learning to foster positive learning experiences. Studio-Based Learning is a pedagogical approach in which students build their own representations of their knowledge and share these, formally and informally, with both experts and peers. Our students worked in teams on several projects, with the sixteen students creating over thirty Android applications while learning fundamentals of Computer Science.In this paper, we provide the background and inspiration for this work, including a review of literature on Studio-Based Learning and a comparison of App Inventor for Android to other modern visual programming environments. An overview of our semester goals and course design are provided. From our experience and based on the literature, we conclude that App Inventor for Android and Studio-Based Learning make for a powerful combination to introduce non-CS majors to concepts of Computer Science-not just programming, but also ideas that tend not to be covered in conventional CS1 courses such as human-computer interaction, incremental and iterative design processes, collaboration, evaluation, and quality assurance. This paper complements the eponymous Web site at https://sites.google.com/site/appinventorsbl.},
journal = {J. Comput. Sci. Coll.},
month = {oct},
pages = {55–63},
numpages = {9}
}

@inproceedings{10.1145/3304221.3319757,
author = {Goldstein, Seth Copen and Zhang, Hongyi and Sakr, Majd and An, Haokang and Dashti, Cameron},
title = {Understanding How Work Habits influence Student Performance},
year = {2019},
isbn = {9781450368957},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3304221.3319757},
doi = {10.1145/3304221.3319757},
abstract = {Understanding the relationship between a student's broader work habits and their performance, particularly on open-ended programming assignments, is key towards being able to guide students towards success. In spite of this, most evidence of student behavior and its relationship to performance is anecdotal. The advent of large-scale courses which use online tools for delivering course content, monitoring the programming environment, and providing automatic feedback as well as grading now makes it possible to dive into the data and develop data-driven methods for understanding how a student's approach to an assignment---from their first exposure to the description of the problem to their final submission of their completed assignment---influences their final performance.This study is a first look at a subset of the data collected from a project-based, online, upper-level course on cloud computing. We examine three raw data streams which include information on the time students spend on reading the project write-up, the timing, grades, and number of submissions they make, and the cloud resources used (both time and cost) in solving the assignment. Using these and several synthetic metrics we were surprised to find that there are few behaviors that are highly correlated to student success. Instead, we find that there is a strong correlation between students who continually apply consistent behaviors over the course of the semester to good final performance in the course. From this we use LASSO to create a predictor (adjusted R2=.48) of final performance based on two kinds of consistency measures across 15 metrics.},
booktitle = {Proceedings of the 2019 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {154–160},
numpages = {7},
keywords = {educational data mining, learning analytics, online education, project-based learning, student performance, work habits},
location = {Aberdeen, Scotland Uk},
series = {ITiCSE '19}
}

@inproceedings{10.1145/2254556.2254623,
author = {Dessart, Charles-Eric and Motti, Vivian Genaro and Vanderdonckt, Jean},
title = {Animated transitions between user interface views},
year = {2012},
isbn = {9781450312875},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2254556.2254623},
doi = {10.1145/2254556.2254623},
abstract = {User interface development life cycle often involve several different views of the user interface over time either at the same level of abstraction or at different levels of abstraction. The relationship between these different views is often supported by tiling coordinated windows containing these related views simultaneously, thus leaving the developer with the responsibility to effectively and efficiently link the corresponding elements of these different views. This paper attempts to overcome the shortcomings posed by the coordinated visualization of multiple views by providing UsiView, a user interface rendering engine in which one single window ensures an animated transition between these different user interface views dynamically an internal view, an external view, and a conceptual view. Examples include the following cases: an authoring environment ensures an animated transition between an internal view (e.g., HTML5) and its external view (e. g., a web page), an Integrated Development Environment ensures an animated transition between its conceptual view and its external view; a model-driven engineering environment ensures an animated transition between the conceptual view at different levels of abstraction, e.g., from task to abstract user interface to concrete user interface until final user interface. The paper discusses the potential advantages of using animated transitions between user interface views during the development life cycle.},
booktitle = {Proceedings of the International Working Conference on Advanced Visual Interfaces},
pages = {341–348},
numpages = {8},
keywords = {animated transition, animation, model evolution animation, user interface development method, user interface view},
location = {Capri Island, Italy},
series = {AVI '12}
}

@inproceedings{10.5555/2819366.2819375,
author = {Biegel, Benjamin and Baltes, Sebastian and Scarpellini, Ivan and Diehl, Stephan},
title = {CodeBasket: making developers' mental model visible and explorable},
year = {2015},
publisher = {IEEE Press},
abstract = {One of software developers' most important activities is exploring the broader context of a certain programming task, which strongly requires navigating source code and working out a mental model of the collected information. Without tool support, creating and maintaining this mental model leads to significant cognitive load because developers have to handle both relating relevant source code entities to their mental model as well as remembering already explored search paths. Furthermore, the opposite direction, that is, recalling relevant facts out of the mental model, and subsequently, seeking corresponding entities within the source code, demands similar cognitive efforts. In this paper, we introduce CodeBasket, an approach for making developers' mental model visible and explorable. As for that, CodeBasket helps developers keeping their mental model persistent by providing a two-dimensional canvas on which they can freely arrange visual representations of source code entities, named eggs. Since those eggs are linked to the underlying source code, eventually, they can be used for navigating directly to related source code entities. We implemented a first prototype as a touch-enabled web application that is connected to a conventional integrated development environment In order to get early feedback on our approach, we used CodeBasket within a formative study.},
booktitle = {Proceedings of the Second International Workshop on Context for Software Development},
pages = {20–24},
numpages = {5},
location = {Florence, Italy},
series = {CSD '15}
}

@inproceedings{10.1145/2795122.2795126,
author = {Connors, Dan and Dunn, Kyle and Bueter, Ryan},
title = {PyCompArch: python-based modules for exploring computer architecture concepts},
year = {2015},
isbn = {9781450337175},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2795122.2795126},
doi = {10.1145/2795122.2795126},
abstract = {As computer architecture integrates multiple concepts such as microarchitecture, design, the hardware-software interface, compilers, and operating systems, there is an always increasing need to develop new methods for learning and exploring the field. Parallelism in computer systems is a key focus in computer architecture and some core parallel concepts include Amdahl's law, efficiency, and overhead. While there are a number of ways to examine these topics in traditional lectures and assignments, a unique way is to leverage Python-based programming environments that allow students to independently explore concepts and their governing parameters.This paper presents the highlights of PyCompArch Python module developed using the IPython Notebook environment to help the study of concepts in computer architecture. Python is a widely used general-purpose, high-level programming language, but traditionally the language does not play a leading role in the education of computer architecture. IPython Notebooks allow developers to interactively run Python code cells and to construct Python codes that execute on remote servers that eliminate any system requirements of the individual. In this way, the environment supports web-based remote "in the cloud" code development that can be modified during lectures or in homework assignments. The PyCompArch module supports a number of ways to help individuals learn concepts of parallelism related to computer architecture as well as explore experiments in computer performance and control. For example, PyCompArch supports the evaluation of performance of real-world benchmarks such as Open Computer Vision (OpenCV) and dynamic frequency scaling (DFS) in Raspberry Pi systems. Overall, the PyCompArch supports student learning and development of experiments in computer architecture.},
booktitle = {Proceedings of the Workshop on Computer Architecture Education},
articleno = {4},
numpages = {6},
location = {Portland, Oregon},
series = {WCAE '15}
}

@inproceedings{10.1145/1297846.1297920,
author = {Tanuan, Meyer},
title = {Using Sybase WorkSpace to build service oriented architecture (SOA) applications quickly},
year = {2007},
isbn = {9781595938657},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1297846.1297920},
doi = {10.1145/1297846.1297920},
abstract = {In the past years, there is significant growth in the number of new technologies for Java developers. More recently, Web Services and Service Oriented Architectures (SOA) are becoming popular. Projects are now more complex and are becoming more challenging to complete on time. Sybase WorkSpace is a service-oriented unified design and development environment that includes the power of enterprise modeling with comprehensive tooling capabilities. This demonstration shows how enterprise modeling, database development, Web application development, services-oriented development and orchestration, and mobile development all come together to build SOA applications quickly. It demonstrates how Sybase WorkSpace integrates the most important design and development tools in an easy-to-use open-source framework.},
booktitle = {Companion to the 22nd ACM SIGPLAN Conference on Object-Oriented Programming Systems and Applications Companion},
pages = {848–849},
numpages = {2},
keywords = {Sybase WorkSpace, database development, eclipse, enterprise modeling, mobile development, service oriented architectures (SOA), services-oriented development and orchestration, visual drag and drop development, web application development, web services},
location = {Montreal, Quebec, Canada},
series = {OOPSLA '07}
}

@inproceedings{10.1145/3328778.3372608,
author = {Rahman, Md Mahmudur and Sharker, Monir and Paudel, Roshan},
title = {Impact of Infusing Interactive and Collaborative Learning in Teaching Introductory Programming in a Dynamic Class},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3372608},
doi = {10.1145/3328778.3372608},
abstract = {In this era of smart devices, new technologies, gadgets, apps, and numerous systems and services available over online, teaching an introductory programming course by traditional lecture method faces challenges to draw student's attention; especially in their freshman year. In this work, we discuss our experience in teaching an introductory CS course by infusing both interactive and collaborative learning in pedagogy so that students can learn using interactive platforms, tools, technologies, systems, and services as available to them and collaboration within and among groups. For interactive learning, students used an interactive programming environment (e.g. repl.it classroom) as well as online eBooks. We designed several in-class exercises, assignments, small lab-based projects with example codes and expected outputs, and unit tests by using built-in unit tests library. We also, in the middle of semester, introduced collaborative learning through teamwork on well-defined projects during the learning time and submitted at the end. The collaborations include use of basic task management tools and multi-player tool of repl.it that the students can critic, supplement, improve peer works and learn. To evaluate the impact of this infusion, a pre- and post-survey were conducted on student cohort in two different semesters. The initial evaluation of the survey results and performances (final project and final grades) show evidence to conclude that the proposed pedagogical approach increased student motivation and engagement and facilitated learning to entry-level computer science students.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {1315},
numpages = {1},
keywords = {collaborative learning, ebook, interactive learning, interactive programming, introductory programming, visual learning},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@article{10.1145/230562.230570,
author = {Hertzum, Morten and Fr\o{}kj\ae{}r, Erik},
title = {Browsing and querying in online documentation: a study of user interfaces and the interaction process},
year = {1996},
issue_date = {June 1996},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {2},
issn = {1073-0516},
url = {https://doi.org/10.1145/230562.230570},
doi = {10.1145/230562.230570},
abstract = {A user interface study concerning the usage effectiveness of selected retrieval modes was conducted using an experimental text retrieval system, TeSS, giving access to online documentation of certain programming tools. Four modes of TeSS were compared: (1) browsing, (2) conventional boolean retrieval, (3) boolean retrieval based on Venn diagrams, and (4) these three combined. Further, the modes of TeSS were compared to the use of printed manuals. The subjects observed were 87 computing new to them. In the experiment the use of printed manuals is faster and provides answers of higher quality than any of the electronic modes. Therefore, claims about the effectiveness of computer-based text retrieval have to by vary in situations where printed manuals are manageable to the user. Among the modes of TeSS, browsing is the fastest and the one causing the fewest operational errors. On the same two variables, time and operational errors, the Venn diagram mode performs better than conventional boolean retrieval. The combined mode scores worst on the objective performance measures; nonetheless nearly all subject prefer this mode. Concerning the interaction process, the subjects tend to manage the complexities of the information retrieval tasks by issuing series of simple commands and exploiting the interactive capabilities of TeSS. To characterize the dynamics of the interaction process two concepts are introduced; threads and sequences of tactics. Threads in a query sequence describes the continuity during retrieval. Sequences of tactics concern the combined mode and describe how different retrieval modes succeed each other as the retrieval process evolves.},
journal = {ACM Trans. Comput.-Hum. Interact.},
month = {jun},
pages = {136–161},
numpages = {26},
keywords = {documentation, interaction process, online manuals, usage effectiveness}
}

@inproceedings{10.1145/3408877.3432554,
author = {Branco, Andr\'{e} and Dutra, Claudia and Zumpichiatti, D\'{e}bora and Campos, Francisco Augusto and SantClair, Gabriel and Mello, Jhulian and Moreira, Jo\~{a}o Victor and Godinho, Julia and Marotti, Julia and Gomide, Janaina},
title = {Programming for Children and Teenagers in Brazil: A 5-year Experience of an Outreach Project},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3432554},
doi = {10.1145/3408877.3432554},
abstract = {There has been a worldwide surge in programming education initiatives for children and teenagers. In Brazil, this trend faces some challenges, namely inadequate infrastructure of most schools, notably public ones, that lack access to computers and tablets, and basic education curricular requirements not contemplating computer science concepts. This article reports on the five-year experience of an outreach project from a public university in Brazil. The project aims to promote computer science education and to teach programming to children and teenagers. Undergraduate engineering students who participate in the project as members engage in activities such as planning the courses and their schedules, creating partnerships with local schools and other educational projects, giving lectures, producing scientific research and educational materials, as well as promoting the project on social media. The courses use free online programming tools, Python, MIT App Inventor, and Arduino to cover fundamental concepts of programming and computational thinking. They vary approaches and tools according to the age range and available technological resources of the target audience. The use of unplugged activities means to assist in learning and to circumvent computer access problems. Furthermore, they serve for introducing basic programming concepts in classes and motivating students with dynamic activities. Over its five-year existence, the project has achieved its purpose, by reaching a total of 2639 students through 45 workshops and 94 courses. It has provided courses in eleven public schools, created two booklets and one app as free educational material, along with presented papers and posters in scientific conferences.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {411–417},
numpages = {7},
keywords = {computational thinking, computer science education, didactic strategies, k-12, programming},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/1027933.1028001,
author = {Wilson, Dale-Marie},
title = {Multimodal programming for dyslexic students},
year = {2004},
isbn = {1581139950},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1027933.1028001},
doi = {10.1145/1027933.1028001},
abstract = {As the Web's role in society increases, so to does the need for its universality. Access to the Web by all, including people with disabilities has become a requirement of Web sites as can be seen by the passing of the Americans with Disabilities Act in 1990. This universality has spilled over into other disciplines, e.g. screen readers for Web browsing; however Computer Science has not yet made significant efforts to do the same. The main focus of this research is to provide this universal access in the development of virtual learning environments, more specifically in computer programming. To facilitate this access, research into the features of dyslexia is required: what it is, how it affects a person's thought process and what changes are necessary to facilitate these effects. Also, a complete understanding of the thought process in the creation of a complete computer program is necessary.Dyslexia has been diagnosed as affecting the left side of the brain. The left side of the brain processes information in a linear, sequential manner. It is also responsible for processing symbols, which include letters, words and mathematical notations. Thus dyslexics have problems with the code generation, analysis and implementation steps in the creation of a computer program. Potential solutions to this problem include a multimodal programming environment.This multimodal environment will be interactive, providing multimodal assistance to the user as they generate, analyze and implement code. This assistance will include the ability to add functions and loops via voice and receiving a spoken description of a code segment that has been selected by the cursor.},
booktitle = {Proceedings of the 6th International Conference on Multimodal Interfaces},
pages = {343},
numpages = {1},
location = {State College, PA, USA},
series = {ICMI '04}
}

@inproceedings{10.1145/3481312.3481318,
author = {Strong, Glenn and North, Ben},
title = {Pytch — an environment for bridging block and text programming styles (Work in progress)},
year = {2021},
isbn = {9781450385718},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3481312.3481318},
doi = {10.1145/3481312.3481318},
abstract = {Block-based programming languages, and Scratch in particular, are widely used to introduce young learners to programming. As these students progress through their education, they want or need to transition to using text-based systems and encounter a number of challenges as they do so. Issues with syntax, text editing, and memorisation are all significant, but the change of programming paradigm is also a challenge. This paper discusses the design and development of a system to help students make the transition to text-based programming environments more easily. Sprites, animations and sound form the basis of most Scratch programs and these engaging features become unavailable at the same time as students are facing transition difficulties related to text editing and program structure. From programs designed in an actor-based event-driven system with easy concurrency, students have to move to procedural or class-based programs where multimedia features are accessed quite differently and programs are designed around explicit event loops. In this paper we introduce a new programming system, Pytch, which embodies “Scratch-Oriented programming” in Python. Using a web-based environment that requires no local setup, students can build Python programs using the familiar sprites and concurrent event-driven model learned in Scratch. The system offers the programming model inspired by Scratch through a Python library and a runtime augmented with a form of managed concurrency. The motivation and related work are discussed, and the system is presented in its current form. The next stage will be to evaluate the effectiveness of the system with users.},
booktitle = {Proceedings of the 16th Workshop in Primary and Secondary Computing Education},
articleno = {22},
numpages = {4},
keywords = {Education, Games, Programming languages, Python, Scratch},
location = {Virtual Event, Germany},
series = {WiPSCE '21}
}

@inproceedings{10.1145/3458817.3476169,
author = {Li, Ang and Fang, Bo and Granade, Christopher and Prawiroatmodjo, Guen and Heim, Bettina and Roetteler, Martin and Krishnamoorthy, Sriram},
title = {SV-sim: scalable PGAS-based state vector simulation of quantum circuits},
year = {2021},
isbn = {9781450384421},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3458817.3476169},
doi = {10.1145/3458817.3476169},
abstract = {High-performance quantum circuit simulation in a classic HPC is still imperative in the NISQ era. Observing that the major obstacle of scalable state-vector quantum simulation arises from the massively fine-grained irregular data-exchange with remote nodes, in this paper we present SV-Sim to apply the PGAS-based communication models (i.e., direct peer access for intra-node CPUs/GPUs and SHMEM for inter-node CPU/GPU clusters) for efficient generalpurpose quantum circuit simulation. Through an orchestrated design based on device functional pointer, SV-Sim is able to abstract various quantum gates across multiple heterogeneous backends, including IBM/Intel/AMD CPUs, NVIDIA/AMD GPUs, and Intel Xeon Phi, in a unified framework, but still asserting outstanding performance and tractable interface to higher-level quantum programming environments, such as IBM Qiskit, Microsoft Q# and Google Cirq. Circumventing the obstacle from the lack of polymorphism in GPUs and leveraging the device-initiated one-sided communication, SV-Sim can process circuit that are dynamically generated in Python using a single GPU/CPU kernel without the need of expensive JIT or runtime parsing, significantly simplifying the programming complexity and improving performance for QC simulation. This is especially appealing for the variational quantum algorithms given the circuits are synthesized online per iteration. Evaluations on the latest NVIDIA DGX-A100, V100-DGX-2, ALCF Theta, OLCF Spock, and OLCF Summit HPCs show that SV-Sim can deliver scalable performance on various state-of-the-art HPC platforms, offering a useful tool for quantum algorithm validation and verification. SV-Sim has been released at http://github.com/pnnl/sv-sim. A version specially tweaked for Q#/QDK is also provided.},
booktitle = {Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis},
articleno = {97},
numpages = {14},
keywords = {GPU, NVSHMEM, OpenSHMEM, quantum simulation},
location = {<conf-loc>, <city>St. Louis</city>, <state>Missouri</state>, </conf-loc>},
series = {SC '21}
}

@inproceedings{10.1145/2684200.2684280,
author = {Dang, Hai H. and Nguyen, Vu and Do, Kha N. and Tran, Thu D.},
title = {EduCo: An Integrated Social Environment for Teaching and Learning Software Engineering Courses},
year = {2014},
isbn = {9781450330015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2684200.2684280},
doi = {10.1145/2684200.2684280},
abstract = {There have been studies suggesting that collaboration and cooperation can deliver higher performance than competition or individual work. The Web does not only provide ubiquitous access to resources and computation power but also can be an open structure for better and continuous collaboration. In this study, we introduce our vision and construction of an integrated social environment called EduCo to assist teaching and learning software engineering courses. EduCo is a Web environment for instructors to teach and for students to learn and practice designing, programming, and managing software in software engineering courses. It is also a social network platform that helps stimulate participation, interaction, sharing, awareness, accountability, and teamwork. This paper describes the initial construction of the system with many core capabilities realized. The paper also presents our case studies from applying the system to several programming language classes. The results from the case studies suggest that the system has the potential to encourage students' participation and satisfaction. In addition, this paper presents our vision for future enhancements of the system with core capabilities such as feeds, dashboards, notifications, tracking, and reporting.},
booktitle = {Proceedings of the 16th International Conference on Information Integration and Web-Based Applications &amp; Services},
pages = {17–26},
numpages = {10},
keywords = {Collaborative development environment, Project management, Social network, Software design tool, Web},
location = {Hanoi, Viet Nam},
series = {iiWAS '14}
}

@inproceedings{10.1145/3054977.3054987,
author = {Kim, Ji Eun and Fan, Xiangmin and Mosse, Daniel},
title = {Empowering End Users for Social Internet of Things},
year = {2017},
isbn = {9781450349666},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3054977.3054987},
doi = {10.1145/3054977.3054987},
abstract = {We present Socialite, a novel end user programming tool for the Social Internet of Things (SIoT). SIoT is a new paradigm where IoT merges with social networks, allowing people and connected devices as well as the devices themselves to interact within a social network framework. Through an online survey with 60 potential users, we identified eight desired features for the SIoT, which were then clustered into four rule categories that can be programmed by end users and/or imposed by systems. The rules created by end users are used to reason about both devices and people in their social relationships to support automated decisions during runtime. Socialite uses ontology/semantic models for basic/low-level knowledge representation (e.g., device and user) to encapsulate the heterogeneity in devices from various manufacturers, and uses production rules (trigger-action programming) for high-level reasoning. With the ontology model, our reasoning supports both device type automation (e.g., current temperature from a thermostat) and capability-based automation (e.g., current temperature from any devices with the same capability). Furthermore, the Socialite rules leverage social relationships and device capabilities to facilitate collaboration by efficiently sharing configuration and information among users/friends and even with devices from people unknown to a user. In a 24-participant user study (12 with no programming experience), we found that Socialite was easy to learn and use, for both programmers and non-programmers. Participants were able to create automation based rules, social relationship involved rules, as well rules they created during the study.},
booktitle = {Proceedings of the Second International Conference on Internet-of-Things Design and Implementation},
pages = {71–82},
numpages = {12},
keywords = {End User Programming, Semantic Reasoning Framework, Social Internet of Things},
location = {Pittsburgh, PA, USA},
series = {IoTDI '17}
}

@inproceedings{10.1145/3597503.3639089,
author = {Bradley, Nick C. and Fritz, Thomas and Holmes, Reid},
title = {Supporting Web-Based API Searches in the IDE Using Signatures},
year = {2024},
isbn = {9798400702174},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3597503.3639089},
doi = {10.1145/3597503.3639089},
abstract = {Developers frequently use the web to locate API examples that help them solve their programming tasks. While sites like Stack Overflow (SO) contain API examples embedded within their textual descriptions, developers cannot access this API knowledge directly. Instead they need to search for and browse results to select relevant SO posts and then read through individual posts to figure out which answers contain information about the APIs that are relevant to their task. This paper introduces an approach, called Scout, that automatically analyzes search results to extract API signature information. These signatures are used to group and rank examples and allow for a unique API-based presentation that reduces the amount of information the developer needs to consider when looking for API information on the web. This succinct representation enables Scout to be integrated fully within an IDE panel so that developers can search and view API examples without losing context on their development task. Scout also uses this integration to automatically augment queries with contextual information that tailors the developer's queries, and ranks the results according to the developer's needs. In an experiment with 40 developers, we found that Scout reduces the number of queries developers need to perform by 19% and allows them to solve almost half their tasks directly from the API-based representation, reducing the number of complete SO posts viewed by approximately 64%.},
booktitle = {Proceedings of the IEEE/ACM 46th International Conference on Software Engineering},
articleno = {186},
numpages = {12},
keywords = {API signatures, code search, controlled experiment},
location = {<conf-loc>, <city>Lisbon</city>, <country>Portugal</country>, </conf-loc>},
series = {ICSE '24}
}

@inproceedings{10.1145/3417990.3419502,
author = {Louren\c{c}o, Hugo and Tavares, Joana and Eug\'{e}nio, Rui and Louren\c{c}o, Miguel and Sim\~{o}es, Tiago},
title = {LUV is not the answer: continuous delivery of a model driven development platform},
year = {2020},
isbn = {9781450381352},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3417990.3419502},
doi = {10.1145/3417990.3419502},
abstract = {The OutSystems Platform is a visual model-driven development and delivery platform that allows developers to create enterprise-grade cross platform web and mobile applications.The platform consists of several inter-dependent components, most notably Service Studio, the Platform Server, and LifeTime. Service Studio is an integrated development environment used to create applications that are then compiled by the Platform Server. LifeTime is used to stage applications between different environments (e.g., development, testing, production).Our meta-model is versioned using a version number that we call Last Upgrade Version (LUV). Service Studio, the Platform Server, and the models they create/process are associated with a particular LUV. As a general rule, a platform component is only able to process models with the same LUV as the component itself.This approach is not very flexible: a change to the meta-model requires releasing a new set of platform components that our customers then need to install. Although there's low resistance to installing new versions of Service Studio, the same is not true for the Platform Server. Thus, for all practical purposes LUV changes are tied to releases of major versions of the OutSystems Platform.In this paper we share the techniques that allowed us to transition to a Continuous Delivery process in which our meta-model can evolve freely with no impact on our installed base.},
booktitle = {Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
articleno = {52},
numpages = {10},
keywords = {continuous delivery, meta-model evolution, model driven development, model evolution},
location = {Virtual Event, Canada},
series = {MODELS '20}
}

@inproceedings{10.1145/1060745.1060837,
author = {Parsia, Bijan and Sirin, Evren and Kalyanpur, Aditya},
title = {Debugging OWL ontologies},
year = {2005},
isbn = {1595930469},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1060745.1060837},
doi = {10.1145/1060745.1060837},
abstract = {As an increasingly large number of OWL ontologies become available on the Semantic Web and the descriptions in the ontologies become more complicated, finding the cause of errors becomes an extremely hard task even for experts. Existing ontology development environments provide some limited support, in conjunction with a reasoner, for detecting and diagnosing errors in OWL ontologies. Typically these are restricted to the mere detection of, for example, unsatisfiable concepts. We have integrated a number of simple debugging cues generated from our description logic reasoner, Pellet, in our hypertextual ontology development environment, Swoop. These cues, in conjunction with extensive undo/redo and Annotea based collaboration support in Swoop, significantly improve the OWL debugging experience, and point the way to more general improvements in the presentation of an ontology to new users.},
booktitle = {Proceedings of the 14th International Conference on World Wide Web},
pages = {633–640},
numpages = {8},
keywords = {OWL, explanation, ontology engineering, semantic Web},
location = {Chiba, Japan},
series = {WWW '05}
}

@article{10.1145/280495.280502,
author = {Battaglia, David and Burke, Austin and Beidler, John},
title = {An ADA reuse support system for Windows 95/NT},
year = {1998},
issue_date = {Jan./Feb. 1998},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {XVIII},
number = {1},
issn = {1094-3641},
url = {https://doi.org/10.1145/280495.280502},
doi = {10.1145/280495.280502},
abstract = {This paper describes a software resource that is being developed as part of the graduation requirement for the Master in Software Engineering degree at the University of Scranton. This project evolved from a series of experiments that were performed in undergraduate and graduate courses at the University. A basic editor was developed as part of an undergraduate course in rapid prototyping. Several students used that project as the basis for undergraduate Senior Projects. All undergraduates are required to complete a project as a degree requirement. This basic editor was handed over to a graduate course in Software Generation and Maintenance and used as the starting point for the construction of various software project management features. The system was constructed to support Ada source code development. However, the system could be readily modified to support source code management in other languages, notably C++. This paper describes the construction of resources that encourage the use of reusable software. Subsequent sections describe the overall framework of the system and selected details that carry out features that make reuse attractive. The system is called ReUSE (the Reuse University of Scranton Environment).ReUSE is an Ada programming environment which facilitates and promotes code reuse by individual developers or teams of developers. It provides centralized storage of project files, a package browser, automatic function and procedure call creation, a compiler interface, interactive error processing, multiple simultaneous editors, standard windows tools (menus, toolbars, etc.), and other features to help the developer write and reuse Ada code efficiently.ReUSE was developed in Microsoft Visual Basic 4.0 (32-bit) for the Windows 95 / NT operating systems.},
journal = {Ada Lett.},
month = {feb},
pages = {78–85},
numpages = {8}
}

@article{10.1145/3517236,
author = {Kraemer, Christopher and Guo, Amy and Ahmed, Saad and Hester, Josiah},
title = {Battery-free MakeCode: Accessible Programming for Intermittent Computing},
year = {2022},
issue_date = {March 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {6},
number = {1},
url = {https://doi.org/10.1145/3517236},
doi = {10.1145/3517236},
abstract = {Hands-on computing has emerged as an exciting and accessible way to learn about computing and engineering in the physical world for students and makers of all ages. Current end-to-end approaches like Microsoft MakeCode require tethered or battery-powered devices like a micro:bit, limiting usefulness and applicability, as well as abdicating responsibility for teaching sustainable practices. Unfortunately, energy harvesting computing devices are usually only programmable by experts and require significant supporting toolchains and knowledge across multiple engineering and computing disciplines to work effectively. This paper bridges the gap between sustainable computing efforts, the maker movement, and novice-focused programming environments with MakeCode-Iceberg, a set of compiler extensions to Microsoft's open-source MakeCode project. The extensions automatically and invisibly transform user code in any language supported (Blocks, JavaScript, Python)into a version that can safely and correctly execute across intermittent power failures caused by unreliable energy harvesting. Determining where, when, and what to save in a checkpoint on limited energy, time, and hardware budget is challenging. We leverage the unique intermediate representation of the MakeCode source-to-source compiler to design and deploy various checkpointing techniques. Our approach allows us to provide, for the first time, a fully web-based and toolchain-free environment to program intermittent computing devices, making battery-free operation accessible to all. We demonstrate new use cases with multiple energy harvesters, peripherals, and application domains: including a Smart Terrarium, Step Counter, and Combination Lock. MakeCode-Iceberg provides sustainable hands-on computing opportunities to a broad audience of makers and learners, democratizing access to energy harvesting and battery-free embedded systems.},
journal = {Proc. ACM Interact. Mob. Wearable Ubiquitous Technol.},
month = {mar},
articleno = {18},
numpages = {35},
keywords = {Intermittent Computing, Energy Harvesting, Block based programming, Battery-free}
}

@inproceedings{10.1145/3551349.3556939,
author = {Feldmeier, Patric and Fraser, Gordon},
title = {Neuroevolution-Based Generation of Tests and Oracles for Games},
year = {2023},
isbn = {9781450394758},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3551349.3556939},
doi = {10.1145/3551349.3556939},
abstract = {Game-like programs have become increasingly popular in many software engineering domains such as mobile apps, web applications, or programming education. However, creating tests for programs that have the purpose of challenging human players is a daunting task for automatic test generators. Even if test generation succeeds in finding a relevant sequence of events to exercise a program, the randomized nature of games means that it may neither be possible to reproduce the exact program behavior underlying this sequence, nor to create test assertions checking if observed randomized game behavior is correct. To overcome these problems, we propose Neatest, a novel test generator based on the NeuroEvolution of Augmenting Topologies (NEAT) algorithm. Neatest systematically explores a program’s statements, and creates neural networks that operate the program in order to reliably reach each statement—that is, Neatest learns to play the game in a way to reliably cover different parts of the code. As the networks learn the actual game behavior, they can also serve as test oracles by evaluating how surprising the observed behavior of a program under test is compared to a supposedly correct version of the program. We evaluate this approach in the context of Scratch, an educational programming environment. Our empirical study on 25 non-trivial Scratch games demonstrates that our approach can successfully train neural networks that are not only far more resilient to random influences than traditional test suites consisting of static input sequences, but are also highly effective with an average mutation score of more than 65%.},
booktitle = {Proceedings of the 37th IEEE/ACM International Conference on Automated Software Engineering},
articleno = {72},
numpages = {13},
keywords = {Scratch, Neuroevolution, Game Testing, Automated Testing},
location = {<conf-loc>, <city>Rochester</city>, <state>MI</state>, <country>USA</country>, </conf-loc>},
series = {ASE '22}
}

@inproceedings{10.1145/3626253.3635426,
author = {Angeli, Lorenzo and De Menego, Luca and Marchese, Maurizio},
title = {Embedding Executable Code in Slides for Introductory Programming: The Case of Interactive Code Playgrounds},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3635426},
doi = {10.1145/3626253.3635426},
abstract = {Setting up development environments may be a complex hurdle for students who approach coding for the first time, and standardising environments among students may be an even greater challenge for teachers. Researchers and teachers tried to mitigate this issue with several solutions, all with different trade-offs, which may exclude students with limited internet access, low-powered devices, or lower computer proficiency.  In this demo, we propose Interactive Code Playgrounds (ICPs), web pages displayed as slides that include a front-end component enabling code execution and code output display. This architecture simplifies the installation procedure, as students need only a web browser, and gives ICPs the chance to be a more long-lasting technology, as they have minimal external dependencies. As web pages, ICPs can be distributed as links or shared as single files, re-creating the user experience of PDF slide decks. Additional benefits of ICPs include a uniform development environment improved accessibility compared to PDFs due to HTML's underlying tree structure, the inclusion of semantic tags, and text captions.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1923},
numpages = {1},
keywords = {accessibility, front-end web technologies, introductory programming, slideshows},
location = {<conf-loc>, <city>Portland</city>, <state>OR</state>, <country>USA</country>, </conf-loc>},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/3606305.3606330,
author = {Davitadze, Zaza and Kakhiani, Gregory and Datunishvili, Konstantine and Meskhidze, Zurab},
title = {Multi-level access to information systems by QR codes for wearable devices: Article was prepared under scientific grant project of Batumi Shota Rustaveli State University},
year = {2023},
isbn = {9798400700477},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3606305.3606330},
doi = {10.1145/3606305.3606330},
abstract = {The scientific project "Multi-level access of information systems by QR codes for wearable devices" was carried out within the framework of the scientific grant project of Batumi State University. The idea is practically implemented and discussed in the example of a higher educational institution (university). Various areas of business and state organizations where successful practical implementation of the obtained results is possible are also mentioned.Based on scientific research, an original software product was created, by means of which only one static QR code placed on different objects (in our research mode, BSU auditorium) allows people with different statuses to access different data, in our case, employees and students. At the same time, the QR code assigned to the room remains unchanged even if the processes in the room change, which excludes frequent changes in the graphic image (QR code) placed on the room(object). The mentioned changes will be implemented only in electronic form on the web page where this information is posted and the user will receive only the updated information. For another example, the method can be used to digitize cities, including tourist facilities, restaurants, cafes, banks, etc., to provide different information about users of different access levels (loyalty programs, etc.) through a single QR code. The field of the practical application of the system can be quite wide in terms of its simplicity and technological practicality. Research methodology is based on modern achievements of computer technology, Internet technologies, and programming tools. These technologies are widely used in the research process and in one of the results of the research - the software product.},
booktitle = {Proceedings of the 24th International Conference on Computer Systems and Technologies},
pages = {70–73},
numpages = {4},
location = {<conf-loc>, <city>Ruse</city>, <country>Bulgaria</country>, </conf-loc>},
series = {CompSysTech '23}
}

@article{10.5555/2535418.2535449,
author = {Purewal, Semmy},
title = {Introductory programming concepts with Processing.js},
year = {2013},
issue_date = {December 2013},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {29},
number = {2},
issn = {1937-4771},
abstract = {Khan Academy recently started teaching introductory Computer Science topics with the Processing.js language and an interactive, web-based code editor. At UNC Asheville, we have been using a similar pedagogical approach for over a year. Specifically, we have integrated Processing.js into our introductory course for non-majors by building a web-based editor that makes it easy for students to edit, save and share their Processing.js sketches. This workshop offers a hands-on introduction to Processing.js and our editor. Participants will also be given an overview of the programming module in Creative Computing, our recently re-imagined CS0 course. Curious individuals with a laptop, a modern web-browser and some basic programming experience are welcome.},
journal = {J. Comput. Sci. Coll.},
month = {dec},
pages = {199–202},
numpages = {4}
}

@inproceedings{10.1145/1882362.1882435,
author = {Storey, Margaret-Anne and Treude, Christoph and van Deursen, Arie and Cheng, Li-Te},
title = {The impact of social media on software engineering practices and tools},
year = {2010},
isbn = {9781450304276},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1882362.1882435},
doi = {10.1145/1882362.1882435},
abstract = {Today's generation of software developers frequently make use of social media, either as an adjunct or integrated into a wide range of tools ranging from code editors and issue trackers, to IDEs and web-based portals. The role of social media usage in software engineering is not well understood, and yet the use of these mechanisms influences software development practices. In this position paper, we advocate for research that strives to understand the benefits, risks and limitations of using social media in software development at the team, project and community levels. Guided by the implications of current tools and social media features, we propose a set of pertinent research questions around community involvement, project coordination and management, as well as individual software development activities. Answers to these questions will guide future software engineering tool innovations and software development team practices.},
booktitle = {Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research},
pages = {359–364},
numpages = {6},
keywords = {web 2.0, software engineering tools, social media},
location = {Santa Fe, New Mexico, USA},
series = {FoSER '10}
}

@inproceedings{10.5555/2667062.2667073,
author = {Herrmann, Christoph and Kurpick, Thomas and Rumpe, Bernhard},
title = {SSELab: a plug-in-based framework for web-based project portals},
year = {2012},
isbn = {9781467318204},
publisher = {IEEE Press},
abstract = {Tools are an essential part of every software engineering project. But the number of tools that are used in all phases of the software development life-cycle and their complexity is growing continually. Consequently, the setup and maintenance of current tool chains and development environments requires much effort and consumes a lot of time. One approach to counter this, is to employ web-based systems for development tasks, because centralized systems simplify the administration and the deployment of new features. But desktop IDEs play an important role in software development projects today, and will not be replaced entirely by web-based environments in the near future. Therefore, supporting a mixture of hosted tools and tools integrated into desktop IDEs is a sensible approach.In this paper, we present the SSELab, a framework for web-based project portals that attempts to migrate more software development tools from desktop to server environments, but still allows their integration into modern desktop IDEs. It supports the deployment of tools as hosted services using plug-in systems on the server-side. Additionally, it provides access to these tools by a set of clients that can be used in different contexts, either from the command line, from within IDEs such as Eclipse, or from web pages. In the paper, we discuss the architecture and the extensibility of the SSELab framework. Furthermore, we share our experiences with creating an instance of the framework and integrating various tools for our own software development projects.},
booktitle = {Proceedings of the Second International Workshop on Developing Tools as Plug-Ins},
pages = {61–66},
numpages = {6},
location = {Zurich, Switzerland},
series = {TOPI '12}
}

@inproceedings{10.1145/2445196.2445500,
author = {Purewal, Semmy},
title = {Creative computing: introductory programming concepts with processing.js (abstract only)},
year = {2013},
isbn = {9781450318686},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2445196.2445500},
doi = {10.1145/2445196.2445500},
abstract = {Khan Academy recently announced that they will soon be teaching introductory Computer Science topics with the Processing.js language and an interactive, web-based code editor. At UNC Asheville, we have been using a similar pedagogical approach for over a year. Specifically, we have integrated Processing.js into our introductory course for non-majors by building an open-source, web-based editor which makes it easy for students to edit, save and share their Processing.js sketches. This workshop offers a hands-on introduction to Processing.js and our editor. Participants will also be given an overview of the programming module in Creative Computing, our recently re-imagined CS0 course. Curious individuals with a laptop, a modern web-browser and some basic programming experience are welcome.},
booktitle = {Proceeding of the 44th ACM Technical Symposium on Computer Science Education},
pages = {757},
numpages = {1},
keywords = {processing.js, processing, cs0, computer science education},
location = {Denver, Colorado, USA},
series = {SIGCSE '13}
}

@article{10.1145/3427596,
author = {Kim, Han Sung and Kim, Soohwan and Na, Wooyoul and Lee, Woon Jee},
title = {Extending Computational Thinking into Information and Communication Technology Literacy Measurement: Gender and Grade Issues},
year = {2021},
issue_date = {March 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {1},
url = {https://doi.org/10.1145/3427596},
doi = {10.1145/3427596},
abstract = {As Information and Communication Technology (ICT) literacy education has recently shifted to fostering computing thinking ability as well as ICT use, many countries are conducting research on national curriculum and evaluation. In this study, we measured Korean students’ ICT literacy levels by using the national measurement tool that assesses abilities of the IT (Information Technology) area and the CT (Computational Thinking) area. A research team revised an existing ICT literacy assessment tool for the IT test and developed a new CT test environment in which students could perform actual coding through a web-based programming tool such as Scratch. Additionally, after assessing ICT literacy levels, differences in ICT literacy levels by gender and grade were analyzed to provide evidence for national education policies. Approximately 23,000 elementary and middle school students participated in the 2018 national assessment of ICT literacy, accounting for 1% of the national population of students. The findings demonstrated that female students had higher literacy levels in most sub-factors of IT and CT areas. Additionally, in the areas of strengths and weaknesses, the ratio of below-basic achievement among male students was at least two times greater than that of female students. Nonetheless, male students scored higher on CT automation, a coding item that involved problem solving using Scratch. Looking at the difference according to grade level, the level improved as the school year increased in elementary school, but there was no difference in middle school. When analyzing the detailed elements of middle school students, the automation factor of seventh grade students was found to be higher than eighth and ninth grade students. Based on these results, this study discussed some implications for ICT and computing education in elementary and middle schools.},
journal = {ACM Trans. Comput. Educ.},
month = {jan},
articleno = {5},
numpages = {25},
keywords = {secondary education, elementary education, computational thinking, ICT literacy, 21st century abilities}
}

@proceedings{10.1145/2960310,
title = {ICER '16: Proceedings of the 2016 ACM Conference on International Computing Education Research},
year = {2016},
isbn = {9781450344494},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {We warmly welcome you to the twelfth annual International Computing Education Research conference (ICER 2016), sponsored by the ACM Special Interest Group on Computer Science Education. This year ICER will be held in Melbourne, Australia, and will be located in the Monash University Law Chambers in the city centre of Melbourne.The ICER conference has been steadily growing. This year there were a record number of research paper submissions with a total of 102 papers submitted and 26 papers accepted for an acceptance rate of 25%. The papers were double-blind reviewed by an international program committee. The review process was overseen by a meta-review team consisting of three conference co-chairs (Sheard, Dorn and Tenenberg) and the two associate chairs. Our paper authors represent eight different countries: Australia, Canada, Finland, Germany, India, Netherlands, United Kingdom and USA.Associated with ICER 2016 is a Doctoral Consortium with 18 doctoral students who are working on computing education research projects and a Work in Progress workshop where 9 participants will receive in-depth feedback on their proposals for computing education research projects.The ICER program is organized around nine paper presentation sessions with a variety of computing education topics such as understanding how students code, identifying students at risk, assessment benchmarking, and programming tools and IDEs. We have continued ICER's well established single-track format with time allocated for audience discussion to each paper presentation. In addition, there will be 4 lightning talks with posters, 4 lightning talks, and 6 posters, with additional poster presentations from the Doctoral Consortium participants.A highlight of the conference is our keynote speaker Associate Professor Richard Buckland from the University of New South Wales. Richard is an award winning computing educator with many innovations in online and face-to-face teaching. His keynote address Affective and Cognitive -- Designing Educational Experiences that Transform, will explore teaching and learning in the affective domain.},
location = {Melbourne, VIC, Australia}
}

@inproceedings{10.1145/3236024.3264589,
author = {Yang, Junwen and Yan, Cong and Subramaniam, Pranav and Lu, Shan and Cheung, Alvin},
title = {PowerStation: automatically detecting and fixing inefficiencies of database-backed web applications in IDE},
year = {2018},
isbn = {9781450355735},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236024.3264589},
doi = {10.1145/3236024.3264589},
abstract = {Modern web applications are built using a myriad of software components, and each of them exposes different programming models (e.g., application logic expressed in an imperative language, database queries expressed using declarative SQL). To improve programmer productivity, Object Relational Mapping (ORM) frameworks have been developed to allow developers build web applications in an object-oriented manner. Despite such frameworks, prior work has found that developers still struggle in developing performant ORM-based web applications. This paper presents PowerStation, a RubyMine IDE plugin for optimizing web applications developed using the Ruby on Rails ORM. Using automated static analysis, PowerStation detects ORM-related inefficiency problems and suggests fixes to developers. Our evaluation using 12 real-world applications shows that PowerStation can automatically detects 1221 performance issues across them. A tutorial on using PowerStation can be found at https://youtu.be/rAV8CGuSj6k.},
booktitle = {Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {884–887},
numpages = {4},
keywords = {performance anti-patterns, database-backed applications, RubyMine Plugin, Object-Relational Mapping frameworks},
location = {Lake Buena Vista, FL, USA},
series = {ESEC/FSE 2018}
}

@inproceedings{10.1145/1352678.1352684,
author = {R\"{o}thlisberger, David and Greevy, Orla and Nierstrasz, Oscar},
title = {Feature driven browsing},
year = {2007},
isbn = {9781605580845},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1352678.1352684},
doi = {10.1145/1352678.1352684},
abstract = {Development environments typically present the software engineer with a structural perspective of an object-oriented system in terms of packages, classes and methods. From a structural perspective it is difficult to gain an understanding of how source entities participate in a system's features at runtime, especially when using dynamic languages such as Smalltalk. In this paper we evaluate the usefulness of offering an alternative, complementary feature-centric perspective of a software system when performing maintenance activities. We present a feature-centric environment combining interactive visual representations of features with a source code browser displaying only the classes and methods participating in a feature under investigation. To validate the usefulness of our feature-centric view, we conducted a controlled empirical experiment where we measured and compared the performance of subjects when correcting two defects in an unfamiliar software system with a traditional development environment and with our feature-centric environment. We evaluate both quantitative and qualitative data to draw conclusions about the usefulness of a feature-centric perspective to support program comprehension during maintenance activities.},
booktitle = {Proceedings of the 2007 International Conference on Dynamic Languages: In Conjunction with the 15th International Smalltalk Joint Conference 2007},
pages = {79–100},
numpages = {22},
location = {Lugano, Switzerland},
series = {ICDL '07}
}

@inproceedings{10.1145/1562877.1563009,
author = {Qian, Kai and Liu, Jigang and Tao, Lixin},
title = {Teach real-time embedded system online with real hands-on labs},
year = {2009},
isbn = {9781605583815},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1562877.1563009},
doi = {10.1145/1562877.1563009},
abstract = {In recent years, embedded systems are becoming increasingly important due to their wide applications in every aspect of our society. By the year 2010, it is forecasted that 90% of the overall program code developed will be for embedded computing systems. The rapid growth of embedded systems results in a shortage of professionals for embedded software development. Despite the high need of embedded system professionals, embedded system is currently not well represented in academic programs. In offering such courses many schools face the challenges of the lack of suitable and affordable labs and scarce dedicated staff and faculty. Suitable embedded software design textbooks are also in demand.We are developing an interdisciplinary online junior level course Embedded Systems Analysis and Design with a companion textbook and labware to meet the challenge. We know that embedded system design and development course is a project based learning course which students must have hands-on lab practice to gain the experience of hardware and software co-design and development. How to offer such a course online without a campus lab? How to make this online course as effective as an on-campus course? How to make the lab affordable to the students? How to make the labs a realistic hands-on lab instead of simulation labs as many online courses are providing? In this paper we report our experience in developing such a hands-on lab based online course.We select the C8051F005DK development kit from the Silicon Laboratories, Inc. for our realistic hands-on lab equipment. It is a 25 MIPS 8051 microcontroller with 32K programmable FLASH. Its Integrated Development Environment (IDE) is a complete, standalone software program that provides students with the Keil software 8051 development tools that provides students with the excellent hands-on opportunity to work on the real-world embedded system projects instead of implementation by simulation only.The uniqueness of the course model is its portable tiny in-box real-world equipment labware which can be conducted anywhere without constraints and its portable labs with infused state-of-arts technology to inspire creativity and life-long learning.Students can also gain the engineering experience and hardware and software co-design, and code development with real MCU.A textbook "Embedded System Software Development" contracted with Springer publisher will be published in 2010. The book includes all the lab implementations that are very flexible and convenient for students and instructors. All teaching and learning materials including review questions, exercises, and all labs on this microcontroller kit, and instructor supplemental materials will be available online.The "learning by doing" pedagogy will promote students' life-lime long learning skills that students not only practice pre-designed hands-on labs, but also have opportunity to design and invent their own small smart embedded devices. Students will get benefits from the experience in software engineering life cycle of software requirements analysis, modeling, design, development, testing, and integrating the well packed products with the supported hardware devices. On the other hand, students can also get electronic engineering discipline experience such as engineering computation and schematic engineering.},
booktitle = {Proceedings of the 14th Annual ACM SIGCSE Conference on Innovation and Technology in Computer Science Education},
pages = {367},
numpages = {1},
keywords = {real time, portable, engineering, embedded, MCU},
location = {Paris, France},
series = {ITiCSE '09}
}

@inproceedings{10.1145/3587423.3595543,
author = {Kenwright, Benjamin},
title = {Web Programming Using the WebGPU API},
year = {2023},
isbn = {9798400701450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3587423.3595543},
doi = {10.1145/3587423.3595543},
abstract = {Today's web-based programming environments has become more multifaceted for accomplishing tasks that go beyond 'browsing' web-pages. The process of developing efficient web-based programs for such a wide array of applications poses a number of challenges to the programming community. Applications possess a number of workload behaviors, ranging from control intensive (e.g., searching, sorting, and parsing) to data intensive (e.g., image processing, simulation and modeling, and data mining). Web-based applications can also be characterized as compute intensive (e.g., iterative methods, numerical methods, and financial modeling), where the overall throughput of the web application is heavily dependent on the computational efficiency of the underlying hardware. Of course, no single architecture is best for running all classes of workloads, and most applications possess a mix of the workload characteristics. For instance, control-intensive applications tend to run faster on the CPU, whereas data-intensive applications tend to run fast on massively parallel architectures (like the GPU), where the same operation is applied to multiple data items concurrently. To extend and support these various workload classes so that browser-based applications wouldn't be hindered, a new generation of API needed to be developed (open the door for developers so that they can access the power of new hardware/technologies). One example of this, is the WebGPU API which exposes the capabilities of GPU hardware for the Web. The course is intended to help you get started with the WebGPU API while understanding both the HOW and WHY behind it works, so you can create your own solutions. This course is designed to teach you the new WebGPU API for graphics and compute techniques without any prior knowledge. All you need is some JavaScript experience and preferably an understanding of basic trigonometry. Whether you're new to graphics and compute development or an old pro, everyone has to start somewhere. Generally, that means starting with the basics which is the focus of this course. You'll learn through simple, easy-to-learn hands-on exercises that help you master the subject. It does this by using multiple task-based activities and discussions which complement and build upon one another.},
booktitle = {ACM SIGGRAPH 2023 Courses},
articleno = {21},
numpages = {184},
location = {<conf-loc>, <city>Los Angeles</city>, <state>California</state>, </conf-loc>},
series = {SIGGRAPH '23}
}

@inproceedings{10.1145/2682571.2797082,
author = {Denoue, Laurent and Carter, Scott and Cooper, Matthew},
title = {Searching Live Meeting Documents "Show me the Action"},
year = {2015},
isbn = {9781450333078},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2682571.2797082},
doi = {10.1145/2682571.2797082},
abstract = {Live meeting documents require different techniques for effectively retrieving important pieces of information. During live meetings, people share web sites, edit presentation slides, and share code editors. A simple approach is to index with Optical Character Recognition (OCR) the video frames, or key-frames, being shared and let user retrieve them. Here we show that a more useful approach is to look at what actions users take inside the live document streams. Based on observations of real meetings, we focus on two important signals: text editing and mouse cursor motion. We describe the detection of text and cursor motion, their implementation in our WebRTC (Web Real-Time Communication)-based system, and how users are better able to search live documents during a meeting based on these extracted actions.},
booktitle = {Proceedings of the 2015 ACM Symposium on Document Engineering},
pages = {195–198},
numpages = {4},
keywords = {video conferencing, screen-sharing, real-time search, ocr, live document search, indexing},
location = {Lausanne, Switzerland},
series = {DocEng '15}
}

@inproceedings{10.1145/2749246.2749248,
author = {Malony, Allen D.},
title = {Through the Looking-Glass: From Performance Observation to Dynamic Adaptation},
year = {2015},
isbn = {9781450335508},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2749246.2749248},
doi = {10.1145/2749246.2749248},
abstract = {Since the beginning of ``high-performance'' parallel computing, observing and analyzing performance for purposes of finding bottlenecks and identifying opportunities for improvement has been at the heart of delivering the performance potential of next-generation scalable systems. Interestingly, it is the ever-changing parallel computing landscape that is the main driver of requirements for parallel performance technology and the improvements necessary beyond the current state-of-the-art. Indeed, the development and application of our TAU Performance System over many years largely follows an evolutionary path of addressing measurement and analysis problems in new parallel machines and programming environments. However, the outlook to future parallel systems with high degrees of concurrency, heterogeneous components, dynamic runtime environments, asynchronous execution, and power constraints suggests a new perspective will be needed on the role of performance observation and analysis in respect to tool technology integration and performance optimization methods. The reliance on post-mortem analysis of application-level ("1st person") performance measurements is prohibitive for exascale-class machines because of the performance data volume, the primitive basis for performance data attribution, and the fundamental problem of performance variation that will exist. Instead, it will be important to provide introspection support across the exascale software stack to understand how system ("3rd person") resources are used during execution. Furthermore, the opportunity to couple a global performance introspection capability (a "performance backplane") with online performance decision analytics inspires the concept of an autonomic performance system that can feed back policy-based decisions to guide the computation to better states of execution. The talk will explore these issues by giving a brief retrospective on performance tool evolution, setting the stage for current research projects where a new performance perspective is being pursued. It will also speculate on what might be included in next-generation parallel systems hardware, specifically to make the exascale machines more performance-aware and dynamically-adaptive.},
booktitle = {Proceedings of the 24th International Symposium on High-Performance Parallel and Distributed Computing},
pages = {1},
numpages = {1},
keywords = {runtime environments, optimization methods, high-performance computing},
location = {Portland, Oregon, USA},
series = {HPDC '15}
}

@inproceedings{10.1145/2676723.2691869,
author = {Freeman, Jason and Magerko, Brian and Verdin, Regis},
title = {EarSketch: A Web-based Environment for Teaching Introductory Computer Science Through Music Remixing},
year = {2015},
isbn = {9781450329668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2676723.2691869},
doi = {10.1145/2676723.2691869},
abstract = {EarSketch (http://earsketch.gatech.edu) is a free integrated curriculum, software toolset, audio loop library, and social sharing site that teaches computing principles through digital music composition and remixing. EarSketch students write code in either Python or JavaScript to make music, with a focus on popular genres such as hip hop and dubstep, while learning computing concepts such as variables, iteration, conditionals, strings, lists, functions, and recursion. Attendees to this demonstration session will be introduced to a new web-based version of EarSketch that integrates a code editor, digital audio workstation (DAW) music production interface, curriculum browser, and sharing service into a single integrated browser-based learning environment. This demo is of interest to secondary and early post secondary CS educators and to computing education researchers interested in STEAM and/or broadening participation. No prior musical knowledge or experience is expected and no prior programming experience with Python or JavaScript is required.},
booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer Science Education},
pages = {5},
numpages = {1},
keywords = {steam, remixing, music production, music composition, education, computer science principles, broadening participation},
location = {Kansas City, Missouri, USA},
series = {SIGCSE '15}
}

@inproceedings{10.1145/2461121.2461138,
author = {Abou-Zahra, Shadi and Brewer, Judy and Henry, Shawn Lawton},
title = {Essential components of mobile web accessibility},
year = {2013},
isbn = {9781450318440},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2461121.2461138},
doi = {10.1145/2461121.2461138},
abstract = {The Web Accessibility Initiative (WAI) of the World Wide Web Consortium (W3C) develops strategies, guidelines, and resources to make the Web accessible to people with disabilities. This includes ensuring that core web technologies such as HTML and CSS provide support for accessibility; developing complementary web specifications to support accessibility, such as WAI-ARIA and IndieUI; and maintaining a set of internationally recognized guidelines that define accessibility criteria for web authoring tools such as content management systems and code editors, for user agents such as web browsers and media players, and for web content including text, images, scripts, audio-visual media, and more. This communication paper explores the impact on these essential components of web accessibility as the Web rapidly evolves into an increasingly mobile and ubiquitous medium, and highlights opportunities for research and development to help make the Web universally accessible to all users.},
booktitle = {Proceedings of the 10th International Cross-Disciplinary Conference on Web Accessibility},
articleno = {5},
numpages = {4},
keywords = {web accessibility, universal design, ubiquitous and cloud computing, standards and guidelines, people with disabilities, mobile accessibility, design for all},
location = {Rio de Janeiro, Brazil},
series = {W4A '13}
}

@inproceedings{10.1145/2846656.2846659,
author = {Felgentreff, Tim and Lincke, Jens and Hirschfeld, Robert and Thamsen, Lauritz},
title = {Lively groups: shared behavior in a world of objects without classes or prototypes},
year = {2015},
isbn = {9781450339056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2846656.2846659},
doi = {10.1145/2846656.2846659},
abstract = {Development environments which aim to provide short feedback loops to developers must strike a balance between immediacy and the ability to abstract and reuse behavioral modules. The Lively Kernel, a self-supporting, browser-based environment for explorative development supports standard object-oriented programming with classes or prototypes, but also a more immediate, object-centric approach for modifying and programming visible objects directly. This allows users to quickly create graphical prototypes with concrete objects. However, when developing with the object-centric approach, sharing behavior between similar objects becomes cumbersome. Developers must choose to either abstract behavior into classes, scatter code across collaborating objects, or to manually copy code between multiple objects. That is, they must choose between less concrete development, reduced maintainability, or code duplication. In this paper, we propose Lively Groups, an extension to the object-centric development tools of Lively to work on multiple concrete objects. In our approach, developers may dynamically group live objects that share behavior using tags. They can then modify and program such groups as if they were single objects. Our approach scales the Lively Kernel’s explorative development approach from one to many objects, while preserving the maintainability of abstractions and the immediacy of concrete objects.},
booktitle = {Proceedings of the Workshop on Future Programming},
pages = {15–22},
numpages = {8},
keywords = {Web Applications, Lively Kernel, Interactive Systems, Explorative Development},
location = {Pittsburgh, PA, USA},
series = {FPW 2015}
}

@proceedings{10.1145/1851476,
title = {HPDC '10: Proceedings of the 19th ACM International Symposium on High Performance Distributed Computing},
year = {2010},
isbn = {9781605589428},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {On behalf of the organizing committee, we welcome you to the 19th ACM International Symposium on High Performance Distributed Computing (HPDC-19) and to Chicago, Illinois, a city rich in culture, history, technology, and third largest city in the United States. The HPDC Symposium is the premier venue for presenting the latest research on the design, implementation, evaluation, and use of parallel and distributed systems for high performance and high end computing. We are looking forward to lively discussions about HPDC emerging technologies, applications and their challenges. In the last two decades, we have experienced rapid advances in networks and computing, Internet technologies and services, parallel and distributed programming tools that have lead to the developed and deployment of many HPDC systems and services include Grid Computing, Cloud Computing, Pervasive Computing, just to name a few. These advances and technologies bring with them many challenges and exciting opportunities that can be addressed by the HPDC research community.This year's technical program presents high-quality papers in HPDC Workflows, Cloud Computing and Tools, Data Centers and Virtualization, Scheduling, Storage and I/O, Communications, and Applications. We would like to thank Peter Dinda (Program Chair), Northwestern University, for his outstanding and tireless efforts in assembling an excellent program committee, managing the reviews and selection of the papers, and even addressing many other issues related to sponsorship, proceedings, finance, and more to make sure we have an excellent HPDC program for this year. We owe a great debt to Peter, whose dedications and commitments have produced another strong technical program that we all will enjoy and appreciate when we meet in Chicago.Continuing the HPDC tradition, this year's symposium features eight workshops: Emerging Computation Methods for the Life Sciences, LSAP: Large-Scale System and Application Performance, MDQCS: Managing Data Quality for Collaborative Science, ScienceCloud: Workshop on Scientific Cloud Computing, CLADE: Challenges of Large Applications in Distributed Environments, DIDC: Data Intensive Distributed Computing, MAPREDUCE: MapReduce and its applications, and VTDC: Virtualization Technologies for Distributed Computing. We would like to acknowledge the excellent job done by Douglas Thain (Workshop Chair), University of Notre Dame, in putting together a strong workshop program.},
location = {Chicago, Illinois}
}

@inproceedings{10.1145/2635868.2661672,
author = {Baltes, Sebastian and Schmitz, Peter and Diehl, Stephan},
title = {Linking sketches and diagrams to source code artifacts},
year = {2014},
isbn = {9781450330565},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2635868.2661672},
doi = {10.1145/2635868.2661672},
abstract = {Recent studies have shown that sketches and diagrams play an important role in the daily work of software developers. If these visual artifacts are archived, they are often detached from the source code they document, because there is no ad- equate tool support to assist developers in capturing, archiving, and retrieving sketches related to certain source code artifacts. This paper presents SketchLink, a tool that aims at increasing the value of sketches and diagrams created during software development by supporting developers in these tasks. Our prototype implementation provides a web application that employs the camera of smartphones and tablets to capture analog sketches, but can also be used on desktop computers to upload, for instance, computer-generated diagrams. We also implemented a plugin for a Java IDE that embeds the links in Javadoc comments and visualizes them in situ in the source code editor as graphical icons.},
booktitle = {Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
pages = {743–746},
numpages = {4},
keywords = {Source Code Artifacts, Sketches, Documentation, Diagrams},
location = {Hong Kong, China},
series = {FSE 2014}
}

@inproceedings{10.1145/3474349.3480209,
author = {Jiang, Ellen and Toh, Edwin and Molina, Alejandra and Donsbach, Aaron and Cai, Carrie J and Terry, Michael},
title = {GenLine and GenForm: Two Tools for Interacting with Generative Language Models in a Code Editor},
year = {2021},
isbn = {9781450386555},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3474349.3480209},
doi = {10.1145/3474349.3480209},
abstract = {A large, generative language model’s output can be influenced through well-designed prompts, or text-based inputs that establish textual patterns that the model replicates in its output [6]. These capabilities create new opportunities for novel interactions with large, generative language models. We present a macro system with two tools that allow users to invoke language model prompts as macros in a code editor. GenLine allows users to execute macros inline as they write code in the editor (e.g., “Make an OK button” produces the equivalent HTML). GenForm provides a form-like interface where the user provides input that is then transformed into multiple pieces of output at the same time (e.g., a description of web code is transformed into HTML, CSS, and JavaScript).},
booktitle = {Adjunct Proceedings of the 34th Annual ACM Symposium on User Interface Software and Technology},
pages = {145–147},
numpages = {3},
keywords = {prompt programming, macros, generative models, code synthesis},
location = {Virtual Event, USA},
series = {UIST '21 Adjunct}
}

@inproceedings{10.1145/2668930.2688818,
author = {Lehrig, Sebastian and Becker, Steffen},
title = {The CloudScale Method for Software Scalability, Elasticity, and Efficiency Engineering: a Tutorial},
year = {2015},
isbn = {9781450332484},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2668930.2688818},
doi = {10.1145/2668930.2688818},
abstract = {In cloud computing, software engineers design systems for virtually unlimited resources that cloud providers account on a pay-per-use basis. Elasticity management systems provision these resource autonomously to deal with changing workloads. Such workloads call for new objective metrics allowing engineers to quantify quality properties like scalability, elasticity, and efficiency. However, software engineers currently lack engineering methods that aid them in engineering their software regarding such properties. Therefore, the CloudScale project developed tools for such engineering tasks. These tools cover reverse engineering of architectural models from source code, editors for manual design/adaption of such models, as well as tools for the analysis of modeled and operating software regarding scalability, elasticity, and efficiency. All tools are interconnected via ScaleDL, a common architectural language, and the CloudScale Method that leads through the engineering process. In this tutorial, we execute our method step-by-step such that every tool and ScaleDL are briefly introduced.},
booktitle = {Proceedings of the 6th ACM/SPEC International Conference on Performance Engineering},
pages = {329–331},
numpages = {3},
keywords = {tutorial, software analysis, scalability, metrics, method, engineering, elasticity, efficiency, cloudscale, cloud computing},
location = {Austin, Texas, USA},
series = {ICPE '15}
}

@inproceedings{10.1145/1852786.1852818,
author = {Calefato, Fabio and Gendarmi, Domenico and Lanubile, Filippo},
title = {Investigating the use of tags in collaborative development environments: a replicated study},
year = {2010},
isbn = {9781450300391},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1852786.1852818},
doi = {10.1145/1852786.1852818},
abstract = {Modern collaborative development environments have recently introduced tagging as a new feature in order to let developers annotate software artifacts with free keywords. Since tagging has the potential to have an impact on task management in software development processes, there is a need to understand how developers use tagging in projects supported by collaborative development environments and how developers' behavior differ from collaborative tagging in the Social Web.We have conducted an independent replication of an empirical study, which first investigated how tags are used in a large software project. In our replication, we have analyzed two further projects coordinated through two different collaborative development environments, Jazz and Trac. The findings from our replicated study extend the initial contribution of the original study by (1) showing evidence of differences in tag usage between the two collaborative development environments, and (2) providing a clear understanding that tags used in such environments significantly differs from those used in traditional collaborative tagging systems.},
booktitle = {Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement},
articleno = {24},
numpages = {9},
keywords = {tagging, replication, empirical study, collaborative development environments},
location = {Bolzano-Bozen, Italy},
series = {ESEM '10}
}

@inproceedings{10.1145/62548.62627,
author = {Rogers, Jack},
title = {Supercomputer applications: helping users cope with tough programming problems},
year = {1988},
isbn = {0897912861},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/62548.62627},
doi = {10.1145/62548.62627},
abstract = {Nobody ever said that Supercomputing was easy.At SDSC our mission is to provide not only supercomputer cycles, but also supercomputer support. The level of support, of course, covers a broad range. Some users just need to learn the basics: how to get their data transferred to SDSC, how to get directory listings, how to access in-house application software, etc. Other users are involved in their own code installation and/or development and need to learn about the programming environment. Most of these users can cull enough information from online documentation and brief conversations with the consultants to get their codes up and running.For others, however, life is not so easy. These people are stretching the limits of computer technology, and often a great deal of time and effort is necessary simply to get their code running. Even more effort might be needed to squeeze maximum performance from the supercomputer hardware. Providing technical assistance to these people is an important part of SDSC's consulting operation. A consultant's first reaction upon encountering someone with a tough problem might be to send them away with some documentation and a wish of good luck. At SDSC, however, we feel that it is a good investment for the consultant to spend the time necessary to work with the user to solve the problem. The end result is not only a solved problem for the user, but new programming techniques that the consultant can:
Teach to the original user to ease that user into the world of exotic loader options, assembly language programming, and obscure library routines.Relay to the rest of the user community by way of personal communication and newsletter articles.Use in his or her own programming projects.The following two sections trace examples of the flow of information through the consulting department at SDSC. These examples provide a glimpse into the kinds of problems SDSC users encounter and how, by solving these problems, the consulting staff can benefit not only the original user, but the user community as a whole. These examples are drawn from my own personal experience, but similar examples, of course, exist for the rest of the consulting staff.},
booktitle = {Proceedings of the 16th Annual ACM SIGUCCS Conference on User Services},
pages = {197–199},
numpages = {3},
location = {Long Beach, California, USA},
series = {SIGUCCS '88}
}

@inproceedings{10.1145/2494444.2494475,
author = {Yu, Dung-Feng and Hu, Chien-Wei and Jiau, Hewijin Christine and Ssu, Kuo-Feng},
title = {dCloud: a document link provision cloud for software extension tasks},
year = {2013},
isbn = {9781450319768},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2494444.2494475},
doi = {10.1145/2494444.2494475},
abstract = {Software reuse is commonly achieved through extension mechanisms. Those mechanisms are practiced in software extension tasks. In these tasks, application developers retrieve code examples (step 1), acquire API documents (step 2), and adapt code examples (step 3). At step 2, they spend much time in manually searching API documents, confirming the valid API document version, and re-doing the searching work. At step 3, they spend much effort in frequently switching between web browsers and the local development environment, and rebuilding the development environment on different devices. To reduce the time and effort, a document link provision cloud, named dCloud, is provided in this work. dCloud reduces the time by only providing the document links and the link history. Such links are used to directly access the API documents of their valid version. dCloud reduces the effort by providing an online development environment which is accessed through web browsers. Furthermore, dCloud brings further advantages to application developers and makes a revolutionary impact on the development environment design.},
booktitle = {Proceedings of the International C* Conference on Computer Science and Software Engineering},
pages = {86–94},
numpages = {9},
keywords = {software reuse, software extension task, document link, cloud, API document},
location = {Porto, Portugal},
series = {C3S2E '13}
}

@inproceedings{10.1145/3623504.3623566,
author = {B\"{o}hme, Lukas and Beckmann, Tom and Baltes, Sebastian and Hirschfeld, Robert},
title = {A Penny a Function: Towards Cost Transparent Cloud Programming},
year = {2023},
isbn = {9798400703997},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3623504.3623566},
doi = {10.1145/3623504.3623566},
abstract = {Understanding and managing monetary cost factors is crucial when developing cloud applications.  
However, the diverse range of factors influencing costs for computation, storage, and networking in cloud applications poses a challenge for developers who want to manage and minimize costs proactively.  
Existing tools for understanding cost factors are often detached from source code, causing opaqueness regarding the origin of costs.  
Moreover, existing cost models for cloud applications focus on specific factors such as compute resources and necessitate manual effort to create the models.  
This paper presents initial work toward a cost model based on a directed graph that allows deriving monetary cost estimations directly from code using static analysis.  
Leveraging the cost model, we explore visualizations embedded in a code editor that display costs close to the code causing them.  
This makes cost exploration an integrated part of the developer experience, thereby removing the overhead of external tooling for cost estimation of cloud applications at development time.},
booktitle = {Proceedings of the 2nd ACM SIGPLAN International Workshop on Programming Abstractions and Interactive Notations, Tools, and Environments},
pages = {1–10},
numpages = {10},
keywords = {developer tooling, cost transparency, cost modeling, Cloud computing},
location = {Cascais, Portugal},
series = {PAINT 2023}
}

@inproceedings{10.1145/3545945.3569843,
author = {Mahoney, Mark},
title = {Storyteller: Guiding Students Through Code Examples},
year = {2023},
isbn = {9781450394314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545945.3569843},
doi = {10.1145/3545945.3569843},
abstract = {This paper describes a tool to help instructors guide learners through code examples. The tool captures low-level changes made to a group of files using a popular code editor. Then it allows the programming session to be replayed so that an author can annotate the evolution of the code and explain the reasons behind important decisions. The author-supplied narrative can include text, code highlights, media (hand-drawn pictures, screenshots, videos, and audio files), and self-grading questions. The combination of the narrative and the evolving code is called a code 'playback'. Playbacks are viewable in a web browser.The paper also discusses the experiences of one instructor's use of the tool in several programming-focused courses over the last two years. The tool provides instructors with an alternative to live coding that allows one to describe code faster and with fewer mistakes. In addition, it provides a way for an instructor to build up relevant content that can replace a traditional textbook. The results of several anonymous student surveys are discussed.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1},
pages = {1131–1135},
numpages = {5},
keywords = {live coding, textbook replacement, worked examples},
location = {<conf-loc>, <city>Toronto ON</city>, <country>Canada</country>, </conf-loc>},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/2445196.2445242,
author = {Malan, David J.},
title = {CS50 sandbox: secure execution of untrusted code},
year = {2013},
isbn = {9781450318686},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2445196.2445242},
doi = {10.1145/2445196.2445242},
abstract = {We introduce CS50 Sandbox, an environment for secure execution of untrusted code. Implemented as an asynchronous HTTP server, CS50 Sandbox offers clients the ability to execute programs (both interactive and non-interactive) written in any compiled or interpreted language in a tightly controlled, resource-constrained environment. CS50 Sandbox's HTTP-based API takes files, command lines, and standard input as inputs and returns standard output and error plus exit codes as outputs. Atop CS50 Sandbox, we have built CS50 Run, a web-based code editor that enables students to write code in a browser in any language, whether compiled or interpreted, that's executed server-side within a sandboxed environment. And we have built CS50 Check, an autograding framework that supports black- and white-box testing of students' code, leveraging CS50 Sandbox to run series of checks against students' programs, no matter the language of implementation.We present in this work the pedagogical motivations for each of these tools, along with the underlying designs thereof. Each is available as open source.},
booktitle = {Proceeding of the 44th ACM Technical Symposium on Computer Science Education},
pages = {141–146},
numpages = {6},
keywords = {sandbox},
location = {Denver, Colorado, USA},
series = {SIGCSE '13}
}

@inproceedings{10.1145/3159450.3159602,
author = {Krusche, Stephan and Seitz, Andreas},
title = {ArTEMiS: An Automatic Assessment Management System for Interactive Learning},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3159602},
doi = {10.1145/3159450.3159602},
abstract = {The increasing number of students in computer science courses leads to high efforts in manual assessment of exercises. Existing assessment systems are not designed for exercises with immediate feedback in large classes. In this paper, we present an AuTomated assEssment Management System for interactive learning.ArTEMiS assesses solutions to programming exercises automatically and provides instant feedback so that students can iteratively solve the exercise. It is open source and highly scalable based on version control, regression testing and continuous integration. ArTEMiS offers an online code editor with interactive exercise instructions, is programming language independent and applicable to a variety of computer science courses. By using it, students gain experiences in version control, dependency management and continuous integration.We used ArTEMiS in 3 university and 1 online courses and report about our experiences. We figured out that ArTEMiS is suitable for beginners, helps students to realize their progress and to gradually improve their solutions. It reduces the effort of instructors and enhances the learning experience of students.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {284–289},
numpages = {6},
keywords = {version control, programming exercises, online editor, online courses, interactive exercise instructions, instant feedback, in-class exercises, continuous integration, automated assessment},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/2839509.2844703,
author = {Ortiz, Ariel},
title = {Programming Web Services on the Cloud with Node.js (Abstract Only)},
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2844703},
doi = {10.1145/2839509.2844703},
abstract = {Web services (a.k.a. web APIs) allow developers to build web and mobile applications using data from multiple online sources. This workshop is aimed at CS instructors that wish to teach how to use and write web services using Node.js on a cloud development environment. Node.js is an open source JavaScript platform that is currently used by companies like PayPal, DowJones, Walmart, Netflix, and Yahoo. Over 120 companies in the fortune 500 are not only using, but embracing Node.js in their everyday operations. Using and writing web services in Node.js is significantly easier than using other environments based on languages such as C# or Java. Because we will be using a cloud platform, all our tools are readily available through any modern web browser, thus eliminating the hassle related to installing a complete standalone development environment. Teaching web API design with Node.js on the cloud provides our students a relevant real life technical skill. Workshop participants will use the free service provided by Cloud9 IDE (https://c9.io/) to learn how to write scalable RESTful web services using Node.js, the Express web framework, MySQL, and jQuery. Participants should have a working knowledge of HTML, JavaScript, and SQL. Additional information available at: http://node.arielortiz.info/ Laptop required.},
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
pages = {719},
numpages = {1},
keywords = {web services, web development, node.js, javascript},
location = {Memphis, Tennessee, USA},
series = {SIGCSE '16}
}

@inproceedings{10.1145/2858036.2858252,
author = {Loksa, Dastyni and Ko, Amy J. and Jernigan, Will and Oleson, Alannah and Mendez, Christopher J. and Burnett, Margaret M.},
title = {Programming, Problem Solving, and Self-Awareness: Effects of Explicit Guidance},
year = {2016},
isbn = {9781450333627},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2858036.2858252},
doi = {10.1145/2858036.2858252},
abstract = {More people are learning to code than ever, but most learning opportunities do not explicitly teach the problem solving skills necessary to succeed at open-ended programming problems. In this paper, we present a new approach to impart these skills, consisting of: 1) explicit instruction on programming problem solving, which frames coding as a process of translating mental representations of problems and solutions into source code, 2) a method of visualizing and monitoring progression through six problem solving stages, 3) explicit, on-demand prompts for learners to reflect on their strategies when seeking help from instructors, and 4) context-sensitive help embedded in a code editor that reinforces the problem solving instruction. We experimentally evaluated the effects of our intervention across two 2-week web development summer camps with 48 high school students, finding that the intervention increased productivity, independence, programming self-efficacy, metacognitive awareness, and growth mindset. We discuss the implications of these results on learning technologies and classroom instruction.},
booktitle = {Proceedings of the 2016 CHI Conference on Human Factors in Computing Systems},
pages = {1449–1461},
numpages = {13},
keywords = {programming, problem-solving, metacognition, computer science education},
location = {San Jose, California, USA},
series = {CHI '16}
}

@inproceedings{10.1145/2642668.2642678,
author = {M\"{a}kitalo, Niko},
title = {Building and programming ubiquitous social devices},
year = {2014},
isbn = {9781450330268},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2642668.2642678},
doi = {10.1145/2642668.2642678},
abstract = {Today's mobile and embedded devices are Internet-connected, and have decent computing power, which creates a possibility for complex, cooperative multi-device platforms. Yet, from user's perspective, it seems that we are not freed to use different technologies seamlessly and without thinking. From developer's perspective, on the other hand, building seamlessly communicating devices requires implementing coordination process separately in an application specific fashion, and yet the devices can only communicate through these specific apps that are not aware of each other. In this paper we introduce Orchestrator.js middleware, which is a tool for readily building multi-user, and multi-device applications in heterogeneous environment. This new lightweight and agile middleware is designed to support Social Devices concept, which aims to bring people together, and increase social interactions when people are co-located. With a concrete example, we also describe the process of building and implementing Social Devices applications with embedded and mobile devices.},
booktitle = {Proceedings of the 12th ACM International Symposium on Mobility Management and Wireless Access},
pages = {99–108},
numpages = {10},
keywords = {ubiquitous multimedia, ubiquitous development tools, social devices, proximity-based cooperation, mobile cloud},
location = {Montreal, QC, Canada},
series = {MobiWac '14}
}

@inproceedings{10.1145/383535.383564,
author = {Allen, Russell and Chuns, Philip and Mowbray, Andrew and Greenleaf, Graham},
title = {AustLll's aide — natural language legislative rulebases},
year = {2001},
isbn = {1581133685},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/383535.383564},
doi = {10.1145/383535.383564},
abstract = {Aide (`AustLII Inferencing Development Environment') provides a quasi-natural language form of knowledge representation which is reasonably close to statutory language, but at the same time represents knowledge so that it can be used by an inferencing engine using predicate calculus.Aide also provides a supportive development environment for the user by parse tree differentiation to assist the user choosing the correct parsing of rules. The development environment and the user environment are both web-based, facilitating collaborative development of knowledgebases, and the integration of inferencing dialogues with legal source texts on the web.},
booktitle = {Proceedings of the 8th International Conference on Artificial Intelligence and Law},
pages = {223–224},
numpages = {2},
location = {St. Louis, Missouri, USA},
series = {ICAIL '01}
}

@article{10.5555/3606402.3606429,
author = {Char, Bruce and Earth, Steve and Johnson, Jeremy},
title = {A Web App for Writing with Mathematical Logic},
year = {2023},
issue_date = {April 2023},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {38},
number = {8},
issn = {1937-4771},
abstract = {Logicwriter Actual is a web app (https://www.cs.drexel.edu/~bchar/logicwriter/standardConfig/web/index.html) designed for freeform entry and linear display in Unicode of text combined with symbolic logic characters such as ≡, ∃, ∧, ⇒, λ, and Ω. It is designed for the writing done by students or instructors in foundational-level (second year) courses introducing mathematical reasoning: elementary formal or informal proofs often involving commonplace situations or computer science contexts such as program behavior. Rather than being a scaffolded practice harness [1], or an automated reasoning tool/proof checker [2, 5], the goal of Logicwriter Actual is just to make it easier for students to practice more mathematical writing. The WYSIWYG result can be copy/pasted into most document processors (for submitted or shared work), Discord or Slack channels (for chat conversations), email, code editors, etc. It is designed to be immediately usable by browser- and laptop-savvy students, so more convenient to use in a foundational course than available alternatives (word processors, LaTeX, LyX, keyboard entry of Unicode indices, Math Jax plugins, etc. [3, 4, 6]) It is designed to need minimal computer resources (runs in browser, can be delivered from any web page server), and instructor time (for student training, or tech support). Because it is just a writing tool, it is compatible with most instructional approaches that ask students to write their own proofs and explanations. Assessment is underway through student survey of usage experience and effects, and by instructor survey/interview.to see if there are perceived benefits to its approach to text entry and style of implementation as a web app.},
journal = {J. Comput. Sci. Coll.},
month = {apr},
pages = {220–221},
numpages = {2}
}

@inproceedings{10.1145/2207676.2208664,
author = {Oney, Stephen and Brandt, Joel},
title = {Codelets: linking interactive documentation and example code in the editor},
year = {2012},
isbn = {9781450310154},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2207676.2208664},
doi = {10.1145/2207676.2208664},
abstract = {Programmers frequently use instructive code examples found on the Web to overcome cognitive barriers while programming. These examples couple the concrete functionality of code with rich contextual information about how the code works. However, using these examples necessitates understanding, configuring, and integrating the code, all of which typically take place after the example enters the user's code and has been removed from its original instructive context. In short, a user's interaction with an example continues well after the code is pasted. This paper investigates whether treating examples as "first-class" objects in the code editor - rather than simply as strings of text - will allow programmers to use examples more effectively. We explore this through the creation and evaluation of Codelets. A Codelet is presented inline with the user's code, and consists of a block of example code and an interactive helper widget that assists the user in understanding and integrating the example. The Codelet persists throughout the example's lifecycle, remaining accessible even after configuration and integration is done. A comparative laboratory study with 20 participants found that programmers were able to complete tasks involving examples an average of 43% faster when using Codelets than when using a standard Web browser.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {2697–2706},
numpages = {10},
keywords = {structured editing, programming, example, documentation},
location = {Austin, Texas, USA},
series = {CHI '12}
}

@inproceedings{10.1145/3017680.3022382,
author = {Steinglass, Alice and Franke, Baker and Filman, Sarah},
title = {App Lab: A Powerful JavaScript IDE for Rapid Prototyping of Small Data-backed Web Applications (Abstract Only)},
year = {2017},
isbn = {9781450346986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3017680.3022382},
doi = {10.1145/3017680.3022382},
abstract = {App Lab (https://code.org/applab) is Code.org's rapid-prototyping environment for creating HTML, CSS, and JavaScript-powered web applications. It was created as part of a rich set of instructional resources designed for teachers of the new AP Computer Science Principles (CSP) course. Yet, App Lab far exceeds the needs of CSP, and would be an appropriate learning environment for students in any CS0/CS1 class, even at the university level. App Lab gives novice programmers access to capabilities previously reserved for courses that require sophisticated tech setup and knowledge of both front and backend web development, server-side scripting, databases, etc. This demonstration aims to give a brief overview of App Lab and its purpose and then move quickly into demonstrating the more advanced features of App Lab that few people know are even there! The audience should come away with knowledge and access to exemplars that highlight App lab's possibilities, and see some of its richer features in action. Finally we will end with a discussion about how best to integrate App Lab into existing courses.App Lab was developed as part of collaboration between Code.org and David Bau (Google), creator of PencilCode.net.},
booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education},
pages = {641–642},
numpages = {2},
keywords = {web applications, education, database, app lab, K12, Javascript, IDE},
location = {Seattle, Washington, USA},
series = {SIGCSE '17}
}

@inproceedings{10.1145/3079368.3079407,
author = {Van den Vonder, Sam and Myter, Florian and De Koster, Joeri and De Meuter, Wolfgang},
title = {Enriching the Internet By Acting and Reacting},
year = {2017},
isbn = {9781450348362},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3079368.3079407},
doi = {10.1145/3079368.3079407},
abstract = {A recent trend in application development for the web is a move towards rich internet applications (RIAs). As more and more of the application logic is moved to the client, RIAs can benefit from concurrency in order to increase overall performance as well as responsiveness of the application. Additionally, RIAs are often written in an event-driven style of programming to react to incoming events of a multitude of services that are integrated within the application. In this paper we argue that, while individual technologies exist to tackle both concerns, these technologies cannot easily be integrated in an ad hoc way. To increase the modularisability and composability of RIAs we propose a new programming model based on actors and reactors that encapsulate different parts of the application. We show that our model is able to exploit some of the available concurrency while reducing the required amount of event-driven code. Both actors and reactors are modular components that can be glued together via a unified communication mechanism. We evaluate our approach by means of a motivating example of a collaborative code editor.},
booktitle = {Companion Proceedings of the 1st International Conference on the Art, Science, and Engineering of Programming},
articleno = {24},
numpages = {6},
keywords = {Rich internet applications, Reactors, Reactive programming, JavaScript, Distributed programming, Actors},
location = {Brussels, Belgium},
series = {Programming '17}
}

@inproceedings{10.1145/2048237.2157457,
author = {Corral, Luis and Sillitti, Alberto and Succi, Giancarlo and Garibbo, Alessandro and Ramella, Paolo},
title = {Evolution of Mobile Software Development from Platform-Specific to Web-Based Multiplatform Paradigm},
year = {2012},
isbn = {9781450309417},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2048237.2157457},
doi = {10.1145/2048237.2157457},
abstract = {In this paper, we outline a projection on the trend of using web technologies for creating end-user applications in mobile devices. Following a paradigm shift in the software industry, from only-binary applications to dynamic web applications, mobile web development tools evolve to offer an integral native solution that allows to simplify the soft-ware process and broad its scope to a true, single cross-platform development effort. Soon, mobile web development tools will be preferred by designers and programmers thanks to their versatility, economy and usefulness, less dependent on specific platforms and SDKs, while fully functional and reliable in comparison to their binary counterparts.},
booktitle = {Proceedings of the 10th SIGPLAN Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {181–183},
numpages = {3},
location = {Portland, Oregon, USA},
series = {Onward! 2011}
}

@article{10.1145/3043953,
author = {Solin, Jeff},
title = {TECHNOLOGY THAT EDUCATORS OF COMPUTING HAIL (TECH)Using Cloud9, a powerful cloud-based IDE in the classroom},
year = {2017},
issue_date = {March 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {1},
issn = {2153-2184},
url = {https://doi.org/10.1145/3043953},
doi = {10.1145/3043953},
abstract = {Welcome to the latest TECH column, a column that features a guest columnist, discussing technologies that educators find useful in their classrooms. The guest columnist is selected from those who have presented at a SIGCSE Technical Symposium session. This issue's guest columnist, Jeff Solin, offers his ideas on Cloud9.},
journal = {ACM Inroads},
month = {feb},
pages = {29–30},
numpages = {2}
}

@inproceedings{10.1109/ICSE.2017.30,
author = {Wittern, Erik and Ying, Annie T. T. and Zheng, Yunhui and Dolby, Julian and Laredo, Jim A.},
title = {Statically checking web API requests in JavaScript},
year = {2017},
isbn = {9781538638682},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE.2017.30},
doi = {10.1109/ICSE.2017.30},
abstract = {Many JavaScript applications perform HTTP requests to web APIs, relying on the request URL, HTTP method, and request data to be constructed correctly by string operations. Traditional compile-time error checking, such as calling a non-existent method in Java, are not available for checking whether such requests comply with the requirements of a web API. In this paper, we propose an approach to statically check web API requests in JavaScript. Our approach first extracts a request's URL string, HTTP method, and the corresponding request data using an inter-procedural string analysis, and then checks whether the request conforms to given web API specifications. We evaluated our approach by checking whether web API requests in JavaScript files mined from GitHub are consistent or inconsistent with publicly available API specifications. From the 6575 requests in scope, our approach determined whether the request's URL and HTTP method was consistent or inconsistent with web API specifications with a precision of 96.0%. Our approach also correctly determined whether extracted request data was consistent or inconsistent with the data requirements with a precision of 87.9% for payload data and 99.9% for query data. In a systematic analysis of the inconsistent cases, we found that many of them were due to errors in the client code. The here proposed checker can be integrated with code editors or with continuous integration tools to warn programmers about code containing potentially erroneous requests.},
booktitle = {Proceedings of the 39th International Conference on Software Engineering},
pages = {244–254},
numpages = {11},
keywords = {web APIs, static analysis, JavaScript},
location = {Buenos Aires, Argentina},
series = {ICSE '17}
}

@article{10.1145/2350216.2350222,
author = {Baldwin, Doug},
title = {Special projects grants awarded},
year = {2012},
issue_date = {July 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {44},
number = {3},
issn = {0097-8418},
url = {https://doi.org/10.1145/2350216.2350222},
doi = {10.1145/2350216.2350222},
abstract = {SIGCSE received 15 Special Projects grant proposals for the May 2012 funding cycle. The Special Projects Committee is pleased to announce that the following four grants have been awarded:Anthony Allevato and Steve Edwards, Virginia Tech, "Pythy---A Cloud-Based IDE for Novice Python Programmers" (http://pythy.cs.vt.edu/). This project will develop a Web-based environment in which novice programmers can write and run Python programs and access documentation and tutorials. This environment reduces the barriers students often face if they have to install development tools on their own computers.},
journal = {SIGCSE Bull.},
month = {jul},
pages = {6},
numpages = {1}
}

@article{10.5555/1619221.1619224,
author = {Hummel, Joe},
title = {From Java to C# a workshop on the how, what, and why},
year = {2009},
issue_date = {October 2009},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {25},
number = {1},
issn = {1937-4771},
abstract = {The .NET platform is incredibly rich, allowing you to build a variety of applications with a multitude of languages. Using a common development environment, students can program in languages such as C#, VB, C++, F#, and Python, creating software with a range of interfaces (console, GUI and web) and functionality (scientific, database, distributed, service-oriented, game and robotic). Microsoft's flagship development environment, Visual Studio 2008, is freely-available to students via Microsoft's DreamSpark program, along with Windows, SQL Server, and Expression Studio. These same tools are available for a nominal fee to institutional departments through Microsoft's MSDN Academic Alliance. If you prefer, you can work outside of Visual Studio with command-line compilers, editors, and 3rd-party IDEs, or step off the Windows platform entirely and work with .NET on Linux, OS X or BSD using Mono.},
journal = {J. Comput. Sci. Coll.},
month = {oct},
pages = {8},
numpages = {1}
}

@inproceedings{10.1145/3543873.3587566,
author = {Almeida, Saulo and Passos, Gilberto and Jesus, Valquire and Serra, Sergio and Zavaleta, Jorge},
title = {Providing Data on Financial Results of Public Companies Enriched with Provenance for OBInvest},
year = {2023},
isbn = {9781450394192},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3543873.3587566},
doi = {10.1145/3543873.3587566},
abstract = {Financial Literacy (FL) initiatives, aimed at young people in formal or informal learning spaces, are defended and implemented in several countries, being encouraged since 2005 by the Organization for Economic Co-operation and Development (OECD). In Brazil, the teaching and learning process in several areas has been stimulated through Academic Competitions generally called Knowledge Olympics, which are essentially student contests that aim to encourage, find talent and awaken interest in the field knowledge presented in the competition. It was precisely for this purpose that the Brazilian Investment Olympics (OBInvest) was born, aiming to democratize access to education and promote reflections on economic and financial issues, through a FL perspective for high school students from all over the country. One of OBInvest’s objectives is to help boosting the development of computational tools, aiming to provide easier access to fundamental data for decision-making in the field of finance. However, from the tools developed by OBInvest, it was noted that the creation of new educational tools would be enhanced through the use of datasets enriched with provenance and aligned with FAIR principles. This work aims to offer a computational strategy based on data science techniques, which is easy to use and also provides curated data series through a reproducible pipeline, using open data on financial reports from publicly listed Brazilian companies, provided by the Brazilian Security and Exchange Commission, called Comiss\~{a}o de Valores Mobiliarios (CMV). During the exploration of related works, we found just a few academic works that use CVM data with little expressive results, which motivated the development of a tool called DRE-CVM, that was supported by computational tools, with a focus on the Python language, Pandas library, the KNIME workflow platform, and Jupyter integrated development environments, running on the Anaconda3 platform over a Docker container. It’s also possible run this experiment in the Google Colabotory cloud environment. This processing it’s capable of executing reproducible pipelines and using curated, fairified, and annotated data with the retrospective source metadata of the financial statements of publicly traded Brazilian companies. The artifact uses pipelines that can be reused by students and other interested parties in finance to study the behaviors of a company’s time series results and thus introduce research on predicting future results. The last executable version of the DRE-CVM experiment can be accessed through Zenodo website at https://doi.org/10.5281/zenodo.7110653 and can be reproduced using a Docker Container available on DockerHub repository. Some improvements can be incorporated into the presented work, the main suggestions for future work are: (i) Perform more substantial analyses on the created dataset, such as predicting results based on the history of demonstration results; (ii) Recover other types of information made available by CVM, to be used during the activities of the Brazilian Investment Olympics; (iii) Adapt the docker image so that it can be executed in the My Binder cloud environment, aiming to improve reproducibility issues.},
booktitle = {Companion Proceedings of the ACM Web Conference 2023},
pages = {1563},
numpages = {1},
keywords = {fair principles, financial literacy, provenance},
location = {<conf-loc>, <city>Austin</city>, <state>TX</state>, <country>USA</country>, </conf-loc>},
series = {WWW '23 Companion}
}

@inproceedings{10.1145/1723028.1723053,
author = {Razavi, Ali and Kontogiannis, Kostas and Brealey, Chris and Nigul, Leho},
title = {Incremental model synchronization in model driven development environments},
year = {2009},
publisher = {IBM Corp.},
address = {USA},
url = {https://doi.org/10.1145/1723028.1723053},
doi = {10.1145/1723028.1723053},
abstract = {Most modern model driven software development environments rely heavily on model transformations for generating various software design artifacts and eventually even source code. However, during development, maintenance and evolution activities, these software artifacts are subject to updates and refactoring operations. In such model driven development environments, these software artifacts need to be re-synchronized every time one of them is altered, so that they all remain consistent according to some specific rules, relations and domain constraints. Until now, the standard approach to model synchronization has been the re-application of all transformation rules, aiming thus for the complete re-generation of all artifacts in all models involved. This complete re-application is a safe yet computationally expensive way to ensure consistency among models. In this paper, we present a method for re-synchronizing software models in an incremental fashion by utilizing an indexing model. In this respect, using the proposed methodology, the time required for maintaining global model consistency is proportional to the size of the changes and not that of the models involved. The proposed approach has been applied for the incremental re-synchronization of large and complex models in the Eclipse Web Tools Platform (WTP). Results indicate that this solution can significantly reduce the time required to re-synchronize models in such comprehensive development environments as WTP.},
booktitle = {Proceedings of the 2009 Conference of the Center for Advanced Studies on Collaborative Research},
pages = {216–230},
numpages = {15},
location = {Ontario, Canada},
series = {CASCON '09}
}

@inproceedings{10.1145/3568812.3603483,
author = {Brock, Janet and Gransbury, Isabella and Catet\'{e}, Veronica and Barnes, Tiffany and Grover, Shuchi and Ledeczi, Akos},
title = {Student Attitudes During the Pilot of the Computer Science Frontiers Course},
year = {2023},
isbn = {9781450399753},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3568812.3603483},
doi = {10.1145/3568812.3603483},
abstract = {Motivation. We have created a modular project-based learning curriculum, Computer Science Frontiers (CSF) [1, 8], for secondary students in attempts to increase the persistence of computer science (CS) students in higher education. The CSF course is divided into four different modules (Distributed Computing, Internet of Things, Artificial Intelligence, and Software Engineering), each centered around a topic typically introduced to students only in higher education. Using the block-based programming environment NetsBlox [4], students are able to access various Application Programming Interfaces related to their interests [2, 3]. The goal of this course is to increase student interest in CS during high school - when first career choices occur [7] - in hopes they will persist in CS during their undergraduate studies. Research question. The research question for this study was: How does the Computer Science Frontiers course affect student attitudes towards computer science?Research Methods. We conducted over 20 interviews with students throughout a CSF pilot course that took place over the 2022-2023 school year. Interviews were conducted with at least five students at the end of every module. Two researchers have conducted thematic analysis with student responses from the first two modules [5]: Distributed Computing (DC) and Internet of Things (IoT). First, the two researchers developed a norm by tagging one interview together [6]. Next, the researchers independently coded the rest of the interviews for each module. After completing a single module’s interviews, the researchers met to rectify any discrepancies. Finally, the tags were grouped together based on common themes. Through this process, we found a total of seven themes. Results. The themes found through thematic analysis include: computer science, attitudes towards course, student wants, student struggles, attitudes towards projects, collaboration, and student progression. As a result of this study, we have identified different needs for secondary students with varying background in CS when studying more advanced CS topics, such as IoT. For example, a need of students who have less prior CS knowledge than others may be to review programming concepts in order to be successful in the course. We have also identified a positive change in student’s attitudes towards computer science after the first two modules. These insights provide the CS education community with ways to engage students with concepts that they have not been exposed to and how to increase their interest in CS. Implications. The CSF curriculum is currently online, and is available to computer science instructors. Each module is separated into eight to nine units which are accompanied by activities and teaching guides. This curriculum provides educators with materials and activities to introduce students to more advanced CS topics, either through individual modules or as an entire course. In future research, we plan to use CSF in an outreach program and implement the course in two secondary classrooms in the 2023-2024 school year.},
booktitle = {Proceedings of the 2023 ACM Conference on International Computing Education Research - Volume 2},
pages = {24–25},
numpages = {2},
keywords = {socially relevant examples, secondary, project-based learning, education research, collaborative learning environment, block-based learning},
location = {Chicago, IL, USA},
series = {ICER '23}
}

@inproceedings{10.5555/510378.510651,
author = {Kuljis, Jasna and Paul, Ray J.},
title = {A review of web based simulation: whither we wander?},
year = {2000},
isbn = {0780365828},
publisher = {Society for Computer Simulation International},
address = {San Diego, CA, USA},
abstract = {This paper considers a variety of new technologies for discrete-event simulation software development. Environments and languages for web based simulation are reviewed. Web based applications are discussed. After proposing a summary of the review, ways of working that will have an unpredictable effect on the future of simulation modeling are proposed.},
booktitle = {Proceedings of the 32nd Conference on Winter Simulation},
pages = {1872–1881},
numpages = {10},
location = {Orlando, Florida},
series = {WSC '00}
}

@article{10.5555/767598.767613,
author = {Resendez, Korinne and Bachnak, Ray},
title = {Labview programming for internet-based measurements},
year = {2003},
issue_date = {April 2003},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {18},
number = {4},
issn = {1937-4771},
abstract = {Advances in networking technologies and the introduction of recent software development tools have made Internet-Based measurements a reality. This paper shows how LabVIEW can be used to perform data acquisition and remotely control hardware devices through the Internet. A front panel displays the real-time results and allows storage of acquired data for later processing. Applications may be monitored and controlled from any web browser, anywhere in the world.},
journal = {J. Comput. Sci. Coll.},
month = {apr},
pages = {79–85},
numpages = {7}
}

@inproceedings{10.1145/765891.766038,
author = {Larson, James A. and Gilbert, Juan E. and McTear, Michael},
title = {Challenges in teaching user interface design for telephones and cell phones},
year = {2003},
isbn = {1581136374},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/765891.766038},
doi = {10.1145/765891.766038},
abstract = {Participants in this SIG will identify issues and suggest solutions for teaching user interface design for telephones and cell phones. Specifically, speech user interface development environments, implementation languages, unique problems of speech interfaces, and additional resources will be examined. Participants will include educators who teach web development, and web developers interested in developing speech applications.},
booktitle = {CHI '03 Extended Abstracts on Human Factors in Computing Systems},
pages = {864–865},
numpages = {2},
location = {Ft. Lauderdale, Florida, USA},
series = {CHI EA '03}
}

@article{10.1145/505103.505129,
author = {Ashley, Jeremy and Desmond, Kristin},
title = {Oracle},
year = {2002},
issue_date = {March 2002},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {9},
number = {2},
issn = {1072-5520},
url = {https://doi.org/10.1145/505103.505129},
doi = {10.1145/505103.505129},
abstract = {Oracle is the market leader in database sales and the world's second largest software maker. In addition, Oracle creates industry award-winning, Web-based corporate applications, business intelligence tools, server management tools, and development tools.},
journal = {Interactions},
month = {mar},
pages = {81–86},
numpages = {6}
}

@inproceedings{10.1145/3478432.3499125,
author = {Cazalas, Jonathan and Barlow, Max and Cazalas, Ibraheem and Robinson, Chase},
title = {MOCSIDE: An Open-source and Scalable Online IDE and Auto-Grader for Computer Science Education},
year = {2022},
isbn = {9781450390712},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3478432.3499125},
doi = {10.1145/3478432.3499125},
abstract = {Programming is learned through practice, with said practice in introductory programming courses often translating to a prohibitively large number of assignments, increasing the grading workload for faculty and/or teaching assistants. In short, this is unsustainable. Several publishers and a few notable companies have provided meritable auto-grading solutions, although most are plagued with problems including minimal problem sets, limited customization options, high cost, and at times even a disconnect with the pedagogical needs of academia. This poster presents our newly-developed web application, MOCSIDE, an open-source and scalable online IDE and auto-grader for computer science education. Results indicate a positive user experience from students and instructors alike, with cost savings, ease of use, and code collaboration highlighted as key features.},
booktitle = {Proceedings of the 53rd ACM Technical Symposium on Computer Science Education V. 2},
pages = {1114},
numpages = {1},
keywords = {online ide, cs2, cs1, computer science education, auto-grading},
location = {Providence, RI, USA},
series = {SIGCSE 2022}
}

@inproceedings{10.1145/3446871.3469796,
author = {Jayathirtha, Gayithri and Kafai, Yasmin},
title = {Notional Machines in a Semester-long Introductory Physical Computing High School Unit},
year = {2021},
isbn = {9781450383264},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3446871.3469796},
doi = {10.1145/3446871.3469796},
abstract = {Notional machines i.e. pedagogical devices to communicate program execution play a key role in computing classrooms, especially within introductory settings [2, 5]. From machine-generated representations to classroom learning activities, a variety of notional machines have been examined in the field of computing education research. A more recent review [2] has also noted the adoption of multiple notional machines by instructors during a course or a unit to communicate a family of interconnected, computing concepts within a learning context. Despite notional machines considered as a signature pedagogy for computing education, very few accounts are based on classroom observations–most of them draw from instructor reflections or programming interface designs [2]. Further, even fewer have been situated in the more recent contexts of computing education i.e., high school classrooms where programming environments such as physical computing have been employed to make computing concepts further accessible to novices [3]. However, what is lesser known is how teachers make these computing concepts accessible to students through notional machines. To address the gap, in Fall 2020 and Spring 2021, we conducted a two-phase study that involved: (a) co-designing notional machines with an experienced high school computing teacher in Fall 2020, and, (b) observing his classes during the 14-week electronic textiles unit within Exploring Computer Science curriculum [1] in Spring 2021. For this poster, we will share findings from a preliminary qualitative analysis of online class screen recordings (5 hours, 10 class periods) of class periods that involved discussions around programs during the unit. We answer the following questions: (a) What were the different types of notional machines implemented throughout the unit within the context of physical computing? (b) How were they related to each other and to the key computing ideas within the unit? Our video analysis so far has revealed a variety of notional machines to introduce and sustain student learning during this unit. They took the form of roleplays, metaphors, and analogies, ranging from a period-long enactment to in-the-moment explanations to better understand specific aspects of program execution such as variable definition, function calls, and conditional statements execution. From extensive code tracing to debugging specific issues to diagnosing student thinking, these notional machines provided a variety of opportunities for the teacher to move across the different levels of abstractions while explaining program execution. During the poster session, we will share qualitative details about each of these categories of notional machines with examples that highlight their key characteristics in terms of form, conceptual focus, level of abstraction, and purpose within the unit. This analysis will provide one of the first accounts of notional machines emerging from classroom observational data. More importantly, it will be one of the first accounts of notional machines studied within a high school classroom, significant in the light of recent enthusiasm to introduce high school students to computing globally [4].},
booktitle = {Proceedings of the 17th ACM Conference on International Computing Education Research},
pages = {448–449},
numpages = {2},
keywords = {secondary computing, physical computing, notional machines},
location = {Virtual Event, USA},
series = {ICER 2021}
}

@inproceedings{10.1145/2048147.2048185,
author = {Collins, Michael G. and Barton, John J.},
title = {Crossfire: multiprocess, cross-browser, open-web debugging protocol},
year = {2011},
isbn = {9781450309424},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2048147.2048185},
doi = {10.1145/2048147.2048185},
abstract = {We present Crossfire, a system and protocol designed to enable debugging of Web pages in another process or machine. Issues specific to any one Web browser are abstracted by the protocol and implementation, allowing a new generation of Open Web development tools to be implemented. We discuss the major refactoring of Firebug, the open source Web debugging tool to use Crossfire and the interplay between goals and resources that such an effort requires. In addition to the cross-browser focus of the protocol, we also discuss support for extensions which themselves will be cross-browser and client-server.},
booktitle = {Proceedings of the ACM International Conference Companion on Object Oriented Programming Systems Languages and Applications Companion},
pages = {115–124},
numpages = {10},
keywords = {source-level debugging, open source, distributed debugging},
location = {Portland, Oregon, USA},
series = {OOPSLA '11}
}

@inproceedings{10.1145/953536.953542,
author = {Gibson, Lorna and Newall, Fay and Gregor, Peter},
title = {Developing a web authoring tool that promotes accessibility in children's designs},
year = {2003},
isbn = {158113732X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/953536.953542},
doi = {10.1145/953536.953542},
abstract = {This paper describes the development, with full involvement by children, of a web development tool which reflects truly how children view the World Wide Web. The tool was designed in such a way that it promoted the understanding and implementation of accessibility principles to the users.},
booktitle = {Proceedings of the 2003 Conference on Interaction Design and Children},
pages = {23–30},
numpages = {8},
keywords = {web authoring, web accessibility, children},
location = {Preston, England},
series = {IDC '03}
}

@inproceedings{10.1145/3373087.3375887,
author = {Kathail, Vinod},
title = {Xilinx Vitis Unified Software Platform},
year = {2020},
isbn = {9781450370998},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3373087.3375887},
doi = {10.1145/3373087.3375887},
abstract = {FPGAs provide significant advantages in throughput, latency, and energy efficiency for implementing low-latency, compute-intensive applications when compared to general-purpose CPUs and GPUs. Over the last decade, FPGAs have evolved into highly configurable SoCs with on-chip CPUs, domain-specific programmable accelerators, and flexible connectivity options. Recently, Xilinx introduced a new heterogeneous compute architecture, the Adaptive Compute Acceleration Platform (ACAP), with significantly more flexibility and performance to address an evolving set of new applications such as machine learning. This advancement on the device side is accompanied by similar advances on higher-level programming approaches to make FPGAs and ACAPs significantly easy to use for a wide range of applications. Xilinx Vitis Unified Software Platform is a comprehensive development environment to build and seamlessly deploy accelerated applications on Xilinx platforms including Alveo cards, FPGA-instances in the cloud, and embedded platforms. It addresses the three major industry trends: the need for heterogenous computing, applications that span cloud to edge to end-point, and AI proliferation. Vitis supports application programming using C, C++ and OpenCL, and it enables the development of large-scale data processing and machine learning applications using familiar, higher-level frameworks such as TensorFlow and SPARK. To facilitate communication between the host application and accelerators, Xilinx Runtime library (XRT) provides APIs for accelerator life-cycle management, accelerator execution management, memory allocation, and data communication between the host application and accelerators. In addition, a rich set of performance-optimized, open-source libraries significantly ease the application development. Vitis AI, an integral part of Vitis, enables AI inference acceleration on Xilinx platforms. It supports industry's leading deep learning frameworks like Tensorflow and Caffe, and offers a comprehensive suite of tools and APIs to prune, quantize, optimize, and compile pre-trained models to achieve the highest AI inference performance on Xilinx platforms. This talk provides an overview of Vitis and Vitis AI development environments.},
booktitle = {Proceedings of the 2020 ACM/SIGDA International Symposium on Field-Programmable Gate Arrays},
pages = {173–174},
numpages = {2},
keywords = {vitis unified software platform, vitis ai, machine learning tools, machine learning inference, higher-level programming tools for fpga, heterogenous computing, fpga acceleration},
location = {Seaside, CA, USA},
series = {FPGA '20}
}

@inproceedings{10.5555/2819009.2819172,
author = {Gambi, Alessio and Rostyslav, Zabolotnyi and Dustdar, Schahram},
title = {Improving cloud-based continuous integration environments},
year = {2015},
publisher = {IEEE Press},
abstract = {We propose a novel technique for improving the efficiency of cloud-based continuous integration development environments. Our technique identifies repetitive, expensive and time-consuming setup activities that are required to run integration and system tests in the cloud, and consolidates them into preconfigured testing virtual machines such that the overall costs of test execution are minimized. We create such testing machines by reconfiguring and opportunistically snapshotting the virtual machines already registered in the cloud.},
booktitle = {Proceedings of the 37th International Conference on Software Engineering - Volume 2},
pages = {797–798},
numpages = {2},
location = {Florence, Italy},
series = {ICSE '15}
}

@article{10.1145/261374.261380,
author = {Smith, D. Douglas},
title = {WebAda},
year = {1997},
issue_date = {May/June 1997},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {XVII},
number = {3},
issn = {1094-3641},
url = {https://doi.org/10.1145/261374.261380},
doi = {10.1145/261374.261380},
abstract = {The Ada community has used the power of the Internet to distribute computer resources and information; and most recently the World Wide Web (WWW) makes it easier to find those resources. Now, a tool called WebAda uses the Internet and the WWW to provide an interactive capability! [For the rest of this paper, I will use the term Internet to include the World Wide Web.]WebAda is an Ada development environment accessed via the World Wide Web. You don't download the compiler or any other software! You enter programs, set switches, compile, and see results through your favorite browser. In other words, your browser is the Graphical User Interface (GUI) to WebAda.The Lovelace Tutorial took an initial step to become interactive, providing a multiple choice quiz at the end of most tutorial pages. WebAda has taken the next step with an on-line development environment which integrates Ada tools and information.One could say WebAda is to the Internet as C is to Unix, or as Basic is to DOS. When you have Internet access, you have all of the capabilities of WebAda available.},
journal = {Ada Lett.},
month = {may},
pages = {30–35},
numpages = {6}
}

@inproceedings{10.1145/3084289.3089913,
author = {Montagud, Mario and Boronat, Fernando and Gonz\'{a}lez, Juan and Pastor, Javier},
title = {Web-based Platform for Subtitles Customization and Synchronization in Multi-Screen Scenarios},
year = {2017},
isbn = {9781450350235},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3084289.3089913},
doi = {10.1145/3084289.3089913},
abstract = {This paper presents a web-based platform that enables the customization and synchronization of subtitles on both single- and multi-screen scenarios. The platform enables the dynamic customization of the subtitles' format (font family, size, color...) and position according to the users' preferences and/or needs. Likewise, it allows configuring the number of subtitles lines to be presented, being able to restore the video playout position by clicking on a specific one. It also allows the simultaneous selection of various subtitle languages, and applying a delay offset to the presentation of subtitles. All these functionalities can also be available on (personal) companion devices, allowing the presentation of subtitles in a synchronized manner with the ones on the main screen and their individual customization. With all these functionalities, the platform enables personalized and immersive media consumption experiences, contributing to a better language learning, social integration and an improved Quality of Experience (QoE) in both domestic and multi-culture environments.},
booktitle = {Adjunct Publication of the 2017 ACM International Conference on Interactive Experiences for TV and Online Video},
pages = {81–82},
numpages = {2},
keywords = {web, synchronization, subtitles, social integration, qoe, multi-screen scenarios, ides, accessibility},
location = {Hilversum, The Netherlands},
series = {TVX '17 Adjunct}
}

@inproceedings{10.1145/3594671.3594682,
author = {Kavalar, Martin and Markovics, Philippa and Rusher, Jack},
title = {Clerk: Moldable Live Programming for Clojure},
year = {2023},
isbn = {9798400707551},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3594671.3594682},
doi = {10.1145/3594671.3594682},
abstract = {Clerk is an open source Clojure programmer’s assistant that builds upon the traditions of interactive and literate programming to provide a holistic moldable development environment. Clerk layers static analysis, incremental computation, and rich browser-based graphical presentations on top of a Clojure programmer’s familiar toolkit to enhance their workflow.},
booktitle = {Companion Proceedings of the 7th International Conference on the Art, Science, and Engineering of Programming},
pages = {22–31},
numpages = {10},
keywords = {notebooks, moldable development, live programming, literate programming, lisp, clojure},
location = {<conf-loc>, <city>Tokyo</city>, <country>Japan</country>, </conf-loc>},
series = {Programming '23}
}

@inproceedings{10.5555/2662726.2662731,
author = {Oney, Stephen and Myers, Brad A. and Brandt, Joel},
title = {Euclase: a live development environment with constraints and FSMs},
year = {2013},
isbn = {9781467362658},
publisher = {IEEE Press},
abstract = {Euclase is a live development environment focused on creating interactive web applications. It uses a programming model that combines constraints and finite state machines to specify interactive behaviors. Euclase is "live" in the sense that while the user is developing code, their program is always executing. Changes made to the source of the program are reflected immediately in the running program. We identify some of the implementation and design challenges of making our development environment live, including performance issues, ensuring predictability, dealing with errors in the source, and handling edge cases such as the removal of code that is currently running. We also discuss how Euclase's use of finite state machines and constraints can help alleviate these difficulties.},
booktitle = {Proceedings of the 1st International Workshop on Live Programming},
pages = {15–18},
numpages = {4},
keywords = {live development, interactive applications, interaction design, finite state machines, constraints},
location = {San Francisco, California},
series = {LIVE '13}
}

@proceedings{10.1145/2429376,
title = {DDFP '13: Proceedings of the 2013 workshop on Data driven functional programming},
year = {2013},
isbn = {9781450318716},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {Functional programming techniques are becoming increasingly important in data-centric programming: languages like Haskell, Scala and C# draw heavily on a range of functional techniques and find application in numerous data-driven domains; functional paradigms like map/reduce and its extensions lie at the core of modern scalable data processing; and "information-rich" languages like Ur, F# and Gosu use metaprogramming to integrate type-safe queries, web-based APIs and scalable data sources along with associated semantically-rich metadata into the programming language. In principle, the expressiveness, strong typing and core functional paradigm of these languages make them an ideal choice for expressing robust and scalable data-centric programming.However, many challenges remain. We live in an information rich world. Programming languages are not designed for this. On the programming side, as the world moves into ubiquitous computing with devices and services, it is vital that developers can productively integrate information at internet-scale into their everyday programming environment. On the information side, as the web continues to grow with linked data and open data resources being made available more broadly by government agencies (e.g. World Bank) and communities (e.g. Freebase) it becomes even more important to have the tools and mechanisms to make sense of the data.The goal of the Data Driven Functional Programming Workshop 2013 is to discuss, promote, and advance the use of functional programming in information-rich data spaces --- including the development of new programming and data-manipulation systems and the extension of existing ones. By devising methods for handling data from the programming level, we can promote the research and development of better functional programming technologies as a whole, as well as facilitate the shift towards both principled and effective data-centric computing.The papers included in the proceedings explore the area of data-centric programming in the light of today's data challenges, particularly with a view to the application of functional programming and metaprogramming techniques. Research projects and short papers explore the following topics: Formal systems that capture the essential theoretical elements of data-centric programmingExperimental systems that demonstrate novel data-centric programming techniquesTechnology that demonstrate correctness, scalability, productivity, robustness or maintainability of data-centric programsSchema evolution, schema-type mapping, query languages, probabilistic programming, networkconnected programming or semi-structured dataProgramming-related aspects of knowledge representation techniques including the database theory, ontology techniques and linked data.New views and opinions, coming from the functional programming and semantic web communities, address some of the following questions: How to effectively explore, navigate, understand, analyze and present data to the developerWhat are the necessary tools and language features needed to help streamline the developer experienceHow to easily access and query linked dataHow to seamlessly integrate and manipulate diverse datasetsHow to help humans make sense of semantically-rich dataHow to address schema evolution, schema-type mapping, query languages, probabilistic programming?In addition, the program includes a keynote, a tutorial on Information-rich Programming and a panel on Next Generation Data-Driven Programming. We hope that these proceedings will help promote the discussion among the data-driven research and the functional programming communities.},
location = {Rome, Italy}
}

@inproceedings{10.1145/2899415.2925495,
author = {Estey, Anthony and Coady, Yvonne},
title = {How Can We Improve Student Workflow Practices to Better Enable Student Success in CS1?},
year = {2016},
isbn = {9781450342315},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2899415.2925495},
doi = {10.1145/2899415.2925495},
abstract = {Recent research suggests that one-third of the students enrolled in CS1 courses typically end up failing [4]. Several studies have demonstrated how learning tools can assist struggling students [3]. We present an online, open-source, practice programming tool. BitFit was developed to (1) provide students with an environment to practice weekly material and receive support when needed; and (2) collect student usage data as students progress through programming exercises [2]. We present the core features of BitFit, as well as our qualitative and quantitative analysis of 652 students over three semesters of our CS1 course.Our findings support recent studies that suggest that at-risk students can be identified as early as two weeks into the semester [1]; the metric used in our study was able to identify over 29% of the students who ended up failing with very high certainty. Our results also reveal that interaction patterns with BitFit, in particular with hint features requested by students, allow the identification of another 52% of students who eventually fail. Throughout the semester, students who failed the course used hint features four times as often as top students, while only attempting to compile code one third as often. The combination of early indicators and interaction patterns identify 81% of students who failed the course during our study.Students were asked to reflect on their study habits and report on course progress in monthly surveys. Although workflow patterns on a per-question basis were very different between unsuccessful and successful students, students from both groups believed BitFit was effective in helping them learning the course material. Unfortunately, many students who ended up failing chose to learn course concepts by reading through hints and sample solutions. It appears that many of these students believed that memorizing a solution in BitFit was a more productive strategy than solving each problem and programming a solution on their own.The quantitative data collected by BitFit suggests that there are identifiable differences in workflow patterns between unsuccessful and successful students. Qualitative data collected through student surveys suggests that unsuccessful students do not know their study habits are unlikely to lead to success. We are currently exploring intervention strategies to guide at-risk students towards more productive ways of learning course material.Using a mixed-method approach combining qualitative BitFit data with quantitative survey data, we plan to continue to better analyze and understand where, when, and how our students exhibit ineffective study habits. We look forward to feedback and discussion about possible intervention techniques, and how to best evaluate the effectiveness of interventions focused on improving student study and learning habits using interactive learning environmentsIn summary, the main contributions of this work are to (1) illustrate the differences between successful and unsuccessful student workflow patterns based on log data; (2) highlight the differences in survey responses between unsuccessful and successful students about the perceived effectiveness of their own study habits; and (3) overview a number of intervention techniques to potentially incorporate into upcoming course offerings. We believe that as we continue to learn more about the reasons certain students exhibit ineffective study habits, our efforts to support at-risk students will increasingly result in student success.},
booktitle = {Proceedings of the 2016 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {370},
numpages = {1},
keywords = {student study behavior, programming practice tool, predictors of success, educational data mining, cs1},
location = {Arequipa, Peru},
series = {ITiCSE '16}
}

@inproceedings{10.1145/1094855.1094935,
author = {Perera, Roly and Foster, Jeff},
title = {A delta-driven execution model for semantic computing},
year = {2005},
isbn = {1595931937},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1094855.1094935},
doi = {10.1145/1094855.1094935},
abstract = {We demonstrate the execution model of a computing platform where computation is both incremental and data-driven. We call such an approach delta-driven. The platform is intended as a delivery vehicle for semantically integrated software, and thus lends itself to the semantic web, domain-driven development, and next-generation software development environments. Execution is transparent, versioned, and persistent. This technology - still at an early stage - is called domain/object.},
booktitle = {Companion to the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications},
pages = {202–204},
numpages = {3},
keywords = {relational programming, lazy memoization, incremental computation, delta-driven execution, adaptive functions},
location = {San Diego, CA, USA},
series = {OOPSLA '05}
}

@inproceedings{10.1145/961511.961579,
author = {Boshart, Mark A. and Kosa, Martha J.},
title = {Growing a GUI from an XML tree},
year = {2003},
isbn = {1581136722},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/961511.961579},
doi = {10.1145/961511.961579},
abstract = {Computer science faculty in the current fast-paced computing environment must be very resourceful; they must constantly learn new topics and explain them to their undergraduate students (who are familiar with the acronyms and inquisitive about their meaning), while not letting these exciting new topics overshadow the fundamentals. They must analyze these new developments to see the fundamental concepts that ultimately serve as their basis. They must then determine how to integrate these concepts into the undergraduate curriculum at the correct level for their students. This poster shows how XML (eXtensible Markup Language) and hierarchical data structures are correlated, allowing instructors to add XML concepts to the CS2 curriculum in a way that is fun for students, namely, GUI development.Students typically enjoy designing their GUIs. They find it is hard to understand how a GUI will look without the visual aid of an IDE (Integrated Development Environment). However, when using an IDE, the details of how the user interface is created are hidden from the programmers - not just the code, but the design principles as well. The programmers can become dependent on the IDE for GUI development, limiting their ability to design novel interfaces. In addition, students who do not use an IDE at all find it difficult to remember all their GUI component relationships, making GUI design a trial and error process. We seek a way for students to design GUIs that forces them to consider how GUIs are constructed, improving their design skills, while at the same time making the design process as straightforward as possible.GUIs are hierarchical in nature because they are based on containers holding GUI components, which may themselves be containers. Thus, it may be helpful to utilize the notion of a tree in the construction of a GUI, allowing development of GUIs without the dependence on a standard IDE and without many of the difficulties of GUI construction by hand. As students typically learn about trees in CS2, this is an appropriate time to introduce GUI hierarchies. Students are also often eager to be exposed to hot topics in computer science, such as XML. XML is hierarchical in nature; thus, it lends itself to GUI design. We propose integrating these ideas into an "XML-based IDE" that students can use in the beginning stages of development for their own GUIs. This makes students aware of the hierarchical nature of their GUIs in the design phase, enhancing their ability to develop useful and creative user interfaces. At the same time, students are exposed to basic XML concepts and syntax.Our "XML-based IDE" has two important parts: our markup language and our code generator. First, we developed a preliminary XML schema describing a grammar for basic GUI programs. This schema describes the XML tags and the relationships among them. Our XML tags correspond to Java nomenclature (swinggui, jframe, jpanel, jcomponent, listener, layout, etc.) as our CS2 students program in Java. After developing our schema, we implemented a Java program to translate an XML document conforming to our schema to corresponding Java source files. To build a shell of a GUI program, a student needs to write an XML document describing the interface and run our utility program to generate the Java source files. When the Java source files are compiled and executed, the student can see the resulting GUI. The student only needs to design and implement the event-handling algorithms. Our "XML-based IDE" demonstrates the usefulness of XML in other areas besides the World-Wide Web and is a refreshing change from the standard XML examples.We believe that our "XML-based IDE" is a practical and fun way to introduce XML into the introductory computer science curriculum without sacrificing fundamental concepts.},
booktitle = {Proceedings of the 8th Annual Conference on Innovation and Technology in Computer Science Education},
pages = {223},
numpages = {1},
location = {Thessaloniki, Greece},
series = {ITiCSE '03}
}

@inproceedings{10.1145/1833310.1833313,
author = {Goldman, Max and Miller, Robert C.},
title = {Test-driven roles for pair programming},
year = {2010},
isbn = {9781605589664},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1833310.1833313},
doi = {10.1145/1833310.1833313},
abstract = {The driver/navigator model of pair programming needs to be revised. We propose a model of programming in pairs where roles are based on test-driven development. Each programmer uses a different view of a shared development environment. One member of the pair writes tests, while the other implements the system. The programmers can cooperate as needed and move between different collaboration modalities. As part of a user-centered design process, we built a prototype web-based collaborative development environment for test-driven pair programming and ran a user study with professional software developers to evaluate the idea and identify research challenges. We used existing vocabularies and developed two novel visualizations to analyze the data, and found that the approach is feasible.},
booktitle = {Proceedings of the 2010 ICSE Workshop on Cooperative and Human Aspects of Software Engineering},
pages = {13–20},
numpages = {8},
keywords = {visualizations, test-driven development, pair programming},
location = {Cape Town, South Africa},
series = {CHASE '10}
}

@inproceedings{10.1145/142868.142899,
author = {Ferrans, James C. and Hurst, David W. and Sennett, Michael A. and Covnot, Burton M. and Ji, Wenguang and Kajka, Peter and Ouyang, Wei},
title = {HyperWeb: a framework for hypermedia-based environments},
year = {1992},
isbn = {0897915542},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/142868.142899},
doi = {10.1145/142868.142899},
abstract = {Software productivity and quality will increase as we improve our model of software and develop tools to support that model. Development environments must take into account that software is more than source; that it is more than text; and that it forms a highly interconnected web of information. Because more time is spent understanding and maintaining software than creating it, environments should strongly support browsing and reading. Finally, environments must be easy to customize.In this paper we present HyperWeb, a framework that supports the construction of hypermedia-based software development environments having this richer view of software. It coordinates the activities of an integrated set of tools through a message server, uses an object-oriented database to  store software artifacts, and supports hypermedia linking of these software artifacts. It is built around an interpreter for a general purpose scripting language, allowing for very flexible customization and environment building. We also describe our experience in using it to build an environment that supports software design, development and maintenance on Unix. Its primary features include support for document linking, source code annotation and restructuring, and modification request tracking. It is being used and evaluated internally and at several external sites.},
booktitle = {Proceedings of the Fifth ACM SIGSOFT Symposium on Software Development Environments},
pages = {1–10},
numpages = {10},
location = {Tyson's Corner, Virginia, USA},
series = {SDE 5}
}

@inproceedings{10.1145/2814864.2814893,
author = {Chen, Willy and Lambertz, Julian},
title = {Living semantic platform},
year = {2015},
isbn = {9781450334624},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2814864.2814893},
doi = {10.1145/2814864.2814893},
abstract = {The Living Semantic Platform (LSP) is a web-based and collaborative development environment for lightweight ontologies based on OWL2 QL. Moreover, it includes an integrated OWL2 QL reasoner which allows for efficient query answering based on SPARQL queries.},
booktitle = {Proceedings of the 11th International Conference on Semantic Systems},
pages = {185–187},
numpages = {3},
keywords = {query answering, collaborative ontology development, SPARQL, OWL2 QL},
location = {Vienna, Austria},
series = {SEMANTICS '15}
}

@inproceedings{10.1145/1186595.1186598,
author = {Ricci, Luiz A. and Schwabe, Daniel},
title = {An authoring environment for model-driven web applications},
year = {2006},
isbn = {8576691000},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1186595.1186598},
doi = {10.1145/1186595.1186598},
abstract = {This paper presents a development environment and framework that supports a Model Driven Development approach to Web Application Development. In this framework, the models are described through graphical diagrams that are processed by the environment. The main purpose is to ease the development of a web application using Visual Studio .Net 2005 as an IDE and Semantic Hypermedia Development Method (SHDM) as development method, allowing the application architect to focus on the application modeling. We also discuss how the meta-modeling facilities of VS .Net 2005 were extensively used.},
booktitle = {Proceedings of the 12th Brazilian Symposium on Multimedia and the Web},
pages = {11–19},
numpages = {9},
keywords = {model-driven development, SHDM, OOHDM, DSL},
location = {Natal, Rio Grande do Norte, Brazil},
series = {WebMedia '06}
}

@inproceedings{10.1145/1094855.1094871,
author = {Perera, Roly and Foster, Jeff and Koch, Gy\"{o}rgy},
title = {A delta-driven execution model for semantic computing},
year = {2005},
isbn = {1595931937},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1094855.1094871},
doi = {10.1145/1094855.1094871},
abstract = {We describe (and demonstrate) the execution model of a computing platform where computation is both incremental and data-driven. We call such an approach delta-driven. The platform is intended as a delivery vehicle for semantically integrated software, and thus lends itself to the semantic web, domain-driven development, and next-generation software development environments. Execution is transparent, versioned, and persistent. This technology - still at an early stage - is called domain/object.},
booktitle = {Companion to the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications},
pages = {63–71},
numpages = {9},
keywords = {relational programming, lazy memoization, incremental computation, delta-driven execution, adaptive functions},
location = {San Diego, CA, USA},
series = {OOPSLA '05}
}

@inproceedings{10.1145/1067343.1067378,
author = {Bosser, Anne-Gwenn},
title = {Massively multi-player games: matching game design with technical design},
year = {2004},
isbn = {1581138822},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1067343.1067378},
doi = {10.1145/1067343.1067378},
abstract = {We propose a framework model to facilitate the prototyping and refinement of Massively Multi-player Online Games (MMOG), when included in the appropriate development environment. This work-in-progress report is motivated by observations made in the video game industry about the industrial process of designing such a demanding application, and based upon the technical know-how in that domain. A major benefit of the development environment based on this framework would be to validate game-design interactions when confronted with technical feasibility. A further benefit of this tool would be to assist the rest of the development process: for a spiral life-cycle style process, the tool could provide some interesting ways for analyzing the performance of more and more accurate prototypes at each stage of the development.},
booktitle = {Proceedings of the 2004 ACM SIGCHI International Conference on Advances in Computer Entertainment Technology},
pages = {263–268},
numpages = {6},
location = {Singapore},
series = {ACE '04}
}

@inproceedings{10.1145/2661088.2661100,
author = {Freudenberg, Bert and Ingalls, Dan H.H. and Felgentreff, Tim and Pape, Tobias and Hirschfeld, Robert},
title = {SqueakJS: a modern and practical smalltalk that runs in any browser},
year = {2014},
isbn = {9781450332118},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2661088.2661100},
doi = {10.1145/2661088.2661100},
abstract = {We report our experience in implementing SqueakJS, a bit-compatible implementation of Squeak/Smalltalk written in pure JavaScript. SqueakJS runs entirely in the Web browser with a virtual filesystem that can be directed to a server or client-side storage. Our implementation is notable for simplicity and performance gained through adaptation to the host object memory and deployment leverage gained through the Lively Web development environment. We present several novel techniques as well as performance measurements for the resulting virtual machine. Much of this experience is potentially relevant to preserving other dynamic language systems and making them available in a browser-based environment.},
booktitle = {Proceedings of the 10th ACM Symposium on Dynamic Languages},
pages = {57–66},
numpages = {10},
keywords = {web browsers, virtual machines, squeak, smalltalk, performance, languages, javascript},
location = {Portland, Oregon, USA},
series = {DLS '14}
}

@inproceedings{10.1145/2994258.2994285,
author = {Dong, Qi and Arias-Yacupoma, Roberto and Katchen, Louis and Kapadia, Mubbasir},
title = {Confluence: visualizing social physics for interactive narrative},
year = {2016},
isbn = {9781450345927},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2994258.2994285},
doi = {10.1145/2994258.2994285},
abstract = {We introduce Confluence, a web-based social physics game framework and development tools. It seeks to combine the powers of graphical game engines with physics and animation, and social simulation of social physics engines, with convenient tools like social network visualization, strategy analysis and in-game social rule authoring. We evaluate it in developing a game with character personalities and goals that are influenced by social norms.},
booktitle = {Proceedings of the 9th International Conference on Motion in Games},
pages = {199},
numpages = {1},
keywords = {visualization, social physics, interactive narrative, emergent narrative, character personality},
location = {Burlingame, California},
series = {MIG '16}
}

@article{10.1145/1595453.1595487,
author = {Schaub, Stephen},
title = {Teaching CS1 with web applications and test-driven development},
year = {2009},
issue_date = {June 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {2},
issn = {0097-8418},
url = {https://doi.org/10.1145/1595453.1595487},
doi = {10.1145/1595453.1595487},
abstract = {Teaching client/server web application development in CS1 can help increase student motivation without introducing a heavy curriculum footprint. This paper summarizes the author's experience teaching CS1 for several years using a web application focus. The use of an appropriate web API, good development environment, and Test-Driven Development methodology helps ensure student success.},
journal = {SIGCSE Bull.},
month = {jun},
pages = {113–117},
numpages = {5},
keywords = {web applications, unit testing, test-driven development, CS1}
}

@article{10.5555/2458569.2458617,
author = {Pheatt, Chuck and Wayman, Andrew},
title = {Using the Xbox Kinect™ sensor for gesture recognition},
year = {2013},
issue_date = {May 2013},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {28},
number = {5},
issn = {1937-4771},
abstract = {The Kinect sensor was introduced in November 2010 by Microsoft as an accessory for the Xbox 360 video game system. Shortly after the product release, multiple software frameworks became available that allows a personal computer to capture output from a stand-alone Kinect [1,2].The Kinect contains a RGB camera and a depth sensor using an IR light source that allows the unit to output three dimensional positional data in real time. The Kinect data is organized as a stream of two 640 x 480 images acquired at a rate of 30 frames per second (fps). One of these is an ordinary 24-bit RGB video image. The other is an 11-bit depth image from which (x, y, z) positional data may be calculated. Students are well aware of the Kinect as an input device for the Xbox 360 system which makes it an ideal venue for student experimentation and independent study projects using a personal computer platform.As part of the OpenNI framework [2], middleware (NITE [3]) is available that allows the Kinect to recognize gestures. The gestures include focus (getting the Kinect's attention), wave, swipe (up, down, left or right) and circle. The gestures may be used to control user interfaces with gesture's as well as being the foundation for gaming activities.The tutorial presentation will provide attendees with detailed information on the use of the NITE middleware in the C++ development environments for the Kinect. In this tutorial we will present:• Hardware and software requirements for the development environment.• Detailed instructions for downloading of device drivers, OpenNI framework and NITE middleware and associated libraries.• "Hello World" examples for checking the functionality of the NITE middleware with Kinect unit.• An overview of the NITE middleware capabilities including functionality and limitations.• A summary of the library structure of the OpenNI and NITE frameworks.• Several simple examples of the devices capabilities including player tracking and the use of gesture recognition.• A summary of research opportunities that are student accessible.All software and materials presented during the tutorial will be provided on the author's web site so that users may quickly get their Kinect applications up and running without significant configuration issues and start-up problems.},
journal = {J. Comput. Sci. Coll.},
month = {may},
pages = {226–227},
numpages = {2}
}

@inproceedings{10.1145/3051457.3053997,
author = {Ju, An and Glassman, Elena and Fox, Armando},
title = {Teamscope: Scalable Team Evaluation via Automated Metric Mining for Communication, Organization, Execution, and Evolution},
year = {2017},
isbn = {9781450344500},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3051457.3053997},
doi = {10.1145/3051457.3053997},
abstract = {Teaching software development teams can be difficult to scale. Based on various cloud-based software development tools, Teamscope provides automated or semi-automated metrics to improve the scalability of a course with team projects. Metrics developed in Teamscope provide a synthesized view of a student team. Our preliminary results have shown the validity of these metrics. We also present a case study of applying metrics to teaching software development course in this paper.},
booktitle = {Proceedings of the Fourth (2017) ACM Conference on Learning @ Scale},
pages = {249–252},
numpages = {4},
keywords = {software engineering, process conformance, massive courses, education},
location = {Cambridge, Massachusetts, USA},
series = {L@S '17}
}

@article{10.5555/767598.767646,
author = {Ury, Gary},
title = {Workshop on moving to visual basic.net},
year = {2003},
issue_date = {April 2003},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {18},
number = {4},
issn = {1937-4771},
abstract = {This workshop and accompanying paper will discuss and demonstrate some of the strengths and weaknesses of the new VB.Net object-oriented programming language. It is appropriate for anyone who is contemplating a course in the new language or anyone who just wants to know more about VB.Net architecture. Database connectivity and web applications will be demonstrated in addition to some fundamental navigational and Interactive Development Environment (IDE) issues. Finally, the authors will share their experiences in developing and teaching VB.Net as a second or third language to junior and senior CS/IS majors and minors at Northwest Missouri State University.},
journal = {J. Comput. Sci. Coll.},
month = {apr},
pages = {332–335},
numpages = {4}
}

@inproceedings{10.5555/2819009.2819140,
author = {Nguyen, Hung Viet and K\"{a}stner, Christian and Nguyen, Tien N.},
title = {Varis: IDE support for embedded client code in PHP web applications},
year = {2015},
publisher = {IEEE Press},
abstract = {In software development, IDE services such as syntax highlighting, code completion, and "jump to declaration" are used to assist developers in programming tasks. In dynamic web applications, however, since the client-side code is dynamically generated from the server-side code and is embedded in the server-side program as string literals, providing IDE services for such embedded code is challenging. In this work, we introduce Varis, a tool that provides editor services on the client-side code of a PHP-based web application, while it is still embedded within server-side code. Technically, we first perform symbolic execution on a PHP program to approximate all possible variations of the generated client-side code and subsequently parse this client code into a VarDOM that compactly represents all its variations. Finally, using the VarDOM, we implement various types of IDE services for embedded client code including syntax highlighting, code completion, and "jump to declaration". The video demonstration for Varis is available at http://www.youtube.com/watch?v=w1TECeRXGrg.},
booktitle = {Proceedings of the 37th International Conference on Software Engineering - Volume 2},
pages = {693–696},
numpages = {4},
location = {Florence, Italy},
series = {ICSE '15}
}

@inproceedings{10.1145/1176617.1176692,
author = {Krampe, G\"{o}ran},
title = {Advanced issue tracker in smalltalk},
year = {2006},
isbn = {159593491X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1176617.1176692},
doi = {10.1145/1176617.1176692},
abstract = {The system demonstrated is an advanced open source issue tracker built using Smalltalk, the continuation based web framework Seaside and an OODB called Magma.These unorthodox components enabled an uncompromised object oriented implementation and very fast development. The demonstration presents the system, its design, project experiences and the development environment used.},
booktitle = {Companion to the 21st ACM SIGPLAN Symposium on Object-Oriented Programming Systems, Languages, and Applications},
pages = {721},
numpages = {1},
keywords = {workflow, issue tracker, forms, continations, bugs, Smalltalk, ODBMS, Ajax},
location = {Portland, Oregon, USA},
series = {OOPSLA '06}
}

@article{10.1145/1322464.1322465,
author = {Bih, Joseph},
title = {When it comes to E-learning},
year = {2007},
issue_date = {October 2007},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2007},
number = {October},
url = {https://doi.org/10.1145/1322464.1322465},
doi = {10.1145/1322464.1322465},
abstract = {E-learning is fast becoming a major learning and skills delivery method within larger companies as a staff development tool. Survey shows that among American colleges and universities in 2002, 11% of students took an online course, 97 % of public institutions offered at least one online or blended course, 49% offered an online degree program, and 67% considering e-learning a critical long-term strategy for their institution. The questions about e-learning have become "how", "why" and "with what outcomes.},
journal = {Ubiquity},
month = {oct},
articleno = {5},
numpages = {11}
}

@inproceedings{10.1145/1463788.1463821,
author = {Ng, Joanna},
title = {Workshops of CASCON 2008},
year = {2008},
isbn = {9781450378826},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1463788.1463821},
doi = {10.1145/1463788.1463821},
abstract = {CASCON workshops provide a forum to present, discuss, and debate issues, problems, ideas, emerging technologies, work-in-progress, or directions on topics such as software best practices, software engineering, distributed and Web-based systems, data management, software development tools, electronic commerce, and user experience. Interdisciplinary workshops are particularly encouraged. The workshop format may include position papers, expert panels, hands-on exercises, and discussions.In 2008 there were 37 workshops over the course of four days.},
booktitle = {Proceedings of the 2008 Conference of the Center for Advanced Studies on Collaborative Research: Meeting of Minds},
articleno = {24},
numpages = {10},
location = {Ontario, Canada},
series = {CASCON '08}
}

@inproceedings{10.1145/1321211.1321260,
author = {Lyons, Kelly},
title = {Workshops of CASCON 2007},
year = {2007},
publisher = {IBM Corp.},
address = {USA},
url = {https://doi.org/10.1145/1321211.1321260},
doi = {10.1145/1321211.1321260},
abstract = {CASCON workshops provide a forum to present, discuss, and debate issues, problems, ideas, emerging technologies, work-in-progress, or directions on topics such as software best practices, software engineering, distributed and Web-based systems, data management, software development tools, electronic commerce, and user experience. Interdisciplinary workshops are particularly encouraged. The workshop format may include position papers, expert panels, hands-on exercises, and discussions.In 2007 there were 43 workshops over the course of four days.},
booktitle = {Proceedings of the 2007 Conference of the Center for Advanced Studies on Collaborative Research},
pages = {356–365},
numpages = {10},
location = {Richmond Hill, Ontario, Canada},
series = {CASCON '07}
}

@inproceedings{10.1145/3443467.3443880,
author = {Zhou, Zheshuai and Li, Yuntao and Chen, Xiaokang and Pan, Lin},
title = {Web service creation in SOA based on the gSOAP},
year = {2021},
isbn = {9781450387811},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3443467.3443880},
doi = {10.1145/3443467.3443880},
abstract = {This paper expounds the concepts and thoughts of SOA, and analyzes the conceivable methods of implementing the SOA, and points out the possibility of using the WEB services to implement the SOA. On the question of how to develop the WEB services, this paper uses the open source development tool gSOAP to achieve it.We make the detailed introduction to the thoughts and process of WEB service using the gSOAP, and provide an example to verify the feasibility of the development.},
booktitle = {Proceedings of the 2020 4th International Conference on Electronic Information Technology and Computer Engineering},
pages = {924–928},
numpages = {5},
keywords = {gSOAP, Web Services, SOA},
location = {Xiamen, China},
series = {EITCE '20}
}

@inproceedings{10.1145/1920778.1920822,
author = {Tonon, Kevin and Baecker, Ronald},
title = {GameSoup: a two-stage game development environment},
year = {2010},
isbn = {9781450302357},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1920778.1920822},
doi = {10.1145/1920778.1920822},
abstract = {Designing an end-user development environment seems to require making a trade-off between ease of use and expressiveness. GameSoup is an online game development platform that attempts to satisfy these two design requirements by splitting development into two distinct stages. One stage requires programming experience and is highly expressive; the other stage is very easy to use.},
booktitle = {Proceedings of the International Academic Conference on the Future of Game Design and Technology},
pages = {255–256},
numpages = {2},
keywords = {end-user development},
location = {Vancouver, British Columbia, Canada},
series = {Futureplay '10}
}

@inproceedings{10.1145/2593902.2593903,
author = {Tillmann, Nikolai and Moskal, Micha\l{} and de Halleux, Jonathan and Burckhardt, Sebastian and Ball, Thomas and Bishop, Judith},
title = {TouchDevelop: create rich mobile apps on touch devices (tutorial)},
year = {2014},
isbn = {9781450328784},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2593902.2593903},
doi = {10.1145/2593902.2593903},
abstract = {We are experiencing a technology shift: Powerful and easy-to-use mobile devices like smartphones and tablets are becoming more prevalent than traditional PCs and laptops. Mobile devices are going to be the first and, in less developed countries, possibly the only computing devices which virtually all people will own and carry with them at all times. In this tutorial, participants will learn about developing software directly on their mobile devices. The tutorial is based on TouchDevelop, a modern software development environment that embraces this new reality, treating mobile devices as first-class software development machines, instead of relying on legacy development models built around PC. TouchDevelop comes with typed, structured programming language that is built around the idea of only using a touchscreen as the input device to author code. Access to the cloud, flexible user interfaces, and access to sensors such as accelerometer and GPS are available as a first-class citizens in the programming language. TouchDevelop is available as a web app on Windows tablets, iOS, Android, Windows PCs and Macs, and as a native app on Windows Phone.},
booktitle = {Proceedings of the 1st International Conference on Mobile Software Engineering and Systems},
pages = {1–2},
numpages = {2},
keywords = {touch-based entry, tablet, smart phone, mobile devices, Web IDE},
location = {Hyderabad, India},
series = {MOBILESoft 2014}
}

@inproceedings{10.1145/2905055.2905056,
author = {Kumar, S. Ravi and Khan, Md. Abdul Muqsit and Krishna, Y. K. Sundara and Sekharaiah, K. Chandra},
title = {AB-EUIDE: An approach to the design of ergonomic user interfaces for Cloud Computing},
year = {2016},
isbn = {9781450339629},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2905055.2905056},
doi = {10.1145/2905055.2905056},
abstract = {Cloud computing is a rapidly growing technology for many organizations with dynamic scalability and services as virtual through the internet. The design of ergonomic user interface for cloud computing environment using the Multi-agent system for user well-being is required. In this paper, the usage of multi-agent system in designing of Agent-Based Ergonomic User Interface Development Environment for cloud computing is presented. The work is aimed for social, environment, human, personality and ICT developments.},
booktitle = {Proceedings of the Second International Conference on Information and Communication Technology for Competitive Strategies},
articleno = {1},
numpages = {5},
keywords = {Transformation model, Domain Model (DM), Concrete user interface (CUI) Model, Cloud Computing, Abstract user interface Model (AUI), AB EUIDE},
location = {Udaipur, India},
series = {ICTCS '16}
}

@inproceedings{10.1145/2858036.2858512,
author = {Chen, Yan and Oney, Steve and Lasecki, Walter S.},
title = {Towards Providing On-Demand Expert Support for Software Developers},
year = {2016},
isbn = {9781450333627},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2858036.2858512},
doi = {10.1145/2858036.2858512},
abstract = {Software development is an expert task that requires complex reasoning and the ability to recall language or API-specific details. In practice, developers often seek support from IDE tools, Web resources, or other developers to help fill in gaps in their knowledge on-demand. In this paper, we present two studies that seek to inform the design of future systems that use remote experts to support developers on demand. The first explores what types of questions developers would ask a hypothetical assistant capable of answering any question they pose. The second study explores the interactions between developers and remote experts in supporting roles. Our results suggest eight key system features needed for on-demand remote developer assistants to be effective, which has implications for future human-powered development tools.},
booktitle = {Proceedings of the 2016 CHI Conference on Human Factors in Computing Systems},
pages = {3192–3203},
numpages = {12},
keywords = {pair programming, intelligent assistants, crowdsourcing},
location = {San Jose, California, USA},
series = {CHI '16}
}

@article{10.1145/331499.331502,
author = {Fraternali, Piero},
title = {Tools and approaches for developing data-intensive Web applications: a survey},
year = {1999},
issue_date = {Sept. 1999},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {3},
issn = {0360-0300},
url = {https://doi.org/10.1145/331499.331502},
doi = {10.1145/331499.331502},
abstract = {The exponential growth and capillar diffusion of the Web are nurturing a novel generation of applications, characterized by a direct business-to-customer relationship. The development of such applications is a hybrid between traditional IS development and Hypermedia authoring, and challenges the existing tools and approaches for software production. This paper investigates the current situation of Web development tools, both in the commercial and research fields, by identifying and characterizing different categories of solutions, evaluating their adequacy to the requirements of Web application development, enlightening open problems, and exposing possible future trends.},
journal = {ACM Comput. Surv.},
month = {sep},
pages = {227–263},
numpages = {37},
keywords = {development, application, WWW, Intranet, HTML}
}

@inproceedings{10.1145/2245276.2245414,
author = {Ahmadi, Navid and Jazayeri, Mehdi and Repenning, Alexander},
title = {Performance evaluation of user-created open-web games},
year = {2012},
isbn = {9781450308571},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2245276.2245414},
doi = {10.1145/2245276.2245414},
abstract = {The rise of HTML5 and Web browsers' execution performance has led to the emergence of several open-Web games developed by professional developers but not by end users. To create their games, end users require higher level development environments and domain-specific languages which impose execution performance overhead. This overhead becomes a critical factor in determining whether the Web can be used as a hosting platform for end-user programming of computer games. In this article we present the performance evaluation results of user-created games developed using AgentWeb, an open-Web game design environment for non-programmers. Our findings show that Web is a hospitable environment for executing games built using high-level game design environments.},
booktitle = {Proceedings of the 27th Annual ACM Symposium on Applied Computing},
pages = {730–732},
numpages = {3},
keywords = {performance evaluation, high-level languages, end-user programming, HTML5},
location = {Trento, Italy},
series = {SAC '12}
}

@inproceedings{10.5555/2819321.2819345,
author = {Lubick, Kevin and Barik, Titus and Murphy-Hill, Emerson},
title = {Can social screencasting help developers learn new tools?},
year = {2015},
publisher = {IEEE Press},
abstract = {An effective way to learn about software development tools is by directly observing peers' workflows. However, these tool knowledge transfer events happen infrequently because developers must be both colocated and available. We explore an online social screencasting system that removes the dependencies of colocation and availability while maintaining the beneficial tool knowledge transfer of peer observation. Our results from a formative study indicate these online observations happen more frequently than in-person observations, but their effects are only temporary. We conclude that while peer observation facilitates online knowledge transfer, it is not the only component --- other social factors may be involved.},
booktitle = {Proceedings of the Eighth International Workshop on Cooperative and Human Aspects of Software Engineering},
pages = {113–114},
numpages = {2},
location = {Florence, Italy},
series = {CHASE '15}
}

@inproceedings{10.1145/500737.500743,
author = {Arp\'{\i}rez, Julio C. and Corcho, Oscar and Fern\'{a}ndez-L\'{o}pez, Mariano and G\'{o}mez-P\'{e}rez, Asunci\'{o}n},
title = {WebODE: a scalable workbench for ontological engineering},
year = {2001},
isbn = {1581133804},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/500737.500743},
doi = {10.1145/500737.500743},
abstract = {This paper presents WebODE as a workbench for ontological engineering that not only allows the collaborative edition of ontologies at the knowledge level, but also provides a scalable architecture for the development of other ontology development tools and ontology-based applications. First, we will describe the knowledge model of WebODE, which has been mainly extracted and improved from the reference model of METHONTOLOGY's intermediate representations. Later, we will present its architecture, together with the main functionalities of the WebODE ontology editor, such as its import/export service, translation services, ontology browser, inference engine and axiom generator, and some services that have been integrated in the workbench: WebPicker, OntoMerge and the OntoCatalogue.},
booktitle = {Proceedings of the 1st International Conference on Knowledge Capture},
pages = {6–13},
numpages = {8},
keywords = {translation, ontology engineering workbench, ontology building, integration and merge, WebODE},
location = {Victoria, British Columbia, Canada},
series = {K-CAP '01}
}

@inproceedings{10.1145/3464432.3464436,
author = {Jacques, Jason T. and Kristensson, Per Ola},
title = {Studying Programmer Behaviour at Scale: A&nbsp;Case&nbsp;Study&nbsp;using&nbsp;Amazon Mechanical Turk},
year = {2021},
isbn = {9781450389860},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3464432.3464436},
doi = {10.1145/3464432.3464436},
abstract = {Developing and maintaining a correct and consistent model of how code will be executed is an ongoing challenge for software developers. However, validating the tools and techniques we develop to aid programmers can be a challenge plagued by small sample sizes, high costs, or poor generalisability. This paper serves as a case study using a web-based crowdsourcing approach to study programmer behaviour at scale. We demonstrate this method to create controlled coding experiments at modest cost, highlight the efficacy of this approach with objective validation, and comment on notable findings from our prototype experiment into one of the most ubiquitous, yet understudied, features of modern software development environments: syntax highlighting.},
booktitle = {Companion Proceedings of the 5th International Conference on the Art, Science, and Engineering of Programming},
pages = {36–48},
numpages = {13},
keywords = {programming, crowdsourcing, behaviour},
location = {Cambridge, United Kingdom},
series = {Programming '21}
}

@inproceedings{10.5555/2337223.2337406,
author = {Murphy-Hill, Emerson},
title = {Continuous social screencasting to facilitate software tool discovery},
year = {2012},
isbn = {9781467310673},
publisher = {IEEE Press},
abstract = {The wide variety of software development tools available today have a great potential to improve the way developers make software, but that potential goes unfulfilled when developers are not aware of useful tools. In this paper, I introduce the idea of emph{continuous social screencasting}, a novel mechanism to help developers gain awareness of relevant tools by enabling them to learn remotely and asychronously from their peers. The idea builds on the strength of several existing techniques that developers already use for discovering new tools, including screencasts and online social networks.},
booktitle = {Proceedings of the 34th International Conference on Software Engineering},
pages = {1317–1320},
numpages = {4},
location = {Zurich, Switzerland},
series = {ICSE '12}
}

@inproceedings{10.5555/1708112.1708115,
author = {Bouma, Gosse},
title = {A modern computational linguistics course using Dutch},
year = {1999},
publisher = {Association for Computational Linguistics},
address = {USA},
abstract = {This paper describes material for a course in computational linguistics which concentrates on building (parts of) realistic language technology applications for Dutch. We present an overview of the reasons for developing new material, rather than using existing text-books. Next we present an overview of the course in the form of six exercises, covering advanced use of finite state methods, grammar development, and natural language interfaces. The exercises emphasise the benefits of special-purpose development tools, the importance of testing on realistic data-sets, and the possibilities for web-applications based on natural language processing.},
booktitle = {Proceedings of the Workshop on Computer and Internet Supported Education in Language and Speech Technology},
articleno = {2},
numpages = {10},
location = {Bergen, Norway},
series = {ELST '99}
}

@inproceedings{10.1145/3332165.3347936,
author = {Zhang, Xiong and Guo, Philip J.},
title = {Mallard: Turn the Web into a Contextualized Prototyping Environment for Machine Learning},
year = {2019},
isbn = {9781450368162},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3332165.3347936},
doi = {10.1145/3332165.3347936},
abstract = {Machine learning (ML) can be hard to master, but what first trips up novices is something much more mundane: the incidental complexities of installing and configuring software development environments. Everyone has a web browser, so can we let people experiment with ML within the context of any webpage they visit? This paper's contribution is the idea that the web can serve as a contextualized prototyping environment for ML by enabling analyses to occur within the context of data on actual webpages rather than in isolated silos. We realized this idea by building Mallard, a browser extension that scaffolds acquiring and parsing web data, prototyping with pretrained ML models, and augmenting webpages with ML-driven results and interactions. To demonstrate the versatility of Mallard, we performed a case study where we used it to prototype nine ML-based browser apps, including augmenting Amazon and Twitter websites with sentiment analysis, augmenting restaurant menu websites with OCR-based search, using real-time face tracking to control a Pac-Man game, and style transfer on Google image search results. These case studies show that Mallard is capable of supporting a diverse range of hobbyist-level ML prototyping projects.},
booktitle = {Proceedings of the 32nd Annual ACM Symposium on User Interface Software and Technology},
pages = {605–618},
numpages = {14},
keywords = {ml prototyping, contextualized machine learning},
location = {New Orleans, LA, USA},
series = {UIST '19}
}

@inproceedings{10.1145/3078155.3078179,
author = {Gilliland, Spenser},
title = {Accelerating Applications at Cloud Scale using FPGAs},
year = {2017},
isbn = {9781450352147},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3078155.3078179},
doi = {10.1145/3078155.3078179},
abstract = {The acceptance and success of cloud computing has given application developers access to computing and new customers at a scale never seen below. The inherent ability of an FPGA to reconfigure and be workload optimized is a great advantage given the fast-moving needs of cloud computing applications. In this talk we will discuss how users can develop, accelerate and deploy accelerated applications in the cloud at scale. You will learn how to get started on a turn-key OpenCL development environment in the cloud using Xilinx FPGAs.},
booktitle = {Proceedings of the 5th International Workshop on OpenCL},
articleno = {17},
numpages = {1},
keywords = {FPGA, OpenCL, SDAccel},
location = {<conf-loc>, <city>Toronto</city>, <country>Canada</country>, </conf-loc>},
series = {IWOCL '17}
}

@inproceedings{10.1145/1085313.1085336,
author = {Stamey, John and Saunders, Bryan and Blanchard, Simon},
title = {The aspect-oriented web},
year = {2005},
isbn = {1595931759},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1085313.1085336},
doi = {10.1145/1085313.1085336},
abstract = {We examine Aspect-Oriented Programming (AOP) as it applies to web development. XHTML was designed to separate form from content, a fundamental principle of separation of concerns in AOP. Cascading Stylesheets and Javascript naturally provide support for AOP. The release of AOPHP (Aspect-Oriented PHP) provides a more traditional way to implement AOP in the LAMP (Linux, Apache, MySQL, PHP) web development environment, weaving advice code into PHP source code prior to the PHP pre-processing step.},
booktitle = {Proceedings of the 23rd Annual International Conference on Design of Communication: Documenting &amp; Designing for Pervasive Information},
pages = {89–95},
numpages = {7},
keywords = {web development, separation of concerns, aspect-oriented programming, LAMP, AOPHP, AOP-like behavior},
location = {Coventry, United Kingdom},
series = {SIGDOC '05}
}

@inproceedings{10.1145/3278186.3281454,
author = {Rothermel, Gregg},
title = {Improving regression testing in continuous integration development environments (keynote)},
year = {2018},
isbn = {9781450360531},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3278186.3281454},
doi = {10.1145/3278186.3281454},
abstract = {In continuous integration development environments, software engineers frequently integrate new or changed code with the mainline codebase. Merged code is then regression tested to help ensure that the codebase remains stable and that continuing engineering efforts can be performed more reliably. Continuous integration is advantageous because it can reduce the amount of code rework that is needed in later phases of development, and speed up overall development time. From a testing standpoint, however, continuous integration raises several challenges.  Chief among these challenges are the costs, in terms and time and resources, associated with handling a constant flow of requests to execute tests. To help with this, organizations often utilize farms of servers to run tests in parallel, or execute tests "in the cloud", but even then, test suites tend to expand to utilize all available resources, and then continue to expand beyond that.  We have been investigating strategies for applying regression testing in continuous integration development environments more cost-effectively. Our strategies are based on two well-researched techniques for improving the cost-effectiveness of regression testing – regression test selection (RTS) and test case prioritization (TCP). In the continuous integration context, however, traditional RTS and TCP techniques are difficult to apply, because these techniques rely on instrumentation and analyses that cannot easily be applied to fast-arriving streams of test suites.  We have thus created new forms of RTS and TCP techniques that utilize relatively lightweight analyses, that can cope with the volume of test requests. To evaluate our techniques, we have conducted an empirical study on several large data sets. In this talk, I describe our techniques and the empirical results we have obtained in studying them.},
booktitle = {Proceedings of the 9th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation},
pages = {1},
numpages = {1},
keywords = {regression testing, large scale testing, Continuous integration},
location = {Lake Buena Vista, FL, USA},
series = {A-TEST 2018}
}

@inproceedings{10.1145/1622176.1622223,
author = {Karger, David R. and Ostler, Scott and Lee, Ryan},
title = {The web page as a WYSIWYG end-user customizable database-backed information management application},
year = {2009},
isbn = {9781605587455},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1622176.1622223},
doi = {10.1145/1622176.1622223},
abstract = {Dido is an application (and application development environment) in a web page. It is a single web page containing rich structured data, an AJAXy interactive visualizer/editor for that data, and a "metaeditor" for WYSIWYG editing of the visualizer/editor. Historically, users have been limited to the data schemas, visualizations, and interactions offered by a small number of heavyweight applications. In contrast, Dido encourages and enables the end user to edit (not code) in his or her web browser a distinct ephemeral interaction "wrapper" for each data collection that is specifically suited to its intended use. Dido's active document metaphor has been explored before but we show how, given today's web infrastructure, it can be deployed in a small self-contained HTML document without touching a web client or server.},
booktitle = {Proceedings of the 22nd Annual ACM Symposium on User Interface Software and Technology},
pages = {257–260},
numpages = {4},
keywords = {wysiwyg, end user programming, databases},
location = {Victoria, BC, Canada},
series = {UIST '09}
}

@proceedings{10.1145/1984708,
title = {TOPI '11: Proceedings of the 1st Workshop on Developing Tools as Plug-ins},
year = {2011},
isbn = {9781450305990},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {We would like to welcome you to this, the first workshop on Developing Tools as Plug-Ins (TOPI 2011). Tools and environments to increase software quality and productivity have always been an important aspect of software engineering. There are two major ways for programmers to communicate with the computer - programming languages and tools. Through languages, programmers encode decisions, actions and algorithms, while tools have the added advantage of providing analysis, synthesis and visualization.At the same time, software development environments have grown in power: today's environments, such as Visual Studio, Eclipse or an Emacs configuration, bear little resemblance to those of two decades ago. Syntactic and documentation support, recommendations for fixes and re-factorings, relatively seamless integration with version control and debugging tools, and more, are not only available, but are expected by modern programmers. Plug-ins are the modern approach towards incrementally adding new tools into these rich environments. Proving for plug-ins is necessary because it is at best very hard to get programmers to try a new tool without integrating it into an existing environment.Indeed, our knowledge of how to solve software engineering problems is increasingly being encapsulated in tools. These tools are at their strongest when they operate in a pre-existing development environment. This approach allows integration with existing elements such as compilers, debuggers, profilers, visualizers as well as numerous other development and, often, runtime tools. However, building tools as plug-ins can be challenging. How do they interact with the core environment? How do they interact with one another - especially since each developer may choose a different set of plug-ins? How can we share tools across different, and future, core development environments? These are all questions that will be addressed during TOPI 2011.The workshop received 32 submissions from 21 countries. They attested to the interest in the topic and to the diversity of IDEs currently in use today, including Visual Studio 2010, Eclipse and MonoDevelop. Each paper was reviewed by three member of the PC, and then there followed a vigorous online meeting. From this, we selected 14 full papers and 8 short papers, giving an acceptance rate of 68%. Through these papers, we shall address the following themes: identify recent successful tools as plug-inscategorize the characteristics of good plug-insunderstand interoperability requirements to making tools available across platformslist which tools lend themselves best to the plug-in approachspecify the medium and long term challenges of tools as plug-insSo, while we are more concerned in this workshop with understanding the characteristics and creation of tools as plug-ins, than of the tools themselves, we did accept some papers with very interesting tools, including those from industry.The workshop will be opened with a welcoming session by the chairs, followed by a keynote by Tom Ball from Microsoft Research on the Software Engineering of Plug-in Architectures. The talk will be punctuated by personal insights and Tom's long experience as a research leader. In the following two sessions, selected papers describing successful plug-in experience and practice will be presented. We want to try and identify patterns and commonalities that could be used to characterize "good" plug-ins. The goal was to come out with a first version of a framework that could be used to classify plug-in tools.During the third session we invited a discussion around presentations that tackled the barriers of making plug-ins available across different platforms. Rather than arguing for an agnostic approach, the goal is to better understand the differences and identify opportunities to interact and cooperate. The last session of the workshop is dedicated to presentations that look into the future of tools as plug-ins, followed by a brainstorming session on medium and long term challenges of plug-in development. The papers to be presented at TOPI 2011 indicate that developing better ways to plug tools into modern environments, and developing better ways for those tools to interact with other related tools in these environments, is definitively a critical research topic.},
location = {Waikiki, Honolulu, HI, USA}
}

@inproceedings{10.5555/2486788.2486988,
author = {Ponzanelli, Luca and Bacchelli, Alberto and Lanza, Michele},
title = {Seahawk: stack overflow in the IDE},
year = {2013},
isbn = {9781467330763},
publisher = {IEEE Press},
abstract = {Services, such as Stack Overflow, offer a web platform to programmers for discussing technical issues, in form of Question and Answers (Q&amp;A). Since Q&amp;A services store the discussions, the generated crowd knowledge can be accessed and consumed by a large audience for a long time. Nevertheless, Q&amp;A services are detached from the development environments used by programmers: Developers have to tap into this crowd knowledge through web browsers and cannot smoothly integrate it into their workflow. This situation hinders part of the benefits of Q&amp;A services. To better leverage the crowd knowledge of Q&amp;A services, we created Seahawk, an Eclipse plugin that supports an integrated and largely automated approach to assist programmers using Stack Overflow. Seahawk formulates queries automatically from the active context in the IDE, presents a ranked and interactive list of results, lets users import code samples in discussions through drag &amp; drop and link Stack Overflow discussions and source code persistently as a support for team work. Video Demo URL: http://youtu.be/DkqhiU9FYPI},
booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
pages = {1295–1298},
numpages = {4},
location = {San Francisco, CA, USA},
series = {ICSE '13}
}

@inproceedings{10.1145/3159450.3162367,
author = {Ortiz, Ariel},
title = {Programming Web Services on the Cloud with Node.js: (Abstract Only)},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3162367},
doi = {10.1145/3159450.3162367},
abstract = {Node.js is one of the hottest open source web platforms currently available. It's used by companies like PayPal, DowJones, Walmart, Netflix, and Yahoo. Node.js allows you to use JavaScript to write all kinds of network servers in just a few lines of code, definitely easier than using other platforms based on languages such as C++, C# or Java. If you know how to use JavaScript on the front end (i.e., the browser), it's a breeze to use it on the back end (i.e., the server). This workshop is aimed at CS instructors that wish to teach students how to use and write RESTful web services (a.k.a. web APIs) using Node.js on a cloud platform. The only thing you need is a computer with a modern web browser and a Wi-Fi connection. Participants will use the free service provided by the Cloud9 platform (https://c9.io/) to learn how to write scalable web services using Node.js, the Express web framework, MySQL, and Ajax via jQuery. Web services allows us to build powerful web based applications using data from multiple online sources. And, by using a cloud platform, we have all our tools readily available through a web browser, thus eliminating the hassle related to installing a complete and fully functional web development environment. Participants are expected to have a working knowledge of JavaScript, SQL and HTML. Additional information available at http://node.arielortiz.info/ Laptop required.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {1050},
numpages = {1},
keywords = {web services, web development, node.js, javascript},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@article{10.5555/3512733.3512734,
author = {Barlow, Max and Cazalas, Ibraheem and Robinson, Chase and Cazalas, Jonathan},
title = {MOCSIDE: an open-source and scalable online IDE and auto-grader for introductory programming courses},
year = {2021},
issue_date = {October 2021},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {37},
number = {5},
issn = {1937-4771},
abstract = {Programming is learned through practice, with said practice in introductory programming courses often translating to a prohibitively large number of assignments, increasing the grading workload for faculty and/or teaching assistants. In short, this is unsustainable. Several publishers and a few notable companies have provided meritable solutions, although most are plagued with problems including minimal problem sets, limited customization options, high cost, and even a disconnect with the pedagogical needs within academia. This paper presents a survey of the more popular solutions currently available, followed by a presentation of our newly-developed web application, MOCSIDE: open-source and scalable online IDE and auto-grader for computer science education.},
journal = {J. Comput. Sci. Coll.},
month = {oct},
pages = {11–20},
numpages = {10}
}

@article{10.5555/2460156.2460182,
author = {Malan, David J.},
title = {Implementing a massive open online course (MOOC)},
year = {2013},
issue_date = {June 2013},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {28},
number = {6},
issn = {1937-4771},
abstract = {Distance education is by no means new. Indeed, long before the Internet came along were universities making educational content available to students off campus via VHS, CD-ROM, and other media.But what is new is the scale on which universities and, in some cases, individual faculty are now operating. Massive open online courses (otherwise known as MOOCs) from non-profits like edX and for-profits like Coursera and Udacity have repeatedly drawn upwards of 100,000 registrants from all over the world. How to teach so many students effectively, though, is non-obvious. How to disseminate content to so many students, particularly large videos, is technically challenging (if not expensive). And how to collect, evaluate, and return work to so many students is a feat unto itself.Even so, we set out in Fall 2012 to tackle each of those challenges and more. We present in this tutorial how to implement (and how not to implement) a MOOC, based on lessons learned while designing and implementing CS50x: Harvard University's Introduction to Computer Science I, edX's largest fall course with 120,000 registered students. We present what we did, how we did it, why we did it, and what we would and wouldn't do again so that others might build upon our own experience.In particular,• we present how to capture and encode content (e.g., faculty on video) using commodity hardware and open-source tools like FFmpeg;• we present how to choose among YouTube, iTunes U, Amazon Web Services, and the like for delivery of content;• we present CS50 Check, an open-source autograding framework that we developed for CS50x (with other courses in mind) that supports behavioral testing of programs written in any interpreted or compiled language;• we present CS50 Run, an open-source, web-based code editor that we developed for CS50x (with other courses in mind) that enables students to write, within a browser, code in any language, execution of which happens server-side;• and we present the pedagogy behind CS50x itself and the accompanying challenges of scale, among them logistics discussions among students, issues of academic dishonesty, and hidden costs in time.In addition, we explore in this tutorial the research potential that MOOCs' scale offers, including opportunities for A/B testing and more.Ultimately, this tutorial's attendees will exit with an understanding of the time, costs, opportunities, and challenges involved in offering a course on scale.},
journal = {J. Comput. Sci. Coll.},
month = {jun},
pages = {136–137},
numpages = {2}
}

@inproceedings{10.5555/1071752.1071800,
author = {van der Merwe, Alta and Loock, Marianne and Dabrowski, Marek},
title = {Characteristics and responsibilities involved in a Phishing attack},
year = {2005},
isbn = {1595931694},
publisher = {Trinity College Dublin},
abstract = { 'Phishing' is a fraudulent activity defined as the creation of a replica of an existing Web page to fool a user into submitting personal, financial, or password data. There are security service guidelines for both software security and web site security development environments. Developers use these guidelines when planning new systems (or during re-engineering of existing systems) to ensure a secure environment. The purpose of this paper is two-fold: firstly to consider the characteristics of a phishing attack and to identify a list of issues relevant to it; and secondly, to compare the nature of a phishing attack with the security services guidelines provided and to pinpoint the weakness(es) of phishing attacks if these guidelines are adhered to.},
booktitle = {Proceedings of the 4th International Symposium on Information and Communication Technologies},
pages = {249–254},
numpages = {6},
location = {<conf-loc>, <city>Cape Town</city>, <country>South Africa</country>, </conf-loc>},
series = {WISICT '05}
}

@inproceedings{10.1109/ICSE.2019.00104,
author = {Yang, Junwen and Yan, Cong and Wan, Chengcheng and Lu, Shan and Cheung, Alvin},
title = {View-centric performance optimization for database-backed web applications},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE.2019.00104},
doi = {10.1109/ICSE.2019.00104},
abstract = {Web developers face the stringent task of designing informative web pages while keeping the page-load time low. This task has become increasingly challenging as most web contents are now generated by processing ever-growing amount of user data stored in back-end databases. It is difficult for developers to understand the cost of generating every web-page element, not to mention explore and pick the web design with the best trade-off between performance and functionality. In this paper, we present Panorama, a view-centric and database-aware development environment for web developers. Using database-aware program analysis and novel IDE design, Panorama provides developers with intuitive information about the cost and the performance-enhancing opportunities behind every HTML element, as well as suggesting various global code refactorings that enable developers to easily explore a wide spectrum of performance and functionality trade-offs.},
booktitle = {Proceedings of the 41st International Conference on Software Engineering},
pages = {994–1004},
numpages = {11},
location = {Montreal, Quebec, Canada},
series = {ICSE '19}
}

@inproceedings{10.1145/1408681.1408690,
author = {Ingalls, Dan},
title = {The Lively Kernel: just for fun, let's take JavaScript seriously},
year = {2008},
isbn = {9781605582702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1408681.1408690},
doi = {10.1145/1408681.1408690},
abstract = {The Sun Labs Lively Kernel is a new approach to Web programming. It provides a complete platform for Web applications, including dynamic graphics, network access, and development tools, and requires nothing more than available web browsers. We call the system "lively" for three reasons. It comes live off a web page. There is no installation. The entire system is written in JavaScript, and it becomes active as soon as the page is loaded by a browser. It can change itself and create new content. The Lively Kernel includes a basic graphics editor that allows it to alter and create new graphical content, and also a simple IDE that allows it to alter and create new applications. It comes with a basic library of graphical and computational components, and these, as well as the kernel, can be altered and extended on the fly. It can save new artifacts, even clone itself, onto new web pages. The kernel includes WebDAV support for browsing and extending remote file systems, and thus has the ability to save its objects and "worlds" (applications) as new active Web pages. The Lively Kernel uses only existing Web standards. The implementation and user language is JavaScript, known by millions and supported in every browser. The graphics APIs are built upon SVG (Scalable Vector Graphics), also available in major browsers. The network protocols used are asynchronous HTTP and WebDAV. The speaker will demonstrate the Lively Kernel and discuss various aspects of JavaScript as a programming language.},
booktitle = {Proceedings of the 2008 Symposium on Dynamic Languages},
articleno = {9},
numpages = {1},
location = {Paphos, Cyprus},
series = {DLS '08}
}

@inproceedings{10.1145/3452413.3464785,
author = {Satzke, Klaus and Akkus, Istemi Ekin and Chen, Ruichuan and Rimac, Ivica and Stein, Manuel and Beck, Andre and Aditya, Paarijaat and Vanga, Manohar and Hilt, Volker},
title = {Efficient GPU Sharing for Serverless Workflows},
year = {2021},
isbn = {9781450383882},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3452413.3464785},
doi = {10.1145/3452413.3464785},
abstract = {Serverless computing has emerged as a new cloud computing paradigm, where an application consists of individual functions that can be separately managed and executed. However, the function development environment of all serverless computing frameworks at present is CPU-based. In this paper, we propose to extend the open-sourced KNIX high-performance serverless framework so that it can execute functions on shared GPU cluster resources. We have evaluated the performance impacts on the extended KNIX system by measuring overheads and penalties incurred using different deep learning frameworks.},
booktitle = {Proceedings of the 1st Workshop on High Performance Serverless Computing},
pages = {17–24},
numpages = {8},
keywords = {serverless, neural networks, image processing, gpu, deep learning},
location = {Virtual Event, Sweden},
series = {HiPS '21}
}

@article{10.1145/3110248,
author = {Canou, Benjamin and Di Cosmo, Roberto and Henry, Gr\'{e}goire},
title = {Scaling up functional programming education: under the hood of the OCaml MOOC},
year = {2017},
issue_date = {September 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {ICFP},
url = {https://doi.org/10.1145/3110248},
doi = {10.1145/3110248},
abstract = {This article describes the key innovations used in the massive open online course ``Introduction to Functional Programming using OCaml'' that has run since the fall semester of 2015. A fully in-browser development environment with an integrated grader provides an exceptional level of feedback to the learners. A functional library of grading combinators greatly simplifies the notoriously complex task of writing test suites for the exercises, and provides static type-safety guarantees on the tested user code. Even the error-prone manual process of importing the course content in the learning platform has been replaced by a functional program that describes the course and statically checks its contents. A detailed statistical analysis of the data collected during and after the course assesses the effectiveness of these innovations.},
journal = {Proc. ACM Program. Lang.},
month = {aug},
articleno = {4},
numpages = {25},
keywords = {safe program introspection, programming education, functional programming, browser based education platform, automated grading, MOOC}
}

@inproceedings{10.1145/1942790.1942792,
author = {Lagadec, Loic and Picard, Damien},
title = {Smalltalk debug lives in the matrix},
year = {2010},
isbn = {9781450304979},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1942790.1942792},
doi = {10.1145/1942790.1942792},
abstract = {Agile programming aware computer scientists know how much productivity they owe to their development environments, and more precisely to advanced debuggers. Indeed, debuggers are mandatory to support an optimistic do-fix-rerun approach.This development scheme does not make sense in hardware design where agile has a different meaning; it refers to reconfigurable architectures. Despite such architectures support tailoring and refactoring application circuits and promote short development cycles, the overall programing scheme still conforms to waterfall models and component based integration.This paper presents a path to offer probe-based development to hardware designers, and introduces our Red Pill environment that merges several abstraction levels ranging from C like parallel coding to hardware realization embedding debug facility. Red Pill is developed using VisualWorks and reproduces some of Cincom Smalltalk browser well known features that traditionally lack when validating circuits.},
booktitle = {International Workshop on Smalltalk Technologies},
pages = {11–16},
numpages = {6},
keywords = {testing methodology, system-on-chip, software engineering, reconfigurable computing, morpheus, modeling, debugging, agile programming},
location = {Barcelona, Spain},
series = {IWST '10}
}

@inproceedings{10.1145/1061811.1061818,
author = {Chisholm, Wendy A. and Henry, Shawn Lawton},
title = {Interdependent components of web accessibility},
year = {2005},
isbn = {1595932194},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1061811.1061818},
doi = {10.1145/1061811.1061818},
abstract = {Increasingly, the Web is providing unprecedented access to information and interaction for people with disabilities. However, the Web will not be equally accessible, allowing people with disabilities to access and contribute to the Web, until:• Authoring tools and development environments (including content managements systems such as blogging applications) produce accessible Web content and have accessible interfaces;• Browsers, multimedia players and assistive technologies provide a completely usable and accessible experience;Content is designed to be accessible.Web accessibility relies on tools that are designed to work together and support the needs of the people who use them. This paper describes how Web accessibility depends on several components working together. It demonstrates the relationship between the World Wide Web Consortium (W3C) Web Accessibility Initiative (WAI) guidelines: Web Content Accessibility Guidelines (WCAG), Authoring Tool Accessibility Guidelines (ATAG), and User Agent Accessibility Guidelines (UAAG).},
booktitle = {Proceedings of the 2005 International Cross-Disciplinary Workshop on Web Accessibility (W4A)},
pages = {31–37},
numpages = {7},
keywords = {user agents, technical specifications, guidelines, disabilities, blog, authoring tools, assistive technology, accessibility, Web content, WCAG, WAI, W3C, UAAG, ATAG},
location = {Chiba, Japan},
series = {W4A '05}
}

@inproceedings{10.5555/2486788.2487081,
author = {Barnett, Michael and Nordio, Martin and Bishop, Judith and Breitman, Karin K. and Garbervetsky, Diego},
title = {3rd international workshop on developing tools as plug-ins (TOPI 2013)},
year = {2013},
isbn = {9781467330763},
publisher = {IEEE Press},
abstract = {TOPI (http://se.inf.ethz.ch/events/topi2013/) is a workshop started in 2011 to address research questions involving plug-ins: software components designed and written to execute within an extensible platform. Most such software components are tools meant to be used within a development environment for constructing software. Other environments are middle-ware platforms and web browsers. Research on plug-ins encompasses the characteristics that differentiate them from other types of software, their interactions with each other, and the platforms they extend.},
booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
pages = {1555},
numpages = {1},
location = {San Francisco, CA, USA},
series = {ICSE '13}
}

@inproceedings{10.1145/1290128.1290136,
author = {Sgouros, Nikitas M. and Margaritis, Alexandros},
title = {Towards open source authoring and presentation of multimedia content},
year = {2007},
isbn = {9781595937810},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1290128.1290136},
doi = {10.1145/1290128.1290136},
abstract = {Open source principles and methodologies allow open access to both the development process and its products. This paper describes a number of significant research issues for the creation of novel development environments that support open source authoring of multimedia content and dynamic forms of personalization during content consumption. These environments should allow an unlimited number of users to modify existing media content and post their contributions on the net. In addition, they should allow users to visualize the current state of development in each project, select a subset of the various contributions and dynamically compose, view and share with other users new content versions containing all the selected contributions. Furthermore, the paper describes a pilot web-services-based implementation for such a system developed in C# that is now freely available on the Web.},
booktitle = {Proceedings of the International Workshop on Human-Centered Multimedia},
pages = {41–46},
numpages = {6},
keywords = {visualization, personalization tools, open source, authoring paradigms},
location = {Augsburg, Bavaria, Germany},
series = {HCM '07}
}

@inproceedings{10.1145/3441852.3476531,
author = {Longley, Michael and Elglaly, Yasmine N.},
title = {Accessibility Support in Web Frameworks},
year = {2021},
isbn = {9781450383066},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3441852.3476531},
doi = {10.1145/3441852.3476531},
abstract = {Despite the existence of accessibility testing tools, software still largely inaccessible mainly due to lack of awareness among developers and issues with existing tools [14, 18]. This motivated us to evaluate the accessibility support of development tools that do not require specific accessibility knowledge such as web frameworks. We tested the accessibility support of three JavaScript web frameworks; Angular, React, and Vue. For each of the three frameworks, we built a web application with 32 pages, each of which violated a single accessibility guideline. We found that only React generated a warning for one of the accessibility violations that is lack of label for non-text content. The rest of the accessibility violations went unnoticed by the three frameworks.},
booktitle = {Proceedings of the 23rd International ACM SIGACCESS Conference on Computers and Accessibility},
articleno = {47},
numpages = {4},
keywords = {accessibility guidelines, web frameworks},
location = {<conf-loc>, <city>Virtual Event</city>, <country>USA</country>, </conf-loc>},
series = {ASSETS '21}
}

@inproceedings{10.1145/2737095.2737149,
author = {Ghose, Avik and Alam, Shahnawaz and Ahmed, Nasimuddin and Maiti, Santa and DuttaChoudhury, Anirban and Pal, Arpan},
title = {Design insights for a mobile based sensor application framework: for aiding platform independent algorithm design},
year = {2015},
isbn = {9781450334754},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2737095.2737149},
doi = {10.1145/2737095.2737149},
abstract = {Modern day smart phones are powerful connected sensory and computation nodes for crowd-sensing, urban-sensing and personal-sensing applications. We have developed an Internet of Things (IoT) platform that can seamlessly handle data from the wide variety of sensors available on mobile phones. It can store and run aggregated analysis on the data in real-time. However, mobile phones themselves are a very heterogeneous set of devices. Each phone comes with a different array of sensors with varying sensitivity and control functions. Also, there are multiple development environments and programming languages. A final problem is seamless prototyping of applications offline and then seamless partitioning of the algorithm between phone and the cloud. In this paper we present early design elements of a framework aimed at addressing these issues.},
booktitle = {Proceedings of the 14th International Conference on Information Processing in Sensor Networks},
pages = {336–337},
numpages = {2},
keywords = {system design, mobile sensing, middle-ware, frameworks},
location = {Seattle, Washington},
series = {IPSN '15}
}

@inproceedings{10.1145/775152.775212,
author = {Yesilada, Yeliz and Stevens, Robert and Goble, Carole},
title = {A foundation for tool based mobility support for visually impaired web users},
year = {2003},
isbn = {1581136803},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/775152.775212},
doi = {10.1145/775152.775212},
abstract = {Users make journeys through the Web. Web travel encompasses the tasks of orientation and navigation, the environment and the purpose of the journey. The ease of travel, its mobility, varies from page to page and site to site. For visually impaired users, in particular, mobility is reduced; the objects that support travel are inaccessible or missing altogether. Web development tools need to include support to increase mobility. We present a framework for finding and classifying travel objects within Web pages. The evaluation carried out has shown that this framework supports a systematic and consistent method for assessing travel upon the Web. We propose that such a framework can provide the foundation for a semi-automated tool for the support of travel upon the Web.},
booktitle = {Proceedings of the 12th International Conference on World Wide Web},
pages = {422–430},
numpages = {9},
keywords = {visual impairment, travel objects, travel, mobility support tool, mobility},
location = {Budapest, Hungary},
series = {WWW '03}
}

@inproceedings{10.1145/3025453.3025876,
author = {Warner, Jeremy and Guo, Philip J.},
title = {CodePilot: Scaffolding End-to-End Collaborative Software Development for Novice Programmers},
year = {2017},
isbn = {9781450346559},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3025453.3025876},
doi = {10.1145/3025453.3025876},
abstract = {Novice programmers often have trouble installing, configuring, and managing disparate tools (e.g., version control systems, testing infrastructure, bug trackers) that are required to become productive in a modern collaborative software development environment. To lower the barriers to entry into software development, we created a prototype IDE for novices called CodePilot, which is, to our knowledge, the first attempt to integrate coding, testing, bug reporting, and version control management into a real-time collaborative system. CodePilot enables multiple users to connect to a web-based programming session and work together on several major phases of software development. An eight-subject exploratory user study found that first-time users of CodePilot spontaneously used it to assume roles such as developer/tester and developer/assistant when creating a web application together in pairs. Users felt that CodePilot could aid in scaffolding for novices, situational awareness, and lowering barriers to impromptu collaboration.},
booktitle = {Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems},
pages = {1136–1141},
numpages = {6},
keywords = {pair programming, novice programmers, collaborative ide},
location = {Denver, Colorado, USA},
series = {CHI '17}
}

@inproceedings{10.1145/2934872.2959074,
author = {Wang, Zhaoning and Cheng, Bo and Zhai, Zhongyi and Jin, Ying and Feng, Yimeng and Chen, Junliang},
title = {EasyApp: A Cross-platform Mobile Applications Development Environment Based on OSGi},
year = {2016},
isbn = {9781450341936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934872.2959074},
doi = {10.1145/2934872.2959074},
abstract = {*** The rapid development of mobile internet abstracts many non-professional persons to creating mobile applications. Traditional development process cannot meet their needs. In this paper, we present a cross-platform mobile development environment based on OSGi framework, EasyApp. It provides a highly-integrated, UI-friendly and easily-operating environment. Applications are comprehensively developed with web techniques. Users could create mobile applications with draggable widgets. Native APIs of mobile phone can be invoked with abundant plugins. After designing, users could package and download applications of multiple platforms. ***},
booktitle = {Proceedings of the 2016 ACM SIGCOMM Conference},
pages = {615–616},
numpages = {2},
keywords = {Widgets communication, OSGi, Mobile application, End-user development},
location = {Florianopolis, Brazil},
series = {SIGCOMM '16}
}

@inproceedings{10.1145/3241539.3267719,
author = {Zhang, Wenxiao and Han, Bo and Hui, Pan},
title = {Low Latency Mobile Augmented Reality with Flexible Tracking},
year = {2018},
isbn = {9781450359030},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3241539.3267719},
doi = {10.1145/3241539.3267719},
abstract = {Jaguar is a mobile Augmented Reality (AR) framework that leverages GPU acceleration on edge cloud to push the limit of end-to-end latency for AR systems and enable accurate and large-scale object recognition based on image retrieval. It integrates the emerging AR development tools (e.g., ARCore and ARKit) into its client design for achieving flexible, robust and context-aware object tracking. Our prototype implementation of Jaguar reduces the end-to-end AR latency to ~33 ms and achieves accurate six degrees of freedom (6DoF) tracking. In this demo, we will show that our Jaguar client recognizes movie posters within the camera view by offloading computation intensive tasks to edge cloud and augments these posters with their movie trailers in 3D upon receiving the recognition results.},
booktitle = {Proceedings of the 24th Annual International Conference on Mobile Computing and Networking},
pages = {829–831},
numpages = {3},
keywords = {object tracking, object recognition, mobile edge computing, augmented reality, GPU acceleration},
location = {New Delhi, India},
series = {MobiCom '18}
}

@inproceedings{10.5555/2343896.2344047,
author = {Bergenti, Federico and Caire, Giovanni and Gotta, Danilo},
title = {Supporting user-centric business processes with WADE},
year = {2012},
isbn = {0981738133},
publisher = {International Foundation for Autonomous Agents and Multiagent Systems},
address = {Richland, SC},
abstract = {In this paper we present the latest developments of WADE (Workflows and Agents Development Environment) that provide concrete support for a better realization of the innovative paradigm of agent-based BPM (Business Process Management). We discuss the new functionality that WADE offers to enable the rapid and effective realization of user-centric business processes, i.e., business processes that are tightly integrated with the work of users and that are mainly driven by user interactions. Such processes are met frequently in practice and WADE seamlessly accommodates Web and Android users by means of dedicated views.},
booktitle = {Proceedings of the 11th International Conference on Autonomous Agents and Multiagent Systems - Volume 3},
pages = {1435–1436},
numpages = {2},
keywords = {user-centric business processes, agent-based business process management, WADE},
location = {Valencia, Spain},
series = {AAMAS '12}
}

@inproceedings{10.1145/3597503.3639187,
author = {Nam, Daye and Macvean, Andrew and Hellendoorn, Vincent and Vasilescu, Bogdan and Myers, Brad},
title = {Using an LLM to Help With Code Understanding},
year = {2024},
isbn = {9798400702174},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3597503.3639187},
doi = {10.1145/3597503.3639187},
abstract = {Understanding code is challenging, especially when working in new and complex development environments. Code comments and documentation can help, but are typically scarce or hard to navigate. Large language models (LLMs) are revolutionizing the process of writing code. Can they do the same for helping understand it? In this study, we provide a first investigation of an LLM-based conversational UI built directly in the IDE that is geared towards code understanding. Our IDE plugin queries OpenAI's GPT-3.5-turbo model with four high-level requests without the user having to write explicit prompts: to explain a highlighted section of code, provide details of API calls used in the code, explain key domain-specific terms, and provide usage examples for an API. The plugin also allows for open-ended prompts, which are automatically contextualized to the LLM with the program being edited. We evaluate this system in a user study with 32 participants, which confirms that using our plugin can aid task completion more than web search. We additionally provide a thorough analysis of the ways developers use, and perceive the usefulness of, our system, among others finding that the usage and benefits differ between students and professionals. We conclude that in-IDE prompt-less interaction with LLMs is a promising future direction for tool builders.},
booktitle = {Proceedings of the IEEE/ACM 46th International Conference on Software Engineering},
articleno = {97},
numpages = {13},
location = {<conf-loc>, <city>Lisbon</city>, <country>Portugal</country>, </conf-loc>},
series = {ICSE '24}
}

@inproceedings{10.1145/1188835.1188849,
author = {Coblenz, Michael J. and Ko, Amy J. and Myers, Brad A.},
title = {JASPER: an Eclipse plug-in to facilitate software maintenance tasks},
year = {2006},
isbn = {1595936211},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1188835.1188849},
doi = {10.1145/1188835.1188849},
abstract = {Recent research has shown that developers spend significant amounts of time navigating around code. Much of this time is spent on redundant navigations to code that the developer previously found. This is necessary today because existing development environments do not enable users to easily collect relevant information, such as web pages, textual notes, and code fragments. JASPER is a new system that allows users to collect relevant artifacts into a working set for easy reference. These artifacts are visible in a single view that represents the user's current task and allows users to easily make each artifact visible within its context. We predict that JASPER will significantly reduce time spent on redundant navigations. In addition, JASPER will facilitate multitasking, interruption management, and sharing task information with other developers.},
booktitle = {Proceedings of the 2006 OOPSLA Workshop on Eclipse Technology EXchange},
pages = {65–69},
numpages = {5},
keywords = {programming environments, programmer efficiency, natural programming, concerns, Eclipse},
location = {Portland, Oregon, USA},
series = {eclipse '06}
}

@inproceedings{10.5555/2486788.2486895,
author = {Sawadsky, Nicholas and Murphy, Gail C. and Jiresal, Rahul},
title = {Reverb: recommending code-related web pages},
year = {2013},
isbn = {9781467330763},
publisher = {IEEE Press},
abstract = {The web is an important source of development-related resources, such as code examples, tutorials, and API documentation. Yet existing development environments are largely disconnected from these resources. In this work, we explore how to provide useful web page recommendations to developers by focusing on the problem of refinding web pages that a developer has previously used. We present the results of a study about developer browsing activity in which we found that 13.7% of developers visits to code-related pages are revisits and that only a small fraction (7.4%) of these were initiated through a low-cost mechanism, such as a bookmark. To assist with code-related revisits, we introduce Reverb, a tool which recommends previously visited web pages that pertain to the code visible in the developer's editor. Through a field study, we found that, on average, Reverb can recommend a useful web page in 51% of revisitation cases.},
booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
pages = {812–821},
numpages = {10},
location = {San Francisco, CA, USA},
series = {ICSE '13}
}

@inproceedings{10.1145/2077434.2077438,
author = {Watson, Benjamin and Setlur, Vidya and Pulli, Kari},
title = {Developing visual interfaces for mobile devices},
year = {2011},
isbn = {9781450311359},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2077434.2077438},
doi = {10.1145/2077434.2077438},
abstract = {The popularity of mobile interfaces and application development is increasing along with the rapid expansion of the mobile electronics market and its migration from text-based applications to various multimedia applications. Real-time graphics and web applications are becoming one of the most attractive applications in mobile terminals due to their benefits for enterprise, gaming, and social media. This hands-on course will cover a comprehensive set of topics for developing mobile visual interfaces, including an overview of the mobile market, a comparison of mobile and desktop applications, and a survey of mobile development environments. We will also undertake a detailed discussion of UI development for mobiles, and graphics development for mobiles. During the course, various smartphones will be loaned to attendees for trying out several in-class exercises.},
booktitle = {SIGGRAPH Asia 2011 Courses},
articleno = {4},
numpages = {185},
location = {Hong Kong, China},
series = {SA '11}
}

@inproceedings{10.1145/3290607.3312990,
author = {Owen, Alex and Martinez, Kirk},
title = {A Dynamic Hierarchical Approach to Modelling and Orchestrating the Web of Things Using the DOM, CSS and JavaScript},
year = {2019},
isbn = {9781450359719},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3290607.3312990},
doi = {10.1145/3290607.3312990},
abstract = {There is a lot of work in progress by the W3C and others surrounding a Web standards compliant Web of Things (WoT) which it is hoped will unify the current Internet of Things infrastructure. Our contribution to this uses the Document Object Model (DOM) to represent complex physical environments, with a CSS-like syntax for storing and controlling the state of 'things' within it. We describe how JavaScript can be used in conjunction with these to create an approach which is familiar to Web developers and may help them to transition more smoothly into WoT development. We share our implementation and explore some of the many potential avenues for future research. These include rich WoT development tools and the possibility of content production for physical environments.},
booktitle = {Extended Abstracts of the 2019 CHI Conference on Human Factors in Computing Systems},
pages = {1–6},
numpages = {6},
keywords = {web of things, web development, linked data, internet of things, document object model, WoT, IoT},
location = {Glasgow, Scotland Uk},
series = {CHI EA '19}
}

@inproceedings{10.1145/330908.331872,
author = {Elenbogen, Bruce S. and Maxim, Bruce R. and McDonald, Chris},
title = {Yet, more Web exercises for learning C++},
year = {2000},
isbn = {1581132131},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/330908.331872},
doi = {10.1145/330908.331872},
abstract = {This paper describes a set of author developed interactive web exercises and a development environment designed to facilitate language acquisition in a beginning course in C++. The exercises test the students' understanding of several C++ language constructs as well as general programming concepts such as scope of variables. The environment allows students to write and test sections of code in a instructor controlled setting. Together the exercises and environment can be used to enhance computer science education for both traditional and distance learning students. The paradigm of generalization and automation of standard exercises can be extended to facilitate web education in other courses.},
booktitle = {Proceedings of the Thirty-First SIGCSE Technical Symposium on Computer Science Education},
pages = {290–294},
numpages = {5},
location = {Austin, Texas, USA},
series = {SIGCSE '00}
}

@inproceedings{10.1109/IPSN.2008.33,
author = {Priyantha, Bodhi and Kansal, Aman and Goraczko, Michel and Zhao, Feng},
title = {Tiny Web Services for Sensor Device Interoperability},
year = {2008},
isbn = {9780769531571},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/IPSN.2008.33},
doi = {10.1109/IPSN.2008.33},
abstract = {There are many scenarios where interoperability is required for sensor devices. We demonstrate one approach to achieve interoperability: using web services. Hosting a web service challenges the battery-life, bandwidth, and processing power constraints of low power sensor nodes. We demonstrate a lightweight implementation on MSP430 based sensor nodes with 802.15.4 radios. The implementation allows standards compliant web service clients to use the sensors but minimizes code size and energy at the sensor nodes. It allows sensor nodes to enter sleep modes. We prototype an example application for a home sensor network along with two types of sensor nodes required for it. We also show how our system enables sensor nodes to be used easily from applications written in high level languages using existing development tools.},
booktitle = {Proceedings of the 7th International Conference on Information Processing in Sensor Networks},
pages = {567–568},
numpages = {2},
keywords = {sensor web service},
series = {IPSN '08}
}

@inproceedings{10.1145/3287324.3287533,
author = {Ortiz, Ariel},
title = {Architecting Serverless Microservices on the Cloud with AWS},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287533},
doi = {10.1145/3287324.3287533},
abstract = {A microservice architecture decomposes the entire functionally of an application into a set of services that can be deployed and scaled independently. Each service does only one job and does it well. Thus, it's simpler to develop, test and maintain. Additionally, it has its own database and provides access to datasets and services through a well-defined application programming interface (API). Highly successful Internet companies, such as Amazon, Netflix, and Twitter, use microservice architectures to build their software. This workshop is aimed at CS instructors that wish to teach students how to design and build microservice-based applications using cloud services and products provided by the Amazon Web Services (AWS) free tier. We'll start creating a cloud development environment with the AWS Cloud9 IDE. Afterwards, we'll code in Python several RESTful web services using AWS Lambda functions, which are serverless cloud computing services that are executed in response to events. The advantage of going serverless is that you build and run applications and services without thinking about servers. Your application still runs on servers, but all the server management is done by AWS. Finally, we'll demonstrate how to persist our information in a NoSQL database using the Amazon DynamoDB service. More information available at: http://microservices.arielortiz.info/ Laptop required.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1240},
numpages = {1},
keywords = {serverless computing, restful api, microservices, cloud computing},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3540250.3558939,
author = {Va\v{s}\'{\i}\v{c}ek, Ond\v{r}ej and Fiedor, Jan and Kratochv\'{\i}la, Tom\'{a}\v{s} and K\v{r}ena, Bohuslav and Smr\v{c}ka, Ale\v{s} and Vojnar, Tom\'{a}\v{s}},
title = {Unite: an adapter for transforming analysis tools to web services via OSLC},
year = {2022},
isbn = {9781450394130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3540250.3558939},
doi = {10.1145/3540250.3558939},
abstract = {This paper describes Unite, a new tool intended as an adapter for transforming non-interactive command-line analysis tools to OSLC-compliant web services. Unite aims to make such tools easier to adopt and more convenient to use by allowing them to be accessible, both locally and remotely, in a unified way and to be easily integrated into various development environments. Open Services for Lifecycle Collaboration (OSLC) is an open standard for tool integration and was chosen for this task due to its robustness, extensibility, support of data from various domains, and its growing popularity. The work is motivated by allowing existing analysis tools to be more widely used with a strong emphasis on widening their industrial usage. We have implemented Unite and used it with multiple existing static as well as dynamic analysis and verification tools, and then successfully deployed it internationally in the industry to automate verification tasks for development teams in Honeywell. We discuss Honeywell's experience with using Unite and with OSLC in general. Moreover, we also provide the Unite Client (UniC) for Eclipse to allow users to easily run various analysis tools directly from the Eclipse IDE.},
booktitle = {Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1408–1418},
numpages = {11},
keywords = {Transformation to web services, Tool integration, Software analysis, OSLC Automation, OSLC, Eclipse Lyo},
location = {<conf-loc>, <city>Singapore</city>, <country>Singapore</country>, </conf-loc>},
series = {ESEC/FSE 2022}
}

@inproceedings{10.1145/2499777.2500712,
author = {Kolokolov, Viktor and Baumann, Paul and Santini, Silvia and Ruehl, Stefan T. and Verclas, Stephan A. W.},
title = {Flexible development of variable software features for mobile business applications},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2500712},
doi = {10.1145/2499777.2500712},
abstract = {With recent advances in development and deployment of mobile business applications (MBAs) based on the hybrid Web approach (hybrid MBAs) enterprises around the world well recognize new potentials to mobilize their business processes (BPs). Variability has a natural appearance in complex environments of different enterprises, where even similar BPs can have varying facets on the cross-enterprise scale. Yet, despite this fact current development tools for hybrid MBAs are lacking systematic variability management. Further, the literature on this particular technological landscape is scarce. We highlight in this paper emerging importance of this research field and describe its context and a research methodology. We propose an SPL-based approach to tackle considerable variabilities of hybrid MBAs.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {67–73},
numpages = {7},
keywords = {variability modeling, software product lines, mobile business applications, hybrid web},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.1145/3456565.3460060,
author = {Zhang, Ke and Chang, Yisong and Zhao, Ran and Wang, Zelin and Chen, Mingyu and Bao, Yungang and Xu, Zhiwei},
title = {EdUCAS: An In-house CI/CD Platform with Cloud FPGAs for Agilely Conducting Computer Systems Course Projects},
year = {2021},
isbn = {9781450383974},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3456565.3460060},
doi = {10.1145/3456565.3460060},
abstract = {In recent years, there has been a rapidly growing recognition of the importance of conducting hands-on HW-SW co-design labs with real hardware (e.g., programmable logic chips named FPGAs) while studying computing curricula, especially the computer systems (CSys) courses. However, using FPGA is quite atime-consuming and error-prone process for students, and manipulating FPGA development tools and boards also distracts students and instructors. To overcome these obstacles and improve agility, we introduce an in-house platform named EdUCAS, in combination with the previously designed cloud FPGA servers for students to automatically conduct computer systems course projects. EdUCAS aims at enabling students to concentrate on their logic designs using hardware description language (e.g., Verilog HDL), without wasting useless time in FPGA tools and experimental environment.},
booktitle = {Proceedings of the 26th ACM Conference on Innovation and Technology in Computer Science Education V. 2},
pages = {662},
numpages = {1},
keywords = {course labs, computer systems course, FPGA development, CI/CD},
location = {Virtual Event, Germany},
series = {ITiCSE '21}
}

@inproceedings{10.1145/2493394.2493405,
author = {Park, Thomas H. and Saxena, Ankur and Jagannath, Swathi and Wiedenbeck, Susan and Forte, Andrea},
title = {Towards a taxonomy of errors in HTML and CSS},
year = {2013},
isbn = {9781450322430},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2493394.2493405},
doi = {10.1145/2493394.2493405},
abstract = {As part of a larger research agenda to explore web development as a context for learning computational literacy skills, we investigate errors people make while writing code in HTML and CSS. We report on a lab-based study in which 20 participants were video recorded as they completed coding tasks. We have applied the skills-rules-knowledge framework to segment this data by the cognitive causes of errors they made, and present a taxonomy of these errors. Our findings demonstrate how the skills-rules-framework can be used to analyze coding errors, provide insight about the origins of these errors, and suggest ways that the design of web development tools can be improved to support learning and practice with HTML and CSS.},
booktitle = {Proceedings of the Ninth Annual International ACM Conference on International Computing Education Research},
pages = {75–82},
numpages = {8},
keywords = {web development, errors, computing education},
location = {San Diego, San California, USA},
series = {ICER '13}
}

@inproceedings{10.1145/3426020.3426123,
author = {Nam, Youseok and Han, Hwansoo},
title = {Cost-Effective Container Orchestration Using Usage Data},
year = {2021},
isbn = {9781450389259},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3426020.3426123},
doi = {10.1145/3426020.3426123},
abstract = {Recent cloud IDE services provide containers as development environment to users. Since users have little knowledge on specific tasks to run and computing resources required in their containers, it is difficult to decide exactly how many containers to allocate to the cloud instance. Cloud services often employ conservative managing policy to make the cloud instances to an appropriate level, and only increase the instances little by little when their services encounter resource problems. In addition, a simple container placement policy creates a situation where no more containers can be allocated, even though resources are available in some of cloud instances depending on their execution situations. To improve this, we place as many cloud instances as possible based on the predicted container usage, which is collected from the usage data of the containers on previous cloud instances. When a cloud instance has too much surplus resource, we also employ container migration to effectively manage overall cloud instances. By equipping our cloud service with an intelligent management policy, we can reduce the total number of cloud instances in use and increase the cost efficiency for our cloud service by 14.7%, according to our simulation study.},
booktitle = {The 9th International Conference on Smart Media and Applications},
pages = {350–353},
numpages = {4},
keywords = {Predicted Resource Usage, Docker Container, Container Orchestration},
location = {Jeju, Republic of Korea},
series = {SMA 2020}
}

@inproceedings{10.1145/1242572.1242798,
author = {Ari, Ismail and Li, Jun and Ghosh, Riddhiman and Dekhil, Mohamed},
title = {Providing session management as core business service},
year = {2007},
isbn = {9781595936547},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1242572.1242798},
doi = {10.1145/1242572.1242798},
abstract = {It is extremely hard for a global organization with services over multiple channels to capture a consistent and unified view of its data, services, and interactions. While SOA and web services are addressing integration and interoperability problems, it is painful for an operational organization with legacy systems to quickly switch to service-based methods. We need methods to combine advantages of traditional (i.e. web, desktop, or mobile) application development environments and service-based deployments.In this paper, we focus on the design and implementation of session management as a core service to support business processes and go beyond application-specific sessions and web sessions. We develop local session components for different platforms and complement them with a remote "session service" that is independent of applications and platforms. We aim to close the gap between the two worlds by combining their performance, availability and interoperability advantages.},
booktitle = {Proceedings of the 16th International Conference on World Wide Web},
pages = {1263–1264},
numpages = {2},
keywords = {session service, multi-channel integration, data serialization},
location = {Banff, Alberta, Canada},
series = {WWW '07}
}

@inproceedings{10.1145/2666581.2666583,
author = {Al-qadhi, Mohammed and Keung, Jacky},
title = {Cloud-based support for global software engineering: potentials, risks, and gaps},
year = {2014},
isbn = {9781450332262},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2666581.2666583},
doi = {10.1145/2666581.2666583},
abstract = {Global Software Engineering (GSE) aims at utilizing global expertise and reducing time-to-market and costs for software development. However, GSE faces serious challenges related to the communication, coordination and provision of development environments for geographically distributed GSE sites, resulting in increased costs. Nowadays, cloud computing offers a cost-effective and a handy solution to provide computing support for global business. In particularly, it provides potential and viable solutions to address concerns and challenges in GSE. We have reviewed the relevant literature on cloud-based support for GSE and identified a set of pros and cons for supporting GSE with cloud services. We also present some recommendations to increase the trustworthiness and productivity with cloud-based support for GSE. This paper outlines the potential benefits and risks of cloud computing to GSE and identifies some gaps that need to be addressed by cloud-based support towards more trustworthy and productive work environment for GSE. This will open windows of opportunities for tailoring the solution utilizing cloud-based support for GSE.},
booktitle = {Proceedings of the International Workshop on Innovative Software Development Methodologies and Practices},
pages = {57–64},
numpages = {8},
keywords = {Global Software Engineering (GSE), Cloud Computing},
location = {Hong Kong, China},
series = {InnoSWDev 2014}
}

@inproceedings{10.5555/2457524.2457644,
author = {Palmonari, Matteo and Vizzari, Giuseppe and Broglia, Andrea and Lamberti, Nicola and Porrini, Riccardo},
title = {COMMA: A Result-Oriented Composite Autocompletion Method for E-marketplaces},
year = {2012},
isbn = {9780769548807},
publisher = {IEEE Computer Society},
address = {USA},
abstract = {Autocompletion systems support users in the formulation of queries in different computer systems, from development environments to the web. In this paper we describe Composite Match Autocompletion (COMMA), a lightweight approach to the introduction of semantics in the realization of a semi-structured data auto completion matching algorithm. The approach is formally described, then it is applied and evaluated with specific reference to the e-commerce context. The semantic extension to the matching algorithm exploits available information about product categories and distinguishing features of products to enhance the elaboration of exploratory queries. COMMA supports a seamless management of both targeted/precise queries and exploratory/vague ones, combining different filtering and scoring techniques. The algorithm is evaluated with respect both to effectiveness and efficiency in a real-world scenario: the achieved improvement is significant and not associated to a sensible increase of computational costs.},
booktitle = {Proceedings of the The 2012 IEEE/WIC/ACM International Joint Conferences on Web Intelligence and Intelligent Agent Technology - Volume 01},
pages = {545–552},
numpages = {8},
keywords = {semantic approaches, autocompletion systems},
series = {WI-IAT '12}
}

@inproceedings{10.1145/2024645.2024655,
author = {Fritz, Thomas and Murphy, Gail C.},
title = {Socially mediated technology awareness},
year = {2011},
isbn = {9781450308502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2024645.2024655},
doi = {10.1145/2024645.2024655},
abstract = {New technology can reduce a developer's work. Yet, given how fast technology changes, it is close to impossible for a developer to stay aware of technological advances that might ease his work. In this paper, we propose an approach that increases the likelihood of a developer becoming aware of technology that might help him. Our approach uses a developer's interaction with the development environment to characterize a profile of the developer's use. This profile can then be used to find relevant posts on social news web sites. We use the votes on the social web sites as a means to filter and rank relevant information for the developer.},
booktitle = {Proceedings of the 4th International Workshop on Social Software Engineering},
pages = {35–38},
numpages = {4},
keywords = {technology awareness, social news web site, serendipity, human-centric, context},
location = {Szeged, Hungary},
series = {SSE '11}
}

@inproceedings{10.1145/967900.968075,
author = {van Engelen, Robert},
title = {Code generation techniques for developing light-weight XML Web services for embedded devices},
year = {2004},
isbn = {1581138121},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/967900.968075},
doi = {10.1145/967900.968075},
abstract = {This paper presents specialized code generation techniques and runtime optimizations for developing light-weight XML Web services for embedded devices. The optimizations are implemented in the gSOAP Web services development environment for C and C++. The system supports the industry-standard XML-based Web services protocols that are intended to deliver universal access to any networked application that supports XML. With the standardization of the Web services protocols and the availability of toolkits such as gSOAP for developing embedded Web services, new opportunities emerge to integrate embedded systems into larger frameworks of interconnected applications and systems accessing dynamic resources on the Web ranging from hand-held and embedded devices to databases, clusters, and Grids.},
booktitle = {Proceedings of the 2004 ACM Symposium on Applied Computing},
pages = {854–861},
numpages = {8},
keywords = {networking, embedded systems, XML, Web Services},
location = {Nicosia, Cyprus},
series = {SAC '04}
}

@inproceedings{10.1145/944519.944539,
author = {de Sousa, Lirisnei Gomes and Leite, Jair C},
title = {XICL: a language for the user's interfaces development and its components},
year = {2003},
isbn = {9781450343244},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/944519.944539},
doi = {10.1145/944519.944539},
abstract = {More interactivity with better usability in Web Systems requires the development of user interface components with interaction techniques that are more powerful and popular among the users such as the WIMP style. This work presents the XICL, a markup language to describe the user interface and its components. This language defines a description format and a semantic model that standardizes components programming and increase reuse, extension and portability. We also present the XICL Studio, a development environment composed of an editor, a component library and a compiler. Our proposal is based only in recommended technologies and free software.},
booktitle = {Proceedings of the Latin American Conference on Human-Computer Interaction},
pages = {191–200},
numpages = {10},
keywords = {user interface languages, user interface design, user interface component},
location = {Rio de Janeiro, Brazil},
series = {CLIHC '03}
}

@inproceedings{10.1145/1869983.1870018,
author = {Asakawa, Kazuhisa and Segawa, Norihisa and Sawamoto, Jun},
title = {Proposal for a sensor network application development with ActionScript},
year = {2010},
isbn = {9781450303446},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1869983.1870018},
doi = {10.1145/1869983.1870018},
abstract = {In recent years, the research of sensor networks has advanced. They are anticipated for use in a wide variety of fields such as traceability systems of products, environmental morning, health care, etc. However, developers must develop applications to work in a sensor node and applications to make the sensor data visible. Therefore the knowledge that is necessary for development and the acquisition of the language will take time to develop. As described in this paper, we propose a development environment for sensor network application development. The environgment will be useful even by web programmers and a designers.},
booktitle = {Proceedings of the 8th ACM Conference on Embedded Networked Sensor Systems},
pages = {351–352},
numpages = {2},
location = {Z\"{u}rich, Switzerland},
series = {SenSys '10}
}

@inproceedings{10.1145/1967486.1967573,
author = {Baklouti, Nabil and Bouaziz, Sonia and Gargouri, Bilel and Aloulou, Chafik and Jmael, Mohamed},
title = {Towards the reuse of lingware systems: a proposed approach with a practical experiment},
year = {2010},
isbn = {9781450304214},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1967486.1967573},
doi = {10.1145/1967486.1967573},
abstract = {We are going to present in this document a generic approach for lingware systems reuse. This approach is based on reverse engineering technique in order to wrap up an existing lingware system with web services. This approach permits the reuse of lingware systems regardless of programming languages, development environments and the structures of linguistic resources. In order to preserve the interoperability between the reused lingware systems, the proposed approach performs the unification and the standardization of exchanged linguistic data using the Natural Language Processing (NLP) standards and consensus. Doing so, we facilitate the integration and the composition of lingware services in order to create a new application that treats several linguistic levels. In order to consolidate the given approach, we developed the LIngware Reuse Environment (LIRE). A practical experiment was carried out using LIRE environment on an automatic application summary of Arabic texts.},
booktitle = {Proceedings of the 12th International Conference on Information Integration and Web-Based Applications &amp; Services},
pages = {566–572},
numpages = {7},
keywords = {web service composition, software, reverse engineering, lingware system reuse, input/output standardization},
location = {Paris, France},
series = {iiWAS '10}
}

@inproceedings{10.1145/988834.988855,
author = {Creighton, Ian and Ho-Stuart, Chris},
title = {A sense of touch in online sculpting},
year = {2004},
isbn = {1581138830},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/988834.988855},
doi = {10.1145/988834.988855},
abstract = {This paper describes the work-in-progress of an online multimedia tool employing the sense of touch in exploring and learning sculpting techniques to be used over the Internet. Many game applications use haptic devices as a control mechanism, yet little has been documented on the use of this controlling procedure in an educational setting. The internet based instructional device presented here has a single modeling tool accessed by a customised interface designed with widely accessible software (Macromedia Director MX™). This will be extended to a small suite of modeling tools, in progress at this time. It makes use of a simple force-feedback joystick to control a spherical tool which makes changes to the surface of a 3D model represented onscreen. It is proposed that by using this device with Flash Web Server and the Internet, the system is able to support a collaborative environment encouraging interaction between student and tutor. It is hoped this system will become a research and development tool in online education.},
booktitle = {Proceedings of the 2nd International Conference on Computer Graphics and Interactive Techniques in Australasia and South East Asia},
pages = {118–122},
numpages = {5},
keywords = {multimedia, haptic, education, Internet, 3D},
location = {Singapore},
series = {GRAPHITE '04}
}

@inproceedings{10.1145/2108616.2108677,
author = {Chen, Kuo-Chang and Chang, Jih-Tso and Pan, Jeng-Shyang and Huang, Hsiang-Cheh},
title = {The open source IPTV service development environment: IPTV service execution environment},
year = {2010},
isbn = {9781605588933},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2108616.2108677},
doi = {10.1145/2108616.2108677},
abstract = {HDTV will be the trend of future video entertainments, and IPTV is the most potential because true 2-way interaction bringing more new audiovisual entertainment options can only be delivered through IP networks.This paper proposes a service execution environment, ISEE (IPTV Service Execution Environment), that is an open source framework. This environment supports various needs during developing and executing IPTV services, fully presents the interaction of IPTV with the "Service Component Platform" design concept, and has the features that can flexible use and provide new additional service quickly. in order to let service providers to quickly deliver interactive TV services that meet subscriber demands according to the market trends and thereby to build the brand loyalty and to enhance industry competitiveness. On the other hand, the design concept of "modularization platform" is applied to increase the flexibility and stability to expansion or update set-top-box (STB) or video server, and thereby to bring service providers more comprehensive options for platform maintenance.ISEE service includes the programs executed on the service and client sides, that communicate with HTTP protocols. Server programs are run in the JVM (Java Virtual Machine) and Servlet/JSP container environment, using Apache Struts as the web AP framework. Client programs are run in browsers supporting Javascript/CSS.This paper also proposes the development tool---ISSE SDK based on the above targets. The ISEE SDK is the development tool for the IPTV services in ISEE. It is a freeware comply with the open source standards using licensing terms in Apache License, V2.[30] Service developers can freely modify the ISEE SDK source codes and freely use the SDK and the application services developing with it. The SDK is easy to use and allows users to quickly develop IPTV services to support various STBs.},
booktitle = {Proceedings of the 4th International Conference on Uniquitous Information Management and Communication},
articleno = {50},
numpages = {7},
keywords = {open source, asynchronous design, STB, SDK, IPTV},
location = {Suwon, Republic of Korea},
series = {ICUIMC '10}
}

@inproceedings{10.1007/978-3-642-33666-9_12,
author = {Pfeiffer, Rolf-Helge and W\k{a}sowski, Andrzej},
title = {Cross-language support mechanisms significantly aid software development},
year = {2012},
isbn = {9783642336652},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-33666-9_12},
doi = {10.1007/978-3-642-33666-9_12},
abstract = {Contemporary software systems combine many artifacts specified in various modeling and programming languages, domainspecific and general purpose as well. Since multi-language systems are so widespread, working on them calls for tools with cross-language support mechanisms such as (1) visualization, (2) static checking, (3) navigation, and (4) refactoring of cross-language relations. We investigate whether these four mechanisms indeed improve efficiency and quality of development of multi-language systems. We run a controlled experiment in which 22 participants perform typical software evolution tasks on the JTrac web application using a prototype tool implementing these mechanisms. The results speak clearly for integration of cross-language support mechanisms into software development tools, and justify research on automatic inference, manipulation and handling of cross-language relations.},
booktitle = {Proceedings of the 15th International Conference on Model Driven Engineering Languages and Systems},
pages = {168–184},
numpages = {17},
location = {Innsbruck, Austria},
series = {MODELS'12}
}

@inproceedings{10.1145/2489812.2489819,
author = {Le Goaer, Olivier and Waltham, Sacha},
title = {Yet another DSL for cross-platforms mobile development},
year = {2013},
isbn = {9781450320436},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2489812.2489819},
doi = {10.1145/2489812.2489819},
abstract = {With the growing success of mobility, mobile platforms (iOS, Android, WindowsPhone, etc.) multiply, each requiring specific development skills. Given this situation, it becomes very difficult for software developers to duplicate their apps accordingly. Meanwhile, web-based applications have evolved to be "mobile-friendly" but it appears that this is not a silver bullet: the user experience and the overall quality is still better with native applications. Of course, cross-platform mobile development tools have emerged in recent years. This paper provides a survey of these tools and points out that a full-fledged language for mobile development is highly desirable. Consequently, we present a preliminary work on Xmob, a technology-neutral DSL intended to be cross-compiled to produce native code for a variety of platforms.},
booktitle = {Proceedings of the First Workshop on the Globalization of Domain Specific Languages},
pages = {28–33},
numpages = {6},
keywords = {mobile, cross-platform, MDA, DSL},
location = {Montpellier, France},
series = {GlobalDSL '13}
}

@inproceedings{10.1145/1930488.1930523,
author = {Salminen, Arto and Mikkonen, Tommi and Nyrhinen, Feetu and Taivalsaari, Antero},
title = {Developing client-side mashups: experiences, guidelines and the road ahead},
year = {2010},
isbn = {9781450300117},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1930488.1930523},
doi = {10.1145/1930488.1930523},
abstract = {Software mashups that combine content from multiple web sites to an integrated experience are a popular trend. However, methods and tools for creating mashups are still rather undeveloped, and there is little engineering support behind them. In this paper we provide insight into mashup development based on our practical experiences in implementing various sample mashup applications and tools for creating them. Unlike most commonly used mashup development tools, which are rather server-centric, we focus primarily on client-side mashup development. We have grouped our experiences into guidelines that can serve as a helpful starting point for the design of new mashups. The long-term goal of our work is to facilitate the development of robust, secure and compelling mashup applications, and more generally ease the transition towards web-based software development.},
booktitle = {Proceedings of the 14th International Academic MindTrek Conference: Envisioning Future Media Environments},
pages = {161–168},
numpages = {8},
keywords = {web-based software development, web engineering, web applications, mashups, mashup development},
location = {Tampere, Finland},
series = {MindTrek '10}
}

@inproceedings{10.1145/1595637.1595649,
author = {Subramonian, Venkita},
title = {Towards automated functional testing of converged applications},
year = {2009},
isbn = {9781605587677},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1595637.1595649},
doi = {10.1145/1595637.1595649},
abstract = {There is a growing demand for IP based multimedia services that encompass usage of multiple user interfaces including web and telephony. The complexity of such converged applications requires sophisticated development tools and techniques. While standards such as SIP and HTTP Servlets enable the application developer to develop and deploy converged applications, there is a growing need for tools and techniques that can help with functional testing of converged applications. This paper makes the following contributions - (1) identifies key challenges including concurrency and coordination in functional testing of converged applications (2) describes our solution to address these challenges and (3) describes the impact of our solution based on experience gained from its use in functional testing of a real-world converged conferencing application.},
booktitle = {Proceedings of the 3rd International Conference on Principles, Systems and Applications of IP Telecommunications},
articleno = {9},
numpages = {12},
keywords = {testing, telecommunications, converged applications, VoIP applications},
location = {Atlanta, Georgia},
series = {IPTComm '09}
}

@inproceedings{10.5555/3291291.3291340,
author = {Yuen, Elson and Peters, Eric and Senthilnathan, Rajiv and Faisal, Maysun Jamil and Hung, Steven},
title = {Hands-on: easy microservices application development with microclimate},
year = {2018},
publisher = {IBM Corp.},
address = {USA},
abstract = {Microclimate is a brand-new, cloud native development environment that offers a complete, end-to-end development experience for Microservices. Since Microclimate has been designed with a focus on containerization, it can run anywhere from your local laptop, to an IBM Cloud private cluster. With Microclimate, you can create or import Java, Node.js, or Swift applications into the development environment, and using any editor of your choosing, you can quickly start development on your application in a containerized environment. Through a process called Rapid Iteration, Microclimate will quickly detect any changes that occur in your project and determine the minimal and best course of action to update your application. From there, using our integrated DevOps pipeline, you can deploy your application with Jenkins to a live ICP cluster. With these features, Microclimate offers a fully featured development experience that many other environments don't offer today. During the hands-on workshop, we will give you an introduction to Microclimate, starting from product installation to write Microservices applications to run on Microclimate in a Docker environment. You will get hands on experiences to create new applications and import existing applications into Microclimate. For developers, a crucial part of the development cycle is the ability to quickly develop and test applications changes on a running application. The develop-deploy-test-repeat cycle must be as short as possible in order to prevent lost developer productivity due to deployment downtime. You will be given the opportunity to experience this rapid iterative development support by developing Java and JavaScript applications in this workshop. Finally, during the workshop we will introduce the integrated DevOps pipeline functions provided that allows you get into production fast with a preconfigured DevOps pipeline and deploy application to IBM Cloud Private (ICP). We will also show you the diagnostic services that helps you to do problem determination in production.},
booktitle = {Proceedings of the 28th Annual International Conference on Computer Science and Software Engineering},
pages = {361},
numpages = {1},
location = {Markham, Ontario, Canada},
series = {CASCON '18}
}

@inproceedings{10.1145/3234698.3234753,
author = {Krit, Salah-Ddine and El Asikri, Mohamed and El Habil, Brahim and Chaib, Hassan and Benaddy, Mohamed and Elouali, Mourad},
title = {Development of Semantic Web applications: state of art and critical review},
year = {2018},
isbn = {9781450363921},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3234698.3234753},
doi = {10.1145/3234698.3234753},
abstract = {Ontologies have recently received popularity in the area of knowledge management and knowledge sharing, especially after the evolution of the Semantic Web and its supporting technologies. An ontology defines the terms and concepts (meaning) used to describe and represent an area of knowledge. The aim of this paper is to identify the basics notions of ontologies and ontology management tools specially prot\'{e}g\'{e} that are freely available and the process development of semantic web notions.The Semantic Web vision have lead to a number of standards such as OWL and Web Semantic Mining. While these standards provide a technical infrastructure, developers have little guidance on how to build real-world Semantic Web applications. We will start by some definitions of Semantic Web and the common points with Web Mining. We will illustrate how these notions can be put into practice using the modern Semantic Web development tool Protege, and indicate future possibilities;},
booktitle = {Proceedings of the Fourth International Conference on Engineering &amp; MIS 2018},
articleno = {55},
numpages = {6},
keywords = {ontology learning, ontology, Web Mining, Semantic Web, Knowledge discovery},
location = {Istanbul, Turkey},
series = {ICEMIS '18}
}

@inproceedings{10.1145/1352694.1352752,
author = {Ara\'{u}jo, Bruno C. and Rocha, Anne Caroline and Xavier, Arthur and Muniz, Ana Isabella and Garcia, Francilene P.},
title = {Web-based tool for automatic acceptance test execution and scripting for programmers and customers},
year = {2007},
isbn = {9781595935984},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1352694.1352752},
doi = {10.1145/1352694.1352752},
abstract = {Software testing is a software engineering practice that improves the quality of developed computer systems. It is a testing discipline strongly related to the agile software development method Extreme Programming (XP) [2], thus this paper examines acceptance tests mostly from a XP viewpoint. Nowadays, there are many online portals in which a large database of software projects can be found. If developers intent to run acceptance tests in those software, they must always have a complete development environment installed. In this paper, we present FLOAppTest, a visual online (remote) tool integrated to a collaborative environment (like Source Forge) that makes Java projects testing easy by offering a fashion to generate executable acceptance scripts with EasyAccept framework support.},
booktitle = {Proceedings of the 2007 Euro American Conference on Telematics and Information Systems},
articleno = {56},
numpages = {4},
keywords = {software testing, software engineering, acceptance tests, WEB systems, WEB components},
location = {Faro, Portugal},
series = {EATIS '07}
}

@inproceedings{10.1145/2030031.2030039,
author = {Sano, Akira},
title = {An application for creating full-scale augmented reality content without 3d modeling skills},
year = {2011},
isbn = {9781450309318},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2030031.2030039},
doi = {10.1145/2030031.2030039},
abstract = {The purpose of this project is the development of a software application that enables the user to create full-scale augmented reality (AR) content without the need for specialized 3D modeling skills or software. Research has shown that of the numerous previously developed AR content development environments and applications, all requires 3D modeling skills. The experimental system described in this paper allows the creation of full-scale AR content (a rectangular parallelepiped) using captured images via a Web-based application. Twenty-two out of twenty-four individuals who tested the system were able to successfully create AR content. The author concludes that the system is am important step toward the development of a user-friendly tool for the creation of full-scale AR content. This will add a new dimention of the images on the Internet: a real life impression of size and shape.},
booktitle = {Proceedings of the 2011 ACM Symposium on The Role of Design in UbiComp Research &amp; Practice},
pages = {19–24},
numpages = {6},
keywords = {multi-platform, mixed reality, full-scale, communication design, augmented reality},
location = {Beijing, China},
series = {RDURP '11}
}

@inproceedings{10.1145/2157136.2157311,
author = {Kurtz, Barry L. and Fenwick, James B. and Meznar, Philip},
title = {Developing microlabs using Google web toolkit},
year = {2012},
isbn = {9781450310987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2157136.2157311},
doi = {10.1145/2157136.2157311},
abstract = {Closed labs have become a common feature in computer science education because they provide hands-on experience in a supervised setting. Microlabs extend this approach into the lecture format with very short hands-on activities in the "middle of the lecture." The programming microlab approach was developed for a distributed computing course that integrated all levels of parallelism (multicore, cluster, and grid). Since that time we have developed logical microlabs where students solve conceptual problems that do not involve programming. These are integrated into a Microlab Learning Cycle. We want our microlabs to be usable with a wide variety of computing devices, including tablets. After experimenting with different development environments we have adopted the Google Web Toolkit (GWT). After presenting the current status of our activities, we discuss future directions for microlab development. This work is supported, in part, by three National Science Foundation grants.},
booktitle = {Proceedings of the 43rd ACM Technical Symposium on Computer Science Education},
pages = {607–612},
numpages = {6},
keywords = {web development, automated grading, active learning},
location = {Raleigh, North Carolina, USA},
series = {SIGCSE '12}
}

@inproceedings{10.5555/783106.783135,
author = {Truong, Nghi and Bancroft, Peter and Roe, Paul},
title = {A web based environment for learning to program},
year = {2003},
isbn = {0909925941},
publisher = {Australian Computer Society, Inc.},
address = {AUS},
abstract = {The purpose of this paper is to describe in detail the current development status of the innovative Environment for Learning to Program (ELP) which provides an interactive web-based environment for teaching programming to the first year Information Technology students at Queensland University of Technology (QUT). ELP allows students to program at the early stages of their course without the need to familiarize themselves with a program development environment. Most importantly, it eliminates all the difficulties associated with installing and running a Java compiler. Using ELP, students learn and develop their problem solving skills by working with program template exercises on the web. ELP provides a learning environment which meets the diverse needs of students.},
booktitle = {Proceedings of the 26th Australasian Computer Science Conference - Volume 16},
pages = {255–264},
numpages = {10},
keywords = {Java, XML, computer programming, online learning, tutoring system, web},
location = {<conf-loc>, <city>Adelaide</city>, <country>Australia</country>, </conf-loc>},
series = {ACSC '03}
}

@inproceedings{10.1145/2637647.2637652,
author = {Ring, Martin and L\"{u}th, Christoph},
title = {Real-time collaborative Scala development with Clide},
year = {2014},
isbn = {9781450328685},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2637647.2637652},
doi = {10.1145/2637647.2637652},
abstract = {We present Clide, a real-time collaborative development environment. Clide offers a new approach to tool integration which complements the way resources are shifted to the cloud today. We achieve this by introducing the novel concept of universal collaboration, which drops the distinction between human and non-human participants (so-called assistants) and enables innovative ways of interaction.Clide has a highly flexible and distributed architecture based on Akka. Despite the complexity of the synchronisation of distributed document states, implementing assistants is pleasantly simple. To demonstrate the versatility and usability of the platform we implement a simple wrapper turning the Scala compiler into a collaborator, offering content assistance to other developers and tools.},
booktitle = {Proceedings of the Fifth Annual Scala Workshop},
pages = {63–66},
numpages = {4},
keywords = {universal collaboration, interactive programming environments, distributed programming environments, computer-supported cooperative work},
location = {Uppsala, Sweden},
series = {SCALA '14}
}

@inproceedings{10.1145/1095714.1095760,
author = {Wang, Andy Ju An},
title = {Web-based interactive courseware for information security},
year = {2005},
isbn = {1595932526},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1095714.1095760},
doi = {10.1145/1095714.1095760},
abstract = {Interactive courseware encourages student participation and active learning. Prior research and teaching experience has shown that IT students prefer to learn information security in a hands-on manner. How do we offer information security as a distance learning course while give students the similar hands-on teaching and learning style as we do in a traditional classroom or lab? This paper discusses our experience in developing Web-based multimedia and interactive courseware for an undergraduate information security course. The courseware is based on a simple yet powerful software tool called MICS (Multimedia and Interactive Courseware Synthesizer), designed for generating multimedia and interactive courseware for science and engineering students. We report in this paper our experience in designing such a course development tool and in using the courseware in our IT curricula.},
booktitle = {Proceedings of the 6th Conference on Information Technology Education},
pages = {199–204},
numpages = {6},
keywords = {interactivity, information security, active learning},
location = {Newark, NJ, USA},
series = {SIGITE '05}
}

@inproceedings{10.1145/3234698.3234704,
author = {El Asikri, M. and Krit, S. and Chaib, H.},
title = {A brief survey of Creating Semantic Web content with Prot\'{e}g\'{e}},
year = {2018},
isbn = {9781450363921},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3234698.3234704},
doi = {10.1145/3234698.3234704},
abstract = {An ontology development tool is often the first thing that people get to see when they venture into the Semantic Web field. Ontology editors and visualization tools therefore carry a special responsibility for the success of the Semantic Web community. At the same time, the user communities around such tools serve as melting pots which can be exploited to collect feedback on the overall design of the language and associated systems.Prot\'{e}g\'{e} is one of the most used development platforms for ontology-based systems. This paper report on the experiences of using Prot\'{e}g\'{e} with OWL. The intention of the Prot\'{e}g\'{e} and specially Prot\'{e}g\'{e} Plugin is to make Semantic Web technology available to a broad group of developers and users, and to promote best practices and design patterns. In this document we walk through a selection of these issues and suggest directions for future work and standardization efforts.},
booktitle = {Proceedings of the Fourth International Conference on Engineering &amp; MIS 2018},
articleno = {6},
numpages = {8},
keywords = {Semantic Web, Prot\'{e}g\'{e}, Ontology, OWL},
location = {Istanbul, Turkey},
series = {ICEMIS '18}
}

@inproceedings{10.1145/3356590.3356636,
author = {Urbanek, Michael and G\"{u}ldenpfennig, Florian and Habiger, Michael},
title = {Creating Audio Games Online with a Browser-Based Editor},
year = {2019},
isbn = {9781450372978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3356590.3356636},
doi = {10.1145/3356590.3356636},
abstract = {Play has been identified as a fundamental human desire (see, e.g., Huizinga's seminal work on "Homo Ludens"). To little surprise then, people have also used sound in play and to create games. Since the advent of the personal computer, the genre of audio games invites sighted and visually impaired people alike to play interactive computer games solely based on sound renderings. While audio games are popular, especially among blind people, there is a lack of development tools to support audio game design and to foster further growth of this genre. For this reason, we demonstrate a browser-based audio game editor that we have developed over the last year or so, drawing on the experience and needs of seven long-term audio gamers. To the best of our knowledge, it is the first application or tool of its kind. Its key features are easy usage (including instant game play and sound rendering) and open source development to increase sustainability and possible impact.},
booktitle = {Proceedings of the 14th International Audio Mostly Conference: A Journey in Sound},
pages = {272–276},
numpages = {5},
keywords = {Web-based, Sound Library, Audio Games, Audio Game Engine, Audio Game Editor},
location = {Nottingham, United Kingdom},
series = {AM '19}
}

@inproceedings{10.1145/2207676.2208740,
author = {Chang, Kerry Shih-Ping and Myers, Brad A.},
title = {WebCrystal: understanding and reusing examples in web authoring},
year = {2012},
isbn = {9781450310154},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2207676.2208740},
doi = {10.1145/2207676.2208740},
abstract = {Examples have been widely used in the area of web design to help web authors create web pages. However, without actually understanding how an example is constructed, people often have trouble extracting the elements they want and incorporating them into their own design. This paper introduces WebCrystal, a web development tool that helps users understand how a web page is built. WebCrystal contributes novel interaction techniques that let the user quickly access HTML and CSS information by selecting questions regarding how a selected element is designed. It provides answers using a textual description and a customized code snippet that can be copied-and-pasted to recreate the desired properties. WebCrystal also supports combining the styles and structures from multiple elements into the generated code snippet, and provides visualizations on the web page itself to explain layout relationships. Our user study shows that WebCrystal helped both novice and experienced developers complete more tasks successfully using significantly less time.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {3205–3214},
numpages = {10},
keywords = {web authoring, examples},
location = {Austin, Texas, USA},
series = {CHI '12}
}

@inproceedings{10.5555/2399776.2399809,
author = {Dhiman, Karan and Quach, Benson},
title = {Google's Go and Dart: parallelism and structured web development for better analytics and applications},
year = {2012},
publisher = {IBM Corp.},
address = {USA},
abstract = {Big Data -- the new buzz word in the IT world -- is synonymous with the concept of data-driven decision making. All across the industry, enterprises are collecting all sorts of data including client preferences, trends amongst social networks and information about competing businesses, at an unprecedented scale with the focus on making intelligent decisions. The decisions made from processing such data have a direct impact on both the businesses and its clients through higher profit margins and smarter services respectively. The combination of sophisticated analytics and data-driven decision making enables new types of solutions, from mining the human genome to deriving sentiments from social networks. This is all leveraged through consistent innovation of underlying technology, increased competition and cloud-based SaaS. Clouds are the frontiers for most business IT solutions as they idealize the "as a service" methodology, interoperability between services and correct billing metrics. Thus, it easily follows that most data analytic tools are designed to be run on cloud clusters rather than traditional data centres.In a world where there is an emergence of extensive use of analytics, data and fact-based decision making, spontaneous sorting of data becomes imperative. Industries like finance, pharmacy and others rely heavily on data to assess their strategies and customer requirements, and to respond quickly for the better. Hence, analytics are crucial for knowledge discovery, business growth and technological improvements. Every second, massive quantities of data are being generated and there is a need for data analytic tools that are easily integrated, scalable, and informative. While we are promisingly producing vast amounts of information, there is currently a wide gap between its potential and its realization. There are many problems with Big Data, including the heterogeneity of data, scale, readiness and complexity. The dynamic business environment requires a company to quickly adapt to newer technologies that can provide better solutions. A high throughput of services translates into improved business efficiency. It is often the case that an innocent shift in development tools can catapult a paradigm altering change. In this workshop, we discussed two emerging technologies recently launched by Google -- Go and Dart; which through their advents in scalability, improved parallelism, and structured web development greatly enhanced the capacity and quality of building applications designed to work from handheld mobile devices, to data crunching frameworks such as Google's Map Reduce, IBM's Big Insights and others.The initiative behind Go is to create a language that allows programmers to exploit concurrency in programs by providing simple yet powerful features built into the language that do not require complex code and high maintenance. With the introduction of GPGPU's for execution, it is essential to have concurrency dependent applications in order to improve their performance. Go provides simplicity and improvement in leveraging processing power while providing simplified features of traditional programming languages. Not following the traditional object oriented programming model, Go was initially targeted for system programming including applications for distributed systems, storage infrastructure, networking infrastructure and the RPC layer, however, its features make it an excellent language deploying application on concurrent systems. Go has higher throughput, as compared to Java or Python because of its dynamic stack- and core- focused features for speed and concurrency. Being a hybrid between C and Python, Go is type-safe and memory-safe, has fast start-ups, latency-free garbage collection, and high-speed compilation. Businesses gain the advantage of availability of services by using a language that is designed to be concurrent. Go's "lightweight concurrency" allows developers to create sets of lightweight communicating processes called goroutines. The programmer doesn't need to worry about synchronization, locking mechanisms such as semaphores and race conditions. This affects the cost of back-end and front-end instances which allows tiers to deliver more responses per instance.Moreover, Go uses significantly less memory as compared to Java which is JVM dependent. Go is predominantly used because of its easy integration with frameworks like Map Reduce. Go provides static typing and makes unit testing much easier to the languages like Java and C. Go is designed specifically to provide easy integration with Google App Engine and Google Compute Engine. Finally, Go compiles static binaries with no dependencies, so Go programs can simply be dropped onto a server and deployed.Today, the web is everywhere -- from handheld mobile devices to television sets to traditional desktops. It is very easy to write a web page that is universally accessible on any device via a browser. There are no installation or update procedures, making the user experience very pleasant. JavaScript is now supported by almost every browser because of its convenient functionality. However, alongside the beauty of JavaScript is its unpleasantness in debugging, performance across browsers, and security on client devices. Dart is a new web programming language and methodology in development by Google for creating structured web applications. It is developed with the aim to encompass aspects such as simplicity, efficiency, and scalability while combining new language features with familiar language constructs into a clear, fluent syntax. The fundamental reason for its creation is to ultimately replace JavaScript because of its unstructured and inconvenient development paradigm. Dart aims to tackle these issues by providing lexical scoping, closures, and optional static typing; not to mention integrated development and debugging are also provided in the Dart Editor and SDK, which supports major common interactions such as refactoring, breakpoints, code completion, code navigation and much more. In addition, the SDK provides a standalone virtual machine, package manager, and Chromium with an embedded Dart VM. Dart can also be compiled to JavaScript, which makes it usable on all modern desktop and mobile browsers with an additional plus of being able to run on a server in a stand-alone Dart VM. Fundamentally aiming to create structure and flexibility for the web, focusing on supporting a full range of devices --- including phones, tablets, laptops, and servers, and providing environmental and supportive tools to run efficiently across all major modern browsers, Go and Dart are developed specifically for a simplification of the coding paradigm and better integration with existing technology. Both Go and Dart aim to improve the modern day programming model and unstructured web source code.This full-day workshop focused on the core technologies of Go and Dart, including building and deploying applications integrated with analytic frameworks on cloud clusters. The workshop was split into three segments. In the first segment, the objective was to take a hands on approach to walk through the features of Go and Dart. The participants wrote code themselves and explored both the languages on a first hand basis. We introduced the languages and discussed their basic constructs and some advanced features.In the second half, we examined an in depth example of creating a web application using Go, Dart, Map Reduce, and Google App Engine. The goal was to demonstrate Go's simplicity, power of concurrency, and structured web development and integration with existing API's. In the last segment, we concluded with a discussion about the impact Go and Dart can have on different parts of the IT industry. As the shift to development for cross mobile platform web applications increases - we expose the usefulness of using Dart instead of JavaScript for building mobile web applications with frameworks like Apache Cordova and IBM Worklight. Furthermore, we discussed questions like how these languages are being used in the real world today; the learning curve, cost and complexity behind the languages; the value of the products that are produced by using such programming tools.There are many subtle challenges and opportunities associated with Big Data, which require restructuring the data management platforms to better suit the needs of businesses. When making a shift to newer technologies, there are always doubts and expectations. Hence, it is beneficial to look into the integration of emerging technologies with existing systems for the constant improvement.},
booktitle = {Proceedings of the 2012 Conference of the Center for Advanced Studies on Collaborative Research},
pages = {253–254},
numpages = {2},
location = {Toronto, Ontario, Canada},
series = {CASCON '12}
}

@inproceedings{10.1145/2957265.2965005,
author = {Ghiani, Giuseppe and Manca, Marco and Patern\`{o}, Fabio and Santoro, Carmen},
title = {End-user personalization of context-dependent applications in AAL scenarios},
year = {2016},
isbn = {9781450344135},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2957265.2965005},
doi = {10.1145/2957265.2965005},
abstract = {The design and development of flexible applications able to match the many possible user needs and provide high quality user experience is still a major issue. In ambient-assisted living scenarios there is the need of giving adequate support to elderly so that they can independently live at home. Thus, providing personalized assistance is particularly critical because ageing people often have different ranges of individual needs, requirements and disabilities. In this position paper we introduce a solution based on an End-User Development environment that allows patients and caregivers to tailor the context-dependent behaviour of their Web applications in order to facilitate patients' life. This is done through the specification of trigger-action rules to support application customization.},
booktitle = {Proceedings of the 18th International Conference on Human-Computer Interaction with Mobile Devices and Services Adjunct},
pages = {1081–1084},
numpages = {4},
keywords = {personalization, end-user development, AAL},
location = {Florence, Italy},
series = {MobileHCI '16}
}

@inproceedings{10.1145/2872518.2890577,
author = {Mori, Kate and Ractliffe, Lucy},
title = {Evaluating the use of a MOOC within Higher Education Professional Development Training},
year = {2016},
isbn = {9781450341448},
publisher = {International World Wide Web Conferences Steering Committee},
address = {Republic and Canton of Geneva, CHE},
url = {https://doi.org/10.1145/2872518.2890577},
doi = {10.1145/2872518.2890577},
abstract = {This paper evaluates the effectiveness of a massive open online course (MOOC) as a professional development tool in higher education. The transition from the MOOC's initial intended use as a low cost way for students to access education and aid their studies has evolved to facilitate continuing professional development (CPD), particularly within the commercial sector [1]. Findings from this study indicate there is an increase in participation and satisfaction amongst higher education staff who undertook a MOOC compared to attending traditional staff development days. Recommendations from this study?s findings highlight that staff were keen to engage with the MOOC format, but felt they needed face-to-face meetings as well to reinforce, contextualize and discuss the key messages of the MOOC. In addition to this, time allocation within workloads should be considered for any future inclusion of MOOCs for staff development.},
booktitle = {Proceedings of the 25th International Conference Companion on World Wide Web},
pages = {831–833},
numpages = {3},
keywords = {staff development, professional development, mooc, higher education, cpd},
location = {Montr\'{e}al, Qu\'{e}bec, Canada},
series = {WWW '16 Companion}
}

@article{10.5555/3069658.3069666,
author = {Jin, Karen H.},
title = {On designing of an intro to web development course for non-majors with modern frameworks and tools},
year = {2017},
issue_date = {June 2017},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {32},
number = {6},
issn = {1937-4771},
abstract = {Mobile web development is one of the fast growing fields in IT. New and powerful front-end development technologies and tools are available to help users with limited experience build mobile-friendly responsive websites. However, these recent technologies, such as responsive web design frameworks, are rarely covered in intro-level web development courses, especially to students with no programming background. We present our experience in the redesign of an introduction course to web front-end development that integrates the recently released W3.CSS responsive framework and other development tools commonly used in industry. The previous HTML + CSS structure of the course is replaced by HTML + CSS + W3.CSS Framework along with the usage of various tools. The goal is to help students gain experience with modern web development, boost their confidence in mastering new technologies and develop transferable skills in problem solving. The initial evaluation shows very positive response from non-major students.},
journal = {J. Comput. Sci. Coll.},
month = {jun},
pages = {34–36},
numpages = {3}
}

@inproceedings{10.1145/3568294.3580112,
author = {Porfirio, David and Saupp\'{e}, Allison and Cakmak, Maya and Albarghouthi, Aws and Mutlu, Bilge},
title = {Crowdsourcing Task Traces for Service Robotics},
year = {2023},
isbn = {9781450399708},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3568294.3580112},
doi = {10.1145/3568294.3580112},
abstract = {Demonstration is an effective end-user development paradigm for teaching robots how to perform new tasks. In this paper, we posit that demonstration is useful not only as a teaching tool, but also as a way to understand and assist end-user developers in thinking about a task at hand. As a first step toward gaining this understanding, we constructed a lightweight web interface to crowdsource step-by-step instructions of common household tasks, leveraging the imaginations and past experiences of potential end-user developers. As evidence of the utility of our interface, we deployed the interface on Amazon Mechanical Turk and collected 207 task traces that span 18 different task categories. We describe our vision for how these task traces can be operationalized as task models within end-user development tools and provide a roadmap for future work.},
booktitle = {Companion of the 2023 ACM/IEEE International Conference on Human-Robot Interaction},
pages = {389–393},
numpages = {5},
keywords = {crowdsourcing, end-user development, service robotics},
location = {<conf-loc>, <city>Stockholm</city>, <country>Sweden</country>, </conf-loc>},
series = {HRI '23}
}

@inproceedings{10.1145/1229390.1229411,
author = {Zhang, Xiaoyu and Gra\v{c}anin, Denis},
title = {From coarse-grained components to DVE applications: a service- and component-based framework},
year = {2007},
isbn = {9781595936523},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1229390.1229411},
doi = {10.1145/1229390.1229411},
abstract = {Distributed Virtual Environments (DVEs) are distributed, simulated virtual worlds where users gather and interact within a shared space. Web-based DVE applications are attracting more and more attention. However, building DVE applications requires a significant effort, even with the modern development tools. In this paper we propose a component-based and a service-based framework for constructing DVE applications from coarse-grained components. This component-based and service-oriented architecture provides a great flexibility for building complex DVE applications. Based on the developed terminology and profile, the framework provides a high level description language for specifying user interaction tasks. The DVE developers can concentrate on the application design rather than worrying about the programming details. The framework also provides a runtime platform for coarse-grained components integration and a shared scene graph for coordinating the presentation for individual users.},
booktitle = {Proceedings of the Twelfth International Conference on 3D Web Technology},
pages = {113–121},
numpages = {9},
keywords = {web services, web 3D, interaction tasks, framework, distributed virtual environment, coarse-grained component},
location = {Perugia, Italy},
series = {Web3D '07}
}

@inproceedings{10.1145/2212776.2223734,
author = {Muhammad, Imran and Florian, Daniel and Fabio, Casati and Maurizio, Marchese},
title = {ResEval Mash: a mashup tool that speaks the language of the user},
year = {2012},
isbn = {9781450310161},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2212776.2223734},
doi = {10.1145/2212776.2223734},
abstract = {End-user development (i.e., enabling end-users without programming skills to build their own applications) is undergoing a revolution, as mashups are widely considered to be the most appealing development tool for the situational, short-span applications. Plain technology (e.g., SOAP/WSDL web services) or simple modeling languages (e.g., Yahoo! Pipes) don't convey enough meaning to non-programmers. In this paper, we propose a domain-specific approach to mashups that speaks the language of the user", i.e., that is aware of the terminology, concepts, rules, and conventions (the domain) the user is comfortable with. We exemplify the approach by implementing a mashup tool for a specific domain (research evaluation) and describe the respective user study. The results of a first user study confirm that domain-specific mashup tools indeed lower the entry barrier to mashup development.},
booktitle = {CHI '12 Extended Abstracts on Human Factors in Computing Systems},
pages = {1949–1954},
numpages = {6},
keywords = {research evaluation, end-user development, domain-specific mashups},
location = {Austin, Texas, USA},
series = {CHI EA '12}
}

@inproceedings{10.1145/1030397.1030406,
author = {de Andrade, Andrea R. and Munson, Ethan V. and Pimentel, Mariada G.},
title = {A document-based approach to the generation of web applications},
year = {2004},
isbn = {1581139381},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1030397.1030406},
doi = {10.1145/1030397.1030406},
abstract = {wVIEW is an automated system for generating Web applications that relies extensively on document representations and transformations. wVIEW adopts the widely accepted hypermedia design principle that content navigation and presentation are separate concerns. Each of these aspects of the design process is controlled by separate declarative specifications. Only the first specification the content structure specification which is described using UML must be provided. However the wVIEW user is free to add extensions and customizations to both the data and navigation models in order to make the final application suit specific needs. This paper describes the wVIEW approach and the current prototype which focuses on the data and navigation modelling aspects. The paper discusses experiences in using XSLT as the primary development tool and shows examples how the enhancements planned to XSLT address some limitations of the application generation process.},
booktitle = {Proceedings of the 2004 ACM Symposium on Document Engineering},
pages = {45–47},
numpages = {3},
keywords = {web applications, design, cocoon, XSLT, XML},
location = {Milwaukee, Wisconsin, USA},
series = {DocEng '04}
}

@inproceedings{10.1145/1929529.1929538,
author = {Moore, J. Strother},
title = {Reasoning about digital artifacts with ACL2},
year = {2011},
isbn = {9781450304870},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1929529.1929538},
doi = {10.1145/1929529.1929538},
abstract = {ACL2 is both a programming language in which computing systems can be modeled and a tool to help a designer prove properties of such models. ACL2 stands for A Computational Logic for Applicative Common Lisp'' and provides mechanized reasoning support for a first-order axiomatization of an extended subset of functional Common Lisp. Most often, ACL2 is used to produce operational semantic models of artifacts. Such models can be executed as functional Lisp programs and so have dual use as both pre-fabrication simulation engines and as analyzable mathematical models of intended (or at least designed) behavior.This project had its start 40 years ago in Edinburgh with the first Boyer-Moore Pure Lisp theorem prover and has evolved proofs about list concatenation and reverse to proofs about industrial models.Industrial use of theorem provers to answer design questions of critical importance is so surprising to people outside of the theorem proving community that it bears emphasis. In the 1980s, the earlier Boyer-Moore theorem prover, Nqthm, was used to verify the ``Computational Logic stack'' -- a hardware/software stack starting with the NDL description of the netlist for a microprocessor and ascending through a machine code ISA, an assembler, linker, and loader, two compilers (for subsets of Pascal and Lisp), an operating system, and some simple applications. The system components were proved to compose so that properties proved of high-level software were guaranteed by the binary image produced by the composition. At around the same time, Nqthm was used to verify 21 of the 22 subroutines in the MC68020 binary machine code produced from the Berkeley C String Library by gcc -o, identifying bugs in the library as a result.Applications like these convinced us that (a) industrial scale formal methods was practical and (b) Nqthm's Pure Lisp produced uncompetitive results compared to C when used for simulation engines. We therefore designed ACL2, which initially was Nqthm recoded to support applicative Common Lisp.The 1990s saw the first industrial application of ACL2, to verify the correspondence between a gate-level description of the Motorola CAP DSP and its microcode engine. The Lisp model of the microcode engine was proved to be bit- and cycle-accurate but operated several times faster than the gate-level simulator in C because of the competitive execution speed of Lisp and the higher level of trusted abstraction. Furthermore, it was used to discover previously unknown microcode hazards. An executable Lisp predicate was verified to detect all hazards and subsequently used by microcode programmers to check code. This project and a subsequent one at AMD to verify the floating point division operation on the AMD K5 microprocessor demonstrated the practicality of ACL2 but also highlighted the need to develop better Lisp system programming tools wedded to formal methods, formal modeling, proof development, and ``proof maintenance'' in the face of evolution of the modeled artifacts.Much ACL2 development in first decade of the 21st century was therefore dedicated to such tools and we have witnessed a cor-responding increase in the use of ACL2 to construct and reason about commercial artifacts. ACL2 has been involved in the design of all AMD desktop microprocessors since the Athlon; specifically, ACL2 is used to verify floating-point operations on those micro-processors. Centaur Technology (chipmaker for VIA Technologies) uses ACL2 extensively in verifying its media unit and other parts of its x86 designs. Researchers at Rockwell-Collins have shown that ACL2 models of microprocessors can run at 90% of the speed of C models of those microprocessors. Rockwell-Collins has also used ACL2 to do information flow proofs to establish process separation for the AAMP7G cryptoprocessor and, on the basis of those proofs, obtained MILS certification using Formal Methods techniques as specified by EAL-7 of the Common Criteria. IBM has used ACL2 to verify floating point operations on the Power 4 and other chips. ACL2 was also used to verify key properties of the Sun Java Virtual Machine's class loader.In this talk I will sketch the 40 year history of this project, showing how the techniques and applications have grown over the years. I will demonstrate ACL2 on both some simple prob-lems and a complicated one, and I will deal briefly with the question of how -- and with what tool -- one verifies a verifier. For scholarly details of some of how to use ACL2 and some of its industrial applications see [1, 2]. For source code, lemma li-braries, and an online user's manual, see the ACL2 home page, http://www.cs.utexas.edu/users/moore/acl2.},
booktitle = {Proceedings of the 5th ACM Workshop on Programming Languages Meets Program Verification},
pages = {1–2},
numpages = {2},
keywords = {virtual machine verification, software stack, operational semantics, microprocessor verification, jvm, hardware verification, automatic theorem proving},
location = {Austin, Texas, USA},
series = {PLPV '11}
}

@inproceedings{10.1145/1067445.1067452,
author = {Truong, Nghi and Bancroft, Peter and Roe, Paul},
title = {Learning to program through the web},
year = {2005},
isbn = {1595930248},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1067445.1067452},
doi = {10.1145/1067445.1067452},
abstract = {Computer-based tutoring systems which assist students in solving introductory programming problems have significant potential for improving the quality of programming education and reducing the instructor's work load. The innovative Environment for Learning to Program (ELP) provides an interactive web-based environment for teaching programming to first year Information Technology students at Queensland University of Technology (QUT). ELP allows students to undertake programming exercises by "filling in the gaps" of a partial computer program presented in a web page and to receive guidance in getting their programs to compile and run. Feedback on quality and correctness is provided through a program analysis framework. Students are given the opportunity to produce working programs at the early stages of their course without the need to familiarize themselves with a complex program development environment.},
booktitle = {Proceedings of the 10th Annual SIGCSE Conference on Innovation and Technology in Computer Science Education},
pages = {9–13},
numpages = {5},
keywords = {web, tutoring system, online learning, flexible delivery, feedback, computer programming},
location = {Caparica, Portugal},
series = {ITiCSE '05}
}

@inproceedings{10.1145/1873561.1873566,
author = {Mace, John C. and Parkin, Simon and van Moorsel, Aad},
title = {A collaborative ontology development tool for information security managers},
year = {2010},
isbn = {9781450304474},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1873561.1873566},
doi = {10.1145/1873561.1873566},
abstract = {This paper explores the need for a collaborative development tool to allow information security experts to capture their interrelated knowledge in an ontology. Such a tool would enable organisations to make more informed security policy decisions around shared security issues. However, population of ontologies can be time-consuming and error-prone, and current collaborative ontology editing tools require a familiarity with ontology concepts. We present a Web-oriented tool which simplifies ontology population for information security experts, allowing them to develop ontology content without the need to understand ontology concepts. To understand how organisations manage information security knowledge within policies, we consulted two information security managers in large organisations. The Web-Prot\'{e}g\'{e} collaborative ontology editor was then modified to create a tool with an appropriate knowledge ontology structure that meets their requirements. The same information security managers then evaluated the tool, judging it to be accessible and potentially useful in policy decision-making.},
booktitle = {Proceedings of the 4th Symposium on Computer Human Interaction for the Management of Information Technology},
articleno = {5},
numpages = {10},
keywords = {ontology editor, information security ontology},
location = {San Jose, California},
series = {CHiMiT '10}
}

@inproceedings{10.1145/3510858.3510997,
author = {Xu, Dongmei},
title = {Construction of Business English Writing Corpus Based on Data Management System},
year = {2022},
isbn = {9781450390422},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3510858.3510997},
doi = {10.1145/3510858.3510997},
abstract = {A corpus is an electronic collection of texts representing a variant or text category of a language, according to certain sampling criteria. A parallel corpus is made up of the original text and its parallel counterpart in translation, and is most closely related to translation teaching and practice, providing a wealth of teaching material and a convenient means of translation. Business English writing is increasingly important as a language skill and a communicative skill. In order to give full play to the role of information technology, this paper constructs a parallel corpus of business English writing and proposes strategies to improve business English writing skills. The corpus is built on the SSH2 architecture, using IntelliJ IDEA Ultimate integrated development tool, Oracle as the database management system, Python and Java for programming, and Apache Tomcat as the web server, reflecting the advancement of the art technology.},
booktitle = {2021 International Conference on Aviation Safety and Information Technology},
pages = {505–509},
numpages = {5},
location = {Changsha, China},
series = {ICASIT 2021}
}

@inproceedings{10.5555/2034396.2034477,
author = {Ranathunga, Surangika and Cranefield, Stephen and Purvis, Martin},
title = {Interfacing a cognitive agent platform with a virtual world: a case study using Second Life},
year = {2011},
isbn = {098265717X},
publisher = {International Foundation for Autonomous Agents and Multiagent Systems},
address = {Richland, SC},
abstract = {Online virtual worlds provide a rich platform for remote human interaction, and are increasingly being used as a simulation platform for multi-agent systems and as a way for software agents to interact with humans. It would therefore be beneficial to provide techniques allowing high-level agent development tools, especially cognitive agent platforms such as belief-desire-intention (BDI) programming frameworks, to be interfaced with virtual worlds. This is not a trivial task as it involves mapping potentially unreliable sensor readings from complex virtual environments to a domain-specific abstract logical model of observed properties and/or events. This paper investigates this problem in the context of agent interactions in a multi-agent system simulated in Second Life. We present a framework which facilitates the connection of any multi-agent platform with Second Life, and demonstrate it in conjunction with the Jason BDI interpreter.},
booktitle = {The 10th International Conference on Autonomous Agents and Multiagent Systems - Volume 3},
pages = {1181–1182},
numpages = {2},
keywords = {multiagent systems, Second Life, Jason, BDI agents},
location = {Taipei, Taiwan},
series = {AAMAS '11}
}

@inproceedings{10.1145/2494603.2480341,
author = {Escolar, Javier Rodr\'{\i}guez},
title = {A context-aware dialog model for multi-device web development},
year = {2013},
isbn = {9781450321389},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2494603.2480341},
doi = {10.1145/2494603.2480341},
abstract = {Model-Based User Interface Design (MBUID) consists of a step-wise method that structures the development of User Interfaces (UIs) based on models. According to this method, developers focus on creating a UI model, that is an abstract representation of it, and delegate the UI code generation process to automatic tools that take into account platform peculiarities. This paper explores the applicability of MBUI techniques to context-aware Service Front Ends (SFEs), i.e. UIs of web services that react to context changes. For this purpose, it introduces a context-aware dialog model that captures the adaptable behavior of a UI depending on variations of the context of use, a standard-based notation to represent it, and an open-source development environment that supports this development method.},
booktitle = {Proceedings of the 5th ACM SIGCHI Symposium on Engineering Interactive Computing Systems},
pages = {167–170},
numpages = {4},
keywords = {scxml, navigation, model-based design of user interface, dialog, context-awareness, connection-awareness},
location = {London, United Kingdom},
series = {EICS '13}
}

@inproceedings{10.1145/1094855.1094881,
author = {Perera, Roly and Freeman, Russ},
title = {Beyond the language workbench: a runtime platform for practical semantic computing},
year = {2005},
isbn = {1595931937},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1094855.1094881},
doi = {10.1145/1094855.1094881},
abstract = {domain/object is a new software environment in the tradition of dynamic languages like Smalltalk, Lisp and Self. Like its predecessors, domain/object blurs the usual distinctions between tools, languages, operating systems, applications and databases. domain/object also adds some interesting twists to the familiar dynamic paradigm, including spreadsheet-style "liveness", versioned execution, transactions, full incrementality and transparency.domain/object is intended as a delivery platform for software that requires tight semantic integration between components, such as development tools and next-generation applications for the semantic web. Incrementality and liveness obviate the need for standard notification schemes such as Observer, ensuring that data and programs are synchronised automatically. Transactions and versioning allow the granularity and frequency of synchronisation to be adjusted to suit the particular application or user. Transparency means that the full structure of the executing program is available for queries, suggesting a considerably more dynamic realisation of aspect-oriented programming.},
booktitle = {Companion to the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications},
pages = {96–97},
numpages = {2},
keywords = {relational programming, incremental computation, dynamic aspects},
location = {San Diego, CA, USA},
series = {OOPSLA '05}
}

@article{10.5555/1089182.1089205,
author = {Reed, David and Davies, Joel},
title = {The convergence of computer programming and graphic design},
year = {2006},
issue_date = {February 2006},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {21},
number = {3},
issn = {1937-4771},
abstract = {Traditionally, computer science curricula have focused on the algorithmic development of software, while design issues such as typography, text layout, and image manipulation have been the domain of graphic design or fine arts programs. With the emergence of the Web as a publishing and programming medium, as well as the availability of high-level development tools, the distinctions between algorithm and presentation are blurring. Today, a programmer needs to understand and apply principles of graphic design in order to develop applications that are usable and attractive to the user. Likewise, a graphic designer developing electronic media must understand and apply programming principles to control the dynamic behavior of the media. This paper addresses the convergence of programming and graphic design, from both the perspectives of a computer scientist and a graphic designer. Simple and practical design principles are presented that can be integrated into a variety of computer science courses.},
journal = {J. Comput. Sci. Coll.},
month = {feb},
pages = {179–187},
numpages = {9}
}

@inproceedings{10.1145/3368089.3417932,
author = {\"{U}nl\"{u}, Kaan and Ard\i{}\c{c}, Bar\i{}\c{s} and T\"{u}z\"{u}n, Eray},
title = {CRSG: a serious game for teaching code review},
year = {2020},
isbn = {9781450370431},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368089.3417932},
doi = {10.1145/3368089.3417932},
abstract = {The application of code review in a development environment is essential, but this skill is not taught very often in an educational context despite its wide usage. To streamline the teaching process of code review, we propose a browser based "Code Review Serious Game" (CRSG) with high accessibility, progressive level difficulty and an evolvable foundation for prospective improvements or changes. The application is built as a serious game to reinforce the learning experience of its users by immersing them in its story and theme, helping them learn while having fun. The effectiveness of the game components are measured with a case study of 132 students of 2 software engineering courses. The promising result of this case study suggests CRSG can indeed be used effectively to teach code review. The demo video for the game can be accessed at https://youtu.be/FLnr3p4bhOg, and CRSG itself at: https://github.com/barisardic/crsg.},
booktitle = {Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1561–1565},
numpages = {5},
keywords = {teaching code review, software engineering education, serious games, code review},
location = {Virtual Event, USA},
series = {ESEC/FSE 2020}
}

@inproceedings{10.1145/2448556.2448625,
author = {Kim, Kil Jae and Hwang, Eun Hye and Cho, Seong Jin and Kim, Yeong Jun and Jeon, Jae Wook and Yoon, Seung Hyun and Kim, Yong Serk},
title = {Web based multi-platform benchmark program construction in smartphone},
year = {2013},
isbn = {9781450319584},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2448556.2448625},
doi = {10.1145/2448556.2448625},
abstract = {A benchmark program provides objective and quantitative experimental data that is used in HW architecture design and as performance criteria. For that reason, a benchmark point must be fairly calculated to make a right decision. It is difficult to benchmark with fairness in embedded systems such as smartphones since there are many HW and SW development environments. For example, iOS adopts ObjectC language and Android supports Java and C/C++ to develop applications. Therefore, it is impossible to apply the same native workload without modification to both iOS and Android platforms. Web-based benchmark programs can solve the problem of fairness. If a platform supports a browsing system, then we can run the same web benchmark program on that platform. In this paper, we construct a web-based benchmark program with JavaScript and HTML5 to evaluate an entire HW platform. The JavaScript workload has three components and the HTML5 workload has two components. Experiment shows that similar runtime characteristics are maintained between native and web workloads. Moreover, we use a compared ratio method to relieve result distortion that comes from unexpected system overheads. Finally, we run our benchmark program on the iOS and many Android platforms.},
booktitle = {Proceedings of the 7th International Conference on Ubiquitous Information Management and Communication},
articleno = {69},
numpages = {9},
keywords = {web application, smartphone, benchmark program},
location = {Kota Kinabalu, Malaysia},
series = {ICUIMC '13}
}

@inproceedings{10.1145/3064663.3064681,
author = {Kato, Jun and Goto, Masataka},
title = {f3.js: A Parametric Design Tool for Physical Computing Devices for Both Interaction Designers and End-users},
year = {2017},
isbn = {9781450349222},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3064663.3064681},
doi = {10.1145/3064663.3064681},
abstract = {Although the exploration of design alternatives is crucial for interaction designers and customization is required for end-users, the current development tools for physical computing devices have focused on single versions of an artifact. We propose the parametric design of devices including their enclosure layouts and programs to address this issue. A Web-based design tool called f3.js is presented as an example implementation, which allows devices assembled from laser-cut panels with sensors and actuator modules to be parametrically created and customized. It enables interaction designers to write code with dedicated APIs, declare parameters, and interactively tune them to produce the enclosure layouts and programs. It also provides a separate user interface for end-users that allows parameter tuning and dynamically generates instructions for device assembly. The parametric design approach and the tool were evaluated through two user studies with interaction designers, university students, and end-users.},
booktitle = {Proceedings of the 2017 Conference on Designing Interactive Systems},
pages = {1099–1110},
numpages = {12},
keywords = {physical computing, personal fabrication, parametric design, integrated development environment},
location = {Edinburgh, United Kingdom},
series = {DIS '17}
}

@inproceedings{10.1145/2467696.2467788,
author = {Bainbridge, David and McIntosh, Sam J. and Nichols, David M.},
title = {Greenbug: a hybrid web-inspector, debugger and design editor for greenstone},
year = {2013},
isbn = {9781450320771},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2467696.2467788},
doi = {10.1145/2467696.2467788},
abstract = {In this paper we present Greenbug: a hybrid web inspector, debugger and design editor developed for use with the open source digital library software Greenstone 3. Inspired by the web development tool Firebug, Greenbug is more tightly coupled with the underlying (digital library) server than that provided by Firebug; for example, Greenbug has a fine-grained knowledge of the connection between the underlying file system and the rendered web content, and also provides the ability to commit any changes made through the web interface back to the underlying file system. Moreover, because web page production in Greenstone 3 is the result of an XSLT processing pipeline, the necessarily well-formed hierarchical XML content can be manipulated into a graphical representation, which can then be manipulated directly through a visual interface supplied by Greenbug. We showcase the interface in use, provide a brief overview of implementation details, and conclude with a discussion on how the approach can be adapted to other XSLT transformation-based content management systems, such as DSpace.},
booktitle = {Proceedings of the 13th ACM/IEEE-CS Joint Conference on Digital Libraries},
pages = {449–450},
numpages = {2},
location = {Indianapolis, Indiana, USA},
series = {JCDL '13}
}

@inproceedings{10.1145/3287324.3293754,
author = {Hollingsworth, Joseph E. and Kraemer, Eileen T. and Sitaraman, Murali},
title = {Engaging in Logical Code Reasoning with an Activity-Based Online Tool},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293754},
doi = {10.1145/3287324.3293754},
abstract = {Using freely available online automated reasoning tools, we will demonstrate a sequence of engaging reasoning activities that are suitable to introduce beginning programmers and software engineering students to reason logically and symbolically about code. The automated tools have an underlying verification engine that makes it possible for the tool to offer activities and directed logical feedback not possible with typical development environments. The tools have been used in undergraduate classrooms for multiple years by well over a thousand students. The imperative language used by the tool is integrated with the underlying verification engine, and because it closely resembles many commercial languages, it presents little barrier to student usage. A comprehensive activity-based "Reason with Components" tool takes 5-10 minutes of instructor introduction and allows student exploration of contracts, objects, loops, recursion, and reusable concepts. Multiple versions of "Begin to Reason" tools are designed to help students learn the basics of code tracing in intro CS courses "on their own". Students and instructors can create new activities and can fine-tune the existing activities to their specific needs.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1289},
numpages = {1},
keywords = {symbolic reasoning, online tool, contracts, code tracing, active learning},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/2513534.2513537,
author = {Jeffery, Keith},
title = {CLOUDs: hype, problems and opportunities},
year = {2013},
isbn = {9781450323079},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2513534.2513537},
doi = {10.1145/2513534.2513537},
abstract = {The concept of CLOUD Computing has been a hot talking point for some years. However, there are as yet relatively few business applications running using CLOUDs although the use of CLOUDs for emailing, sharing office documents and social media is well-established. Cutting through the hype it is possible to classify kinds of CLOUD offerings and examine their advantages and disadvantages with respect to business requirements. These challenges and opportunities are technical, economic, legal and environmental. Two reports from expert groups convened by the European Commission under the chairmanship of the author document the state of the art, the opportunities and challenges. This leads to a roadmap for the widespread take-up and adoption of CLOUD computing. A key point of the roadmap is the provision of a systems development environment to allow flexible redeployment of applications across one or more CLOUD offerings. The PaaSage project -- part-funded by the European Commission -- addresses this opportunity.},
booktitle = {Proceedings of the Second Nordic Symposium on Cloud Computing &amp; Internet Technologies},
pages = {7},
numpages = {1},
location = {Oslo, Norway},
series = {NordiCloud '13}
}

@article{10.5555/1858583.1858592,
author = {Flieger, Joseph and Palmer, James Dean},
title = {Supporting pair programming with JavaGrinder},
year = {2010},
issue_date = {December 2010},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {26},
number = {2},
issn = {1937-4771},
abstract = {JavaGrinder is a web-based platform designed to support teaching Java in introductory Computer Science classes. JavaGrinder emphasizes small bite-sized problems that can range in complexity from a few lines to the construction of multiple classes. Since the entire environment is set online in a Web 2.0 styled interface, students do not have to install or setup any special software, which greatly reduces the associated learning curve. Stripped of the development tools and onerous minutia, students can concentrate on core concepts and problem solving skills therefore focusing learning on the important aspects of Computer Science. In this paper, we describe JavaGrinder's utilization of pair programming, a technique that pairs programmers together in complementary roles to improve each student's learning and understanding. JavaGrinder further enables students using pair programming by managing and organizing their application of this technique. JavaGrinder can also help identify when pair programming fails and inform instructors when there are poor pairings or when inequities exist in the programming roles. The development of this system aims to increase the retention of students in Computer Science I while enabling a greater understanding of basic Computer Science concepts.},
journal = {J. Comput. Sci. Coll.},
month = {dec},
pages = {63–70},
numpages = {8}
}

@inproceedings{10.1145/2490257.2490292,
author = {Xanthopoulos, Spyros and Xinogalos, Stelios},
title = {A comparative analysis of cross-platform development approaches for mobile applications},
year = {2013},
isbn = {9781450318518},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2490257.2490292},
doi = {10.1145/2490257.2490292},
abstract = {Nowadays, native mobile applications (mobile apps) are targeted at specific mobile platforms. This phenomenon imposes severe constraints, such as the use of different development environments, technologies, and APIs (Application Programming Interfaces) for each mobile platform, leading inevitably to a waste of development time and effort, and an increased maintenance cost.The paper focuses on the current trends in developing cross-platform mobile apps. Our analysis focuses primarily on three areas. In the first place, we clarify the cross-platform development landscape by exploring the most important cross-platform app types, which are web, hybrid, interpreted and generated apps. Secondly, key issues for each app type are presented and a comparative analysis is performed to highlight the advantages and disadvantages of each type. Thirdly, taking into account the current status in cross-platform mobile app development we identify a promising cross-platform app type and we investigate its effectiveness in practice. Finally, we draw some conclusions regarding cross-platform mobile app development approaches and make proposals for further research on the field.},
booktitle = {Proceedings of the 6th Balkan Conference in Informatics},
pages = {213–220},
numpages = {8},
keywords = {web app, smart mobile device, native app, mobile application, interpreted app, hybrid app, generated app, cross-platform development, HTML5},
location = {Thessaloniki, Greece},
series = {BCI '13}
}

@inproceedings{10.1145/2124436.2124439,
author = {Davids, Carol and Johnston, Alan and Singh, Kundan and Sinnreich, Henry and Wimmreuter, Wilhelm},
title = {SIP APIs for voice and video communications on the web},
year = {2011},
isbn = {9781450309752},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2124436.2124439},
doi = {10.1145/2124436.2124439},
abstract = {Existing standard protocols for the web and Internet telephony fail to deliver real-time interactive communication from within a web browser. In particular, the client-server web protocol over reliable TCP is not always suitable for end-to-end low latency media path needed for interactive voice and video communication. To solve this, we compare the available platform options using the existing technologies such as modifying the web programming language and protocol, using an existing web browser plugin, and a separate host resident application that the web browser can talk to. We argue that using a separate application as an adaptor is a promising short term as well as long-term strategy for voice and video communications on the web.Our project aims at developing the open technology and sample implementations for web-based real-time voice and video communication applications. We describe the architecture of our project including (1) a RESTful web communication API over HTTP inspired by SIP message flows, (2) a web-friendly set of metadata for session description, and (3) an UDP-based end-to-end media path. All other telephony functions reside in the web application itself and/or in web feature servers. The adaptor approach allows us to easily add new voice and video codecs and NAT traversal technologies such as Host Identity Protocol. We want to make web-based communication accessible to millions of web developers, maximize the end user experience and security, and preserve the huge global investment in and experience from SIP systems while adhering to web standards and development tools as much as possible. We have created an open source prototype that allows you to freely use the conference application by directing a browser to the conference URL.},
booktitle = {Proceedings of the 5th International Conference on Principles, Systems and Applications of IP Telecommunications},
articleno = {2},
numpages = {7},
keywords = {voice and video, real-time web communication, browser API, SIP API for web communications},
location = {Chicago, Illinois},
series = {IPTcomm '11}
}

@inproceedings{10.1145/3430895.3460166,
author = {Serth, Sebastian and Teusner, Ralf and Meinel, Christoph},
title = {Impact of Contextual Tips for Auto-Gradable Programming Exercises in MOOCs},
year = {2021},
isbn = {9781450382151},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3430895.3460166},
doi = {10.1145/3430895.3460166},
abstract = {Learners in Massive Open Online Courses offering practical programming exercises face additional challenges next to the actual course content. Beginners have to find approaches to deal with misconceptions and often struggle with the correct syntax while solving the exercises. The paper at hand presents insights from offering contextual tips in a web-based development environment used for practical programming exercises. We measured the effects of our approach in a Python course with 6,000 active students in a hidden A/B test and additionally used qualitative surveys. While a majority of learners valued the assistance, we were unable to show a direct impact on completion rates or average scores. We however noticed that users requesting tips took significantly longer and made more use of other assistance features of the platform than users in our control group. Insights from our study can be used to target beginners with more specific hints and provide additional, context-specific clues as part of the learning material.},
booktitle = {Proceedings of the Eighth ACM Conference on Learning @ Scale},
pages = {307–310},
numpages = {4},
keywords = {tip, summary, programming, hint, exercise, example, MOOC},
location = {Virtual Event, Germany},
series = {L@S '21}
}

@inproceedings{10.1145/2889160.2891035,
author = {Rastogi, Ayushi},
title = {Do biases related to geographical location influence work-related decisions in GitHub?},
year = {2016},
isbn = {9781450342056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2889160.2891035},
doi = {10.1145/2889160.2891035},
abstract = {Visible demographic characteristics are seen as elements of bias in offline work environments. In this study, we investigate the influence of the geographical location on the evaluation of pull requests in GitHub -- the most popular online collaborative code development environment. We use a mixed-methods approach and present analyses of 70,000+ pull requests and 2,500+ survey responses. Quantitative analysis of GitHub projects' data suggests that the geographical location significantly explains the pull request acceptance decisions. These observations are in agreement with the perceptions of submitters based on their experiences with bias. Integrators feel that it is easy to work with contributors from the same geographical location and that they encourage contributors from the same geographical location. However, integrators do not feel that contributors from some countries are better at writing pull requests compared to others.},
booktitle = {Proceedings of the 38th International Conference on Software Engineering Companion},
pages = {665–667},
numpages = {3},
keywords = {software process, empirical studies, empirical software engineering},
location = {Austin, Texas},
series = {ICSE '16}
}

@inproceedings{10.1145/3287324.3287399,
author = {Kawas, Saba and Vonessen, Laura and Ko, Amy J.},
title = {Teaching Accessibility: A Design Exploration of Faculty Professional Development at Scale},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287399},
doi = {10.1145/3287324.3287399},
abstract = {Most CS students learn little about accessibility in higher education; this is partly because most CS faculty know little about accessibility. Unfortunately, higher education CS faculty lack a model of professional development for learning to teach new topics. Therefore, we investigated the feasibility of a "micro" professional development model for teaching accessibility in CS courses that could be used at scale. We conducted 18 semi-structured interviews with U.S. CS faculty, asking them to explore a prototype of a web-based professional development tool that linked accessibility topics to CS topics. We found that many organizational factors limited faculty's autonomy to integrate accessibility in many of their courses. We also found that individual values and knowledge constrained faculty's ability and willingness to both learn and integrate accessibility topics into their courses. However, many faculty expressed desire to teach accessibility in their courses if they had access to even basic accessibility content and materials to use in their courses.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {983–989},
numpages = {7},
keywords = {professional development, higher education, accessibility},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1109/CCGrid.2012.98,
author = {Chen, Hsing-Yu and Lin, Yue-Hsun and Cheng, Chen-Mou},
title = {COCA: Computation Offload to Clouds Using AOP},
year = {2012},
isbn = {9780769546919},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/CCGrid.2012.98},
doi = {10.1109/CCGrid.2012.98},
abstract = {In this paper, we describe COCA -- Computation Offload to Clouds using AOP (aspect-oriented programming). COCA is a programming framework that allows smart phones application developers to offload part of the computation to servers in the cloud easily. COCA works at the source level. By harnessing the power of AOP, name inserts appropriate offloading code into the source code of the target application based on the result of static and dynamic profiling. As a proof of concept, we integrate name into the Android development environment and fully automate the new build process, making application programming and software maintenance easier. With COCA, mobile applications can now automatically offload part of the computation to the cloud, achieving better performance and longer battery life. Smart phones such as iPhone and Android phones can now easily leverage the immense computing power of the cloud to achieve tasks that were considered difficult before, such as having a more complicated artificial-intelligence engine.},
booktitle = {Proceedings of the 2012 12th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing (Ccgrid 2012)},
pages = {466–473},
numpages = {8},
keywords = {computation offload, aspect oriented programming, Android operating system},
series = {CCGRID '12}
}

@article{10.1145/3397874,
author = {Moldovan, Alex and Nicula, Vlad and Pasca, Ionut and Popa, Mihai and Namburu, Jaya Krishna and Oros, Anamaria and Brie, Paul},
title = {OpenUIDL, A User Interface Description Language for Runtime Omni-Channel User Interfaces},
year = {2020},
issue_date = {June 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {EICS},
url = {https://doi.org/10.1145/3397874},
doi = {10.1145/3397874},
abstract = {We extend the concept of cross-device user interfaces into the new, more general, concept of omni-channel user interfaces to better reflect the technological variety offered for developing multi-target user interfaces for interactive applications. We present a model-based approach for developing runtime omni-channel user interfaces for multi-target applications, which consists of: (1) OpenUIDL, a user interface description language for describing omni-channel user interfaces with its semantics by a meta-model and its syntax based on JSON, (2) the definition of a step-wise approach for producing runtime interactive applications based onOpenUIDLwith integration into the development life cycle, (3) the development of a cloud-based, OpenUIDL compliant, Interactive Development Environment that supports the application and the enactment of the step-wise approach and its illustration on several multi-target user interfaces.},
journal = {Proc. ACM Hum.-Comput. Interact.},
month = {jun},
articleno = {86},
numpages = {52},
keywords = {user interface description language, open source, omni-channel user interfaces, multi-target user interfaces, model-based user interface}
}

@inproceedings{10.1109/ICSE-SEET52601.2021.00018,
author = {Moster, Makayla and Ford, Denae and Rodeghero, Paige},
title = {"Is my mic on?": preparing SE students for collaborative remote work and hybrid team communication},
year = {2021},
isbn = {9780738133201},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-SEET52601.2021.00018},
doi = {10.1109/ICSE-SEET52601.2021.00018},
abstract = {Communication is essential for the success of student and professional software engineering (SE) team development projects. The projects delivered by SE courses provide valuable learning experiences for students because they teach industry-required skills such as teamwork, communication, and scheduling. Professional SE teams have adopted communication software such as Slack, Miro, Microsoft Teams, and GitHub Discussions to share files and convey information between team members. Likewise, they have distributed software development tools such as Visual Studio CodeSpaces and Jira to support productivity. In contrast, within academia, students have focused on having face-to-face meetings for team communication and communication tools for file sharing. Due to the COVID-19 pandemic, universities have been forced to switch to an online or hybrid modality abruptly, thus compelling SE students to quickly adopt communication software. This paper proposes a study on the use of communication software in industry to prepare students for remote software development positions after graduation.},
booktitle = {Proceedings of the 43rd International Conference on Software Engineering: Joint Track on Software Engineering Education and Training},
pages = {89–94},
numpages = {6},
keywords = {remote work, hybrid teams, communication, collaboration, SE pedagogy},
location = {Virtual Event, Spain},
series = {ICSE-JSEET '21}
}

@article{10.1145/3427323,
author = {Lobo, Mar\'{\i}a Jes\'{u}s and Hurter, Christophe and Irani, Pourang},
title = {Flex-ER: A Platform to Evaluate Interaction Techniques for Immersive Visualizations},
year = {2020},
issue_date = {November 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {ISS},
url = {https://doi.org/10.1145/3427323},
doi = {10.1145/3427323},
abstract = {Extended Reality (XR) systems (which encapsulate AR, VR and MR) is an emerging field which enables the development of novel visualization and interaction techniques. To develop and to assess such techniques, researchers and designers have to face choices in terms of which development tools to adopt, and with very little information about how such tools support some of the very basic tasks for information visualization, such as selecting data items, linking and navigating. As a solution, we propose Flex-ER, a flexible web-based environment that enables users to prototype, debug and share experimental conditions and results. Flex-ER enables users to quickly switch between hardware platforms and input modalities by using a JSON specification that supports both defining interaction techniques and tasks at a low cost. We demonstrate the flexibility of the environment through three task design examples: brushing, linking and navigating. A qualitative user study suggest that Flex-ER can be helpful to prototype and explore different interaction techniques for immersive analytics.},
journal = {Proc. ACM Hum.-Comput. Interact.},
month = {nov},
articleno = {195},
numpages = {20},
keywords = {user studies, immersive analytics, extended reality}
}

@inproceedings{10.1145/2815072.2815074,
author = {Seco, Jo\~{a}o Costa and Louren\c{c}o, Hugo and Ferreira, Paulo},
title = {A common data manipulation language for nested data in heterogeneous environments},
year = {2015},
isbn = {9781450339025},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2815072.2815074},
doi = {10.1145/2815072.2815074},
abstract = {One key aspect of data-centric applications is the manipu- lation of persistent data repositories, which is moving fast from querying a centralized relational database to the ad- hoc combination of constellations of data sources. Query languages are being typefuly integrated in host, general purpose, languages in order to increase reasoning and optimizing capabilities of interpreters and compilers. However, not much is being done to integrate and orches- trate different and separate sources of data. We present a common data manipulation language, that abstracts the nature and localization of the data-sources. We define its semantics and a type directed compilation, query optimization, and query orchestration mechanism to be used in development tools for heterogeneous environments. We provide type safety and language integration. Our approach is also suitable for an interactive query construction environment by rich user interfaces that pro- vide immediate feedback on data manipulation operations. This approach is currently the base for the data layer of a development platform for mobile and web applications.},
booktitle = {Proceedings of the 15th Symposium on Database Programming Languages},
pages = {11–20},
numpages = {10},
keywords = {type systems, programming languages, distributed and heterogeneous queries, data query languages},
location = {Pittsburgh, PA, USA},
series = {DBPL 2015}
}

@inproceedings{10.1145/1142473.1142580,
author = {Gerner, Nicholas and Yang, Fan and Demers, Alan and Gehrke, Johannes and Riedewald, Mirek and Shanmugasundaram, Jayavel},
title = {Automatic client-server partitioning of data-driven web applications},
year = {2006},
isbn = {1595934340},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1142473.1142580},
doi = {10.1145/1142473.1142580},
abstract = {Current application development tools provide completely different programming models for the application server (e.g., Java and J2EE) and the client web browser (e.g., JavaScript and HTML). Consequently, the application developer is forced to partition the application code between the server and client at the time of writing the application. However, the partitioning of the code between the client and server may have to be changed during the evolution of the application for performance reasons (it may be better to push more functionality to the client), for correctness reasons (data that conflicts with multiple clients cannot always be pushed to clients), and for supporting clients with different computing power (browsers on desktops vs. PDAs). Since the client and server use different programming models, moving application code from client to server (and vice versa) reduces programmer productivity and also has the potential to introduce concurrency bugs. In this demonstration, we advocate an alternative solution to this problem: we propose developing applications using a unified declarative high-level language called Hilda, and show how a Hilda compiler can automatically (and correctly) partition Hilda code between the client and the server using a real Course Management System application. We illustrate our techniques using two clients: a powerful laptop machine and a less powerful PDA.},
booktitle = {Proceedings of the 2006 ACM SIGMOD International Conference on Management of Data},
pages = {760–762},
numpages = {3},
location = {Chicago, IL, USA},
series = {SIGMOD '06}
}

@inproceedings{10.1145/2607023.2610269,
author = {Alves, Rui and Teixeira, Claudio and Nascimento, Monica and Marinho, Amanda and Nunes, Nuno Jardim},
title = {Towards a measurement framework for tools' ceiling and threshold},
year = {2014},
isbn = {9781450327251},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2607023.2610269},
doi = {10.1145/2607023.2610269},
abstract = {Software development tools are not catching up with the requirements of increasingly complex interactive software products and services. Successful tools are claimed to either be low-threshold/low-ceiling or high-threshold/high-ceiling, however no research to date addressed how to define and measure these concepts. This is increasingly important as these tools undergo an evaluation and adoption process by end-users. Here we hypothesized that the evaluation and adoption of tools is associated with the threshold (learnability). To assess this we conducted a learnability and usability study using three commercial Platform-as-a-Service tools. In this study we used an augmented think-aloud protocol with question asking where ten subjects were asked to create a simple web application. Our data shows that most learnability issues fall into two categories: understanding or locating. No evidence was found that usability defects correlate with the tools learnability score. Though we found an inverse correlation between the amount of issues and the learnability score.},
booktitle = {Proceedings of the 2014 ACM SIGCHI Symposium on Engineering Interactive Computing Systems},
pages = {283–288},
numpages = {6},
keywords = {threshold, paas, learnability, ceiling, case tools},
location = {Rome, Italy},
series = {EICS '14}
}

@article{10.1145/3479575,
author = {Smith, Micah J. and Cito, J\"{u}rgen and Lu, Kelvin and Veeramachaneni, Kalyan},
title = {Enabling Collaborative Data Science Development with the Ballet Framework},
year = {2021},
issue_date = {October 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {CSCW2},
url = {https://doi.org/10.1145/3479575},
doi = {10.1145/3479575},
abstract = {While the open-source software development model has led to successful large-scale collaborations in building software systems, data science projects are frequently developed by individuals or small teams. We describe challenges to scaling data science collaborations and present a conceptual framework and ML programming model to address them. We instantiate these ideas in Ballet, the first lightweight framework for collaborative, open-source data science through a focus on feature engineering, and an accompanying cloud-based development environment. Using our framework, collaborators incrementally propose feature definitions to a repository which are each subjected to software and ML performance validation and can be automatically merged into an executable feature engineering pipeline. We leverage Ballet to conduct a case study analysis of an income prediction problem with 27 collaborators, and discuss implications for future designers of collaborative projects.},
journal = {Proc. ACM Hum.-Comput. Interact.},
month = {oct},
articleno = {431},
numpages = {39},
keywords = {collaborative framework, data science, feature definition, feature engineering, feature validation, machine learning, mutual information, streaming feature selection}
}

@article{10.1145/3173058.3173063,
author = {Choi, Jaeyoung and Thomee, Bart and Larson, Martha},
title = {Practical guide to using the YFCC100M and MMCOMMONS on a budget},
year = {2017},
issue_date = {September 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {9},
number = {2},
url = {https://doi.org/10.1145/3173058.3173063},
doi = {10.1145/3173058.3173063},
abstract = {The Yahoo-Flickr Creative Commons 100 Million (YFCC100M), the largest freely usable multimedia dataset to have been released so far, is widely used by students, researchers and engineers on topics in multimedia that range from computer vision to machine learning. However, its sheer volume, one of the traits that make the dataset unique and valuable, can pose a barrier to those who do not have access to powerful computing resources. In this article, we introduce useful information and tools to boost the usability and accessibility of the YFCC100M, including the supplemental material provided by the Multimedia Commons (MMCOMMONS) community. In particular, we provide a practical guide on how to set up a feasible and cost effective research and development environment locally or in the cloud that can access the data without having to download it first.},
journal = {SIGMultimedia Rec.},
month = {dec},
articleno = {5}
}

@inproceedings{10.5555/2093889.2093955,
author = {Duarte, Adrian Padilla and Herrera, Victor Adrian Sosa and Herrera, Roberto Sanchez and Melendez, Gloria Yadira Torrealba},
title = {Using IBM rational application developer to develop enterprise applications with Java EE, Dojo server faces and interconnecting them using SOA},
year = {2011},
publisher = {IBM Corp.},
address = {USA},
abstract = {Motivation and Justification:Year to year, companies invest a lot of their budget in maintenance and improvement of their applications to keep on the leading edge of technologies and take advantage over their competitors. Some of the common troubles that companies are facing with are the lack of skills in their personnel to update and incorporate new technologies to existing applications and/or legacy applications that are difficult to support, as well as to process huge amounts of information; this implies a high cost to achieve such goals.In highly competitive environments, the developers do not have much time to create enterprise applications that meet with some infrastructure requirements such as: security, transaction, audit, and others, as well as the creation of fast, dynamic and easy to use Graphical User Interfaces (GUI)s that can be a very tedious and complicated process.Moreover, as applications evolve, they could require communication with other applications based in different technologies that address particular needs, and enabling the communication between different technologies is an expensive and difficult process. This is usually achieved by using glue code that is tied to the involved applications, hard to maintain, tightly coupled and not extensible at all.As response to these problems, new technologies have been created to help implement solutions for them; such as the Java™ EE technology which provides a set of common services to develop enterprise applications and is also an standardized platform that allows the IT infrastructure to be untied to a particular vendor, or Dojo Server Faces (DSF) library that provides a set of UI components so the developer can create responsive, dynamic and easy to use GUIs with much less effort than creating them from scratch, and the Service Component Architecture (SCA) technology that helps companies to interconnect applications implemented with different technologies allowing the enterprise infrastructure to change with a minimum of impact and/or effort, in a Service Oriented Architecture fashion. However, the use of these technologies can be complex and prone to human errors, since them involve handwriting metadata and other artifacts that can be hard to configure.Proposed solution."Rational Application Developer provides developers with smart tools that promote best practices, team productivity, innovation, and agility. This award-winning integrated development environment enables developers to quickly build, test, analyze, and publish Java EE 6, Web 2.0, and Service Oriented Architecture (SOA) applications"Within this workshop we will create a scenario where the problems previously mentioned in this document will be exposed. We will discuss the technologies that can be involved in the solution of such scenario with a minimum of effort and also preparing the field to allow the application to grow as needed without affecting the applications already running. Then, the attendee will be guided to develop a solution for such scenario using IBM® Rational® Application Developer (RAD) and IBM® WebSphere® Application Server.The Scenario: The marketing department of a big bank has decided to open a new program to reward their customers with gifts and promotions depending on their account balance in the past months. This bank has an application already running that contains account information required to grant such rewards, but they want to create a new section in an existing web application where customers can access and check the status of their accounts to see whether they have a granted reward and in such case get specific information for claiming the reward. As part of the requirement, the application will have to run a complex algorithm to select the accounts that will be rewarded, this will have to run automatically every day.The solution: We will define the architecture within tree layers: the business logic layer, the UI layer and the data access layer using Open Services Gateway initiative (OSGi) to achieve good modularization. The business logic will be encapsulated in Plain Old Java Objects (POJO) and the task of running the complex algorithm will be handled by a Modern Batch Project using WebSphere Compute Grid (WCG). The UI will be developed using Java Server Faces (JSF) v2.0 technology with DSF library. The data access layer will be handled by Java Persistence API (JPA) in order to access an existing data base. Finally we will use SCA to interconnect the Modern Batch Project with OSGi.Within this workshop the attendee will learn how to use RAD Tools to incorporate mature technologies like Java EE6, open and emerging technologies like SCA, programming models for componentization and modularization like OSGi, and JSF to build responsive, dynamic and easy to use web UI.},
booktitle = {Proceedings of the 2011 Conference of the Center for Advanced Studies on Collaborative Research},
pages = {373–374},
numpages = {2},
location = {Toronto, Ontario, Canada},
series = {CASCON '11}
}

@inproceedings{10.1145/3578245.3584934,
author = {Kousiouris, George and Ambroziak, Szymon and Zarzycki, Blazej and Costantino, Domenico and Tsarsitalidis, Stylianos and Katevas, Vasileios and Mamelli, Alessandro and Stamati, Teta},
title = {A Pattern-based Function and Workflow Visual Environment for FaaS Development across the Continuum},
year = {2023},
isbn = {9798400700729},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3578245.3584934},
doi = {10.1145/3578245.3584934},
abstract = {The ability to split applications across different locations in the continuum (edge/cloud) creates needs for application break down into smaller and more distributed chunks. In this realm the Function as a Service approach appears as a significant enabler in this process. The paper presents a visual function and workflow development environment for complex FaaS (Apache OpenwhisK) applications. The environment offers a library of pattern based and reusable nodes and flows while mitigating function orchestration limitations in the domain. Generation of the deployable artefacts, i.e. the functions, is performed through embedded DevOps pipelines. A range of annotations are available for dictating diverse options including QoS needs, function or data locality requirements, function affinity considerations etc. These are propagated to the deployment and operation stacks for supporting the cloud/edge interplay. The mechanism is evaluated functionally through creating, registering and executing functions and orchestrating workflows, adapting typical parallelization patterns and an edge data collection process.},
booktitle = {Companion of the 2023 ACM/SPEC International Conference on Performance Engineering},
pages = {165–172},
numpages = {8},
keywords = {function as a service, function orchestration, serverless computing, software development},
location = {<conf-loc>, <city>Coimbra</city>, <country>Portugal</country>, </conf-loc>},
series = {ICPE '23 Companion}
}

@inproceedings{10.1109/CCGrid.2013.100,
author = {Tracey, David and Sreenan, Cormac},
title = {A holistic architecture for the internet of things, sensing services and big data},
year = {2013},
isbn = {9780768549965},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/CCGrid.2013.100},
doi = {10.1109/CCGrid.2013.100},
abstract = {Wireless Sensor Networks (WSNs) increasingly enable applications and services to interact with the physical world. Such services may be located across the Internet from the sensing network. Cloud services and big data approaches may be used to store and analyse this data to improve scalability and availability, which will be required for the billions of devices envisaged in the Internet of Things (IoT). The potential of WSNs is limited by the relatively low number deployed and the difficulties imposed by their heterogeneous nature and limited (or proprietary) development environments and interfaces. This paper proposes a set of requirements for achieving a pervasive, integrated information system of WSNs and associated services. It also presents an architecture which is termed holistic as it considers the flow of the data from sensors through to services. The architecture provides a set of abstractions for the different types of sensors and services. It has been designed for implementation on a resource constrained node and to be extensible to server environments. This paper presents a 'C' implementation of the core architecture, including services on Linux and Contiki (using the Constrained Application Protocol (CoAP)) and a Linux service to integrate with the Hadoop HBase datastore.},
booktitle = {Proceedings of the 13th IEEE/ACM International Symposium on Cluster, Cloud, and Grid Computing},
pages = {546–553},
numpages = {8},
keywords = {wireless sensor networks, tuple space, protocols, information model, cloud computing, big data},
location = {Delft, Netherlands},
series = {CCGRID '13}
}

@inproceedings{10.1145/2839509.2850577,
author = {Kruger, Benjamin J. and Matzen, Richard},
title = {A Web-based Environment for Developing and Utilizing Teaching Languages for Novice Computer Science Students (Abstract Only)},
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2850577},
doi = {10.1145/2839509.2850577},
abstract = {First year Computer Science students must face the dual challenge of learning to think algorithmically while simultaneously assimilating the complex and often unintuitive syntax of their first programming language. Mitigating this problem has been an active research area for decades, spawning a number of programming languages intended for students. While some such teaching languages have achieved a measure of popularity, both in the classroom and for general purpose programming, none has achieved ubiquity, which suggests there is no silver bullet. To this end, we present a suite of open source software including (1) a web-based toolkit for developing and modifying teaching languages using parsing expression grammars, (2) C Spot Run, a simple imperative teaching language built with the toolkit and informed by empirical research in intuitive syntax, and (3) a web-based development environment enabling the student to complete programming assignments directly from a web browser, eliminating complicated compiler installation and configuration. These artifacts are the first steps in an ongoing project intended to serve not only as a classroom tool, but also as a platform for the observational and experimental study of programming languages in classroom settings. By analyzing source code and metadata, common syntactic obstacles may be exposed and empirical studies of syntax can be verified in the classroom.},
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
pages = {700},
numpages = {1},
keywords = {teaching languages, peg.js, peg, parsing expression grammars, open source, language design, cs1},
location = {Memphis, Tennessee, USA},
series = {SIGCSE '16}
}

@article{10.1145/1899928.1899943,
author = {Schmidt, Ren\'{e} W. and Grarup, Steffen},
title = {vApp: a standards-based container for cloud providers},
year = {2010},
issue_date = {December 2010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {44},
number = {4},
issn = {0163-5980},
url = {https://doi.org/10.1145/1899928.1899943},
doi = {10.1145/1899928.1899943},
abstract = {In the past decade, virtualization has swept through the x86 server landscape and caused a dramatic change in how enterprise datacenters are organized both from a physical infrastructure level and an organizational level. This has lead to a datacenter where all resources and services are virtualized, paving the way for a complete decoupling of the applications from the physical infrastructure. This is known as cloud computing or more specifically, Infrastructure as a Service (IaaS).The decoupling of the application from the deployment platform is a fundamental shift from previous generations of datacenter infrastructure. To utilize this decoupling, a well-defined interface between the application and the cloud provider must exist. We describe the core requirements for this interface and introduce a concrete implementation of such an interface, called the vApp container. The vApp container is built on top of the Open Virtualization Format. We also introduce the concept of a vService dependency that is used to decouple a vApp from infrastructure services and to support mobility between cloud providers. Finally, the paper provides several examples of vApps and service integrations and discusses how development tools can be optimized for the vApp container},
journal = {SIGOPS Oper. Syst. Rev.},
month = {dec},
pages = {115–123},
numpages = {9},
keywords = {vServices, vApp container, vApp, open virtualization format, infrastructure as a service, cloud, OVF, IaaS}
}

@inproceedings{10.1145/1134285.1134408,
author = {Foster, Howard and Uchitel, Sebastian and Magee, Jeff and Kramer, Jeff},
title = {LTSA-WS: a tool for model-based verification of web service compositions and choreography},
year = {2006},
isbn = {1595933751},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1134285.1134408},
doi = {10.1145/1134285.1134408},
abstract = {In this paper we describe a tool for a model-based approach to verifying compositions of web service implementations. The tool supports verification of properties created from design specifications and implementation models to confirm expected results from the viewpoints of both the designer and implementer. Scenarios are modeled in UML, in the form of Message Sequence Charts (MSCs), and then compiled into the Finite State Process (FSP) process algebra to concisely model the required behavior. BPEL4WS implementations are mechanically translated to FSP to allow an equivalence trace verification process to be performed. By providing early design verification and validation, the implementation, testing and deployment of web service compositions can be eased through the understanding of the behavior exhibited by the composition. The approach is implemented as a plug-in for the Eclipse development environment providing cooperating tools for specification, formal modeling, verification and validation of the composition process.},
booktitle = {Proceedings of the 28th International Conference on Software Engineering},
pages = {771–774},
numpages = {4},
keywords = {web service compositions, model-checking, choreography, WS-CDL, BPEL4WS},
location = {Shanghai, China},
series = {ICSE '06}
}

@inproceedings{10.1145/3240508.3240561,
author = {Zhang, Wenxiao and Han, Bo and Hui, Pan},
title = {Jaguar: Low Latency Mobile Augmented Reality with Flexible Tracking},
year = {2018},
isbn = {9781450356657},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3240508.3240561},
doi = {10.1145/3240508.3240561},
abstract = {In this paper, we present the design, implementation and evaluation of Jaguar, a mobile Augmented Reality (AR) system that features accurate, low-latency, and large-scale object recognition and flexible, robust, and context-aware tracking. Jaguar pushes the limit of mobile AR's end-to-end latency by leveraging hardware acceleration with GPUs on edge cloud. Another distinctive aspect of Jaguar is that it seamlessly integrates marker-less object tracking offered by the recently released AR development tools (e.g., ARCore and ARKit) into its design. Indeed, some approaches used in Jaguar have been studied before in a standalone manner, e.g., it is known that cloud offloading can significantly decrease the computational latency of AR. However, the question of whether the combination of marker-less tracking, cloud offloading and GPU acceleration would satisfy the desired end-to-end latency of mobile AR (i.e., the interval of camera frames) has not been eloquently addressed yet. We demonstrate via a prototype implementation of our proposed holistic solution that Jaguar reduces the end-to-end latency to ~33 ms. It also achieves accurate six degrees of freedom tracking and 97% recognition accuracy for a dataset with 10,000 images.},
booktitle = {Proceedings of the 26th ACM International Conference on Multimedia},
pages = {355–363},
numpages = {9},
keywords = {object tracking, object recognition, mobile edge computing, gpu acceleration, augmented reality},
location = {Seoul, Republic of Korea},
series = {MM '18}
}

@inproceedings{10.1145/3491140.3528287,
author = {Carlon, May Kristine Jonson and Gonda, Donn Emmanuel and Andrews, Eden Mariquit and Gayed, John Maurice and Olexa, Robert Anthony and Cross, Jeffrey Scott},
title = {Educational Nonlinear Stories with Twine},
year = {2022},
isbn = {9781450391580},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3491140.3528287},
doi = {10.1145/3491140.3528287},
abstract = {Multiple studies have hinted at the positive effects of educational games on learner engagement. However, some games, if they exist, may not be readily usable for some lessons even though the same topics are covered. In this workshop, the participants will be introduced to Twine, an open-source development environment for nonlinear stories that requires little to no coding. Tips and tricks to making engaging stories that target desired learning outcomes derived from existing research will be shared. The participants will have the opportunity to apply these insights through a group activity where they create their stories for a lesson. They will then individually create games for their stories and share their works to the rest of the group. An online community will be created after the workshop for the participants to continue exchanging ideas or creations afterwards.},
booktitle = {Proceedings of the Ninth ACM Conference on Learning @ Scale},
pages = {248–251},
numpages = {4},
keywords = {serious games, nonlinear stories, interactive storytelling, interactive narrative, interactive learning environment, gamification, educational games, branching narrative, Twine},
location = {New York City, NY, USA},
series = {L@S '22}
}

@inproceedings{10.5555/1034914.1034933,
author = {Grossman, F. and Bergin, J. and Leip, D. and Merritt, S. and Gotel, O.},
title = {One XP experience: introducing agile (XP) software development into a culture that is willing but not ready},
year = {2004},
publisher = {IBM Press},
abstract = {The main question to be asked is "Does Extreme Programming (XP) make sense as a development methodology in a diverse, multidisciplinary web development environment? This environment includes diverse, and perhaps, distributed teams requiring close coordination with multidisciplinary skills -- information architecture, visual design, XML, Java and others. The potential is to make the development process more responsive to users' needs and changing business requirements. This could have high impact on outcomes of the development process, decreasing cost, decreasing time to deployment, and increasing user satisfaction. The challenges are to adapt and reconcile the corporate and the agile culture processes and methodologies without seriously compromising either. We will discuss our experience from conception into implementation of XP through the first release that incorporates several iteration cycles. We will discuss the positive and negative forces and how they have or have not been resolved to date.},
booktitle = {Proceedings of the 2004 Conference of the Centre for Advanced Studies on Collaborative Research},
pages = {242–254},
numpages = {13},
location = {Markham, Ontario, Canada},
series = {CASCON '04}
}

@inproceedings{10.5555/3545946.3598981,
author = {Lem\'{e}e, J\'{e}r\'{e}my and Burattini, Samuele and Mayer, Simon and Ciortea, Andrei},
title = {Domain-Expert Configuration of Hypermedia Multi-Agent Systems in Industrial Use Cases},
year = {2023},
isbn = {9781450394321},
publisher = {International Foundation for Autonomous Agents and Multiagent Systems},
address = {Richland, SC},
abstract = {Based on the analysis of two real-world use cases for agriculture and manufacturing, we suggest that Hypermedia Multi-Agent Systems (MAS) are a viable option to interconnect and coordinate devices, services, machine-learning systems, and people in industrial scenarios. We propose and implement an architecture based on three components: an infrastructure that manages Web of Things environments and executes Hypermedia MAS, a visual development environment for programming agents, and a goal specification interface for end-users. While the infrastructure manages information flows between the system components and provides an environment for agents, the visual language enables domain experts to configure the behaviour of the system leveraging agent-oriented programming abstractions both at design time and run time, and the goal specification interface permits users to delegate goals to the running Hypermedia MAS while re-using domain vocabulary.},
booktitle = {Proceedings of the 2023 International Conference on Autonomous Agents and Multiagent Systems},
pages = {2499–2501},
numpages = {3},
keywords = {hypermedia multi-agent systems, web of things},
location = {<conf-loc>, <city>London</city>, <country>United Kingdom</country>, </conf-loc>},
series = {AAMAS '23}
}

@inproceedings{10.1145/2970276.2970329,
author = {Asenov, Dimitar and M\"{u}ller, Peter and Vogel, Lukas},
title = {The IDE as a scriptable information system},
year = {2016},
isbn = {9781450338455},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2970276.2970329},
doi = {10.1145/2970276.2970329},
abstract = {Software engineering is extremely information-intensive. Every day developers work with source code, version repositories, issue trackers, documentation, web-based and other information resources. However, three key aspects of information work lack good support: (i) combining information from different sources; (ii) flexibly presenting collected information to enable easier comprehension; and (iii) automatically acting on collected information, for example to perform a refactoring. Poor support for these activities makes many common development tasks time-consuming and error-prone. We propose an approach that directly addresses these three issues by integrating a flexible query mechanism into the development environment. Our approach enables diverse ways to process and visualize information and can be extended via scripts. We demonstrate how an implementation of the approach can be used to rapidly write queries that meet a wide range of information needs.},
booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
pages = {444–449},
numpages = {6},
keywords = {software visualization, refactoring, code queries},
location = {Singapore, Singapore},
series = {ASE '16}
}

@inproceedings{10.1145/2487788.2488150,
author = {Rana, Juwel and Morshed, Sarwar and Synnes, K\r{a}re},
title = {End-user creation of social apps by utilizing web-based social components and visual app composition},
year = {2013},
isbn = {9781450320382},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2487788.2488150},
doi = {10.1145/2487788.2488150},
abstract = {This paper presents a social component framework for the SatinII App Development Environment. The environment provides a systematic way of designing, developing and deploying personalized apps and enables end-users to develop their own apps without requiring prior knowledge of programming. A wide range of social components based on the framework have been deployed in the SatinII Editor, including components that utilize aggregated social graphs to automatically create groups or recommending/filtering information. The resulting social apps are web-based and target primarily mobile clients such as smartphones. The paper also presents a classification of social components and provides an initial user-evaluation with a small group of users. Initial results indicate that social apps can be built and deployed by end-users within 17 minutes on average after 20 to 30 minutes of being introduced to the SatinII Editor.},
booktitle = {Proceedings of the 22nd International Conference on World Wide Web},
pages = {1205–1214},
numpages = {10},
keywords = {tools for social app development, social data, mobile social app, component-based social app development},
location = {Rio de Janeiro, Brazil},
series = {WWW '13 Companion}
}

@inproceedings{10.1145/3287324.3287387,
author = {Kim, Meen Chul and Park, Thomas H. and Liu, Ruixue and Forte, Andrea},
title = {Understanding Learning Curves and Trajectories in CSS Layout},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287387},
doi = {10.1145/3287324.3287387},
abstract = {Web development is a learning context with the potential to support rich computational thinking. Large-scale analysis of compilation and runtime errors have been used in introductory programming courses and similar approaches can be used to understand learning in web development environments. We investigated activity logs of a novel web coding game to uncover learning trajectories and what people struggle with when learning flexible box (flexbox), a collection of new CSS layout features. We designed a game called Flexbox Froggy, in which learners solve challenges by writing a few lines of CSS code, moving from simple levels that require knowledge of one flexbox property, to complex levels combining multiple properties. We investigate learning curves based on the changes in syntactic and semantic errors learners make as they complete the game. Our findings show that people performed better encountering a single new property than combined with properties they had already practiced. Clusters of learners at different levels did not demonstrate expected error rates based on learning curve theory. Also unexpectedly, advanced groups that mastered syntax had higher semantic error rates than the beginner group, especially when attempting new properties or complex use cases. We conclude with implications for designing and developing introductory web programming games and other instructional materials.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {504–510},
numpages = {7},
keywords = {web development, learning curve analysis, learning analytics, educational game, css layout, clustering},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/2638728.2641559,
author = {Coutaz, Jo\"{e}lle and Demeure, Alexandre and Caffiau, Sybille and Crowley, James L.},
title = {Early lessons from the development of SPOK, an end-user development environment for smart homes},
year = {2014},
isbn = {9781450330473},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2638728.2641559},
doi = {10.1145/2638728.2641559},
abstract = {This paper presents early lessons from the development of SPOK, an End-User Development Environment for smart homes. SPOK (Simple PrOgramming Kit) uses a pseudo-natural language as an end-user programming language and runs on top of an extension of OSGi/iPOJO to support the dynamic and resilient management of web services and devices from a variety of protocols including EnOcean, UPnP, and Watteco. The motivation for SPOK is to give the power back to end-users so that they can shape their own smart home at will. This paper reports lessons learned from the methods we have used to validate our hypotheses as well as a number of technical issues concerning development of this type of EUDE. A Video of SPOK in action as of October 2013 is accessible at: http://iihm.imag.fr/demos/appsgate/appsgate2013.mp4},
booktitle = {Proceedings of the 2014 ACM International Joint Conference on Pervasive and Ubiquitous Computing: Adjunct Publication},
pages = {895–902},
numpages = {8},
keywords = {ubiquitous computing, smart home, smart environment, end-user programming, end-user development, ambient intelligence},
location = {Seattle, Washington},
series = {UbiComp '14 Adjunct}
}

@inproceedings{10.1145/2940343.2940350,
author = {Huang, Baohua and Jia, Fengwei and Yu, Jiguo and Cheng, Wei},
title = {A transparent framework based on accessing bridge and mobile app for protecting database privacy with PKI},
year = {2016},
isbn = {9781450343466},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2940343.2940350},
doi = {10.1145/2940343.2940350},
abstract = {With the popularity of cloud computing, database outsourcing has been adopted by many companies. However, database owners may not 100% trust their database service providers. As a result, database privacy becomes a key issue for protecting data from the database service providers. Many researches have been conducted to address this issue, but few of them considered the simultaneous transparent support of existing DBMSs (Database Management Systems), applications and RADTs (Rapid Application Development Tools). A transparent framework based on accessing bridge and mobile app for protecting database privacy with PKI (Public Key Infrastructure) is, therefore, proposed to fill the blank. The framework uses PKI as its security base and encrypts sensitive data with data owners' public keys to protect data privacy. Mobile app is used to control private key and decrypt data, so that accessing sensitive data is completely controlled by data owners in a secure and independent channel. Accessing bridge utilizes database accessing middleware standard to transparently support existing DBMSs, applications and RADTs. This paper presents the framework, analyzes its transparency and security, and evaluates its performance via experiments.},
booktitle = {Proceedings of the 1st ACM Workshop on Privacy-Aware Mobile Computing},
pages = {43–50},
numpages = {8},
keywords = {mobile app, database privacy, database accessing middleware, PKI},
location = {Paderborn, Germany},
series = {PAMCO '16}
}

@article{10.5555/1619221.1619228,
author = {McFall, Ryan and Cusack, Charles},
title = {Developing interactive web applications with the Google Web Toolkit},
year = {2009},
issue_date = {October 2009},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {25},
number = {1},
issn = {1937-4771},
abstract = {Web sites such as Gmail, Facebook and other Web 2.0 applications have changed the way that we think about web functionality. These sites behave more like desktop applications than traditional document-centric sites. Developing these interactive web applications using technologies such as AJAX is tedious, error prone and difficult to optimize. Development environments and tools for such applications lag behind the more mature tools available for languages such as Java.The Google Web Toolkit is an emerging technology that facilitates the integration of the powerful tools available for the Java platform into the interactive web world. The toolkit consists of tools that compile Java code into a combination of HTML and Javascript code; since the code is being written in Java, all of the tools available for Java development can be leveraged, such as the Eclipse IDE and testing tools such as JUnit. Utilizing a compiler to generate Javascript provides an opportunity for optimization that would be difficult without the use of the toolkit.In this workshop, participants will learn about the Google Web Toolkit, including the philosophy behind the toolkit, the GUI framework that it provides, and the methods available for interaction with remote services. Participants will be walked through the development of a simple "Stock Ticker" application that interacts with the Yahoo stock data service. Several other sample applications will be presented, including sample assignments given to students in a class focusing on applications of the GWT.An outline of the workshop is:• Introduction to the Google Web Toolkit (30 minutes)• Presentation and discussion of several applications built using the toolkit (30 minutes)• Development of the Stock Ticker application (1 hour)• Overview of the GUI Framework and server integration techniques (30 minutes)• Overview of a course on the GWT (15 minutes)• Questions/wrap up},
journal = {J. Comput. Sci. Coll.},
month = {oct},
pages = {30–31},
numpages = {2}
}

@article{10.5555/2168874.2168907,
author = {Pheatt, Chuck and McMullen, Jeremiah},
title = {Programming for the Xbox Kinect™ sensor: tutorial presentation},
year = {2012},
issue_date = {May 2012},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {27},
number = {5},
issn = {1937-4771},
abstract = {The Kinect sensor was introduced in November 2010 by Microsoft as an accessory for the Xbox 360 video game system. Shortly after the product release, multiple software frameworks became available that allows a personal computer to capture output from a stand-alone Kinect [1,2].The Kinect contains a RGB camera and a depth sensor utilizing an IR light source that allows the unit to output three dimensional positional data in real time. The Kinect data is organized as a stream of two 640 x 480 images acquired at a rate of 30 frames per second (fps). One of these is an ordinary 24-bit RGB video image. The other is an 11-bit depth image from which (x, y, z) positional data may be calculated. Students are well aware of the Kinect as an input device for the Xbox 360 system which makes it an ideal venue for student experimentation and independent study projects utilizing a personal computer platform.The tutorial presentation will provide attendees with detailed information on two of the available development environments for the Kinect:• OpenNI Framework - The OpenNI organization [1] is an industry-led, not-for-profit organization formed to certify and promote the compatibility and interoperability of Natural Interaction (NI) devices, applications and middleware. Contributors to the framework include PrimeSense [3], the hardware developer of the Kinect and Willow Garage [4] who develops hardware and open source software for personal robotics. The OpenNI framework provides a rich set of utilities that can be used to access and process Kinect data using C++, C# and Java.• Microsoft Kinect SDK - Microsoft [2] has released a SDK which provides access to much of the functionality available to XBox developers. Applications may be developed in a Windows 7 environment using managed or unmanaged code in a .NET 2010 environment.In this tutorial we will present:• Hardware and software requirements for the two development environments.• Detailed instructions for downloading of device drivers, device middleware and associated libraries.• "Hello World" examples for checking the functionality of the Kinect unit.• An overview of the Kinect's capabilities including device resolution and limitations.• A summary of the library structure of both frameworks.• Several simple examples of the devices capabilities including player tracking the use of skeletal tracking.• A summary of research opportunities that are student accessible.• A demonstration of the Kinect software in action.All software and materials presented during the tutorial will be provided on the author's web site so that users may quickly get their Kinect applications up and running without significant configuration issues and start up problems.},
journal = {J. Comput. Sci. Coll.},
month = {may},
pages = {140–141},
numpages = {2}
}

@inproceedings{10.1145/3478431.3499422,
author = {Gilson, Grant and Ott, Stephen and Rose Ledesma, Noah and Prabhu, Aakash and Porquet-Lupine, Jo\"{e}l},
title = {Design and Evaluation of "The Missing CS Class," a Student-led Undergraduate Course to Reduce the Academia-industry Gap},
year = {2022},
isbn = {9781450390705},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3478431.3499422},
doi = {10.1145/3478431.3499422},
abstract = {One notable part of the academia-industry gap is the deficiency in computing ecosystem literacy, which may result in college graduates exhibiting little technical knowledge of software development tools and practices commonly used in industry. This paper presents our experience developing and teaching "The Missing CS Class," the student-led 1-unit course that we created at our university to address computing ecosystem literacy. This course primarily targets lower-division students and, based on our observations as peer tutors, covers four common but crucial gaps in technical knowledge: (1) Unix-like command-line environments and tools, (2) Software testing and debugging, (3) Scripting, and (4) Version control. Based on the collected feedback from two consecutive offerings of this course during the winter and spring quarters of 2021, most surveyed students reported having increased their self-efficacy on all course topics and incorporated them into their software development workflow.To benefit the community at large, we have published all the lecture materials online at &lt;a href="https://missing.cs.ucdavis.edu"&gt;https://missing.cs.ucdavis.edu&lt;/a&gt;.},
booktitle = {Proceedings of the 53rd ACM Technical Symposium on Computer Science Education - Volume 1},
pages = {467–473},
numpages = {7},
keywords = {student-led undergraduate course, computing ecosystem literacy, computer science education, academia-industry gap},
location = {Providence, RI, USA},
series = {SIGCSE 2022}
}

@inproceedings{10.1145/1984674.1984685,
author = {Sheth, Swapneel and Bell, Jonathan and Kaiser, Gail},
title = {HALO (highly addictive, socially optimized) software engineering},
year = {2011},
isbn = {9781450305785},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1984674.1984685},
doi = {10.1145/1984674.1984685},
abstract = {In recent years, computer games have become increasingly social and collaborative in nature. Massively multiplayer online games, in which a large number of players collaborate with each other to achieve common goals in the game, have become extremely pervasive. By working together towards a common goal, players become more engrossed in the game. In everyday work environments, this sort of engagement would be beneficial, and is often sought out. We propose an approach to software engineering called HALO that builds upon the properties found in popular games, by turning work into a game environment. Our proposed approach can be viewed as a model for a family of prospective games that would support the software development process. Utilizing operant conditioning and flow theory, we create an immersive software development environment conducive to increased productivity. We describe the mechanics of HALO and how it could fit into typical software engineering processes.},
booktitle = {Proceedings of the 1st International Workshop on Games and Software Engineering},
pages = {29–32},
numpages = {4},
keywords = {web 2.0, social rewards, quests, operant conditioning, mmorpg, games, flow},
location = {Waikiki, Honolulu, HI, USA},
series = {GAS '11}
}

@inproceedings{10.1145/3287324.3293709,
author = {Sankaranarayanan, Sreecharan},
title = {Online Mob Programming: Effective Collaborative Project-Based Learning},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293709},
doi = {10.1145/3287324.3293709},
abstract = {This work presents a new paradigm for collaborative project-based computer science education called Online Mob Programming (OMP). OMP is adapted from the industrial practice of Mob Programming, where groups of developers work on the same problem, at the same time, in the same place. OMP was designed and implemented as a technique where a group of 4-6 students collaborate online through a structured process for solving programming tasks. In OMP, students rotate through clearly defined roles to collectively contribute towards a solution to a programming challenge. These roles require students to brainstorm potential solutions, decide on a path forward, and implement the correct course of action respectively. OMP was investigated in the context of a 6-week free online course on Cloud Computing. During the course, students participated in four intelligent conversational agent-coordinated OMP sessions. By instrumenting the online development environment, all student code revisions and chat logs were collected in addition to qualitative data from questionnaires. Analyses show evidence of success in terms of students following the structure of OMP and further investigations into differences in mob behavior based on the size, and problem outcome provide pedagogically valuable insights and a path toward building OMP into the computer science education curriculum.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1296},
numpages = {1},
keywords = {project-based learning, online mob programming, mob programming, computer-supported collaborative learning, collaborative learning},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/583810.583837,
author = {Bishop, Judith and Horspool, R. Nigel and Worrall, Basil},
title = {Experience with integrating Java with new technologies: C#, XML and web services},
year = {2002},
isbn = {1581135998},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/583810.583837},
doi = {10.1145/583810.583837},
abstract = {Java programmers cannot but be aware of Microsoft's new initiative - a complete language, network environment, and a host of supporting technologies under the title of C# .NET. We highlight the advantages of C# by presenting our experiences connecting it to Java in three ways. The first is by providing a platform and language-independent XML-based API called Views for developing programmer-controlled GUIs. Views does not need C#'s resource-intensive Visual Studio development environment, and is also targeted for Unix. The second provides evidence that C# can be linked to Java at the source code level, albeit through C++ wrappers. The third is a means for retaining the useful applet feature of Java in a server-side architecture of .NET's web services. We conclude that many common shared technologies bring Java and C# together and innovative ways of using others will open up opportunities not hitherto imagined.},
booktitle = {Proceedings of the 2002 Joint ACM-ISCOPE Conference on Java Grande},
pages = {225},
numpages = {1},
keywords = {platform integration, Java, GUIs, C#},
location = {Seattle, Washington, USA},
series = {JGI '02}
}

@article{10.5555/3205191.3205223,
author = {Jin, Karen H.},
title = {Students' understanding of basic computational concepts in an introduction to mobile development course},
year = {2018},
issue_date = {June 2018},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {33},
number = {6},
issn = {1937-4771},
abstract = {Building basic computational thinking skills is an important goal in courses that introduce computing to students with limited programming background. Among choices of tools and platforms, MIT App Inventor is a popular mobile app development environment particularly suitable for engaging novice learners. Users are able to create their own mobile apps with real-world usefulness without having to deal with difficult language syntax. However, a study of computational thinking assessment showed students had difficulties in learning abstract concepts such as procedure and flow control using App Inventor [1]. Meanwhile, non-CS major students demonstrated a lack of continuous growth in computational thinking skills compared to CS major students [1]. In another recent study [2], students reported increased interests in computing after being exposed to modern responsive web development, but it is unclear if having an HTML/CSS background makes it more effective in learning abstract computational concepts when using App Inventor.},
journal = {J. Comput. Sci. Coll.},
month = {jun},
pages = {183–185},
numpages = {3}
}

@inproceedings{10.1145/1368088.1368090,
author = {Scaffidi, Christopher and Myers, Brad and Shaw, Mary},
title = {Topes: reusable abstractions for validating data},
year = {2008},
isbn = {9781605580791},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1368088.1368090},
doi = {10.1145/1368088.1368090},
abstract = {Programmers often omit input validation when inputs can appear in many different formats or when validation criteria cannot be precisely specified. To enable validation in these situations, we present a new technique that puts valid inputs into a consistent format and that identifies "questionable" inputs which might be valid or invalid, so that these values can be double-checked by a person or a program. Our technique relies on the concept of a "tope", which is an application-independent abstraction describing how to recognize and transform values in a category of data. We present our definition of topes and describe a development environment that supports the implementation and use of topes. Experiments with web application and spreadsheet data indicate that using our technique improves the accuracy and reusability of validation code and also improves the effectiveness of subsequent data cleaning such as duplicate identification.},
booktitle = {Proceedings of the 30th International Conference on Software Engineering},
pages = {1–10},
numpages = {10},
keywords = {validation, data, abstraction},
location = {Leipzig, Germany},
series = {ICSE '08}
}

@inproceedings{10.1145/2661136.2661146,
author = {Philips, Laure and De Roover, Coen and Van Cutsem, Tom and De Meuter, Wolfgang},
title = {Towards Tierless Web Development without Tierless Languages},
year = {2014},
isbn = {9781450332101},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2661136.2661146},
doi = {10.1145/2661136.2661146},
abstract = {Tierless programming languages enable developing the typical server, client and database tiers of a web application as a single mono-linguistic program. This development style is in stark contrast to the current practice which requires combining multiple technologies and programming languages. A myriad of tierless programming languages has already been proposed, often featuring a JavaScript-like syntax. Instead of introducing yet another, we advocate that it should be possible to develop tierless web applications in existing general-purpose languages. This not only reduces the complexity that developers are exposed to, but also precludes the need for new development tools. We concretize this novel approach to tierless programming by discussing requirements on its future instantiations. We explore the design space of the program analysis for determining and the program transformation for realizing the tier split respectively. The former corresponds to new adaptations of an old familiar, program slicing, for tier splitting. The latter includes several strategies for handling cross-tier function calls and data accesses. Using a prototype instantiation for JavaScript, we demonstrate the feasibility of our approach on an example web application. We conclude with a discussion of open questions and challenges for future research.},
booktitle = {Proceedings of the 2014 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming &amp; Software},
pages = {69–81},
numpages = {13},
keywords = {tierless programming, tier splitting, program slicing, javascript},
location = {Portland, Oregon, USA},
series = {Onward! 2014}
}

@inproceedings{10.1145/2507065.2507067,
author = {Genaro Motti, Vivian and Raggett, Dave and Van Cauwelaert, Sascha and Vanderdonckt, Jean},
title = {Simplifying the development of cross-platform web user interfaces by collaborative model-based design},
year = {2013},
isbn = {9781450321310},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2507065.2507067},
doi = {10.1145/2507065.2507067},
abstract = {Ensuring responsive design of web applications requires their user interfaces to be able to adapt according to different contexts of use, which subsume the end users, the devices and platforms used to carry out the interactive tasks, and also the environment in which they occur. To address the challenges posed by responsive design, aiming to simplify their development by factoring out the common parts from the specific ones, this paper presents Quill, a web-based development environment that enables various stakeholders of a web application to collaboratively adopt a model-based design of the user interface for cross-platform deployment. The paper establishes a series of requirements for collaborative model-based design of cross-platform web user interfaces motivated by the literature, observational and situational design. It then elaborates on potential solutions that satisfy these requirements and explains the solution selected for Quill. A user survey has been conducted to determine how stakeholders appreciate model-based design user interface and how they estimate the importance of the requirements that lead to Quill.},
booktitle = {Proceedings of the 31st ACM International Conference on Design of Communication},
pages = {55–64},
numpages = {10},
keywords = {user interface description language, model-based design of user interfaces, cross-platform design, collaborative development},
location = {Greenville, North Carolina, USA},
series = {SIGDOC '13}
}

@inproceedings{10.1109/ICSE-SEIS58686.2023.00007,
author = {Santos, Italo and Pimentel, Jo\~{a}o Felipe and Wiese, Igor and Steinmacher, Igor and Sarma, Anita and Gerosa, Marco A.},
title = {Designing for Cognitive Diversity: Improving the GitHub Experience for Newcomers},
year = {2023},
isbn = {9798350322613},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-SEIS58686.2023.00007},
doi = {10.1109/ICSE-SEIS58686.2023.00007},
abstract = {Social coding platforms such as GitHub have become defacto environments for collaborative programming and open source. When these platforms do not support specific cognitive styles, they create barriers to programming for some populations. Research shows that the cognitive styles typically favored by women are often unsupported, creating barriers to entry for woman newcomers. In this paper, we use the GenderMag method to evaluate GitHub to find cognitive style-specific inclusivity bugs. We redesigned the "buggy" GitHub features through a web browser plugin, which we evaluated through a between-subjects experiment (n=75). Our results indicate that the changes to the interface improve users' performance and self-efficacy, mainly for individuals with cognitive styles more common to women. Our results can inspire designers of social coding platforms and software engineering tools to produce more inclusive development environments.Diversity is an important aspect of society. One form of diversity is cognitive diversity---differences in cognitive styles, which helps generate a diversity of thoughts. Unfortunately, software tools often do not support different cognitive styles (e.g., learning styles), disproportionately impacting those whose styles are not supported. These individuals pay a cognitive "tax" each time they use the tools. In this work, we found "inclusivity bugs" in GitHub, a social coding platform. We then redesigned these buggy features and evaluated them with users. Our results show that the redesign makes it easier for the group of individuals whose cognitive styles were unsupported in the original design, with the percentage of completed tasks rising from 67% to 95% for this group.},
booktitle = {Proceedings of the 45th International Conference on Software Engineering: Software Engineering in Society},
pages = {1–12},
numpages = {12},
keywords = {human-computer interaction, cognitive styles, human factors, diversity and inclusion, open source},
location = {Melbourne, Australia},
series = {ICSE-SEIS '23}
}

@inproceedings{10.1145/2462326.2462336,
author = {Bar, Piotr and Benfredj, Rudy and Marks, Jonathon and Ulevinov, Deyan and Wozniak, Bartosz and Casale, Giuliano and Knottenbelt, William J.},
title = {Towards a monitoring feedback loop for cloud applications},
year = {2013},
isbn = {9781450320504},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2462326.2462336},
doi = {10.1145/2462326.2462336},
abstract = {Performance monitoring is fundamental to track cloud application health and service-level agreement compliance, but with the emergence of multi-cloud deployments, it may become increasingly important also to create a feedback loop between runtime operation in multi-clouds and design-time reasoning. This is because the developer needs to acquire more information on the specific performance features of a cloud platform to better leverage its specificities.To support this goal, we have developed a set of open source components that extract quality-of-service (QoS) data from a target Java application using JMX, aggregate it in a time-series database, and finally deliver it in a prototype Java dashboard that may be integrated in a development environment, such as Eclipse, to display either live or historical QoS data. The architecture is not only limited to collection, aggregation, and display of QoS data, but it also allows the evaluation of hierarchical queries expressed using the Performance Trees graphical language. It is our intention that this will provide a cloud-independent uniform interface for developers to specify monitoring queries. Initial evaluation suggests that Cube on MongoDB provides appropriate scalability for this application.},
booktitle = {Proceedings of the 2013 International Workshop on Multi-Cloud Applications and Federated Clouds},
pages = {43–44},
numpages = {2},
keywords = {qos, performance trees, monitoring, cloud computing},
location = {Prague, Czech Republic},
series = {MultiCloud '13}
}

@inproceedings{10.1145/3408877.3432516,
author = {Begel, Andrew and Dominic, James and Phillis, Conner and Beeson, Thomas and Rodeghero, Paige},
title = {How a Remote Video Game Coding Camp Improved Autistic College Students' Self-Efficacy in Communication},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3432516},
doi = {10.1145/3408877.3432516},
abstract = {Communication and teamwork are essential skills for software developers. However, these skills are often difficult to learn for students with autism spectrum disorder (ASD). We designed, developed, and ran a 13-day, remote video game coding camp for incoming college first-year students with ASD. We developed instructional materials to teach computer programming, video game design, and communication and teaming skills. Students used the MakeCode Arcade development environment to build their games and Zoom to remotely collaborate with their teammates. In summative interviews, students reported improved programming skills, increased confidence in communication, and better experiences working with others. We also found that students valued the opportunity to practice teaming, such as being more vocal in expressing ideas to their peers and working out differences of opinion with their teammates. Two students reported the remote learning environment decreased their anxiety and stress, both are frequent challenges for autistic people. We plan to rerun the camp next year with materials that we have made available online.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {142–148},
numpages = {7},
keywords = {video games, coding camp, autism},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/3635059.3635085,
author = {Voutos, Yorghos and Palamas, Stergios and Mylonas, Phivos},
title = {Implementing a Modular Integrated System for Biodiversity Conservation and Promotion Using Web Technologies},
year = {2024},
isbn = {9798400716263},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3635059.3635085},
doi = {10.1145/3635059.3635085},
abstract = {In the context of promoting environmental wealth to visitors, this paper explores the development of a web platform, widening the visibility of local biodiversity and aiding in its preservation. We introduce a modular web platform, constructed from interconnected front-end and back-end modules and built upon open-source technologies. In the past, delivering captivating, media-rich user experiences, called for specific hardware and proprietary development tools. This study highlights how the latest in web technology, combined with contemporary web browsers (such as those supporting the WebGL standard), now allows for the rollout of these advanced services on everyday mobile devices using widely accepted web technologies like HTML, CSS, and JavaScript. The immersive qualities of multimedia and cutting-edge AR/VR technologies have enhanced the magic of natural sites and the attractiveness of points of interest. Under this notion, we've worked on a thorough investigation of how these paradigm-shifting discoveries might be used to make a virtual retreat for enthusiasts of ecology. The proposed platform's focus on the protection and promotion of biodiversity is the basis of not only improving the user experience but it also emerges as a tool for the preservation of the Ionian Islands’ natural marvels as we delve into its architecture and capabilities.},
booktitle = {Proceedings of the 27th Pan-Hellenic Conference on Progress in Computing and Informatics},
pages = {171–175},
numpages = {5},
keywords = {Biodiversity, ecotourism},
location = {<conf-loc>, <city>Lamia</city>, <country>Greece</country>, </conf-loc>},
series = {PCI '23}
}

@inproceedings{10.1145/1391469.1391552,
author = {Gao, Lei and Karuri, Kingshuk and Kraemer, Stefan and Leupers, Rainer and Ascheid, Gerd and Meyr, Heinrich},
title = {Multiprocessor performance estimation using hybrid simulation},
year = {2008},
isbn = {9781605581156},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1391469.1391552},
doi = {10.1145/1391469.1391552},
abstract = {With the growing number of programmable processing elements in today's Multi Processor System-on-Chip (MPSoC) designs, the synergy required for the development of the hardware architecture and the software running on them is also increasing. In MPSoC development environment, changes in the hardware architecture can bring in extensive re-partitioning or re-parallelization of the software architecture. Fast and accurate functional simulation and performance estimation techniques are needed to cope with this co-design problem at the early phases of MPSoC design space exploration. The current paper addresses this issue by introducing a framework which combines hybrid simulation, cache simulation and online trace-driven replay techniques to accurately predict performance of programmable elements in an MPSoC environment. The resulting simulation technique can easily cope with the continuous re-organizations of software architectures during an Instruction Set Simulator (ISS) based design process. Experimental results show that this framework can improve system simulation speed by 3-5\texttimes{} on average while achieving accuracy closely comparable to traditional ISSes.},
booktitle = {Proceedings of the 45th Annual Design Automation Conference},
pages = {325–330},
numpages = {6},
keywords = {performance estimation, hybrid simulation, cross replay, cache simulation, address recovery, MPSoC, HySim},
location = {Anaheim, California},
series = {DAC '08}
}

@inproceedings{10.1145/3287324.3287547,
author = {Hare, Brian K. and Heise, David},
title = {Booting Into AI: Startup Instructions for Teaching Artificial Intelligence},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287547},
doi = {10.1145/3287324.3287547},
abstract = {This tutorial will provide a foundation for faculty members either teaching a course in artificial intelligence for the first time or renewing a course that has been dormant. The growing ubiquity of AI and machine learning dictates that departments offer a course in this area, regardless of whether any such expertise exists locally. Furthermore, there are many possible approaches, from a general overview to a tight focus on a particular application area, either as a single elective or a specialization area within an undergraduate degree. An increasingly wide range of resources is available, but intelligent selection from the plethora of information can be a challenge, particularly in smaller programs where no local expertise is available. The tutorial is in two parts. Part 1 focuses on background knowledge, discussing major divisions within the broad field of AI, research trends and application areas, and commonly used tools. Part 2 addresses classroom implementation, assessment, textbook options, and online resources including code libraries, free-to-use data sets, development environments, and visualization tools. Participants will have the opportunity to brainstorm and discuss options for course focus. Sample syllabi using differing course approaches, sample exams and assignments, and a non-exhaustive list of useful resources will be provided.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1242–1243},
numpages = {2},
keywords = {machine learning, curriculum, course design, artificial intelligence},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3493244.3493246,
author = {Carmo, G\^{e}nesis Medeiros and Paiva, D\'{e}bora Barroso and Cagnin, Maria Istela},
title = {Incorporating accessibility in web interface development for deaf users},
year = {2021},
isbn = {9781450395533},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3493244.3493246},
doi = {10.1145/3493244.3493246},
abstract = {Initiatives about developing accessible software are important to support the construction of computational solutions that supply digital services and information for all users, including people with disabilities. Accessibility is a subcharacteristic of usability, which is a fundamental non-functional requirement for the quality of the final software product. Few efforts from the academy and industry have been spent to support developers to create web pages for deaf users. Our work intends to be a step forward in this direction by proposing a tool-supported accessibility recommendations guide. This guide helps developers in their development environment to build accessible software. A systematic, iterative and well-grounded methodology has been used to define the proposed guide. Two empirical studies were conducted to evaluate the usefulness of the guide for developing web pages for deaf users and the ease of use of the built pages. As a result, the proposed guide can contribute to incorporate accessibility in the development of web pages for deaf users, facilitating the understanding of the content available on these pages by this target audience.},
booktitle = {Proceedings of the XX Brazilian Symposium on Software Quality},
articleno = {7},
numpages = {10},
keywords = {deafness, deaf, accessible web interface, accessibility guidelines, accessibility},
location = {Virtual Event, Brazil},
series = {SBQS '21}
}

@inproceedings{10.1145/584369.584415,
author = {Cortellessa, Vittorio and Singh, Harshinder and Cukic, Bojan},
title = {Early reliability assessment of UML based software models},
year = {2002},
isbn = {1581135637},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/584369.584415},
doi = {10.1145/584369.584415},
abstract = {The ability to validate software systems early in the development lifecycle is becoming crucial. While early validation of functional requirements is supported by well known approaches, the validation of non-functional requirements, such as reliability, is not. Early assessment of non-functional requirements can be facilitated by automated transformation of software models into (mathematical) notations suitable for validation. These type of validation approaches are usually as "transparent" to the developers as possible. Consequently, most software developers find them user friendly and easy to adopt.In this paper we introduce a methodology that starts with the analysis of the UML model of software architecture followed by the bayesian framework for reliability prediction. We utilize three different types of UML diagrams: Use Case, Sequence and Deployment diagrams. They are annotated with reliability related attributes. Unlike traditional reliability growth models, which are applicable late in the lifecycle, our approach bases system reliability prediction on component and connector failure rates. In mature development environments, these may be available as the result of reuse. Throughout the lifecycle, as the developers improve their understanding of failure rates and their operational usage, system reliability prediction becomes more precise. We demonstrate the approach through a case study based on a simple web-based transaction processing system.},
booktitle = {Proceedings of the 3rd International Workshop on Software and Performance},
pages = {302–309},
numpages = {8},
keywords = {reliability assessment, component based systems, bayesian reliability prediction, UML models},
location = {Rome, Italy},
series = {WOSP '02}
}

@article{10.5555/3447286.3447299,
author = {Kwan, Pak},
title = {Docker vs Vagrant: how I use Docker and Vagrant teach my Oracle database administration class},
year = {2020},
issue_date = {October 2020},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {36},
number = {4},
issn = {1937-4771},
abstract = {Docker is a set of platform as a service (PaaS) products that uses OS-level virtualization to deliver software in packages called containers [1]. Vagrant is an open-source software product for building and maintaining portable virtual software development environments. It tries to simplify the software configuration management of virtualizations in order to increase development productivity. Vagrant is written in the Ruby language, but its ecosystem supports development in a few languages [2]. In the past Spring, NKU has to close down because of COVID-19. In order to convert the database class, I have to move our VMWare base Lab into virtual environment that it can be ran on students' own pc or labtop. Docker and Vagrant based solution were considered. The workshop presenter has used Docker and Vagrant for courses in Linux server administration, Database administration, Network design, Web server administration and Web application development. The workshop will have a quick introduction to Docker and Vagrant. Participants will learn how to install and Oracle database with both Docker and Vagrant technologies. The benefits of using Docker vs Vagrant on my Oracle administration class will be discussed. The presenter and his assistance(s) will be available to help the participants with the installation of the needed software for the tutorial prior to the start of the tutorial.},
journal = {J. Comput. Sci. Coll.},
month = {oct},
pages = {102–103},
numpages = {2}
}

@inproceedings{10.1145/1555860.1555867,
author = {Darwin, Ian},
title = {AnnaBot: a static verifier for Java annotation usage (abstract only)},
year = {2009},
isbn = {9781605586540},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1555860.1555867},
doi = {10.1145/1555860.1555867},
abstract = {A domain-specific language has been devised for verification of correct use of Annotation-based metadata in the Java programming language. Annotations are a standard Java 5 mechanism used to attach metadata to types, methods or fields without using an external configuration file. A binary representation of the Annotation becomes part of the compiled "class" file, for inspection by other components at run time.Java Annotations were introduced into the Java language in 2004 and have become widely used in recent years due to their introduction in the Java Enterprise Edition (EE 5) and elsewhere. Despite that, mainstream development tools have not yet produced a widely-used verification tool to confirm correct configuration and placement of annotations external to the particular runtime component. This verification becomes especially important both as annotations become more widely adopted and as multiple implementations of standards become available, such as the use of either Hibernate or EclipseLink as a "provider" for the Java Persistence API.It is anticipated that this software will continue to evolve as an open-source software verification tool; the web site for this project has been established as http://www.annabot.org/.},
booktitle = {Proceedings of the 2nd International Workshop on Defects in Large Software Systems: Held in Conjunction with the ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2009)},
pages = {21},
numpages = {1},
keywords = {assertions, annotations, Java},
location = {Chicago, Illinois},
series = {DEFECTS '09}
}

@article{10.1145/1462141.1462145,
author = {Economou, Daphne and Gavalas, Damianos and Kenteris, Michael and Tsekouras, George E.},
title = {Cultural applications for mobile devices: Issues and requirements for authoring tools and development platforms},
year = {2008},
issue_date = {July 2008},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {3},
issn = {1559-1662},
url = {https://doi.org/10.1145/1462141.1462145},
doi = {10.1145/1462141.1462145},
abstract = {This paper explores requirements that authoring tools and development platforms should satisfy for the development of cultural applications tailored for deployment on Personal Digital Assistants (PDAs) and mobile phones. To effectively determine such requirements the paper reviews the use of mobile technologies in the context of cultural organizations and tourism and examines three 'real world' case studies that focus on the use of PDAs and mobile phones for providing cultural and tourist information, keeping the visitors' interest and attention, as well as promoting various cultural organizations and tourist facilities. This approach allows the extraction of a set of PDA and mobile phone application requirements, the implementation of which is based on the apparatus offered by authoring tools and development platforms. The paper reviews and evaluates the design and development facilities provided by state-of-the-art multimedia application development tools for PDAs and mobile phones: Macromedia Flash Lite, Navipocket, Java 2 Micro Edition and Microsoft .Net platform for the Mobile Web. The paper concludes with a set of recommendations related to the way authoring tools and development platforms should be exploited in order to gratify application and designer needs for developing cultural and tourist applications},
journal = {SIGMOBILE Mob. Comput. Commun. Rev.},
month = {jul},
pages = {18–33},
numpages = {16}
}

@inproceedings{10.1145/2442882.2442911,
author = {Ssembatya, Richard and Kayem, Anne and Marsden, Gary},
title = {On the challenge of adopting standard EHR systems in developing countries},
year = {2013},
isbn = {9781450318563},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2442882.2442911},
doi = {10.1145/2442882.2442911},
abstract = {Electronic health record (EHR) systems are a popular mechanism for accessing health records in the developed world and have contributed towards improved and cost-effective health care management. However, the development of appropriate and scalable EHR systems in developing countries has been difficult to achieve because of certain limitations inherent in the technological infrastructure. In this paper, we present a comparative study of 19 EHR systems in terms of the security and usability of these systems within the context of the developing world. Our aim was to investigate whether online health services designed for developed countries can be adopted for EHR systems in developing countries. The investigation was based on a number of dimensions such as development environment, system platform, type and access control standards found in the National Institute for Standard and Technology (NIST) and Certification Commission for Health Information Technology (CCHIT). Our research indicates that all the systems evaluated require online access control decisions. Solely relying on an online access control system is limiting, particularly in developing countries where access to the server can be disrupted by a number of disastrous events.},
booktitle = {Proceedings of the 3rd ACM Symposium on Computing for Development},
articleno = {23},
numpages = {2},
location = {Bangalore, India},
series = {ACM DEV '13}
}

@article{10.1145/605647.605650,
author = {Anderson, Kenneth M. and Bouvin, Niels Olof},
title = {Supporting project awareness on the WWW with the iScent framework},
year = {2000},
issue_date = {December 2000},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {3},
issn = {2372-7403},
url = {https://doi.org/10.1145/605647.605650},
doi = {10.1145/605647.605650},
abstract = {Supporting project awareness in the context of large-scale software development is difficult. One problem is identifying appropriate abstractions and techniques that support the insertion of project awareness mechanisms into a software development environment with minimal impact. An additional problem is scaling project awareness mechanisms to handle the demands of large software development projects. The Web is increasingly being used to support software engineering and, as such, becomes an additional target for project awareness mechanisms with its own unique challenges. To maintain awareness of information evolving on an Internet scale, and to address the problems and challenges mentioned above, we present a framework to support awareness and intersubjectivity among software team members through the use of automatically collected, hypermedia-enabled event trails. The concepts, techniques, and tools of event notification and open hypermedia are used to support a new project awareness framework. A distinction of this framework is the presence of mechanisms that explicitly support intersubjectivity among team members and the use of event trails as a new abstraction for providing project awareness information.},
journal = {SIGGROUP Bull.},
month = {dec},
pages = {16–20},
numpages = {5}
}

@inproceedings{10.1145/2517349.2522715,
author = {Rossbach, Christopher J. and Yu, Yuan and Currey, Jon and Martin, Jean-Philippe and Fetterly, Dennis},
title = {Dandelion: a compiler and runtime for heterogeneous systems},
year = {2013},
isbn = {9781450323888},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2517349.2522715},
doi = {10.1145/2517349.2522715},
abstract = {Computer systems increasingly rely on heterogeneity to achieve greater performance, scalability and energy efficiency. Because heterogeneous systems typically comprise multiple execution contexts with different programming abstractions and runtimes, programming them remains extremely challenging.Dandelion is a system designed to address this programmability challenge for data-parallel applications. Dandelion provides a unified programming model for heterogeneous systems that span diverse execution contexts including CPUs, GPUs, FPGAs, and the cloud. It adopts the .NET LINQ (Language INtegrated Query) approach, integrating data-parallel operators into general purpose programming languages such as C# and F#. It therefore provides an expressive data model and native language integration for user-defined functions, enabling programmers to write applications using standard high-level languages and development tools.Dandelion automatically and transparently distributes data-parallel portions of a program to available computing resources, including compute clusters for distributed execution and CPU and GPU cores of individual nodes for parallel execution. To enable automatic execution of .NET code on GPUs, Dandelion cross-compiles .NET code to CUDA kernels and uses the PTask runtime [85] to manage GPU execution. This paper discusses the design and implementation of Dandelion, focusing on the distributed CPU and GPU implementation. We evaluate the system using a diverse set of workloads.},
booktitle = {Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles},
pages = {49–68},
numpages = {20},
location = {Farminton, Pennsylvania},
series = {SOSP '13}
}

@inproceedings{10.1145/3297663.3310296,
author = {Inagaki, Tatsushi and Ueda, Yohei and Nakaike, Takuya and Ohara, Moriyoshi},
title = {Profile-based Detection of Layered Bottlenecks},
year = {2019},
isbn = {9781450362399},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297663.3310296},
doi = {10.1145/3297663.3310296},
abstract = {Detection of software bottlenecks which hinder utilizing hardware resources is a classic but complex problem due to the layered structures of the software bottlenecks. However, model-based approaches require a performance model given, which is impractical to maintain under today's agile development environment, and profile-based approaches do not handle the layered structures of the software bottlenecks.This paper proposes a novel approach of taking the best of both worlds which extracts a performance model from execution profiles of the target application to detect the layered bottlenecks. We collect a wake-up profile of threads, which samples an event that one thread wakes up another thread, and build a thread dependency graph to detect the layered bottlenecks.We implement our approach of profile-based detection of layered bottlenecks in the Go programming language. We demonstrate that our method can detect software bottlenecks limiting scalability and throughput of state-of-the-art middleware such as a web application server and a permissioned blockchain network, with small amount of the runtime overhead for profile collection.},
booktitle = {Proceedings of the 2019 ACM/SPEC International Conference on Performance Engineering},
pages = {197–208},
numpages = {12},
keywords = {wake-up profile, thread dependency graph, layered bottlenecks},
location = {Mumbai, India},
series = {ICPE '19}
}

@inproceedings{10.1145/3484272.3484969,
author = {Anderson, Boyd and Henz, Martin and Tee, Hao-Wei},
title = {Ruggedizing CS1 robotics: tools and approaches for online teaching},
year = {2021},
isbn = {9781450390897},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3484272.3484969},
doi = {10.1145/3484272.3484969},
abstract = {First-year students benefit from robotics-based programming exercises by learning how to use sensors to gain information on the (changing) world surrounding the robot, how to model this information using data structures, and how to design algorithms for performing meaningful activities. Robotics-based exercises are naturally experiential and team-based and provide among the most memorable teachable moments of first-year programming courses. We summarize the pedagogical challenges that robotics-based exercises face, even under ideal circumstances, and how a university responded to these challenges. We report on the additional challenges faced in late 2020 at the same university as a result of the COVID pandemic, and how the course staff addressed these challenges using programming language implementation and network tools. The crucial components were (1) a custom-built web-based development environment with collaborative features including a built-in compiler, (2) a portable virtual machine, (3) collaborative editing, (4) open source protocols, and (5) peer-to-peer teleconferencing software. We report on the lessons learnt and how to further improve the resilience of robotics-based programming exercises.},
booktitle = {Proceedings of the 2021 ACM SIGPLAN International Symposium on SPLASH-E},
pages = {82–86},
numpages = {5},
keywords = {teaching CS1 using robotics, online robotics, learning tools, educational robotics},
location = {Chicago, IL, USA},
series = {SPLASH-E 2021}
}

@inproceedings{10.1145/3573051.3596180,
author = {Elhayany, Mohamed and Meinel, Christoph},
title = {Towards Automated Code Assessment with OpenJupyter in MOOCs},
year = {2023},
isbn = {9798400700255},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3573051.3596180},
doi = {10.1145/3573051.3596180},
abstract = {The popularity of Massive Open Online Courses (MOOCs) as a means of delivering education to large numbers of students has been growing steadily over the last decade. As technology improves, more educational content is becoming readily available to the public. JupyterLab, an open-source web-based interactive development environment (IDE), is also becoming increasingly popular in education, however, it is so far primarily used in small classroom settings. JupyterLab can provide a more interactive, hands-on, and collaborative learning experience for students in MOOCs, and it is highly customizable and can be accessed from anywhere. To capitalize on these benefits, we have developed OpenJupyter, which integrates JupyterLab at scale with MOOCs, enhancing the student learning experience and providing hands-on exercises for data science courses, making them more interactive and engaging. While MOOCs provide access to education for a large number of students, one of the significant challenges is providing effective and timely feedback to learners.&nbsp;OpenJupyter includes an auto-assessment capability that addresses this problem in MOOCs by automating the evaluation process and providing feedback to learners in a timely manner. In this paper, we provide an overview of the architecture of OpenJupyter, its scalability in the context of MOOCs, and its effectiveness in addressing the auto-assessment challenge. We also discuss the Advantages and limitations associated with using OpenJupyter in a MOOC context and provide a reference for educators and researchers who wish to implement similar tools. Our efforts aim to foster an open educational environment in the field of programming by providing learners with an interactive learning tool and a streamlined technical setup, allowing them to acquire and test their knowledge at their own pace.},
booktitle = {Proceedings of the Tenth ACM Conference on Learning @ Scale},
pages = {321–325},
numpages = {5},
keywords = {programming, openjupyter, auto-assessment, MOOC, JupyterLab},
location = {Copenhagen, Denmark},
series = {L@S '23}
}

@inproceedings{10.1145/3587102.3588829,
author = {Russell, Se\'{a}n and Caton, Simon and Becker, Brett A.},
title = {Online Programming Exams - An Experience Report},
year = {2023},
isbn = {9798400701382},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3587102.3588829},
doi = {10.1145/3587102.3588829},
abstract = {When seeking to maximise the authenticity of assessment in programming courses it makes sense to provide students with practical programming problems to solve in an environment that is close to real software development practice, i.e., online, open book, and using their typical development environment. This creates an assessment environment that should afford students sufficient opportunities to evidence what they have learned, but also creates practical challenges in terms of academic integrity, flexibility in the automated grading process, and assumptions surrounding how the student may attempt to solve the problems both in terms of correct and incorrect solutions. In this experience report, we outline two independently observed cohorts of students sitting the same Java programming exam, with different weights, over three years. This is undertaken as a reflective exercise in order to derive a series of recommendations and retrospectively obvious pitfalls to act as guidance for educators considering online programming exams for large (i.e. n &gt; 150) introductory programming courses. After discussing our assessment methodology, we provide 4 high-level observations and centre a set of recommendations around these to aid practitioners in their assessment design.},
booktitle = {Proceedings of the 2023 Conference on Innovation and Technology in Computer Science Education V. 1},
pages = {436–442},
numpages = {7},
keywords = {video, programming, plagiarism, authentic assessment},
location = {<conf-loc>, <city>Turku</city>, <country>Finland</country>, </conf-loc>},
series = {ITiCSE 2023}
}

@inproceedings{10.1145/2591062.2591165,
author = {Hudepohl, John and Dubey, Alpana and Moisy, Sylvie and Thompson, Jessica and Niederer, Hans-Martin},
title = {Deploying an online software engineering education program in a globally distributed organization},
year = {2014},
isbn = {9781450327688},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2591062.2591165},
doi = {10.1145/2591062.2591165},
abstract = {A well-trained software engineering workforce is a key to success in a highly competitive environment. Changing tools and technologies, along with a rapidly changing development environment, make it incumbent on organizations to invest in training. In this paper, we describe our experience in deploying an online training program in a globally distributed organization. We write about the reasons behind ABB’s Software Development Improvement Program (SDIP), the requirements we established upfront, the people, processes and technologies we used, the promotion of SDIP, and metrics for measuring success. Finally, we share and describe results and lessons learned that could be applied to many organizations with similar issues. The goal of this paper is to provide a set of replicable best practices for initiating a software training program in a multi-national organization. The first SDIP online course was offered in June 2012. Since then, we have had more than 10,000 enrollments from employees in 54 countries. Today, our training library contains 89 e-learning, 17 webinar, video and virtual lab courses, and we have delivered more than 180 hosted webinars. Following each class, we ask students to evaluate the class. Ninety-eight percent are satisfied with the classes.},
booktitle = {Companion Proceedings of the 36th International Conference on Software Engineering},
pages = {301–310},
numpages = {10},
keywords = {webinars, web-based training platform, virtual labs, e-learnings, Training in distributed organizations},
location = {Hyderabad, India},
series = {ICSE Companion 2014}
}

@article{10.5555/1352079.1352083,
author = {Whitson, George},
title = {Security for service oriented architectures},
year = {2008},
issue_date = {April 2008},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {23},
number = {4},
issn = {1937-4771},
abstract = {Most agree that applications programming is moving to the Internet. This type of application is inherently insecure, as it allows access to the server on the initial HTTP request. A fairly well thought out security strategy was developed for second generation Web applications by creating a security sand-box around the HTTP request (until the user was authenticated), then using standard server security to protect the processing and finally extending the ideas of distributed computing to secure accessing data. Web application programming is currently moving to a Service-Oriented Architecture (SOA) that includes extensive use of Web services. There is a mad rush in the UNIX world to perfect the Enterprise Service Bus (ESB) and in the Microsoft world to finish the Windows Communications Foundation (WCF). And the beauty of the SOA is that a Web application developed using WCF will be able to access data from a Java Web service. This new SOA will support a distributed application development environment that is truly vendor independent. But, while the new architecture promises to make vendor independent distributed programming a reality, it has introduced a large number of new security concerns. This tutorial will describe SOA, give a brief introduction to computer security and then present SOA security in detail.},
journal = {J. Comput. Sci. Coll.},
month = {apr},
pages = {8–9},
numpages = {2}
}

@inproceedings{10.5555/1248460.1248478,
author = {Matsunaga, Andr\'{e}a and Tsugawa, Maur\'{\i}cio and Fortes, Jos\'{e} A. B.},
title = {Integration of text-based applications into service-oriented architectures for transnational digital government},
year = {2007},
isbn = {1595935991},
publisher = {Digital Government Society of North America},
abstract = {Significant efforts are currently being pursued by several countries and IT providers to deploy SOA (Service Oriented Architecture) designs of digital government systems that integrate or implement workflows of multiple software services and data sources. Unfortunately, many existing applications that can be useful in digital government are not implemented as Web Services, a fact that complicates their integration and interoperation within SOAs. To address this problem, this paper presents an approach to easily wrap text-based applications into Web Services. Compared to other application-wrapping approaches, this paper's solution exposes a simpler interface to users, completely hiding the complexities of understanding and developing Web Services. The approach is motivated by, and effective for, the important case of interactive applications, which is harder than batch-oriented applications and has not been considered by other approaches or software development environments. The paper briefly reviews a transnational digital government (TDG) project that requires interoperation and integration of independently developed geographically distributed information processing tools. The characteristics of SOAs are briefly described, along with their suitability for TDG systems and how they can be developed and deployed. The applications underlying the services needed for TDG are introduced and their SOA-relevant characteristics are identified. A framework is described for turning these applications into Web Services that are secure, support interactivity as needed, and do not constrain application functionality. The use of this framework and the evaluation of its benefits are described in the context of the deployment of application services needed by the TDG project.},
booktitle = {Proceedings of the 8th Annual International Conference on Digital Government Research: Bridging Disciplines &amp; Domains},
pages = {112–121},
numpages = {10},
keywords = {system integration, system interoperability, system management, transnational information system},
location = {<conf-loc>, <city>Philadelphia</city>, <state>Pennsylvania</state>, <country>USA</country>, </conf-loc>},
series = {dg.o '07}
}

@inproceedings{10.1145/985072.985076,
author = {Dechow, Douglas R.},
title = {An aspect-oriented infrastructure for a typed, stack-based, intermediate assembly language},
year = {2002},
isbn = {1581136269},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/985072.985076},
doi = {10.1145/985072.985076},
abstract = {While traditional, one-dimensional approaches to the problem of separation of concerns have been adequate for current software development, they are often brittle and resistant to evolutionary change. Aspects and aspect-orientation offer a controllable, modular mechanism for describing the separation of concerns that are orthogonal to the object model that is the primary developmental focus of a wide range of software applications. This dissertation research project involves the creation of an aspect-oriented infrastructure to support a variety of software development tools. Use of this infrastructure is demonstrated in domain areas such as ecological modeling software and web development in order to establish aspect-orientation as a feasible and straightforward solution to the problem of separation of concerns in object-oriented software systems. In the process of establishing the viability of the aspect-oriented solution, this dissertation investigates several new directions in aspect-orientation: aspects in system software, language independent aspects, aspect integration techniques, and opportunities for aspect reuse. In comparing the two-dimensional, aspect-oriented approach to the traditional, one-dimensional approach, the assertion of this research is that a two-dimensional approach offers an inherently more flexible software system while maintaining the advantages of modularity and code reuse that have long been ascribed to object-oriented systems.},
booktitle = {Companion of the 17th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications},
pages = {6–7},
numpages = {2},
keywords = {weave-time, separation of concerns, runtime, preprocessors, ecological modeling, components, compile-time, common intermediate language (CIL), aspects, aspect-oriented programming, aspect weaver},
location = {Seattle, Washington},
series = {OOPSLA '02}
}

@article{10.5555/1409763.1409785,
author = {Lantis, M. J.},
title = {Using a web editor as a development platform for teaching HTML and client-side programming in the internet 101 course: nifty tools and assignments},
year = {2008},
issue_date = {October 2008},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {24},
number = {1},
issn = {1937-4771},
abstract = {Traditionally most courses teaching beginning website development have students using a text editor to code native HTML. This works fine for a website with a few simple pages, but once a website begins to grow this is a cumbersome and time-consuming method. A much more efficient method is to use a web editor as the development platform for such mundane tasks as file management, establishing colors (versus looking up hex codes), finding the coordinates for image maps, etc. Since web editors "write code" for students, some course designers have avoided them due to worries of students learning how to a web editor but not learning how to write the code it is generating. By using two textbooks-one for the web editor, and one for HTML and it's supporting technologies of scripting and style sheets-the students can learn the best of both worlds. This is analogous to using a calculator for math or a rapid application development tool for programming. In fact, the web editor can actually be used as a learning tool for HTML. If the student is unsure of the code then he/she can perform the task in the web editor and then observe the code that was written. This method of learning has been used quite successfully and I believe an explanation and demonstration of it would give conference attendees a useful strategy for teaching website development.},
journal = {J. Comput. Sci. Coll.},
month = {oct},
pages = {97},
numpages = {1}
}

@article{10.1145/3392093,
author = {Bao, Lingfeng and Xing, Zhenchang and Xia, Xin and Lo, David and Wu, Minghui and Yang, Xiaohu},
title = {psc2code: Denoising Code Extraction from Programming Screencasts},
year = {2020},
issue_date = {July 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {3},
issn = {1049-331X},
url = {https://doi.org/10.1145/3392093},
doi = {10.1145/3392093},
abstract = {Programming screencasts have become a pervasive resource on the Internet, which help developers learn new programming technologies or skills. The source code in programming screencasts is an important and valuable information for developers. But the streaming nature of programming screencasts (i.e., a sequence of screen-captured images) limits the ways that developers can interact with the source code in the screencasts. Many studies use the Optical Character Recognition (OCR) technique to convert screen images (also referred to as video frames) into textual content, which can then be indexed and searched easily. However, noisy screen images significantly affect the quality of source code extracted by OCR, for example, no-code frames (e.g., PowerPoint slides, web pages of API specification), non-code regions (e.g., Package Explorer view, Console view), and noisy code regions with code in completion suggestion popups. Furthermore, due to the code characteristics (e.g., long compound identifiers like ItemListener), even professional OCR tools cannot extract source code without errors from screen images. The noisy OCRed source code will negatively affect the downstream applications, such as the effective search and navigation of the source code content in programming screencasts.In this article, we propose an approach named psc2code to denoise the process of extracting source code from programming screencasts. First, psc2code leverages the Convolutional Neural Network (CNN) based image classification to remove non-code and noisy-code frames. Then, psc2code performs edge detection and clustering-based image segmentation to detect sub-windows in a code frame, and based on the detected sub-windows, it identifies and crops the screen region that is most likely to be a code editor. Finally, psc2code calls the API of a professional OCR tool to extract source code from the cropped code regions and leverages the OCRed cross-frame information in the programming screencast and the statistical language model of a large corpus of source code to correct errors in the OCRed source code.We conduct an experiment on 1,142 programming screencasts from YouTube. We find that our CNN-based image classification technique can effectively remove the non-code and noisy-code frames, which achieves an F1-score of 0.95 on the valid code frames. We also find that psc2code can significantly improve the quality of the OCRed source code by truly correcting about half of incorrectly OCRed words. Based on the source code denoised by psc2code, we implement two applications: (1) a programming screencast search engine; (2) an interaction-enhanced programming screencast watching tool. Based on the source code extracted from the 1,142 collected programming screencasts, our experiments show that our programming screencast search engine achieves the precision@5, 10, and 20 of 0.93, 0.81, and 0.63, respectively. We also conduct a user study of our interaction-enhanced programming screencast watching tool with 10 participants. This user study shows that our interaction-enhanced watching tool can help participants learn the knowledge in the programming video more efficiently and effectively.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {jun},
articleno = {21},
numpages = {38},
keywords = {deep learning, code search, Programming videos}
}

@inproceedings{10.1145/3626202.3637565,
author = {Xu, Zhenyu and Yu, Miaoxiang and Cai, Jillian and Gafsi, Saddam and Ryckman, Judson Douglas and Yang, Qing and Wei, Tao},
title = {An FPGA-Enabled Framework for Rapid Automated Design of Photonic Integrated Circuits},
year = {2024},
isbn = {9798400704185},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626202.3637565},
doi = {10.1145/3626202.3637565},
abstract = {This paper introduces an FPGA-enabled framework to accelerate the automated design process for Photonic Integrated Circuit (PIC) devices. PICs are foreseen as a foundation for the next-generation semiconductors. However, the complexity of PIC design presents considerable challenges. Machine Learning (ML) techniques have shown promise in the realm of PIC design. The primary hurdle, however, is the extended training duration, solely constrained by the slow electromagnetic (EM) Finite-Difference Time-Domain (FDTD) solver. We propose a fast framework with a dedicated FPGA FDTD accelerator tailor-designed to speed up the PIC simulation. Benchmarking was carried out against commercial tools, with the single-FPGA accelerator outperforming both a multicore CPU and a GPU cluster. We taped out and evaluated the PIC devices designed through the proposed framework, and the experimental outcomes aligned. This demonstrates the full design circle, showcasing that the proposed framework enabled by FPGA breaks the current bottleneck in this domain. This study was conducted entirely on a commercial cloud platform (AWS), leveraging CPUs, FPGAs, and GPUs, with FPGA programming efficiently executed using High-Level Synthesis (HLS) and the Xilinx Runtime (XRT). The FPGA, along with its modern development tools, is seamlessly integrated into a heterogeneous computing platform, showcasing the accessible and practical nature of this approach. Our findings show the exciting possibility that ML-based physical design could be notably sped up enabled by FPGAs in a cloud-hosted heterogeneous cluster as a service.},
booktitle = {Proceedings of the 2024 ACM/SIGDA International Symposium on Field Programmable Gate Arrays},
pages = {119–129},
numpages = {11},
keywords = {cloud computing, finite difference time domain, fpga, heterogeneous computing, machine learning, photonic integrated circuits},
location = {<conf-loc>, <city>Monterey</city>, <state>CA</state>, <country>USA</country>, </conf-loc>},
series = {FPGA '24}
}

@inproceedings{10.1145/1900160.1900173,
author = {Meijer, Erik},
title = {Reactive extensions (Rx): curing your asynchronous programming blues},
year = {2010},
isbn = {9781450305167},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1900160.1900173},
doi = {10.1145/1900160.1900173},
abstract = {Asynchronous, event-driven "reactive" programming is way too hard in today's world of development tools and frameworks. The huge amount of manual and error-prone plumbing leads to incomprehensible and hard to maintain code. As we reach out to services in the cloud, the desire for asynchronous computation is ever increasing, requiring a fresh look on the problems imposed by reactive programming. Centered around the concept of observable data sources, Rx provides a framework that takes care of the hard parts of reactive programming. Instead of focusing on the hard parts, you now can start dreaming about the endless possibilities of composing queries over asynchronous data sources, piggybacking on convenient LINQ syntax. In this session, we'll cover the design philosophy of Rx, rooted on the deep duality between the interactive IEnumerable interface and the new reactive IObservable interface in .NET 4. From this core understanding, we'll start looking at various combinators and operators defined over observable collections, as provided by Rx, driving concepts home by a bunch of samples. Finally, if time permits, we'll look at the Reactive Extensions for JavaScript which allows us to take the concepts we already know from Rx and apply them to JavaScript and have deep integration with libraries such as jQuery. Democratizing asynchronous programming starts today. Don't miss out on it!},
booktitle = {ACM SIGPLAN Commercial Users of Functional Programming},
articleno = {11},
numpages = {1},
location = {Baltimore, Maryland},
series = {CUFP '10}
}

@inproceedings{10.1145/2110486.2110491,
author = {Pierce, Marlon E. and Singh, Raminderjeet and Guo, Zhenhua and Marru, Suresh and Rattadilok, Pairoj and Goyal, Ankur},
title = {Open community development for science gateways with apache rave},
year = {2011},
isbn = {9781450311236},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2110486.2110491},
doi = {10.1145/2110486.2110491},
abstract = {Science gateways enable researchers and students to use distributed scientific computing infrastructure (cyberinfrastructure) through Web browsers and Web-enabled desktop clients. This paper describes the use of the open source, open community Apache Rave project as the basis for developing science gateways. Building on Apache Shindig (for OpenSocial Gadgets) and Apache Wookie (for W3C Widgets), Rave provides an out-of-the box deployment that can be used to host reusable social Web components. Rave is based on the Spring MVC framework and so can also be extensively customized or extended with (for example) custom database back-ends and authentication modules. In this paper we consider Rave as a development platform for science gateways and discuss how the source code may be extended through three use cases that focus on gateway security requirements. A major consideration of this paper is how to design Rave as a development environment so that developers can make local customizations and extensions freely on both a rapidly changing code base (during Rave's initial development), and (later) between stable code bases during version upgrades. We conclude with a discussion of the implications of developing science gateways and other cyberinfrastructure software within the Apache Software Foundation and present its potential advantages.},
booktitle = {Proceedings of the 2011 ACM Workshop on Gateway Computing Environments},
pages = {29–36},
numpages = {8},
keywords = {web computing, science gateways, grid computing, cloud computing, W3C widget, OpenSocial},
location = {Seattle, Washington, USA},
series = {GCE '11}
}

@inproceedings{10.5555/2818754.2818825,
author = {Kalliamvakou, Eirini and Damian, Daniela and Blincoe, Kelly and Singer, Leif and German, Daniel M.},
title = {Open source-style collaborative development practices in commercial projects using GitHub},
year = {2015},
isbn = {9781479919345},
publisher = {IEEE Press},
abstract = {Researchers are currently drawn to study projects hosted on GitHub due to its popularity, ease of obtaining data, and its distinctive built-in social features. GitHub has been found to create a transparent development environment, which together with a pull request-based workflow, provides a lightweight mechanism for committing, reviewing and managing code changes. These features impact how GitHub is used and the benefits it provides to teams' development and collaboration. While most of the evidence we have is from GitHub's use in open source software (oss) projects, GitHub is also used in an increasing number of commercial projects. It is unknown how GitHub supports these projects given that GitHub's workflow model does not intuitively fit the commercial development way of working. In this paper, we report findings from an online survey and interviews with GitHub users on how GitHub is used for collaboration in commercial projects. We found that many commercial projects adopted practices that are more typical of oss projects including reduced communication, more independent work, and self-organization. We discuss how GitHub's transparency and popular workflow can promote open collaboration, allowing organizations to increase code reuse and promote knowledge sharing across their teams.},
booktitle = {Proceedings of the 37th International Conference on Software Engineering - Volume 1},
pages = {574–585},
numpages = {12},
location = {Florence, Italy},
series = {ICSE '15}
}

@inproceedings{10.1145/1980022.1980138,
author = {Tendulkar, D. M. and Phalak, C.},
title = {Proactive performance testing using SQL performance assurance services (SQL-PASS)},
year = {2011},
isbn = {9781450304498},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1980022.1980138},
doi = {10.1145/1980022.1980138},
abstract = {The information systems are becoming more and more complex and it is very common these days where database sizes are in hundreds of GBs. Handling of such large data volumes is creating challenges for assuring the performance of end-user applications. Applications involving database transactions are worst hit as there is no clue about the time required to fetch the relevant data from the huge database. The tools available in the market and the existing methodologies are suitable for the production environment but not effective in the development environment. This creates a gap between database application development and its deployment in the production environment. Therefore assuring the performance against high volume is an indisputable problem faced by the application developer and tester.In this paper, we discuss the work done in industry to tackle the SQL performance problem arising because of large data volumes and present SQL-PASS (SQL Performance Assurance Services), a web based service developed by TCS innovation Lab -- Performance engineering, which helps to validate the SQL performance against high volumes without using actual data.We will also discuss how this service has been used in the development project to assure the performance.},
booktitle = {Proceedings of the International Conference &amp; Workshop on Emerging Trends in Technology},
pages = {541–547},
numpages = {7},
keywords = {query optimization, query execution time forecasting, extrapolation of database statistics, explain plan, database statistics, database emulation, SQL performance},
location = {Mumbai, Maharashtra, India},
series = {ICWET '11}
}

@inproceedings{10.1109/CSI-SE.2017.3,
author = {Harel, David and Heimlich, Idan and Marelly, Rami and Marron, Assaf},
title = {Crowd-based programming for reactive systems},
year = {2017},
isbn = {9781538640418},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/CSI-SE.2017.3},
doi = {10.1109/CSI-SE.2017.3},
abstract = {End-user applications aimed at the public in general (mobile and web applications, games, etc.) are usually developed with feedback from only a tiny fraction of the millions of intended users, and are thus built under significant uncertainty. The developer cannot really tell a priori which features the users will like, which they will dislike, and which ones will help create the desired outcome, such as high usage or increased revenue. In these cases, providing adaptive capabilities can be the key factor in the application's success. Existing self-adaptive techniques can provide some of the needed capabilities, but they too must be planned, and leave the developers, and much of the development process, "out of the loop". We propose a development environment that allows the wisdom of the crowd to influence the very structure and flow of the program being created, by voting upon behavioral choices as they are observed in early versions of the working program. The approach still allows the developers to retain known desired behaviors, and to enforce constraints on crowd-driven changes. The developers can also react to ongoing crowd-programmed feedback throughout the entire lifetime of the application.},
booktitle = {Proceedings of the 4th International Workshop on CrowdSourcing in Software Engineering},
pages = {9–13},
numpages = {5},
keywords = {software engineering, scenario-based programming, reactive systems, incremental development, MDE},
location = {Buenos Aires, Argentina},
series = {CSI-SE '17}
}

@inproceedings{10.1145/2479871.2479934,
author = {Weiss, Christian and Westermann, Dennis and Heger, Christoph and Moser, Martin},
title = {Systematic performance evaluation based on tailored benchmark applications},
year = {2013},
isbn = {9781450316361},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2479871.2479934},
doi = {10.1145/2479871.2479934},
abstract = {Performance (i.e., response time, throughput, resource consumption) is a key quality metric of today's applications as it heavily affects customer satisfaction. SAP strives to identify and fix performance problems before customers face them. Therefore, performance engineering methods are applied in all stages of the software lifecycle. However, especially in the development phase continuous performance evaluations can introduce a lot of overhead for developers which hinders their broad application in practice. In order to evaluate the performance of a certain software artefact (e.g. comparing two design alternatives), a developer has to run measurements that are tailored to the software artefact under test. The use of standard benchmarks would create less overhead, but the information gain is often not sufficient to answer the specific questions of developers. In this industrial paper, we present an approach that enables exhaustive, tailored performance testing with minimal effort for developers. The approach allows to define benchmark applications through a domain-specific model and realizes the transformation of those models to benchmark applications via a generic Benchmark Framework. The application of the approach in the context of the SAP Netweaver Cloud development environment demonstrated that we can efficiently identify performance problems that would not have been detected by our existing performance test infrastructure.},
booktitle = {Proceedings of the 4th ACM/SPEC International Conference on Performance Engineering},
pages = {411–420},
numpages = {10},
keywords = {performance, java persistence api, database, benchmarking},
location = {Prague, Czech Republic},
series = {ICPE '13}
}

@inproceedings{10.1145/3549206.3549236,
author = {Kinger, Kushagra and Singh, Ajeet and Panda, Sanjaya Kumar},
title = {Priority-Aware Resource Allocation Algorithm for Cloud Computing},
year = {2022},
isbn = {9781450396752},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3549206.3549236},
doi = {10.1145/3549206.3549236},
abstract = {Cloud is an innovative model of the computing paradigm, where servers, networks, storage, development tools, and applications are enabled to the users through the Internet in the form of services. These services are provided by the cloud service providers (CSPs) by deploying virtual machines (VMs) as per the resource request received from the users. These VM requests are of various types and priorities, and therefore have varying impacts in terms of importance, criticality, accountability, and domains of applications. On the other hand, the resources/hosts are of varying sizes and assigned to the requests based on their capability, availability, and feasibility. Therefore, it is an exigent issue to map the VM requests with the hosts to maximize the allocation rate with respect to their priority. One of the recent solutions is to assign the high-priority VM requests in close proximity, and other requests can be assigned using first fit decreasing (FFD). However, this solution does not partition the hosts to discriminate the type of requests. This paper introduces a priority-aware resource allocation (PARA) algorithm to consider three types of VM requests: highly critical, critical, and normal, and partition the hosts into three levels. PARA enables the high-priority VM requests to a relatively large pool of hosts compared to low-priority requests. The proposed algorithm is simulated by considering 10000 to 100000 VM requests and 20 to 30 hosts and compared with a non-partitioned pool of hosts with FFD to show effectiveness in allocation rate and weighted score concerning the serving requests.},
booktitle = {Proceedings of the 2022 Fourteenth International Conference on Contemporary Computing},
pages = {168–174},
numpages = {7},
keywords = {Virtual Machine, Resource Partitioning, Resource Allocation, First Fit Decreasing, Cloud Service Provider, Cloud Computing},
location = {Noida, India},
series = {IC3-2022}
}

@inproceedings{10.1145/3211890.3211916,
author = {Breitgand, David and Weit, Avi and Rizou, Stamatia and Griffin, David and Acar, Ugur and Carrozzo, Gino and Zioulis, Nikolaos and Andriani, Pasquale and Iadanza, Francesco},
title = {Towards Serverless NFV for 5G Media Applications},
year = {2018},
isbn = {9781450358491},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3211890.3211916},
doi = {10.1145/3211890.3211916},
abstract = {The advent of virtualization and IaaS have revolutionized the telecom industry via SDN/NFV. A new wave of cloud-native PaaS promises to further improve SDN/NFV performance, portability, and cost-efficiency. In this poster, we highlight a work in progress being done in the 5G-MEDIA project [2], which pioneers the application of the serverless paradigm to NFV in the context of media intensive applications in 5G networks. Motivational use cases include tele-immersive gaming, mobile journalism and UHD content distribution. For example, consider a next-gen e-sport, in which bouts between gamers last only a few minutes. FaaS offers a clear cost-efficiency benefit for hosting such applications. An architecture is shown in Fig. 1. It includes i) an Application/Service Development Kit (SDK) to enable access to media applications development tools; ii) a Service Virtualization Platform (SVP) to run the ETSI MANO framework, the Media Service MAPE optimization component and the VIM and WIM plugins to enable NFVIs integration; iii) different NFVIs to execute media-specific VNFs. FaaS VIM is implemented for integration of FaaS with the rest of the MANO stack. It allows mixing FaaS and "regular" VNFs within the same media forwarding graph. For reference implementation, Apache OpenWhisk [1] and Kubernetes are used. The main challenge is extending the programming model to support groups of actions communicating over a network, while retaining the simplicity of FaaS. The project is supported by EU H2020 R&amp;I program (Grant Agreement No 761699).},
booktitle = {Proceedings of the 11th ACM International Systems and Storage Conference},
pages = {118},
numpages = {1},
location = {Haifa, Israel},
series = {SYSTOR '18}
}

@inproceedings{10.1145/3302424.3303969,
author = {Van't Hof, Alexander and Nieh, Jason},
title = {AnDrone: Virtual Drone Computing in the Cloud},
year = {2019},
isbn = {9781450362818},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3302424.3303969},
doi = {10.1145/3302424.3303969},
abstract = {With the continued proliferation of drones, unmanned aerial vehicles, additional uses for them are growing and the demand for their services is on the rise. We present AnDrone, a drone-as-a-service solution that makes drones accessible in the cloud. AnDrone pairs a cloud service with the first drone virtualization architecture. This enables a physical drone to run multiple virtual drones simultaneously in an isolated and secure manner at little additional cost, as computational costs are cheap compared to the operational and energy costs of putting a drone in the air. AnDrone virtualizes drones using a novel Linux container architecture. Android Things virtual drone containers provide a familiar user and development environment that can run existing Android apps. A real-time Linux flight controller container supports existing drone flight software and provides virtual drones with geofenced flight control. A device container transparently multiplexes access from virtual drones to a full range of drone hardware devices, including cameras and other sensors. Upon flight completion, virtual drones and their data can be uploaded to the cloud for offline access. We have implemented an AnDrone prototype based on Raspberry Pi 3 drone hardware. We demonstrate that it incurs minimal runtime performance and energy overhead, supports real-time virtual drone flight control, and runs untrusted third-party software in virtual drones in a secure manner while ensuring that the service provider maintains control of the drone hardware.},
booktitle = {Proceedings of the Fourteenth EuroSys Conference 2019},
articleno = {6},
numpages = {16},
keywords = {virtualization, unmanned aerial vehicles, real-time, drones, containers, cloud computing},
location = {Dresden, Germany},
series = {EuroSys '19}
}

@inproceedings{10.1145/2538862.2544298,
author = {Wiggins, Joseph B. and Grafsgaard, Joseph F. and Boyer, Kristy Elizabeth and Wiebe, Eric N. and Lester, James C.},
title = {The relationship between task difficulty and emotion in online computer programming tutoring (abstract only)},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2544298},
doi = {10.1145/2538862.2544298},
abstract = {Emotion, or affect, plays a central role in learning. In particular, promoting positive emotions throughout the learning process is important for students' motivation to pursue computer science and for retaining computer science students. Positive emotions, such as engagement or enjoyment, may be fostered by timely individualized help. Especially promising are interventions if the student is having difficulty completing a task. Recognizing when a student is facing a complex task may better inform teachers or adaptive learning environments about the students' affective states, which in turn can inform instructional adaptations. We approach this research goal by analyzing a data set of student facial videos from computer-mediated human tutorial sessions in Java programming. Students and tutors interacted with a synchronized web-based development environment. The tutorial sessions were divided into six lessons each with subtasks, and featured corresponding learning objectives for the students. In post-hoc analysis, we identified "difficult" tasks by comparing the frequencies of student-tutor interaction and task behaviors such as running the program and the time to complete tasks. Nonverbal behaviors, such as gesturing or postural shifting, were then compared with task difficulty. Understanding such nonverbal behavior can inform individualized interventions, which may keep students engaged and foster greater learning gains.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {721},
numpages = {1},
keywords = {postural detection, facial detection, affective modeling},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14}
}

@inproceedings{10.1145/3328778.3366887,
author = {Borowski, Marcel and Zagermann, Johannes and Klokmose, Clemens N. and Reiterer, Harald and R\"{a}dle, Roman},
title = {Exploring the Benefits and Barriers of Using Computational Notebooks for Collaborative Programming Assignments},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3366887},
doi = {10.1145/3328778.3366887},
abstract = {Programming assignments in computer science courses are often processed in pairs or groups of students. While working together, students face several shortcomings in today's software: The lack of real-time collaboration capabilities, the setup time of the development environment, and the use of different devices or operating systems can hamper students when working together on assignments. Text processing platforms like Google Docs solve these problems for the writing process of prose text, and computational notebooks like Google Colaboratory for data analysis tasks. However, none of these platforms allows users to implement interactive applications. We deployed a web-based literate programming system for three months during an introductory course on application development to explore how collaborative programming practices unfold and how the structure of computational notebooks affect the development. During the course, pairs of students solved weekly programming assignments. We analyzed data from weekly questionnaires, three focus groups with students and teaching assistants, and keystroke-level log data to facilitate the understanding of the subtleties of collaborative programming with computational notebooks. Findings reveal that there are distinct collaboration patterns; the preferred collaboration pattern varied between pairs and even varied within pairs over the course of three months. Recognizing these distinct collaboration patterns can help to design future computational notebooks for collaborative programming assignments.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {468–474},
numpages = {7},
keywords = {programming assignments, computational notebooks, collaborative programming, application development},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/947121.947163,
author = {Sullivan, Ed},
title = {Utilizing CPTOnline to upgrade the computer and information technology curriculum},
year = {2003},
isbn = {1581137702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/947121.947163},
doi = {10.1145/947121.947163},
abstract = {A common problem for the keepers of computer and information technology curriculums is the blending of e-commerce courses into the core curriculum. Certainly some of the core principles of technology-based programs hold up reasonably well regardless of the environment but the emergence of the Web as a development environment has created both new opportunities and new challenges for educators at all levels. Compounding this challenge is attempting to upgrade curriculum in a cost-effective manner.The Computer and Information Technology Department (CIT) found an answer to both of these dilemmas through the creation of CPTOnline, the on-line branch of CIT. CPTOnline has packaged the department's Web-based offerings into two online Certificate programs. For the 2002 calendar year, CPTOnline generated over 3200 credit hours. This represents almost 20% of all credit hours offered by CIT. CPTOnline has become an attractive option as both a standalone program and as a mechanism to upgrade the CIT curriculum.One of the reasons that these programs have been so popular is that they have found a way to meet the needs of a variety of audiences. These Web-based programs are very attractive to corporate clients, individual application developers and CIT majors. A second and compelling aspect to these programs is that they are delivered over the Web in an asynchronous format. This provides the educational flexibility that is so desperately needed by many students. Finally, CPTOnline has been a pioneer in the area of on-line innovations through the utilization of Web-based tools such as remote labs and instant messaging.This paper will highlight the best practices utilized by CPTOnline and how CPTOnline enabled the process of "webifying" the CIT curriculum.},
booktitle = {Proceedings of the 4th Conference on Information Technology Curriculum},
pages = {186–188},
numpages = {3},
keywords = {web-based, e-commerce, curriculum, certificate, CPTOnline, CIT},
location = {Lafayette, Indiana, USA},
series = {CITC4 '03}
}

@inproceedings{10.5555/1855741.1855742,
author = {Yu, Yuan and Isard, Michael and Fetterly, Dennis and Budiu, Mihai and Erlingsson, \'{U}lfar and Gunda, Pradeep Kumar and Currey, Jon},
title = {DryadLINQ: a system for general-purpose distributed data-parallel computing using a high-level language},
year = {2008},
publisher = {USENIX Association},
address = {USA},
abstract = {DryadLINQ is a system and a set of language extensions that enable a new programming model for large scale distributed computing. It generalizes previous execution environments such as SQL, MapReduce, and Dryad in two ways: by adopting an expressive data model of strongly typed .NET objects; and by supporting general-purpose imperative and declarative operations on datasets within a traditional high-level programming language.A DryadLINQ program is a sequential program composed of LINQ expressions performing arbitrary side-effect-free transformations on datasets, and can be written and debugged using standard .NET development tools. The DryadLINQ system automatically and transparently translates the data-parallel portions of the program into a distributed execution plan which is passed to the Dryad execution platform. Dryad, which has been in continuous operation for several years on production clusters made up of thousands of computers, ensures efficient, reliable execution of this plan.We describe the implementation of the DryadLINQ compiler and runtime. We evaluate DryadLINQ on a varied set of programs drawn from domains such as web-graph analysis, large-scale log mining, and machine learning. We show that excellent absolute performance can be attained--a general-purpose sort of 1012 Bytes of data executes in 319 seconds on a 240-computer, 960- disk cluster--as well as demonstrating near-linear scaling of execution time on representative applications as we vary the number of computers used for a job.},
booktitle = {Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation},
pages = {1–14},
numpages = {14},
location = {San Diego, California},
series = {OSDI'08}
}

@inproceedings{10.1145/3328433.3328453,
author = {Schuster, Christopher and Flanagan, Cormac},
title = {IDVE: an integrated development and verification environment for JavaScript},
year = {2019},
isbn = {9781450362573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328433.3328453},
doi = {10.1145/3328433.3328453},
abstract = {Program verifiers statically check programs based on source code annotations such as invariants, pre- and postconditions. These annotations can be more precise than simple types. For example, a sorting routine might be annotated with a postcondition stating that its result is sorted.However, the verification process for these annotations can become complex. Therefore, simple error messages may not be sufficient to help the programmer resolve verification issues. In order to improve the programming experience for verified programming, this paper presents IDVE, an integrated development and verification environment that lets users interactively inspect and debug verification issues. The goal of IDVE is to provide a development tool that assists users with program verification analogous to how interactive step-by-step debugging avoids manual "printf debugging". IDVE enables programmers to interactively manipulate assumptions and assertions of verification conditions with a novel verification inspector, and IDVE automatically generates tests that serve as executable and debuggable counterexamples.In addition to presenting the approach and implementation of the integrated development and verification environment, we also conducted a user study with 18 participants to evaluate how the proposed features of the environment are perceived. Participants with and without prior experience with program verifiers had to solve a series of simple programming and verification tasks and answer an online survey. Features of IDVE were generally seen as helpful or potentially helpful but user interface design is an essential factor for their utility.},
booktitle = {Companion Proceedings of the 3rd International Conference on the Art, Science, and Engineering of Programming},
articleno = {19},
numpages = {16},
keywords = {test generation, programming environments, program verification, interactive debugging, JavaScript},
location = {Genova, Italy},
series = {Programming '19}
}

@inproceedings{10.1145/3332324.3332327,
author = {Red, Ellenita R. and Velasquez, Joanna A. and Cruz, John Martin C. and Figueroa, Jon Erickson G.},
title = {Web and Mobile Ticketing and Service Tracking for Customer Engagement of a Small Accounting Firm},
year = {2019},
isbn = {9781450371827},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3332324.3332327},
doi = {10.1145/3332324.3332327},
abstract = {The abundance of free technology tools that can be used to communicate of today's businesses are in way creating more confusion and redundant tasks which is not good for a striving small business. The study aims to serve as a single platform of communication tool for a small accounting firm, a website and mobile application were developed which are the capable of providing an online ticketing which can respond to customer concerns, a service tracking, and a tool that can aggregate reports of the firm's performance in providing services in the form of charts. Web Development Life Cycle (WDLC) was used as the process model in the development of the website and mobile application. Interview validated the business processes and supported the design of web and mobile applications. Development tools used for website and mobile application are Cascading Style Sheets (CSS), Hypertext Preprocessor (PHP), Android and MySQL for database. In order to evaluate the performance of the developed system, a usability evaluation was conducted with the customers and employees of the accounting firm using the criteria: communication, transaction, aesthetics, ease of use, information and maintainability. Evaluation result shows that majority of customers strongly agree on the efficiency of communication and transaction functionalities of the developed system with the need in the improvement of image and text. Meanwhile, the evaluation of website's back-end shows promising result as well with mostly strongly agreement except for the transaction criterion wherein the employees who used the developed system had difficulty in using the system. Overall, the visual components, management of tickets, management of service tracking and viewing of the aggregate reports in the form of charts are all beneficial to a small business so that they could focus on their core business and use the developed website and application in customer engagement.},
booktitle = {Proceedings of the 2019 International Conference on E-Business and Mobile Commerce},
pages = {6–11},
numpages = {6},
keywords = {Website, Service Tracking, Online Ticketing, Mobile Application, Customer Engagement, Communication Tool},
location = {Taichung, Taiwan},
series = {ICEMC '19}
}

@inproceedings{10.1145/3241403.3241440,
author = {Mishra, Mayank and Kunde, Shruti and Nambiar, Manoj},
title = {Cracking the monolith: challenges in data transitioning to cloud native architectures},
year = {2018},
isbn = {9781450364836},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3241403.3241440},
doi = {10.1145/3241403.3241440},
abstract = {Application modernization is the process of transforming a monolithic application to cloud native. This involves gradually building a new application consisting of microservices, and running it in conjunction with the monolithic application. Over a period of time, the functionality of the monolith shrinks drastically or transforms into yet another microservice. Solution architects are often faced with the task of ensuring this smooth transition - from monolith to cloud native. For large and complex monoliths, this task is non-trivial as the code base grows non-linearly over a period of time, thus posing multiple challenges.The complexity of a monolith is moved to the interconnections between microservices, leading to multiple points of failure. This also has implications on scalability and the need for replication. One of the biggest challenges is to maintain data consistency and statefulness across the services and enable a smooth transition of the data. Tracing performance issues also becomes complex as a single transaction can encompass multiple service calls, along with increased operational complexity due to increased demand of managing services.In this paper, we envision an automated approach that will enable a smooth transition from the monolith to microservices, thus alleviating the complexities faced by a solution architect. Our system leverages the existing data schema along with details obtained using profiling tools (in production or development environment), to understand the data flow and access patterns and use this information to to propose functional modules (microservices).},
booktitle = {Proceedings of the 12th European Conference on Software Architecture: Companion Proceedings},
articleno = {35},
numpages = {4},
keywords = {monolith, cloud native, architecture, SLA},
location = {Madrid, Spain},
series = {ECSA '18}
}

@inproceedings{10.1145/2462476.2462491,
author = {Malan, David J.},
title = {From cluster to cloud to appliance},
year = {2013},
isbn = {9781450320788},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2462476.2462491},
doi = {10.1145/2462476.2462491},
abstract = {We propose a client-side virtual machine (VM) as an alternative to on-campus clusters and off-campus clouds as a development environment for students in introductory courses. In Fall 2011, we deployed the CS50 Appliance, our own such VM, to 600 students on campus and, in Fall 2012, to 700 students on campus and 140,000 students online. We present in this work the results of that two-year experiment. The appliance itself is available as open source for others to adapt or adopt. Not only did the appliance enable us to provide students with simpler tools, among them a graphical editor without any latency, it also enabled us to provide more sophisticated tools too, including a web server and database server. Moreover, the appliance ensured that the course's workload no longer required constant Internet access, particularly of students abroad. And the appliance alleviated load on the course's servers, with execution of students' programs now distributed across students' own CPUs. Without the appliance (or more costly clusters or clouds), we certainly could not have accommodated as many as 140,000 students.But some students' laptops, particularly netbooks, struggled under the appliance's weight. Even though designed to be lean, the appliance, like any VM, still consumes resources, particularly RAM. And unforeseen technical difficulties arose in both years, most, but not all, of which we redressed with mid-semester updates and documentation.Overall we have judged our deployment of an appliance a success, superior to past years' clusters and clouds. And we continue to refine the appliance for Fall 2013.},
booktitle = {Proceedings of the 18th ACM Conference on Innovation and Technology in Computer Science Education},
pages = {88–92},
numpages = {5},
keywords = {virtualization, virtual machine},
location = {Canterbury, England, UK},
series = {ITiCSE '13}
}

@inproceedings{10.1145/3239372.3239387,
author = {Henriques, Henrique and Louren\c{c}o, Hugo and Amaral, Vasco and Goul\~{a}o, Miguel},
title = {Improving the Developer Experience with a Low-Code Process Modelling Language},
year = {2018},
isbn = {9781450349499},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3239372.3239387},
doi = {10.1145/3239372.3239387},
abstract = {Context: The OutSystems Platform is a development environment composed of several DSLs, used to specify, quickly build and validate web and mobile applications. The DSLs allow users to model different perspectives such as interfaces and data models, define custom business logic and construct process models. Problem: The DSL for process modelling (Business Process Technology (BPT)), has a low adoption rate and is perceived as having usability problems hampering its adoption. This is problematic given the language maintenance costs. Method: We used a combination of interviews, a critical review of BPT using the "Physics of Notation" and empirical evaluations of BPT using the System Usability Scale (SUS) and the NASA Task Load indeX (TLX), to develop a new version of BPT, taking these inputs and Outsystems' engineers culture into account. Results: Evaluations conducted with 25 professional software engineers showed an increase of the semantic transparency on the new version, from 31% to 69%, an increase in the correctness of responses, from 51% to 89%, an increase in the SUS score, from 42.25 to 64.78, and a decrease of the TLX score, from 36.50 to 20.78. These differences were statistically significant. Conclusions: These results suggest the new version of BPT significantly improved the developer experience of the previous version. The end users background with OutSystems had a relevant impact on the final concrete syntax choices and achieved usability indicators.},
booktitle = {Proceedings of the 21th ACM/IEEE International Conference on Model Driven Engineering Languages and Systems},
pages = {200–210},
numpages = {11},
keywords = {Low-Code Languages, Developer Experience},
location = {Copenhagen, Denmark},
series = {MODELS '18}
}

@inproceedings{10.5555/1855711.1855722,
author = {Mickens, James and Elson, Jeremy and Howell, Jon},
title = {Mugshot: deterministic capture and replay for Javascript applications},
year = {2010},
publisher = {USENIX Association},
address = {USA},
abstract = {Mugshot is a system that captures every event in an executing JavaScript program, allowing developers to deterministically replay past executions of web applications. Replay is useful for a variety of reasons: failure analysis using debugging tools, performance evaluation, and even usability analysis of a GUI. Because Mugshot can replay every execution step that led to a failure, it is far more useful for performing root-cause analysis than today's commonly deployed client-based error reporting systems--core dumps and stack traces can only give developers a snapshot of the system after a failure has occurred.Many logging systems require a specially instrumented execution environment like a virtual machine or a custom program interpreter. In contrast, Mugshot's client-side component is implemented entirely in standard JavaScript, providing event capture on unmodified client browsers. Mugshot imposes low overhead in terms of storage (20-80KB/minute) and computation (slowdowns of about 7% for games with high event rates). This combination of features--a low-overhead library that runs in unmodified browers--makes Mugshot one of the first capture systems that is practical to deploy to every client and run in the common case. With Mugshot, developers can collect widespread traces from programs in the field, gaining a visibility into application execution that is typically only available in a controlled development environment.},
booktitle = {Proceedings of the 7th USENIX Conference on Networked Systems Design and Implementation},
pages = {11},
numpages = {1},
location = {San Jose, California},
series = {NSDI'10}
}

@inproceedings{10.1145/3159450.3162303,
author = {Rahman, Md Mahmudur},
title = {Infusing Visual Programming and Interactive Learning to Teach an Introductory Programming Course with Positive Learning Outcomes: (Abstract Only)},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3162303},
doi = {10.1145/3159450.3162303},
abstract = {A core challenge in introductory programming courses during the freshmen year is getting students to understand how a static textual representation (source code) maps to a highly dynamic process (program execution). Most students nowadays are visual learners who learn programming concept better through web-based visual and interactive learning instead of learning from traditional black board lecturing styles. This presentation will report our experience with positive learning outcomes in teaching an introductory programming course in Python by using a dynamic visual programming development environment based on flow-charts (RAPTOR) and active learning with an interactive eBook (zyBook). In this study, eleven sections of COSC 111 were included over three semesters as control and experimental groups. Analysis showed a marginally significant difference (F (1,5) = 5.87; p = 0.060) between sections taught via the traditional method and sections taught with the proposed pedagogical innovation. We also found that there are statistically significant positive correlations in between uses of the interactive book (eBook) and performances of students in tests. To add to our understanding of what students were experiencing, we also administered a survey to students at the end of the course. Regarding learning styles and tools, survey result showed that the eBook was helpful in understanding programming concepts (71.5%), that the instant feedback that the online book provided was helpful (82.9%), that the class discussion and interaction were helpful (85.7%). Overall, it seems that the proposed pedagogical approaches have made a positive difference by increasing student motivation and engagement, and reducing failure rates.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {1086},
numpages = {1},
keywords = {visual programming, introductory programming, interactive learning, ebook, computational thinking},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/3064176.3064188,
author = {Davis, James and Thekumparampil, Arun and Lee, Dongyoon},
title = {Node.fz: Fuzzing the Server-Side Event-Driven Architecture},
year = {2017},
isbn = {9781450349383},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3064176.3064188},
doi = {10.1145/3064176.3064188},
abstract = {The importance of the Event-Driven Architecture (EDA) has never been greater. Web servers and the IoT alike have begun to adopt the EDA, and the popular server-side EDA framework, Node.js, boasts the world's largest package ecosystem. While multi-threaded programming has been well studied in the literature, concurrency bug characteristics and useful development tools remain largely unexplored for server-side EDA-based applications.We present the first (to the best of our knowledge) concurrency bug characteristic study of real world open-source event-driven applications, based in Node.js. Like multithreaded programs, event-driven programs are prone to concurrency bugs like atomicity violations and order violations. Our study shows the forms that atomicity violations and ordering violations take in the EDA context, and points out the limitations of existing concurrency error detection tools developed for client-side EDA applications.Based on our bug study, we propose Node.fz, a novel testing aid for server-side event-driven programs. Node.fz is a schedule fuzzing test tool for event-driven programs, embodied for server-side Node.js programs. Node.fz randomly perturbs the execution of a Node.js program, allowing Node.js developers to explore a variety of possible schedules. Thanks to its low overhead, Node.fz enables a developer to explore a broader "schedule space" with the same test time budget, ensuring that applications will be stable in a wide variety of deployment conditions. We show that Node.fz can expose known bugs much more frequently than vanilla Node.js, and that it can uncover new bugs.},
booktitle = {Proceedings of the Twelfth European Conference on Computer Systems},
pages = {145–160},
numpages = {16},
location = {Belgrade, Serbia},
series = {EuroSys '17}
}

@inproceedings{10.1145/3291279.3341213,
author = {Broneak, Cassandra and Lucarelli, Chery and Rosato, Jennifer},
title = {Exploring the Use of Video Reflection as a Professional Development Tool},
year = {2019},
isbn = {9781450361859},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3291279.3341213},
doi = {10.1145/3291279.3341213},
abstract = {The use of video recording in the classroom has the potential to improve pre- and in-service teacher practice. This poster explores the use of video as a virtual-visit and professional development tool for computer science educators at the high school level. The Mobile Computer Science Principles (CSP) program offers a rigorous professional development (PD) and curriculum for new and experienced computer science teachers. With support from the National Science Foundation, the program was able offer a stipend to teachers who completed the research requirements, which for the online program included recording, reflecting on, and submitting a 10-minute unedited video of educators implementing a chosen lesson in their course. In addition to the video submission and reflection, teachers reviewed and commented on others videos in a protected online environment. Researchers have begun examining the teacher reflections and the comments. This poster presents preliminary common themes and findings from teacher video reflections, video comments, focus group data, and an end of course survey. Trends surrounding student engagement, teacher confidence, and teacher views of effective pedagogical strategies such as growth mindset and pair programming have emerged. Results show that while computer science educators can often feel isolated in their school environment, video serves as a powerful tool for promoting connectedness and individual reflection. Creating a space where teachers can reflect on their own teaching is an important professional development opportunity. Results show that while computer science educators can often feel isolated in their school environment, video serves as a powerful tool for promoting connectedness and individual reflection. The use of video helps teachers to how to develop and implement best teaching practices and pedagogical strategies effectively into their classroom.},
booktitle = {Proceedings of the 2019 ACM Conference on International Computing Education Research},
pages = {293},
numpages = {1},
keywords = {video reflection, professional development, pedagogy, k-12, computer science principles, best practices},
location = {Toronto ON, Canada},
series = {ICER '19}
}

@inproceedings{10.1145/1135777.1135780,
author = {Hey, Tony},
title = { 'e-science and cyberinfrastructure: a middleware perspective'},
year = {2006},
isbn = {1595933239},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1135777.1135780},
doi = {10.1145/1135777.1135780},
abstract = {The Internet was the inspiration of J.C.R.Licklider when he was at the Advanced Research Projects Agency in the 1960's. In those pre-Moore's Law days, Licklider imagined a future in which researchers could access and use computers and data from anywhere in the world. Today, as everyone knows, the killer applications for the Internet were email in the 1970's and the World Wide Web in the 1990's which was developed initially as a collaboration tool for the particle physics academic community. In the future, frontier research in many fields will increasingly require the collaboration of globally distributed groups of researchers needing access to distributed computing, data resources and support for remote access to expensive, multi-national specialized facilities such as telescopes and accelerators or specialist data archives. In the context of science and engineering, this is the 'e-Science' agenda. Robust middleware services deployed on top of research networks will constitute a powerful 'Cyberinfrastructure' for collaborative science and engineering.This talk will review the elements of this vision and describe the present status of efforts to build such an internet-scale distributed infrastructure based on Web Services. The goal is to provide robust middleware components that will allow scientists and engineers to routinely construct the inter-organizational 'Virtual Organizations'. Given the present state of Web Services, we argue for the need to define such Virtual Organization 'Grid' services on well-established Web Service specifications that are widely supported by the IT industry. Only industry can provide the necessary tooling and development environments to enable widespread adoption of such Grid services. Extensions to these basic Grid services can be added as more Web Services mature and the research community has had the opportunity to experiment with new services providing potentially useful new functionalities. The new Cyberinfrastructure will be of relevance to more than just the research community: it will impact both the e-learning and digital library communities allow the creation of scientific 'mash-ups' of services giving significant added value.},
booktitle = {Proceedings of the 15th International Conference on World Wide Web},
pages = {245},
numpages = {1},
location = {Edinburgh, Scotland},
series = {WWW '06}
}

@inproceedings{10.1145/2016741.2016759,
author = {Furlani, Thomas R. and Jones, Matthew D. and Gallo, Steven M. and Bruno, Andrew E. and Lu, Charng-Da and Ghadersohi, Amin and Gentner, Ryan J. and Patra, Abani K. and DeLeon, Robert L. and von Laszewski, Gregor and Wang, Lizhe and Zimmerman, Ann},
title = {Performance metrics and auditing framework for high performance computer systems},
year = {2011},
isbn = {9781450308885},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2016741.2016759},
doi = {10.1145/2016741.2016759},
abstract = {This paper describes a comprehensive auditing framework, XDMoD, for use by high performance computing centers to readily provide metrics regarding resource utilization (CPU hours, job size, wait time, etc), resource performance, and the center's impact in terms of scholarship and research. This role-based auditing framework is designed to meet the following objectives: (1) provide the user community with an easy to use tool to oversee their allocations and optimize their use of resources, (2) provide staff with easy access to performance metrics and diagnostics to monitor and tune resource performance for the benefit of the users, (3) provide senior management with a tool to easily monitor utilization, user base, and performance of resources, and (4) help ensure that the resources are effectively enabling research and scholarship. XDMoD is initially focused on the NSF TeraGrid (TG) and follow-on XSEDE (XD) program, where it will become a key component of the TG/XSEDE User Portal. However, this auditing system is intended to have a general applicability to any HPC system or center.The XDMoD auditing system is architected using a set of modular components that facilitate the utilization of community contributed components information. It includes an active and reactive (as opposed to passive) service set accessible through a variety of endpoints such as web-based user interface, RESTful web services, and provided development tools. One component also provides a computationally lightweight and flexible application kernel auditing system that reflects best-in-class performance kernels to measure overall system performance with respect to existing applications that are actually being run by users. This allows continuous resource auditing to monitor all aspects of system performance, most critically from a completely user-centric point of view.},
booktitle = {Proceedings of the 2011 TeraGrid Conference: Extreme Digital Discovery},
articleno = {16},
numpages = {1},
location = {Salt Lake City, Utah},
series = {TG '11}
}

@article{10.1145/2517151,
author = {Gonina, Ekaterina and Friedland, Gerald and Battenberg, Eric and Koanantakool, Penporn and Driscoll, Michael and Georganas, Evangelos and Keutzer, Kurt},
title = {Scalable multimedia content analysis on parallel platforms using python},
year = {2014},
issue_date = {February 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {10},
number = {2},
issn = {1551-6857},
url = {https://doi.org/10.1145/2517151},
doi = {10.1145/2517151},
abstract = {In this new era dominated by consumer-produced media there is a high demand for web-scalable solutions to multimedia content analysis. A compelling approach to making applications scalable is to explicitly map their computation onto parallel platforms. However, developing efficient parallel implementations and fully utilizing the available resources remains a challenge due to the increased code complexity, limited portability and required low-level knowledge of the underlying hardware. In this article, we present PyCASP, a Python-based framework that automatically maps computation onto parallel platforms from Python application code to a variety of parallel platforms. PyCASP is designed using a systematic, pattern-oriented approach to offer a single software development environment for multimedia content analysis applications. Using PyCASP, applications can be prototyped in a couple hundred lines of Python code and automatically scale to modern parallel processors. Applications written with PyCASP are portable to a variety of parallel platforms and efficiently scale from a single desktop Graphics Processing Unit (GPU) to an entire cluster with a small change to application code. To illustrate our approach, we present three multimedia content analysis applications that use our framework: a state-of-the-art speaker diarization application, a content-based music recommendation system based on the Million Song Dataset, and a video event detection system for consumer-produced videos. We show that across this wide range of applications, our approach achieves the goal of automatic portability and scalability while at the same time allowing easy prototyping in a high-level language and efficient performance of low-level optimized code.},
journal = {ACM Trans. Multimedia Comput. Commun. Appl.},
month = {feb},
articleno = {18},
numpages = {22},
keywords = {rapid prototyping, parallelism, Multimedia content analysis, GPU}
}

@inproceedings{10.5555/3291291.3291308,
author = {Zhang, John and Verma, Anirudh and Sheth, Chinmay and Schankula, Christopher W. and Koehl, Stephanie and Kelly, Andrew and Irfan, Yumna and Anand, Christopher K.},
title = {Graphics programming in elm develops math knowledge &amp; social cohesion},
year = {2018},
publisher = {IBM Corp.},
address = {USA},
abstract = {At McMaster University, we have developed a framework for teaching computer science, including curricula and tools (iPad apps: Image 2 Bits and ElmJr; an open-source library GraphicSVG; and a web-based development environment). ElmJr is a projectional editor for Elm, with knowledge of our graphics library. Using ElmJr, children transform programs through contextual menus. As a result, they never see syntax or type errors. Children as young as 10 years old, who have just started learning about syntax in English, can be productive programmers. We will explain how ElmJr is designed to make programming simple for beginners, and how strong typing in Elm and our graphics library is key to making the list of program transformations manageable. We will explain the design and findings of a study of children in 14 classes (grade 4 and 5) in the Hamilton-Wentworth District School Board, who received 12 hours of instruction over eight weeks in ElmJr with the aim of improving their mathematics knowledge. In parallel, another eight grade 6 to 8 classes received at least two hours of instruction in Elm using our web-IDE, culminating in a Wordathon. The Wordathon is designed to reconcile the power of social computing with the need to protect children's privacy. The intermediate classes were challenged to create animations in Elm of assigned words identified by teachers as K-4 core reading vocabulary. Joining the intermediate students in this activity, two high school classes were taught how to create interactive applications in Elm and were challenged to create a reading game using the word animations created by the intermediate children. In all, four games incorporating 408 animations were created, and some of the intermediate students presented the games to primary grades in their schools. Unlike typical network effects, we get a multiplier effect: more word animations make game development more attractive, and more games make animations more attractive. Having a critical mass then attracts the attention of other educators, including in this case the team implementing the board-wide reading strategy. All of this can be accomplished without any identifying information leaving the classroom.},
booktitle = {Proceedings of the 28th Annual International Conference on Computer Science and Software Engineering},
pages = {157–167},
numpages = {11},
keywords = {social computing, projectional editor, math education, graphics programming, computational thinking, algebraic thinking},
location = {Markham, Ontario, Canada},
series = {CASCON '18}
}

@inproceedings{10.1145/3287324.3293750,
author = {Leelanupab, Teerapong and Meephruek, Tiwipab},
title = {CodeBuddy (Collaborative Software Development Environment): In- and Out-Class Practice for Remote Pair-Programming with Monitoring Coding Students' Progress},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293750},
doi = {10.1145/3287324.3293750},
abstract = {Pair-programming is an Agile technique in Extreme Programming (XP) where traditionally two programmers need to be collocated and work together at one workstation. Previous research has shown that pair-programming is very beneficial in software engineering education. However, learning and practicing pair-programming are mostly limited in a class where students can only learn to collaboratively program with another student in controlled or laboratory settings. Although nowadays there exist some collaborative tools, such as CodePilot, Google Colaboratory and Git, they are not specifically pair-programming-oriented. This impedes a pairing's ability to discuss effective strategies in problem solving, to form productive or mutually learning pairs, and to predict pair compatibility. To encourage students in out-class practice of pair-programming, we present a demonstration of a novel web-based software development environment, called CodeBuddy, for remote pair-programming. CodeBuddy provides instructors and students with several features for managing laboratory classes and practicing pair-programming. Examples of CodeBuddy's features include: coding screen mirroring between a pair, output terminal to show compiled results, face-to-face like communication channels (i.e., video calling and instant text messaging), automatic and manual role switching, code quality analysis for monitoring coding students' progress and recommending a pair with targeted pairing goals, implicit code reviews using face detection for tracking a reviewer's engagement, line-by-line code commenting, etc. The demonstration consists of a walkthrough of two use-case scenarios: an instructor assigns a problem-solving task and two students remotely work together in a pair using CodeBuddy on two different workstations to solve it.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1290},
numpages = {1},
keywords = {software engineering, remote collaboration and learning, pair programming, agile software development},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/2071639.2071645,
author = {Zhong, BaoRong and Du, Hong},
title = {Implementation on remote monitoring system of oil well},
year = {2011},
isbn = {9781450305679},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2071639.2071645},
doi = {10.1145/2071639.2071645},
abstract = {With the quick development of information and network technology, and wide use of Internet, building the information publish center in Web becomes the common demand from a great number of enterprises and customers. The production and management of modern enterprises rely heavily on the enterprise information integrated platform. The mass, important, sensitive data are gathered and stored. Making full use of these data becomes an extremely important link of the enterprise development.Engineers and technicians in oil field exploration and development have an excellent attention to the production information and working status of oil-pumping machine from oil well. The field information is an important basis of the productivity evaluation of single well, dynamic analysis of reservoir engineering in region, and production plan. Mud logging information will be recorded and transferred to research and management department timely, accurately, which directly related to progress and benefit of gas and oil production. Therefore, how to use the oil well information service system to provide reliable, timely information for the superior departments has been a priority of the agenda. Data visualization on the web becomes a new focus.By studying and analyzing the oilfield data collection and visualization, the oil well information service system narrated in this paper established a relative perfect including the function of oil well data collection, transmission, and browsing online, etc. Flex provides rich components for the client development in data visualization, and the business logic layer developed by J2EE technology, which is also a good choice. The paper designs an architecture which use Flex as the present layer development tools, Spring taking charge of developing the business logic layer and Hibernate realizing the data persistence layer. It has been found that this web application based on Flex and J2EE technologies not only can provide an excellent visual picture but also express the abundant user experience and perfect human-machine interaction. It also has the characters of good maintainability and expansibility resulted by the integration of Hibernate and Spring. This developing structure enhances the integration capabilities, optimizes the efficiency, meets the requirements of mud logging data which is large and fast growth, and processes the sophisticated business logic.},
booktitle = {Proceedings of the 2011 International Conference on Innovative Computing and Cloud Computing},
pages = {20–23},
numpages = {4},
keywords = {web graph publication, technical framework, oil well monitoring, data transmission},
location = {Wuhan, China},
series = {ICCC '11}
}

@inproceedings{10.5555/1599773.1599803,
author = {Shabo, Amnon and Nagel, Kris and Guzdial, Mark and Kolodner, Janet},
title = {JavaCAP: a collaborative case authoring program on the WWW},
year = {1997},
publisher = {International Society of the Learning Sciences},
abstract = {JavaCAP, a software tool for student authoring and searching of case libraries, has been implemented in support of the Learning-by-Design curriculum development project at Georgia Tech's EduTech Institute. Its case-authoring component, when used as part of the LBD curriculum, asks students to reflect on a recent Learning-by-Design experience, summarize it, and present important aspects of it and what they've learned from it for other students to learn from. By focusing on this part of the tool, we are able to both put our focus on supporting reflection and collect a library of student-authored cases that we will later edit and publish as exemplary cases for other students to use as models and to learn from.JavaCAP is meant to be used as a collaboration tool. Supporting collaboration in middle school requires supporting both group work around the computer (synchronous collaboration) and asynchronous editing of cases. We support asynchronous collaboration by allowing each student to write on the case and providing distinguishing formats for each so it is easy to see the changes made since last using the tool and identify whose changes they are.Our two studies suggest that JavaCAP does have potential as a collaborative reflection tool. We've used the metaphor of scenes in a play to help students remember different aspects of the experience they are analyzing and summarizing. Our first pilot showed that we had indeed found a way to engage students in effective reflection. However, this pilot also revealed flaws in the underlying technology. We needed to support asynchronous collaboration better than we were doing; the easiest way to do this was to reimplement using what the world wide web and its development tools had to offer. Our second pilot, using a revised tool both better supported asynchronous student authoring and made it easy for students to add images to their presentations. This study pointed out the need to better support writing itself within the framework we've created and suggests other collaboration features that students need.},
booktitle = {Proceedings of the 2nd International Conference on Computer Support for Collaborative Learning},
pages = {244–252},
numpages = {9},
keywords = {tools to support collaborative settings, science education, scaffolding, reflection, middle school, learning by design, case-based reasoning, case-based learning, LBD},
location = {Toronto, Ontario, Canada},
series = {CSCL '97}
}

@inproceedings{10.1145/3592813.3592929,
author = {Silva, Juci\^{e} Xavier and Lopes, Mikael and Avelino, Guilherme and Santos, Pedro},
title = {Low-code and No-code Technologies Adoption: A Gray Literature Review},
year = {2023},
isbn = {9798400707599},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3592813.3592929},
doi = {10.1145/3592813.3592929},
abstract = {Context: In the last years, the software demand has been growing fast. With the Covid-19 pandemic, companies were forced to adapt to remote work, accelerating the digitalization process. According to Gartner, the demand for software will increase five times faster than the capacity to supply them by the industry, as result of the shortage of developers. Seeking to reduce this problem, tools that abstract the programming complexity have emerged. These tools promote software development via graphical user interfaces and allow people without programming knowledge, or with little knowledge, to develop their own applications. Such tools are known as low-code and no-code tools. Problem: Although low-code and no-code tools have been gaining popularity, their benefits and limitations have not been adequately evaluated, including their impacts in terms of evolution, maintenance, and quality of the generated code. The absence of scientific works that investigate and evaluate the development and use of low-code and no-code tools is a gap that should be explored to improve such techniques. Solution: This paper presents a review of the gray literature of low-code and no-code development tools, investigating publications that discuss the topic aiming to better comprehend the challenges related to the use and development of these tools. IS Theory: The work was developed based on the Expectation Confirmation Theory. Especially, in the evaluation of expectations based on perceived performance, given the great expectation of significant productivity gains with the adoption of low-code and no-code technologies. Method: We conducted a systematic review of the gray literature through the selection and analysis of online posts on the subject, given the lack of scientific works on this topic. Results: The results demonstrate the existence of several low-code and no-code tools, covering different markets and purposes, such as web, mobile, and desktop development. The ease of use, resource savings, and fast prototyping were identified as the main benefits of these tools. On the other hand, platform dependency, limited functionality, and data security were mentioned as the main challenges. Contributions: The main contribution of this work is, through a gray literature review, to present a study of the state of the art of development and use of no-code and low-code tools, particularly their benefits and limitations.},
booktitle = {Proceedings of the XIX Brazilian Symposium on Information Systems},
pages = {388–395},
numpages = {8},
location = {<conf-loc>, <city>Macei\'{o}</city>, <country>Brazil</country>, </conf-loc>},
series = {SBSI '23}
}

@inproceedings{10.1145/3192366.3192370,
author = {Baxter, Samuel and Nigam, Rachit and Politz, Joe Gibbs and Krishnamurthi, Shriram and Guha, Arjun},
title = {Putting in all the stops: execution control for JavaScript},
year = {2018},
isbn = {9781450356985},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3192366.3192370},
doi = {10.1145/3192366.3192370},
abstract = {Scores of compilers produce JavaScript, enabling programmers to use many languages on the Web, reuse existing code, and even use Web IDEs. Unfortunately, most compilers inherit the browser's compromised execution model, so long-running programs freeze the browser tab, infinite loops crash IDEs, and so on. The few compilers that avoid these problems suffer poor performance and are difficult to engineer.  This paper presents Stopify, a source-to-source compiler that extends JavaScript with debugging abstractions and blocking operations, and easily integrates with existing compilers. We apply Stopify to ten programming languages and develop a Web IDE that supports stopping, single-stepping, breakpointing, and long-running computations. For nine languages, Stopify requires no or trivial compiler changes. For eight, our IDE is the first that provides these features. Two of our subject languages have compilers with similar features. Stopify's performance is competitive with these compilers and it makes them dramatically simpler.  Stopify's abstractions rely on first-class continuations, which it provides by compiling JavaScript to JavaScript. We also identify sub-languages of JavaScript that compilers implicitly use, and exploit these to improve performance. Finally, Stopify needs to repeatedly interrupt and resume program execution. We use a sampling-based technique to estimate program speed that outperforms other systems.},
booktitle = {Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {30–45},
numpages = {16},
keywords = {continuations, JavaScript, IDEs},
location = {Philadelphia, PA, USA},
series = {PLDI 2018}
}

@article{10.1145/1787234.1787269,
author = {Haines, Marc N. and Rothenberger, Marcus A.},
title = {How a service-oriented architecture may change the software development process},
year = {2010},
issue_date = {August 2010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {53},
number = {8},
issn = {0001-0782},
url = {https://doi.org/10.1145/1787234.1787269},
doi = {10.1145/1787234.1787269},
abstract = {IntroductionSoftware development practices have evolved substantially during the past decade. As so called "agile" approaches have gained more acceptance and applications have become progressively more distributed in terms of their physical execution and the development of components, the service-oriented approach to IT architecture has become an important alternative to traditional software development. Another impetus for the trend to a Service-Oriented Architecture (SOA) is provided by enterprise system vendors as they are incorporating the service-oriented paradigm into their products. Substantial efforts related to open standards (such as Web service standards) and open source products (such as open source enterprise service bus, development tools) are further driving a service-oriented approach for information systems.A key question is whether SOA adopters are going to be ready for this change and whether they can provide a technical and an organizational environment in which SOA-related technologies can be leveraged to their full potential. There is some indication that currently this may not be the case. In fact, some organizations that have embarked on SOA-related projects early have experienced disappointments. As with other technology waves, the important question is not whether SOA is inherently a good or a bad idea, but rather how it can be done right in a given context. This article tries to answer this question with respect to the software development process.While much of the literature, both in academia and industry, has focused on business implications of SOA, technological realization, architectural issues, and implementation guidelines, few publications have addressed the impact of SOA on the software development process and its methodology. As with any organizational change, modifications to software development processes or practices entail switching cost. Therefore, individuals as well as organizations are inclined to stay with "proven" methodologies, although adjustments based on task requirements and technology characteristics should be key drivers for the methodology choice and are needed to help adopters leverage the full potential of SOA.This article examines the differences and discusses which parts of development process and methodology may require adjustments to effectively leverage a SOA. It presents the results of a field study suggesting changes to software development practices that are necessary to accommodate the unique properties of the service-oriented approach.},
journal = {Commun. ACM},
month = {aug},
pages = {135–140},
numpages = {6}
}

@inproceedings{10.1145/2837476.2837478,
author = {Ullah, Faheem and Gross, Thomas R.},
title = {Profiling for detecting performance anomalies in concurrent software},
year = {2015},
isbn = {9781450339100},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2837476.2837478},
doi = {10.1145/2837476.2837478},
abstract = {Understanding and identifying performance problems is difficult for parallel applications, but is an essential part of software development for parallel systems. In addition to the same problems that exist when analysing sequential programs, software development tools for parallel systems must handle the large number of execution engines (cores) that result in different (possibly non-deterministic) schedules for different executions. Understanding where exactly a concurrent program spends its time (esp. if some aspects of the program paths depend on input data) is the first step towards improving program quality. State-of-the-art profilers, however, aid developers in performance diagnosis by providing hotness information at the level of a class or method (function) and usually report data for just a single program execution. This paper presents a profiling and analysis technique that consolidates execution information for multiple program executions. Currently, our tool's focus is on execution time (CPU cycles) but other metrics (stall cycles for functional units, cache miss rates, etc) are possible, provided such data can be obtained from the processor's monitoring unit. To detect the location of performance anomalies that are worth addressing, the average amount of time spent inside a code block, along with the statistical range of the minimum and maximum amount of time spent, is taken into account. The technique identifies performance bottlenecks at the fine-grained level of a basic block. It can indicate the probability of such a performance bottleneck appearing during actual program executions. The technique utilises profiling information across a range of inputs and tries to induce performance bottlenecks by delaying random memory accesses. The approach is evaluated by performing experiments on the data compression tool pbzip2, the multi-threaded download accelerator axel, the open source security scanner Nmap and Apache httpd web server. An experimental evaluation shows the tool to be effective in detecting performance bottlenecks at the level of a basic block. Modifications in the block that is identified by the tool result in performance improvement of over 2.6x in one case, compared to the original version of the program. The performance overhead incurred by the tool is a reasonable 2-7x in majority of the cases.},
booktitle = {Proceedings of the 2nd International Workshop on Software Engineering for Parallel Systems},
pages = {11–20},
numpages = {10},
keywords = {Software defects, Profiling, Performance bugs, Parallel programming, Measurement, Localisation, Dynamic binary instrumentation},
location = {Pittsburgh, PA, USA},
series = {SEPS 2015}
}

@article{10.1145/3517131,
author = {Lu, Alec and Fang, Zhenman and Shannon, Lesley},
title = {Demystifying the Soft and Hardened Memory Systems of Modern FPGAs for Software Programmers through Microbenchmarking},
year = {2022},
issue_date = {December 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {15},
number = {4},
issn = {1936-7406},
url = {https://doi.org/10.1145/3517131},
doi = {10.1145/3517131},
abstract = {Both modern datacenter and embedded Field Programmable Gate Arrays (FPGAs) provide great opportunities for high-performance and high-energy-efficiency computing. With the growing public availability of FPGAs from major cloud service providers such as AWS, Alibaba, and Nimbix, as well as uniform hardware accelerator development tools (such as Xilinx Vitis and Intel oneAPI) for software programmers, hardware and software developers can now easily access FPGA platforms. However, it is nontrivial to develop efficient FPGA accelerators, especially for software programmers who use high-level synthesis (HLS).The major goal of this article is to figure out how to efficiently access the memory system of modern datacenter and embedded FPGAs in HLS-based accelerator designs. This is especially important for memory-bound applications; for example, a naive accelerator design only utilizes less than 5% of the available off-chip memory bandwidth. To achieve our goal, we first identify a comprehensive set of factors that affect the memory bandwidth, including (1) the clock frequency of the accelerator design, (2) the number of concurrent memory access ports, (3) the data width of each port, (4) the maximum burst access length for each port, and (5) the size of consecutive data accesses. Then, we carefully design a set of HLS-based microbenchmarks to quantitatively evaluate the performance of the memory systems of datacenter FPGAs (Xilinx Alveo U200 and U280) and embedded FPGA (Xilinx ZCU104) when changing those affecting factors, and we provide insights into efficient memory access in HLS-based accelerator designs. Comparing between the typically used soft and hardened memory systems, respectively, found on datacenter and embedded FPGAs, we further summarize their unique features and discuss the effective approaches to leverage these systems. To demonstrate the usefulness of our insights, we also conduct two case studies to accelerate the widely used K-nearest neighbors (KNN) and sparse matrix-vector multiplication (SpMV) algorithms on datacenter FPGAs with a soft (and thus more flexible) memory system. Compared to the baseline designs, optimized designs leveraging our insights achieve about  ( 3.5times )  and  ( 8.5times )  speedups for the KNN and SpMV accelerators. Our final optimized KNN and SpMV designs on a Xilinx Alveo U200 FPGA fully utilize its off-chip memory bandwidth, and achieve about  ( 5.6times )  and  ( 3.4times )  speedups over the 24-core CPU implementations.},
journal = {ACM Trans. Reconfigurable Technol. Syst.},
month = {jun},
articleno = {43},
numpages = {33},
keywords = {benchmarking, HLS, memory system, embedded FPGAs, Datacenter FPGAs}
}

@article{10.1145/3555810,
author = {Kalantar, Amin and Zimmerman, Zachary and Brisk, Philip},
title = {FPGA-based Acceleration of Time Series Similarity Prediction: From Cloud to Edge},
year = {2022},
issue_date = {March 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {16},
number = {1},
issn = {1936-7406},
url = {https://doi.org/10.1145/3555810},
doi = {10.1145/3555810},
abstract = {With the proliferation of low-cost sensors and the Internet of Things, the rate of producing data far exceeds the compute and storage capabilities of today’s infrastructure. Much of this data takes the form of time series, and in response, there has been increasing interest in the creation of time series archives in the past decade, along with the development and deployment of novel analysis methods to process the data. The general strategy has been to apply a plurality of similarity search mechanisms to various subsets and subsequences of time series data to identify repeated patterns and anomalies; however, the computational demands of these approaches renders them incompatible with today’s power-constrained embedded CPUs.To address this challenge, we present FA-LAMP, an FPGA-accelerated implementation of the Learned Approximate Matrix Profile (LAMP) algorithm, which predicts the correlation between streaming data sampled in real-time and a representative time series dataset used for training. FA-LAMP lends itself as a real-time solution for time series analysis problems such as classification. We present the implementation of FA-LAMP on both edge- and cloud-based prototypes. On the edge devices, FA-LAMP integrates accelerated computation as close as possible to IoT sensors, thereby eliminating the need to transmit and store data in the cloud for posterior analysis. On the cloud-based accelerators, FA-LAMP can execute multiple LAMP models on the same board, allowing simultaneous processing of incoming data from multiple data sources across a network.LAMP employs a Convolutional Neural Network (CNN) for prediction. This work investigates the challenges and limitations of deploying CNNs on FPGAs using the Xilinx Deep Learning Processor Unit (DPU) and the Vitis AI development environment. We expose several technical limitations of the DPU, while providing a mechanism to overcome them by attaching custom IP block accelerators to the architecture. We evaluate FA-LAMP using a low-cost Xilinx Ultra96-V2 FPGA as well as a cloud-based Xilinx Alveo U280 accelerator card and measure their performance against a prototypical LAMP deployment running on a Raspberry Pi 3, an Edge TPU, a GPU, a desktop CPU, and a server-class CPU. In the edge scenario, the Ultra96-V2 FPGA improved performance and energy consumption compared to the Raspberry Pi; in the cloud scenario, the server CPU and GPU outperformed the Alveo U280 accelerator card, while the desktop CPU achieved comparable performance; however, the Alveo card offered an order of magnitude lower energy consumption compared to the other four platforms. Our implementation is publicly available at https://github.com/aminiok1/lamp-alveo.},
journal = {ACM Trans. Reconfigurable Technol. Syst.},
month = {dec},
articleno = {12},
numpages = {27},
keywords = {Matrix Profile, time series, Field-programmable gate array (FPGA)}
}

@inproceedings{10.1145/3352740.3352755,
author = {Duan, Wei and Chen, Haiyan},
title = {Development and Application of Online Tourism English Teaching Platform},
year = {2019},
isbn = {9781450372053},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3352740.3352755},
doi = {10.1145/3352740.3352755},
abstract = {In the age of Internet+, the integration of information technology and vocational English course teaching is bound to bring about the reformation of ESP teaching. On the basis of introducing the main idea of "flipped classroom" teaching model reform in tourism English course, this paper mainly discusses the development and application of online tourism English teaching platform including the designing goals, framework, modules, and database design of the platform. It has been found that the tourism English teaching platform designed in this paper can offer effective learning scaffolding to college students majoring in tourism and tourism practitioners, meeting their needs of learning and practicing at anytime and anywhere. At the same time, teachers can handle the learning progress and quality of students so as to realize the "flipped classroom" teaching model of tourism English course.Under the background of the development of digital technology, CG (Compute Graphics) digital painting is an artistic form of expression that closely combines painting art with digital technology. CG painting digitally transforms two-dimensional or three-dimensional graphics into digital graphics by means of mathematical algorithms. Painting works can be widely used in animation, film and television, games, visual communication design and other fields. The main purpose of the design and development of teaching system is to construct a teaching support system that can meet the requirements. This research takes Python as the development environment, adopts the four-tier software framework of object-oriented program design, including application-level knowledge point modeling, communication-level curriculum application management, resource-level management design, user-level UI design and other modules.The core issues to be solved include the establishment of teaching environment, the presentation and editing of knowledge point framework modeling, the establishment of pre-basic skills and learning objectives, and then the establishment of the teaching department. The application of the system has been tentatively studied. Finally, five indicators, including student experience, learning process satisfaction, teaching effect evaluation, teaching time-consuming comparison and teaching effect, are selected to verify the effectiveness of teaching supported by the experimental teaching system of CG digital painting course. The experimental results show the superiority of the experimental teaching system proposed in this paper.},
booktitle = {Proceedings of the 2019 3rd International Workshop on Education, Big Data and Information Technology},
pages = {87–92},
numpages = {6},
keywords = {Tourism English, The development of online teaching platform, "Flipped classroom" teaching model},
location = {Guilin, China},
series = {EBDIT 2019}
}

@inproceedings{10.1145/2839509.2850540,
author = {Ford, Corey and Staley, Clinton},
title = {Automated Analysis of Student Programmer Coding Behavior Patterns (Abstract Only)},
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2850540},
doi = {10.1145/2839509.2850540},
abstract = {Important information regarding the learning experience and relative preparedness of Computer Science students can be obtained by analyzing their coding activity at a fine-grained level, using an online IDE that records student code editing, compiling, and testing activities down to the individual keystroke. We report results from analyses of student coding patterns using such an online IDE. In particular, we gather data from a group of students performing an assigned programming lab, using the online IDE indicated to gather statistics. We extract high-level statistics from the student data, and apply supervised learning techniques to identify those that are the most salient prediction of student success as measured by later performance in the class. We use these results to make predictions of course performance for another student group, and report on the reliability of those predictions},
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
pages = {688},
numpages = {1},
keywords = {online ide, learning analytics, educational data mining, coding, automated evaluation},
location = {Memphis, Tennessee, USA},
series = {SIGCSE '16}
}

@inproceedings{10.1145/3441636.3442313,
author = {Abu Deeb, Fatima and Hickey, Timothy},
title = {Reflective Debugging in Spinoza V3.0},
year = {2021},
isbn = {9781450389761},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3441636.3442313},
doi = {10.1145/3441636.3442313},
abstract = {In this paper we present an online IDE (Spinoza 3.0) for teaching Python programming in which the students are (sometimes) required to verbally reflect on their error messages and unit test failures before being allowed to modify their code. This system was designed to be used in large synchronous in-person, remote, or hybrid classes for either in-class problem solving or out-of-class homework problems. For each student and problem, the system makes a random choice about whether to require reflection on all debugging steps. If the student/problem pair required reflection, then after each time the student ran the program and received feedback as an error message or a set of unit test results, they were required to type in a description of the bug and a plan for how to modify the program to eliminate the bug. The main result is that the number of debugging steps to reach a correct solution was statistically significantly less for problems where the students were required to reflect on each debugging step. We suggest that future developers of pedagogical IDEs consider adding features which require students to reflect frequently during the debugging process.},
booktitle = {Proceedings of the 23rd Australasian Computing Education Conference},
pages = {125–130},
numpages = {6},
keywords = {reflective debugging, online IDE, novice programmers, learning analytics, introductory programming classes, Spinoza},
location = {<conf-loc>, <city>Virtual</city>, <state>SA</state>, <country>Australia</country>, </conf-loc>},
series = {ACE '21}
}

@inproceedings{10.1145/2997364.2997368,
author = {Keidel, Sven and Pfeiffer, Wulf and Erdweg, Sebastian},
title = {The IDE portability problem and its solution in Monto},
year = {2016},
isbn = {9781450344470},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2997364.2997368},
doi = {10.1145/2997364.2997368},
abstract = {Modern IDEs support multiple programming languages via plug-ins, but developing a high-quality language plug-in is a huge development effort and individual plug-ins are not reusable in other IDEs. We call this the IDE portability problem.  In this paper, we present a solution to the IDE portability problem based on a language-independent and IDE-independent intermediate representation (IR) for editor-service products. This IR enables IDE-independent language services to provide editor services for arbitrary IDEs, using language-independent IDE plug-ins. We combine the IR with a service-oriented architecture to facilitate the modular addition of language services, the decomposition of language services into smaller interdependent services, and the use of arbitrary implementation languages for services.  To evaluate the feasibility of our design, we have implemented the IR and architecture in a framework called Monto. We demonstrate the generality of our design by constructing language services for Java, JavaScript, Python, and Haskell and show that they are reusable in the Eclipse IDE and in a web-based IDE. We also evaluate the performance of Monto and show that Monto is responsive and has admissible performance overhead.},
booktitle = {Proceedings of the 2016 ACM SIGPLAN International Conference on Software Language Engineering},
pages = {152–162},
numpages = {11},
keywords = {reusable software, integrated development environments},
location = {Amsterdam, Netherlands},
series = {SLE 2016}
}

@article{10.1145/291712.295792,
author = {Hendrix, T. Dean and Cross, James H. and Teate, Joe C. and Barowski, Larry A. and Mathias, Karl S.},
title = {Assessing GRASP utilization through instrumentation},
year = {1998},
issue_date = {Sept./Oct. 1998},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {XVIII},
number = {5},
issn = {1094-3641},
url = {https://doi.org/10.1145/291712.295792},
doi = {10.1145/291712.295792},
abstract = {The idea that representing something visually can help us understand it has long been promoted in common practice and in the literature [1,2,3,4,5,6]. Indeed, "a picture is worth a thousand words" has become a standard cliché in our culture. In the case of software, however, one must take great care that it is the correct thousand words that are being conveyed [5]. Nonetheless, appropriate visualizations of software can be quite beneficial to programmers, especially when faced with program comprehension tasks. Such tasks exist throughout the software life cycle (e.g., formal technical reviews, debugging, verification, reverse engineering) and in the classroom (e.g., students reading examples from the text or examples from the professor).The GRASP (Graphical Representations of Algorithms, Structures, and Processes) research project at Auburn University seeks to develop tools and techniques for the effective use of graphical representations and visualizations of software. The overall goal of this research is to increase the efficiency of programmer comprehension and understanding of source code, and thereby decrease overall software cost. As an integral part of the research project, the GRASP software engineering tool has been developed as a continuously evolving prototype. The emphasis of the tool to this point has been on visualizing program structure and complexity via the automatic generation of Control Structure Diagrams (CSDs) and Complexity Profile Graphs (CPGs) from Ada source code [7]. The current release of GRASP provides generation of CSDs and CPGs together with other program comprehension aids such as syntax coloring, typographical enhancements, and source code folding [8]. When coupled with an appropriate compilation system such as GNAT, GRASP becomes an integrated graphical development environment for Ada 95, allowing users to edit, visualize, pretty-print, compile, link, execute and debug Ada software.The GRASP prototype for Ada was first made available to the public in January 1996. Since that time, thousands of copies of GRASP have been downloaded via anonymous file transfer protocol (FTP) and the World Wide Web (WWW) from educational, government, military and commercial sites, both in the United States and abroad. When it was released to the public, GRASP was also made available to users of the Auburn University College of Engineering computer network. GRASP is now used extensively throughout the computer science and engineering curriculum at Auburn University, in approximately three to five courses per quarter.},
journal = {Ada Lett.},
month = {sep},
pages = {51–56},
numpages = {6}
}

@inproceedings{10.1145/3383583.3398624,
author = {Tuttle, James and Chen, Yinlin and Jiang, Tingting and Hunter, Lee and Waldren, Andrea and Ghosh, Soumik and Ingram, William A.},
title = {Multi-tenancy Cloud Access and Preservation: Virginia Tech Digital Libraries Platform},
year = {2020},
isbn = {9781450375856},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3383583.3398624},
doi = {10.1145/3383583.3398624},
abstract = {Virginia Tech Libraries has developed a cloud-native, microservervices-based digital libraries platform to consolidate diverse access and preservation infrastructure into a set of flexible, independent microservices in Amazon Web Services. We have been an implementer and contributor to various community digital library and repository projects including DSpace, Fedora, and Samvera3. However, the complexity and cost of maintaining disparate application stacks have reduced our capacity to build new infrastructure. Virginia Tech has a long history of participation in and contribution to community-driven Open Source projects and has, in that time, developed more than a dozen independent applications architected on these stacks. The cost of independently addressing vulnerabilities, which often requires work to mitigate incompatibilities; reworking each application to comply with developing branding guidelines; and feature development and improvement has burgeoned, threatening to overwhelm our capacity. Like many of our peers5, our maintenance obligations have made continued growth unsustainable and have pushed older applications to near abandonware. We have designed and developed the Digital Libraries Platform to address these concerns thus reducing our maintenance obligations and costs associated with feature development across digital libraries. This approach represents a departure from the monolithic architectures of our legacy systems and, as such, shares more infrastructure among individual digital library implementations. The shared infrastructure facilitates rapid inclusion of new and improved features into each digital library instance. New features can be developed independent of any digital library instance and integrated into that instance by inclusion of that feature in the React/Amplify template. Changes to the template super class, such as those necessitated by evolving branding guidelines, may be immediately inherited by the template instances that subscribe to it. The platform implements Terraform6 deployment templates, Lambda serverless functions, and other cloud assets to form a microservices architecture on which multiple template-based sites are built. Individual sites are configured in AWS DynamoDB, Amazon's NoSQL database service, and via modification of shared template. Additional services provide digital preservation support including auditing, file fixity validation, replication to external cloud storage providers, file format characterization, and deposit to third-party preservation services. This presentation also discusses the cost of operating these services in AWS and strategies for mitigating those costs. These strategies include containerization to allow deployment of high-cost, asynchronous services to local infrastructure to take full advantage of existing infrastructure and advantageous utility pricing while allowing for local redeployment. In the past, developers worked in local, independent environments. New features and fixes were submitted to a central development environment testing and validation, which significantly slowed development. Migrating development, review, integration, and deployment processes to AWS decreased the time and resource bottlenecks for those processes. Our AWS cost accounting demonstrates an 87% savings over our traditional, on-premises Fedora/Samvera approach For a team of four software developers, the total cost using a traditional server-based (a t2-medium EC2 instance) development approach is about $133 per month versus our serverless-based development approach using AWS Amplify at an average of $17 per month. As the Digital Libraries Platform project expands, we anticipate publishing a set of API documents allowing us and others to reimplement specific microservices independent of the architecture.},
booktitle = {Proceedings of the ACM/IEEE Joint Conference on Digital Libraries in 2020},
pages = {557–558},
numpages = {2},
keywords = {microservice, digital preservation, digital libraries, cloud computing},
location = {Virtual Event, China},
series = {JCDL '20}
}

@inproceedings{10.5555/2399776.2399805,
author = {Bist, Gary},
title = {Business process management (BPM) in a day},
year = {2012},
publisher = {IBM Corp.},
address = {USA},
abstract = {Collaboration is the key to agility today; make the most of all of your resources. In the business process management software market, those resources are typically business users and technical users. The business user is focused on optimizing the flow of a business process. Technical users, who are typically developers, are interested in optimizing and automating tasks in the business process with applications.This hands-on workshop showed attendees how to develop business processes rapidly as a business user such as a business analyst and how to use tools to implement services needed by the same business process as a technical user. A key aspect of modern business is the emergence of standards, which allow corporations to create platform independent and vendor neutral business solutions. The workshop began with an overview of some standards like the Business Process Modeling Notation (BPMN) used to design processes. The Web Services Description Language (WSDL) was presented as the one to create interoperable services. The Business Process Execution Language (BPEL) was shown as the means to create standard business processes. Similarly, service oriented architecture (SOA) was described as the backbone to these standards.As explained, these standards come built in when a user works with the Business Process Manager tools. In other words, when someone builds a business process with the tools in the product, the output generated already conforms to these industry standards. The participants examined the three layers of a process: business integration, services and implementation. The separation of a business process in the business integration layer from its implementation is the key to understanding the portability of business processes. It also explains how services which comprise a business process can interact even though they are implemented in a variety of languages and run on a variety of servers in a variety of locations.While the focus of the workshop surrounds technology, the financial forces driving the move to business process management software were presented as well. Businesses must operate at optimal efficiency, must automate processes wherever possible, and be wary of the financial implications if software is not vendor and platform neutral. Interoperability and scalability may sound like technical terms, but as this workshop showed, business needs are what drive technologies like business process management. Putting everything together, the workshop participants were told of Johansson's definition of a business process: A set of linked activities that take an input and transform it to create an output. Ideally, the transformation that occurs in the process should add value to the input and create an output that is more useful and effective to the recipient either upstream or downstream.The first exercise showed CASCON participants how to rapidly create a business process using Process Designer. This visual tool made outlining a sequence of services fast and easy by setting up conditions when business process may go one way or another depending on runtime events. A process application was defined in the Process Center. A process application is like a project container for business processes; participants had to think through some design issues. Business processes can get big and complex quickly. Thus, design decisions are important as poor ones will lead to usability and performance problems. Participants learned to assemble activities before the implementation and add decision points where a business process might change at run time. They learned to wire the services together and added variables to pass data around the business process. They learned how to develop a service top down: defining it in Process Designer and then, as an IT person might, implement the service in another tool, Integration Designer. The service was an Advanced Integration Service, a service that has its design in Process Designer and its implementation in another component, Integration Designer.Furthermore, participants also spent time with the Coach, an assistant that helps users design effective user interfaces. The test tool known as the Inspector was used to test the CASCON participants' partially completed business process. Once tested, they learned how to version a business process by taking a snapshot. A snapshot captures the state of a business process at a point in time.In the next part of the workshop, participants were told how to reuse services they already had; this is known as a bottom up approach. Key concepts like using association were discussed. Association means connecting your existing application with the business process. Additionally, library mirroring was discussed. With library mirroring, one can push already written programs into a business process shared by different development environments. Once the library is updated, the changes to that library are made available to both Process Designer and Integration Designer. Workshop participants were shown how to make interfaces in their existing applications in Integration Developer visible using library mirroring to the Process Designer user. Finally, the participants put these ideas to work in the second exercise and tested it again with the Inspector, where a snapshot was taken.In the next lecture and final exercise, CASCON participants learned about bindings, imports, exports and mediations - important ideas to know when developing sophisticated business processes that work with a variety of external systems resulting in the need to handle different data formats dynamically. This exercise had the CASCON participants working with complex types, which are a common way of passing structured XML data objects. Complex types are also called business objects. In a section on mediation, they used Integration Designer's mapper to map one kind of data element in one system to another kind of data element from another system. They also used Business Process Manager's mediation editor to handle faults, as failures in a system can happen at any time. If a failure does occur, a message needs to be returned to the business process immediately. The Inspector was used again to test the complete business process. The user interface that CASCON participants developed included a generated email note that made use of information found in the business objects. Another snapshot of their work was taken.The workshop concluded with a presentation on some things missed, such as adapters, messaging systems, monitoring and debugging, as well as a recap of the day's work. A list of helpful books and articles on this rapidly growing area were provided.The participants used Business Process Manager Advanced 8.0. This all-inclusive development environment used Process Designer, a design tool; Integration Designer, a tool to build sophisticated services; and the Process Center, an easy-to-use test and runtime environment.},
booktitle = {Proceedings of the 2012 Conference of the Center for Advanced Studies on Collaborative Research},
pages = {246–247},
numpages = {2},
location = {Toronto, Ontario, Canada},
series = {CASCON '12}
}

@inproceedings{10.1145/1007568.1007674,
author = {Mihic, Matthew},
title = {Building dynamic application networks with Web Services},
year = {2004},
isbn = {1581138598},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1007568.1007674},
doi = {10.1145/1007568.1007674},
abstract = {Looking at the state of the industry today, it is clear that we are in the early stages of Web Services development. Companies are still evaluating what the technology and considering how to apply it to their business. But over the past year, we seem to have reached an inflection point of companies building real systems based on Web Services. Partly this reflects an acceptance that the basic Web Services technologies - XML Schema [1][2], SOAP [3], WSDL [4] - have matured to the point where they can be used for mission critical applications. But it also reflects a growing understanding that Web Services enable a large class of systems that were previously very difficult to build. These systems are characterized by several critical properties:1. Rapid rates of change. The time is long past when companies could afford a year-long-effort to build out a new application. Businesses move at a faster pace today then ever before, and they are increasingly under pressure to do more work with fewer resources. This places a premium on the ability to build applications by quickly composing pre-existing services. The result is that systems are being connected in ways that were never imagined during development. This is reuse in the large - not just small services, but entire applications being linked together to solve a complex business function.2. Significant availability and scalability requirements. Many of these systems are "bet-your-business" types of applications. They have heavy scalability and availability requirements. Often then need to connect multiple partners and service hundreds of thousands of updates in a day, without ever suffering an interruption in service.3. Heterogeneous development tools and software platforms. Each of these applications typically involves components built using a wildly diverse set of tools, operating systems, and software platforms. Partly this is a result of building systems out of existing components - many of these components are locked into certain environments, and there are no resources to rewrite or migrate to a single homogenous platform. But it is also recognition that different problems are best solved by different toolsets. Some problems are best solved by writing code on an application server, others are best suited for scripting, and still others are solved by customizing an existing enterprise application. Heterogeneity is not going away. It is only increasing.4. Multiple domains of administrative control. An aspect of heterogeneity that is often overlooked is distributed ownership. As businesses merge, acquire, and partner with other companies, there is an increasing need to build applications that span organizational boundaries.These characteristics present a unique set of challenges to the way we think about developing, describing, connecting, and configuring applications. The challenges require us to develop new ways of looking at what it takes to build an application, and what makes up a network.In this session, we examine the nature of this next generation of application, and discuss the way in which Web Services are evolving to meet their needs. The session focuses on the development techniques that allow services to be easily and dynamically composed into rich applications, and considers the capabilities required of the underlying network fabric. The session concludes with an in-depth look at some of the critical Web Services specifications actively under development by industry leaders.},
booktitle = {Proceedings of the 2004 ACM SIGMOD International Conference on Management of Data},
pages = {878},
numpages = {1},
location = {Paris, France},
series = {SIGMOD '04}
}

@inproceedings{10.5555/3370272.3370324,
author = {Ahmed, Imtihan and House, Rachael and Deilma, Neil and Luo, Li},
title = {Custom visual recognition model with Watson studio},
year = {2019},
publisher = {IBM Corp.},
address = {USA},
abstract = {The explosive growth of cameras, image sensors, and computer vision as a discipline of Artificial Intelligence (AI) has garnered strong interest from researchers, developers, businesses and consumers. Image classification refers to a process to classify an image according to a model and match it to a set of classes or categories. Object detection is similar to image classification, which is a process to classify, locate and count multiple objects in an image and their respective locations within the image. Object tracking involves using object detection in each frame of a video to track the desired object through a series of image frames or video [1]. There are a number of use cases for computer vision including face recognition for application or device security, automatically counting and classifying items on a production line, and monitoring and responding to traffic conditions on busy road sections.Computer vision seeks to understand information in digital images through processing and analyzing digital images. This understanding is achieved through extracting high dimension data from images and processing them to produce usable information. Practical applications of computer vision in the context of machine learning include classification, segmentation, and tracking [2].IBM Watson Studio (https://www.ibm.com/watson) is IBM's suite of enterprise-ready AI services, applications and tooling. As a service on IBM Cloud, IBM Watson Visual Recognition uses deep learning algorithms to analyze images for scenes, faces, and objects. This service provides built-in models and can also be used to create and train custom models for specific needs. Watson Studio provides a collaborative platform on top of IBM Cloud's cloud computing capabilities to use existing models or train and deploy new models with minimal coding. Watson Studio has the added capability of setting up custom environments and Notebooks, allowing quick, cloud-enabled development machines that can scale as your projects scale.IBM PowerAI Vision (https://www.ibm.com/caen/marketplace/ibm-powerai-vision) is a Graphics Processing Unit (GPU) accelerated visual recognition solution running on IBM Power Systems. PowerAI Vision (https://www.ibm.com/caen/marketplace/ibm-powerai-vision) puts data science in the hands of subject matter experts. This tool simplifies building machine learning models with IBM Power Systems. As a result, users can build models and deploy them to the web without coding. The models can be accessed through an Application Program Interface (API). On the other hand, users can call the API from their own applications with a few lines of code.IBM provides developers free, open source, state-of-the-art assets for deep learning through the Model Asset Exchange (MAX) (https://developer.ibm.com/exchanges/models/) on IBM Developer. In the repository developers can find both assets for training deep learning models and pre-trained models to use in their projects.The first half of this workshop will focus on exploring the Watson Visual Recognition and Watson Machine Learning Services in IBM Cloud. We will begin by building and deploying a model on Watson Visual Recognition. We will focus on the key benefits of the service, including the ability of anyone with minimal coding experience to be able to train and deploy a computer vision model to the cloud. We will then demonstrate how easy it can be to integrate the model in any web-enabled application through a demo web application. Once this has been completed, we will give a soft introduction to Watson Machine Learning, including how to choose development environments, setting up a Jupyter notebook (https://jupyter.org/), and go over some prepared code snippets to train and analyze a model fully on the cloud. [We will then demonstrate how we can export the model and use it in our applications.In the second half of the workshop, we will demonstrate detecting and labeling objects within an image using PowerAI Vision object detection (https://github.com/IBM/powerai-vision-object-detection), based on customized training. Instead of writing code to train, deploy, and test the new model, we will only need to upload the images, and label the objects in the provided application. Once the model is deployed, we will use the PowerAI Vision user interface (UI) to test it. We will also use our application as a Representational State Transfer (REST) client to locate and count objects in an image using the provided REST API endpoint. At the end of the workshop we will briefly introduce Model Asset Exchange, we will demonstrate how to find a visual recognition model on MAX, deploy it as a microservice and test it.In summary, we will introduce some visual recognition services provided by IBM in this workshop. We together will develop an image classification model using Watson Visual Recognition service with Watson Studio. We also consume a visual recognition service from a client side. Then we discuss the features of PowerAI Vision and demonstrate object detection in PowerAI Vision. Finally, we introduce Model Asset Exchange.},
booktitle = {Proceedings of the 29th Annual International Conference on Computer Science and Software Engineering},
pages = {376–377},
numpages = {2},
keywords = {watson studio, visual recognition, powerai vision, model asset exchange, machine learning, deep learning, artificial intelligence, IBM cloud, IBM Watson visual recognition},
location = {Toronto, Ontario, Canada},
series = {CASCON '19}
}

@inproceedings{10.1145/1408800.1408914,
author = {Wasserman, Anthony I.},
title = {Psychological factors in information system design},
year = {1974},
isbn = {9781450378505},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1408800.1408914},
doi = {10.1145/1408800.1408914},
abstract = {Over the past few years, there has been a significant increase in online usage of computer systems as the result of sharp reductions in the cost of computer hardware, improved technology for data communications and mass storage, and the availability of sophisticated operating systems, program development tools, and interactive applications software. This increase in the quantity of interactive programs is producing a growing number of non-programming users who are using conversational computer systems. These users have information system needs which are quite different from those of programmers.The eventual acceptance of such an information system into routine usage is often dependent upon a number of psychological and related non-technical issues, rather than upon the mechanical aspects of the system. Failure to consider these essential psychological issues will often produce an information system which will be rejected by those for whom it was designed and developed. These factors which affect user attitudes include the general predisposition of the user toward the computer, the process by which the system development and introduction was undertaken, and the operational characteristics of the system. Within these broad categories, a number of more specific items may be listed, including:1) Predispositiona) Nature of the organization--some groups of users are more willing to accept computer technologyb) Perceived threat--computers can represent an ego threat by appearing to perform a job better than a human can or an economic threat by appearing to be intended to replace humans in their jobsc) Individual "mind set"--willingness to adapt to new computerized working environment with possible associated changes in job function2) System development and introduction processa) User involvement in design process--users must be participants at all levels and stages of information system development or selection rather than having a system imposed upon themb) User training--users must be provided with adequate introductory and reference documentation, personal instruction, and possible online assistancec) First impression of running system--a first impression tends to be a lasting impression, so an information system should be usable and reliable from the beginning although changes are being made in response to user comments and experience3) Operational characteristicsa) Reliability--system must be available whenever needed, programs and operating environment must be error-free, and data must be secureb) Terminal characteristics--appropriate choice must be made for keyboard vs. non-keyboard devices, hard copy vs. soft copy, impact vs. non-impact terminal, the noise factor, and the rate of outputc) General ease of use--users desire a minimum of dialogue with the system software, need a method for correcting errors before it affects previous work, and prefer systems which can be learned easily and quicklyd) Nature and "personality" of interaction--conversational programs can be rigid or forgiving, employ technical or informal terminology, provide differing features for experienced and non-experienced users, and try to correct simple errors or merely produce diagnostic messagese) Response time--both speed and variability of response time are important issues in user psychologyThese factors vary widely among individuals and organizations, thereby making it difficult to provide definitive guidelines for handling these psychological issues. Furthermore, existing capabilities in operating systems and programming languages often make it difficult to incorporate all of the most desirable features for conversational system design without considerable added effort during system development and additional overhead during program execution. There is a great need to obtain better understanding of the psychological considerations of information system design and to create programming systems and languages which can accommodate these needs.},
booktitle = {Proceedings of the 1974 Annual ACM Conference - Volume 2},
pages = {743},
numpages = {1},
series = {ACM '74}
}

@inproceedings{10.5555/2093889.2093953,
author = {Farshi, Siamack Jabbarzadeh},
title = {Portlet development with spring portlet MVC and WebSphere portal V7},
year = {2011},
publisher = {IBM Corp.},
address = {USA},
abstract = {Motivation and JustificationIBM WebSphere Portal is an industry leading Portal solution that is ranked as worldwide market share leader in the Portal products and user interaction tools enterprise software segment. Built upon enterprise-class WebSphere software, with added administrative and scalability features, It contains the widest range of portal technologies that help you develop and maintain first-class B2C, B2B and B2E portals and offers a complete set of portal services necessary to aggregate applications and content, such as:• Advanced usability features, as such drag &amp; drop customizations and semantic tags that enable smart mark-ups and dynamic menus• Advanced tooling needed to build flexible, SOA-based solutions with unmatched scalability required by any size organization.• A "one click" site management application featuring rollback and versioning capabilities to simplify moving portals from staging to production• A Page Builder that simplifies page creation, making it easy for business users to create pages and add content to pages• A site wizard that allows users to create and deploy independent virtual portals• A Template Page capability that speeds page creation by allowing portal pages to act as templates when creating other new portal pages• A Web application integrator that enables you to easily embed existing Web applications into your portals• Blog and Wiki capabilities supported via out-of-box content templates, making it easy to add popular social capabilities• Enhanced tagging and rating within the Page Builder theme, allowing users to easily organize and evaluate content without leaving the page they are viewing• Flexible access to existing enterprise data and applications, as well as to external news feeds or Web data• Unified user experience in which information and functions made available to each user can be customized based on the user or a role that the user has• Support for the Java Portlet 2.0 Standard and to the first Java Portlet Specification, the Java Portlet 1.0 Standard.• Support for Web Services for Remote Portlets (WSRP) 2.0• Site layout support that enables you to incorporate existing static HTML, built with familiar HTML and PHP development tools, opening up the platform to additional content sourcesOn the other hand, there is no doubt that Spring is the most complete lightweight Java/JEE container that is used widely in Java development software workshops. With a powerful dependency injection engine at its core and established software engineering practices such as interface-oriented design and Aspect oriented programming, Spring combines the enterprise application power with the simplicity of plain-old Java objects to bring about increased productivity and ease of testing.The Spring Portlet "Model View Controller" framework is a truly unique one compared to other frameworks because it is exclusively designed for developing portlets, leaving behind the limitation(s) that comes with providing portlet development support in an existing web framework. A web framework is based on servlet technology, which doesn't have a concept of lifecycle phases; therefore it ends up hiding the different lifecycle phases of a portlet. But, with Spring Portler "Model View Controller" framework you get a full featured Portlet Framework which preserves the lifecycle phases of PortletWith Data access being the requirement for most enterprise applications, Spring provides not only JDBC abstraction framework but also integration with "Object Relational Mapping" (ORM) Solutions such as Java Data Objects (JDO), Hibernate and Java Persistence API (JPA) on a variety of Platforms including WebSphere Application Server. With Transactions coupled tightly with Data access, Spring provides an abstract layer on top of different transactions management APIs both declaratively and programmatically. As an application developer, you can use Spring's transactions management facilities without having to know much out the underlying transaction management APIs.Combining two of the best solutions (WebSphere Portal and Spring), that are not only based on but also promote software engineering best practices, provides software practitioners with an exceptional opportunity to focus on the problem at hand and to have their development cycle reduced considerably.},
booktitle = {Proceedings of the 2011 Conference of the Center for Advanced Studies on Collaborative Research},
pages = {368–370},
numpages = {3},
location = {Toronto, Ontario, Canada},
series = {CASCON '11}
}

@inproceedings{10.1145/322917.322980,
author = {Halkias, Gail F. and Reilly, Kevin D.},
title = {Human factors considerations in the design of a multiple source expert system for military applications (abstract only)},
year = {1987},
isbn = {0897912187},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/322917.322980},
doi = {10.1145/322917.322980},
abstract = {In this paper we present a prototype expert system characterized by two major premises:
there are multiple sources of knowledge within the knowledge base;human factors considerations must receive paramount attention.The domain of the prototype is AirLand combat planning. (Airland combat is a new Army warfare doctrine developed in the early 1980's. Its emphases include active defense, interdiction of the second echelon, early counterattack, and other tactical principles.) The potential users are Army division commanders and staff who are engaged in or are training for combat in Central Europe.Our prototype's knowledge sources are representative of those encountered in a wider class of applications, through its use of sources which may be incomplete, ambiguous and conflicting, such as:
doctrinal knowledge found in policy statements, Army regulations, and professional manuals (FM 100-5). Doctrine can be viewed as a constraint on tactics, combat organization, fire and maneuver schemes, and command and control systems;knowledge from an expert from the domain environment (provided by the historian, Colonel Trevor N. Dupuy);distilled wisdom gleaned from the historical writings of great military thinkers, theorists, and commanders. The first sources to be included are the Maxims of Napoleon and material from von Clausewitz;previous experience with analysis of outcome of appropriate historical cases;results from a computer simulation (operations research) model, the Quantified Judgment Model (QJM). The QJM takes information about a combat situation and generates a prediction (based on many variables) of the victor. It also predicts advance rates, casualty rates, equipment loss and recovery rates, plus many other factors.[1] It is being used as a preprocessor for the expert system.Another important feature concerns the status of each of the knowledge components, i.e., whether the overall system is best envisioned as a collection of more or less autonomous expert systems governed by a controlling expert system, or whether the knowledge collection can be organized in some principled way to allow the multiple sources to be handled within a more homogeneous setting, the limit being a single expert system with accessibility to a (relational) database and other resources, especially simulation results. (A simulation capability is considered by some researchers [2,3] to be an important part of an expert system designed to provide task planning.) Consideration is being given to the implementation of the simulation portion on a parallel processing machine, specifically the Sequent 21000.Important human factors exist for many kinds of expert systems and, especially so, for the application study of the paper. [4] Included among these factors are:
mode of the system, defining the attitude of the system with regard to the user, e.g., consultation, critique, advisory, alert, advocacy; [5]conversational style;architecture of the system and its relation to user stress;causal assessment and support of good human decision making in expert systems;avoidance of consequence buffering or transfer of responsibility from the user to the expert system.Constrained for a number of reasons to a microcomputer environment for the expert system portion of the prototype, we have chosen to utilize the Texas Instruments Personal Consultant Plus development tool to achieve such goals as: rapid development time, ease of explanation generation, availability of both forward- and backward-chaining control mechanisms, built-in functions for online help and other explanatory features, convenient knowledge base segmentation through use of frames, consistent user interface between development and user environments.},
booktitle = {Proceedings of the 15th Annual Conference on Computer Science},
pages = {356},
location = {St. Louis, Missouri, USA},
series = {CSC '87}
}

@inproceedings{10.1145/3190619.3190641,
author = {Leonard, Leslie and Glodek, William},
title = {HACSAW: a trusted framework for cyber situational awareness},
year = {2018},
isbn = {9781450364553},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3190619.3190641},
doi = {10.1145/3190619.3190641},
abstract = {The HPC Architecture for Cyber Situational Awareness (HACSAW) was established by the Department of Defense (DoD) High Performance Computing Modernization Program (HPCMP) to combine a rich computational environment with operationally relevant data to perform cutting-edge cybersecurity research that will increase HPCMP's current and predictive understanding of cyberspace on the Defense Research and Engineering Network (DREN). The data repository created by this unique environment includes the collection of unclassified data sources from the edge of the network (i.e., Internet Access Points) down to the host-level, across more than one hundred (100) different DoD enclaves. Through the application of high performance computing (HPC) resources, HACSAW explores novel and innovative analytical capabilities based on a comprehensive cybersecurity dataset. The integration of HPC within the cyber workflow provides an opportunity for fusion and assessments of disparate data streams and real-time analysis using data science algorithms and machine learning (both structured and unstructured data). Our approach is designed to ultimately leverage HPC resources to significantly reduce the time to respond to changes in the cyber environment from days to minutes.Understanding the operational status of information systems, the missions (friendly and adversary) being pursued, and the threats and vulnerabilities that impact them is essential for effective mission accomplishment. This understanding is referred to as Cyberspace Situational Awareness (Cyber SA). Today's decision makers require meaningful Cyber SA to safeguard sensitive data, sustain fundamental operations, and protect national infrastructure [2]. The need and responsibility of Cyber SA spans multiple organizations within the DoD, across the entire government and in the private sector.The lack of relevant and recent real-world network enterprise data has hampered many cybersecurity research efforts to develop and validate algorithms or methods under realistic conditions. HACSAW has reduced this technical barrier with a development environment that provides computational and data-rich information to researchers to test, develop, model, measure and refine data-driven analytics. This environment is the proving ground for novel ideas, algorithms and approaches that are suitable for large scale execution in a dedicated HPC environment. Currently, HACSAW as an aggregation of over one (1) petabyte of DREN data to include network-based monitoring and intrusion detection results, web content filtering, vulnerability scanning, firewall, sensor health, etc. Context is applied to each cyber event through the use of custom enrichments that provide downstream analytical processes with information that may be useful in determining the nature of the event.During this talk, we will discuss HPCMP's initial approach to addressing Cyber SA through a Call for Proposals (CFP) to the data science, cyber, and HPC communities. Selected collaborators will receive funding for a one-year effort that demonstrates potential for integration into DREN's Cyber SA operational environment and aligns with identified Mission Essential Tasks (METs). METs will ensure decision makers have the understanding necessary to make effective decisions. Such tasks include monitoring, detection, alerting, cyber threat analysis, cyber risk and event analysis, and sharing and collaboration. Initial and future contributions in the areas of modeling and simulation [4], clustering [3] and deep learning [1] are anticipated and results will be shared at a later date.},
booktitle = {Proceedings of the 5th Annual Symposium and Bootcamp on Hot Topics in the Science of Security},
articleno = {12},
numpages = {1},
location = {Raleigh, North Carolina},
series = {HoTSoS '18}
}

@inproceedings{10.5555/2666527.2666537,
author = {Cordeiro, Joel and Antunes, Bruno and Gomes, Paulo},
title = {Context-based search to overcome learning barriers in software development},
year = {2012},
isbn = {9781467317535},
publisher = {IEEE Press},
abstract = {During the software development process, developers are often faced with problem solving situations that motivate the use of the Web to search for information. However, there is a gap between the IDE and the Web, requiring the developers to spend significant time searching for relevant information and navigating through web pages in a Web browser. We propose a tool that aim to aid developers overcoming the learning barriers that exist when working with technologies that they do not master, facilitating the access to question/answer web resources through a context-based search interface, integrated in the IDE. We present an example of use, to better understand our approach.},
booktitle = {Proceedings of the First International Workshop on Realizing AI Synergies in Software Engineering},
pages = {47–51},
numpages = {5},
keywords = {software development, information retrieval, context modeling},
location = {Zurich, Switzerland},
series = {RAISE '12}
}

@inproceedings{10.1145/3239372.3239383,
author = {Rodriguez-Echeverria, Roberto and Izquierdo, Javier Luis C\'{a}novas and Wimmer, Manuel and Cabot, Jordi},
title = {Towards a Language Server Protocol Infrastructure for Graphical Modeling},
year = {2018},
isbn = {9781450349499},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3239372.3239383},
doi = {10.1145/3239372.3239383},
abstract = {The development of modern IDEs is still a challenging and time-consuming task, which requires implementing the support for language-specific features such as syntax highlighting or validation. When the IDE targets a graphical language, its development becomes even more complex due to the rendering and manipulation of the graphical notation symbols. To simplify the development of IDEs, the Language Server Protocol (LSP) proposes a decoupled approach based on language-agnostic clients and language-specific servers. LSP clients communicate changes to LSP servers, which validate and store language instances. However, LSP only addresses textual languages (i.e., character as atomic unit) and neglects the support for graphical ones (i.e., nodes/edges as atomic units). In this paper, we present our vision to decouple graphical language IDEs discussing the alternatives for integrating LSP's ideas in their development. Moreover, we propose a novel LSP infrastructure to simplify the development of new graphical modeling tools, in which Web technologies may be used for editor front-ends while leveraging existing modeling frameworks to build language servers.},
booktitle = {Proceedings of the 21th ACM/IEEE International Conference on Model Driven Engineering Languages and Systems},
pages = {370–380},
numpages = {11},
keywords = {Modeling Editors, Language Server Protocol, Domain Specific Languages},
location = {Copenhagen, Denmark},
series = {MODELS '18}
}

@inproceedings{10.1145/1805986.1806014,
author = {Vanderheiden, Gregg},
title = {Building national public infrastructures on our way to a global inclusive infrastructure},
year = {2010},
isbn = {9781450300452},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1805986.1806014},
doi = {10.1145/1805986.1806014},
abstract = {Broadband technologies are rapidly becoming integral to education, commerce, employment, community participation, health and safety Yet there remain multiple barriers to effective and affordable access by people with disabilities, elder, or those with low literacy creating an increasing digital divide. There are assistive technologies that can provide access for some. However it is not available for all disabilities, not affordable by many, and lags mainstream developments and deployments. Even when the latest AT is close to the latest IT, few people have the latest version. The cost of keeping up with mainstream technologies reduces resources available for innovation in assistive technologies and new directions in broadband technologies will require an already strapped AT industry to retool and re-architect their products. We are moving to an ICT environment with a profusion of hardware models (desktop, laptop, netbook, smartphone, tablet, set top box, game systems, players), multiple operating systems (Windows, Mac, Linux, Chrome OS, iPhone, Android, Windows Mobile, Symbian, Maemo (Nokia), Bada (Samsung), WebOS, etc.), hundreds of software applications that embed another universe of widgets, plug-ins, and players, and a networked information environment that adheres to no standard and mutates far beyond the initial conception of the Web. Our current access technologies and infrastructure cannot handle this; the assistive technologies that now exist do not address all disabilities well, particularly cognitive, language, and learning disabilities, deaf-blindness and the mixed problems faced by elders; current assistive technologies often add, rather than reduce, complexity; finally, but importantly, people are not aware of what is possible, see it as complicated, and do not have any easy way to determine that there is something that can help themA coalition of academic, industry and non-governmental organizations and individuals are coming together to promote the creation of a National Public Inclusive Infrastructure (NPII) to address these problems. The purpose is to ensure that everyone who faces accessibility barriers due to disability, literacy or aging, regardless of economic status, can access and use the Internet and all its information, communities, and services for education, employment, daily living, civic participation, health and safety.An NPII would provide key software enhancements to the physical infrastructure to allow lower cost accessibility that could be invoked on any computer, anywhere. Its key components would be a cloud based delivery system that would allow anywhere, any computer access, a personal preference system to allow systems to automatically configure themselves to users, a system of wizards to make creation of a preference profile simple even when a professional is not available, a metadata server to allow users to find accessible media or captions or descriptions for inaccessible media, a trusted source for malware free solutions, a rich development environment with common building blocks, and an awareness program to make more people aware of what is possible for them. All of the NPII components are being designed to support both commercial assistive technologies and free, built-in access features (universal design). The NPII will include a delivery system, personalization profiles and a rich development system and common modules. In addition to lowering development costs and increasing the number of solutions for different disabilities, the NPII can also enable new types of assistive technologies and services, including assistance-on-demand services that allow consumers to invoke computer or human assistance whenever and wherever they need it. The goal is a richer set of access options that it is less expensive to create and distribute and that can address the needs of a wider range of disabilities than is possible today. And a model infrastructure that can be replicated internationally and bring this wide variety of access options and the lower cost delivery system for both commercial and free access features to countries world-wide.},
booktitle = {Proceedings of the 2010 International Cross Disciplinary Conference on Web Accessibility (W4A)},
articleno = {19},
numpages = {1},
location = {Raleigh, North Carolina},
series = {W4A '10}
}

@inproceedings{10.5555/2666719.2666739,
author = {Cordeiro, Joel and Antunes, Bruno and Gomes, Paulo},
title = {Context-based recommendation to support problem solving in software development},
year = {2012},
isbn = {9781467317597},
publisher = {IEEE Press},
abstract = {During the software development process, developers are often faced with problem solving situations. For instance, it is common the occurrence of exceptions, that originate stack traces in the Console View of the IDE. These situations motivate the developer to use the Web to search for information. However, there is a gap between the IDE and the Web, requiring developers to spend significant time searching for relevant information and navigating through web pages in a Web browser. We propose to process the information of exception stack traces and retrieve question-answering web resources to help developers. We developed a tool that integrates recommendation of question/answer web resources in Eclipse, according to the context of these exception stack traces. The results of a preliminary experimentation are promising, showing that our approach performs better than a simple keyword-based approach.},
booktitle = {Proceedings of the Third International Workshop on Recommendation Systems for Software Engineering},
pages = {85–89},
numpages = {5},
keywords = {software development, recommendation systems, problem solving, context modelling},
location = {Zurich, Switzerland},
series = {RSSE '12}
}

@inproceedings{10.1145/1978942.1979263,
author = {Hartmann, Bj\"{o}rn and Dhillon, Mark and Chan, Matthew K.},
title = {HyperSource: bridging the gap between source and code-related web sites},
year = {2011},
isbn = {9781450302289},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1978942.1979263},
doi = {10.1145/1978942.1979263},
abstract = {Programmers frequently use the Web while writing code: they search for libraries, code examples, tutorials, and documentation. This link between code and visited Web pages remains implicit today. Connecting source code and browsing histories might help programmers maintain con-text, reduce the cost of Web page re-retrieval, and enhance understanding when code is shared. This note introduces HyperSource, an IDE augmentation that associates browsing histories with source code edits. HyperSource comprises a browser extension that logs visited pages; an IDE that tracks user activity and maps pages to code edits; a source document model that tracks visited pages at a character level; and a user interface that enables interaction with these histories. We discuss relevance heuristics and privacy issues inherent in this approach. Informal log analyses and user feedback suggest that our annotation model is promising for code editing and might also apply to other document authoring tasks after refinement.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {2207–2210},
numpages = {4},
keywords = {edit wear, code editors, browsing history},
location = {<conf-loc>, <city>Vancouver</city>, <state>BC</state>, <country>Canada</country>, </conf-loc>},
series = {CHI '11}
}

@inproceedings{10.1145/1882362.1882375,
author = {Brun, Yuriy and Holmes, Reid and Ernst, Michael D. and Notkin, David},
title = {Speculative analysis: exploring future development states of software},
year = {2010},
isbn = {9781450304276},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1882362.1882375},
doi = {10.1145/1882362.1882375},
abstract = {Most software tools and environments help developers analyze the present and past development states of their software systems. Few approaches have investigated the potential consequences of future actions the developers may perform. The commoditization of hardware, multi-core architectures, and cloud computing provide new potential for delivering apparently-instantaneous feedback to developers, informing them of the effects of changes that they may be considering to the software.For example, modern IDEs often provide "quick fix" suggestions for resolving compilation errors. Developers must scan this list and select the option they think will resolve the problem. Instead, we propose that the IDE should speculatively perform each of the suggestions in the background and provide information that helps developers select the best option for the given context. We believe the feedback enabled by speculative operations can improve developer productivity and software quality.},
booktitle = {Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research},
pages = {59–64},
numpages = {6},
keywords = {version control, speculation, recommender system, quick fix, ide, developer awareness},
location = {Santa Fe, New Mexico, USA},
series = {FoSER '10}
}

@inproceedings{10.1145/1866218.1866251,
author = {Hartmann, Bj\"{o}rn and Dhillon, Mark},
title = {HyperSource: bridging the gap between source and code-related web sites},
year = {2010},
isbn = {9781450304627},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1866218.1866251},
doi = {10.1145/1866218.1866251},
abstract = {Programmers frequently use the Web while writing code: they search for libraries, code examples, tutorials, documentation, and engage in discussions on Q&amp;A forums. This link between code and visited Web pages largely remains implicit today. Connecting source code and (selective) browsing history can help programmers maintain context, reduce the cost of Web content re-retrieval, and enhance understanding when code is shared. This paper introduces HyperSource, an IDE augmentation that associates browsing histories with source code edits. HyperSource comprises a browser extension that logs visited pages; a novel source document format that maps visited pages to individual characters; and a user interface that enables interaction with these histories.},
booktitle = {Adjunct Proceedings of the 23nd Annual ACM Symposium on User Interface Software and Technology},
pages = {421–422},
numpages = {2},
keywords = {browsing history, augmented source code},
location = {New York, New York, USA},
series = {UIST '10}
}

@inproceedings{10.1145/2088876.2088879,
author = {Merle, Philippe and Rouvoy, Romain and Seinturier, Lionel},
title = {A reflective platform for highly adaptive multi-cloud systems},
year = {2011},
isbn = {9781450310703},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2088876.2088879},
doi = {10.1145/2088876.2088879},
abstract = {Cloud platforms are increasingly used for hosting a broad diversity of services from traditional e-commerce applications to interactive web-based IDEs. However, we observe that the proliferation of offers by Cloud vendors raises several challenges. Developers will not only have to deploy applications for a specific Cloud, but will also have to consider migrating services from one cloud to another, and to manage applications spanning multiple Clouds. In this paper, we therefore report on a first experiment we conducted to build a multi-Cloud system on top of thirteen existing IaaS/PaaS. From this experiment, we advocate for two dimensions of adaptability---design and execution time---that applications for such systems require to exhibit. Finally, we propose a roadmap for future multi-Cloud systems.},
booktitle = {Adaptive and Reflective Middleware on Proceedings of the International Workshop},
pages = {14–21},
numpages = {8},
location = {Lisbon, Portugal},
series = {ARM '11}
}

@article{10.1145/2602573,
author = {Genev\`{e}s, Pierre and Laya\"{\i}da, Nabil},
title = {Equipping IDEs with XML-Path Reasoning Capabilities},
year = {2014},
issue_date = {July 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
issn = {1533-5399},
url = {https://doi.org/10.1145/2602573},
doi = {10.1145/2602573},
abstract = {One of the challenges in Web development is to achieve a good level of quality in terms of code size and runtime performance for popular domain-specific languages such as XQuery, XSLT, and XML Schema. We present the first IDE augmented with static detection of inconsistent XPath expressions that assists the programmer with simplifying development and debugging of any application involving XPath expressions. The tool is based on newly developed formal verification techniques based on expressive modal logics, which are now mature enough to be introduced in the process of software development. We further develop this idea in the context of XQuery for which we introduce an analysis for identifying and eliminating dead code automatically. This proof of concept aims at illustrating the benefits of equipping modern IDEs with reasoning capabilities.},
journal = {ACM Trans. Internet Technol.},
month = {jul},
articleno = {13},
numpages = {20},
keywords = {schema, reasoning, query, path, environment, compile time, analysis, XML, Programming}
}

@inproceedings{10.1145/3180155.3182538,
author = {Xia, Xin and Bao, Lingfeng and Lo, David and Xing, Zhenchang and Hassan, Ahmed E. and Li, Shanping},
title = {Measuring program comprehension: a large-scale field study with professionals},
year = {2018},
isbn = {9781450356381},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3180155.3182538},
doi = {10.1145/3180155.3182538},
abstract = {During software development and maintenance, developers spend a considerable amount of time on program comprehension. Previous studies show that program comprehension takes up as much as half of a developer's time. However, most of these studies are performed in a controlled setting, or with a small number of participants, and investigate the program comprehension activities only within the IDEs. However, developers' program comprehension activities go well beyond their IDE interactions.In this paper [1], we perform a more realistic investigation of program comprehension activities. To do this, we extend our ActivitySpace framework to collect and analyze Human-Computer Interaction (HCI) data across many applications (not just the IDEs). We collect 3,148 working hour data from 78 professional developers in a field study. We follow Minelli et al.'s approach to assign developers' activities into four categories: navigation, editing, comprehension, and other. Then we measure comprehension time by calculating the time that developers spend on program comprehension. We find that on average developers spend ~ 58% of their time on program comprehension activities, and that they frequently use web browsers and document editors to perform program comprehension activities. We also investigate the impact of programming language, developers' experience, and project phase on the time that is spent on program comprehension.},
booktitle = {Proceedings of the 40th International Conference on Software Engineering},
pages = {584},
numpages = {1},
keywords = {field study, inference model, program comprehension},
location = {<conf-loc>, <city>Gothenburg</city>, <country>Sweden</country>, </conf-loc>},
series = {ICSE '18}
}

@inproceedings{10.1145/2814228.2814232,
author = {Cito, J\"{u}rgen and Leitner, Philipp and Gall, Harald C. and Dadashi, Aryan and Keller, Anne and Roth, Andreas},
title = {Runtime metric meets developer: building better cloud applications using feedback},
year = {2015},
isbn = {9781450336888},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2814228.2814232},
doi = {10.1145/2814228.2814232},
abstract = {A unifying theme of many ongoing trends in software engineering is a blurring of the boundaries between building and operating software products. In this paper, we explore what we consider to be the logical next step in this succession: integrating runtime monitoring data from production deployments of the software into the tools developers utilize in their daily workflows (i.e., IDEs) to enable tighter feedback loops. We refer to this notion as feedback-driven development (FDD). This more abstract FDD concept can be instantiated in various ways, ranging from IDE plugins that implement feedback-driven refactoring and code optimization to plugins that predict performance and cost implications of code changes prior to even deploying the new version of the soft- ware. We demonstrate existing proof-of-concept realizations of these ideas and illustrate our vision of the future of FDD and cloud-based software development in general. Further, we discuss the major challenges that need to be solved be- fore FDD can achieve mainstream adoption.},
booktitle = {2015 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software (Onward!)},
pages = {14–27},
numpages = {14},
keywords = {Software Development, Feedback-Driven Development, Continuous Delivery, Cloud Computing},
location = {Pittsburgh, PA, USA},
series = {Onward! 2015}
}

@inproceedings{10.1109/ICSE.2017.17,
author = {Ponzanelli, Luca and Scalabrino, Simone and Bavota, Gabriele and Mocci, Andrea and Oliveto, Rocco and Di Penta, Massimiliano and Lanza, Michele},
title = {Supporting software developers with a holistic recommender system},
year = {2017},
isbn = {9781538638682},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE.2017.17},
doi = {10.1109/ICSE.2017.17},
abstract = {The promise of recommender systems is to provide intelligent support to developers during their programming tasks. Such support ranges from suggesting program entities to taking into account pertinent Q&amp;A pages. However, current recommender systems limit the context analysis to change history and developers' activities in the IDE, without considering what a developer has already consulted or perused, e.g., by performing searches from the Web browser. Given the faceted nature of many programming tasks, and the incompleteness of the information provided by a single artifact, several heterogeneous resources are required to obtain the broader picture needed by a developer to accomplish a task.We present Libra, a holistic recommender system. It supports the process of searching and navigating the information needed by constructing a holistic meta-information model of the resources perused by a developer, analyzing their semantic relationships, and augmenting the web browser with a dedicated interactive navigation chart. The quantitative and qualitative evaluation of Libra provides evidence that a holistic analysis of a developer's information context can indeed offer comprehensive and contextualized support to information navigation and retrieval during software development.},
booktitle = {Proceedings of the 39th International Conference on Software Engineering},
pages = {94–105},
numpages = {12},
keywords = {recommender systems, mining unstructured data},
location = {Buenos Aires, Argentina},
series = {ICSE '17}
}

@inproceedings{10.1145/2591062.2591161,
author = {Miller, Heather and Haller, Philipp and Rytz, Lukas and Odersky, Martin},
title = {Functional programming for all! scaling a MOOC for students and professionals alike},
year = {2014},
isbn = {9781450327688},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2591062.2591161},
doi = {10.1145/2591062.2591161},
abstract = {Massive open online courses (MOOCs) have launched a scale shift in higher education, with several individual MOOCs now boasting tens or hundreds of thousands of participants worldwide. Our MOOC on the principles of functional programming has more than 100,000 registered students to date, and boasts one of the highest rates of completion (19.2%) for its size. In this paper, we describe our experience organizing this popular MOOC, and demonstrate how providing innovative supporting tools (IDE plugins, testing frameworks, interactive build tools, automated cloud-based graders, style checkers) and considering key human-computer interaction factors potentially contributed to this markedly high completion rate. We collect an unprecedented volume of course statistics and survey results and have made them available, along with scripts for generating interactive web-based visualizations, as an open-source project.},
booktitle = {Companion Proceedings of the 36th International Conference on Software Engineering},
pages = {256–263},
numpages = {8},
keywords = {programming education, au- tomated grading, Software engineering education, MOOC},
location = {Hyderabad, India},
series = {ICSE Companion 2014}
}

@article{10.1145/1371216.1371217,
author = {Lee, Newton},
title = {A word from the editor},
year = {2008},
issue_date = {April/June 2008},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {6},
number = {2},
url = {https://doi.org/10.1145/1371216.1371217},
doi = {10.1145/1371216.1371217},
abstract = {Welcome to ACM Computers in Entertainment, a premier online magazine featuring video interviews with leading professionals and interesting articles on entertainment technology and its applications. In this April/June 2008 issue of ACM CIE, we feature the Video Interviews of Gabrielle Weinman at Team One (November 8, 2007) and David Harris at MTV New Media (November 8, 2007):• Gabrielle Weinman is the Creative Director of Interactive &amp; Relationship Marketing for Team One in Los Angeles. She oversees all aspects of the creative work in both departments, integrating it with traditional advertising. Her biggest client is Lexus automobiles, and other clients have included Ritz Carlton Hotels, Flexjet, MTV, Air New Zealand, Infonet and Heal the Bay. Since technology constantly evolves and changes, her background in design, branding and traditional advertising gives her a distinct advantage. After working at Keith Bright &amp; Associates and Hill Holiday, Gabrielle started as a Senior Art Director at Team One in 1992. In 1995, she agreed to spearhead the development of an interactive group at the strong protest of her headhunter who said she would never work in advertising again. Twelve years later, Gabrielle currently manages a staff of over 25 employees and a department that has won numerous awards including Cannes Cyber Lions, Clios and One Show pencils. In the video interview, you will hear Gabrielle's answers to the following questions:1. What is the project that you are working on at the AFI Digital Content Lab?2. What is the greatest innovation that you have brought to the project?3. What is your experience working with the AFI Digital Content Lab?4. What suggestions do you have that would make the Digital Content Lab more innovative, useful, and rewarding?5. What do you think about the future of new media?6. What are the major challenges in Interactive TV?7. What are some of the Interactive TV projects that you are working on?8. Do you find it difficult to design good user interface for Interactive TV?9. How do you see the future of Interactive TV?10. If you can do whatever you want, what would you do?• David Harris was born in Puerto Rico, raised in Texas, and received his undergraduate degree in Film, Animation, and Video from the Rhode Island School of Design. He worked as the creative director for Love Advertising, producer for ADV Films, Inc. (one of America's leading anim\'{e} companies), and lived in Paris for a year in between. In 2003, he relocated to Los Angeles to pursue his MFA from UCLA in Film, TV and Digital Media. His thesis project, HOWDOISAYTHIS.COM, was sponsored by mtvU and Cisco and won the 2007 SXSW Web Award for Best Student Site. Since launching HOWDOISAYTHIS.COM, Harris worked in the development think tank at Fox Television Studios before taking his current position at MTV New Media, where he is working on the Players project, Jackass World, and a number of interactive projects that are as exciting as they are secret. In the video interview, you will hear David's answers to the following questions:1. You call yourself the "MacGyver" at MTV New Media. Could you elaborate on your role at MTV?2. How does MTV New Media compete with MySpace and YouTube in reaching the MTV audience on the Internet?3. What is your experience in working with the AFI Digital Content Lab?4. What suggestions do you have that would make the Digital Content Lab more innovative, useful, and rewarding?5. What is the innovation of the "Players" project that you are working on at the Digital Content Lab?6. If you can do anything you want at MTV, what will you do?In the Games section, we present:1. Using Prototypes in Early Pervasive Game Development (by Elina M.I. Ollila, Riku Suomela, and Jussi Holopainen)2. People, Places, and Play: A research framework for digital game experience in a sociospatial context (by Yvonne A. W. De Kort and Wijnand A. Ijsselsteijn)3. An Architecture to Easily Produce Adventure and Movie Games for the Mobile Scenario (by Marco Furini)4. Toward an Understanding of Flow in Video Games (by Ben Cowley, Darryl Charles, Michaela Black, and Ray Hickey)5. NEAT-o-Games: Blending Physical Activity and Fun in the Daily Routine (by Yuichi Fujiki, Konstantinos Kazakos, Colin Puri, Pradeep Buddharaju, And Ioannis Pavlidis)6. CHARACTER PLAY - The use of game characters in multi-player Role Playing Games across platforms (by Anders Tychsen, Michael Hitchens, and Thea Brolund)In the Entertainment Technology section, we present:1. The evaluation of ARCO: a lesson in curatorial competence and intuition with new technology (by Styliani Sylaiou)2. A Goal Oriented Development Tool to Automate the Incorporation of Intelligent Agents into Interactive Digital Media Applications (by Han Yu, Zhiqi Shen, and Chunyan Miao)3. Feature Guided Texture Synthesis (FGTS) for Artistic Style Transfer (by Xuexiang Xie, Feng Tiany, and Hock Soon Seah)4. E = Mc2 + 1: A Fully Digital, Collaborative, High-Definition (Hd) Production From Scene To Screen (by Artur Lugmayr, Hornsby Adrian, Piotr Golebiowski, Satu Jumisko-Pyykko, Fernando Ubis, Simon Reymann, Volker Bruns, Asta Kybartaite, Jarkko Kauranen, and Dirk Matthes)The Analysis: New Media and New Technology section, we present:1. The BBC and its Web 2.0 Partners (by Ben Sutherland)The Announcements column highlights some of the upcoming events and conferences. Please visit http://www.acm.org/pubs/cie/conferences.html for a complete listing of upcoming and past conferences co-sponsored by ACM Computers in Entertainment.},
journal = {Comput. Entertain.},
month = {jul},
articleno = {14},
numpages = {3}
}

@article{10.1145/590806.590809,
author = {Munkvold, Bj\o{}rn Erik and Purao, Sandeep},
title = {Special issue on: E-commerce systems development practices},
year = {2002},
issue_date = {Fall 2002},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {33},
number = {4},
issn = {0095-0033},
url = {https://doi.org/10.1145/590806.590809},
doi = {10.1145/590806.590809},
abstract = {The last few years have witnessed a rapid growth in development of web-based solutions to support or initiate new forms of e-commerce. Though a few normative approaches have been proposed for different stages of the development process, it is not clear yet how practitioners or consultants are actually developing these systems. As the e-commerce revolution matures, in-depth accounts of development of actual e-commerce systems have remained sketchy. Informal evidence suggests that highly localized approaches are being used to develop innovative e-commerce solutions. The stories being shared among successful practitioners are still largely anecdotal and confined to success stories or colossal failures. The debacle of dot.com businesses during 2001 has left these issues severely under-investigated. Accounts of both successful and not-so-successful actual e-commerce systems development projects would, therefore, be useful in furthering our understanding of this complex area of study. The three articles in this special issue provide interesting perspectives on understanding several ongoing practices in this arena.The article by Hevner et al identifies and discusses key concerns faced by several organizations that focus on systems development for e-commerce. Based on an in-depth case study of a medium sized e-commerce software development organization, they suggest the perspective of conflicting product versus project challenges in software development activities. Their analysis leads to identification of eight critical challenges in the three areas of organizational structure, relationship with external environment and the development environment. The authors elaborate on these challenges, suggest theoretical propositions for confirmatory research, and link the propositions to managerial actions to suggest implications for practice.The article by Chiasson presents an analysis of the process related to developing an e-commerce system for a startup venture in the on-line magazine ("e-zine") business using structuration theory as the theoretical lens. Following an action research approach, the study develops an understanding of the agency-structure relationship involved in shaping the technological and organizational structure. Conflicting design philosophies in the initial stage (multimedia 'front-end' versus content management through web-database integration) gives way to a role of the system in the later stages as a strategic change agent redirecting the company towards a new business focus. The analysis leads to a critical discussion of structuration theory and its limitations in acknowledging the importance of human reflexivity in the structuration process.The article by Henfridsson and Holmstr\"{o}m discusses how e-commerce development in "internetworked organizations" may enable changes to the traditional corporate value chain. Based on an interpretive case study of the development of an on-line computer game, the authors describe an effort to enable customer involvement throughout the value chain including product development, evaluation, distribution and marketing. They find that the close customer involvement adds value by increasing the company's ability to respond to changing customer demands and preferences. Interestingly, they observe a greater dependency on the customers and their devotion for the game, which illustrates that internetworked organizations can be faced with the challenge associated with handling customers as partners in the value chain. The authors discuss implications for the role of customer involvement in virtual value chains, suggesting an extended view on the e-commerce development process.The articles by Chiasson, and Henfridsson and Holmstr\"{o}m, thus, present in-depth studies of practices related to development of E-commerce systems in different organizational contexts. They exemplify several challenges presented in the first paper by Hevner et al. The three articles together present an in-depth account of the complexities involved in the process of E-commerce systems development, characterized by rapid technological development and often fast-paced projects driven by extreme competitiveness and changing market demands. The context of the three cases presented (e-commerce software development organization, startup venture in the on-line magazine business and on-line computer game developer) serves to highlight different challenges and concerns characterizing E-commerce development practice today. Further research can contribute to extend our understanding in other contexts. Findings presented in these papers can serve as early benchmarks of the significant challenges in E-commerce systems development today. A possible extension can include the development of prescriptive methodologies and models that may be customized for different contexts. Many of the challenges identified in these papers also have a rich history in systems development research. Further research should, therefore, strike a balance between proposing innovative ways to understand these challenges and adapting established ap-proaches and accepted wisdom for systems development to the particular context of E-commerce systems development.},
journal = {SIGMIS Database},
month = {dec},
pages = {6–7},
numpages = {2}
}

@inproceedings{10.1145/3098572.3098580,
author = {Welch, Daniel and Durkee, Blair and Kabbani, Mike and Sitaraman, Murali},
title = {Formalization IDEs Integrated with a Verifying Compiler},
year = {2017},
isbn = {9781450350884},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3098572.3098580},
doi = {10.1145/3098572.3098580},
abstract = {This demonstration will illustrate both a web- and desktop-based formalization IDE (F-IDE) that are backed by a verifying compiler for the RESOLVE specification and programming language. Each IDE we demo supports construction of mathematical developments, formal interface specifications of generic, object-based concepts, and alternative implementations annotated with internal assertions to enable verification. While the first portion of the demo will illustrate the language and verification in the context of the web-based environment, the second half will demonstrate features of a newer desktop-based IDE that provides additional modern IDE amenities beyond those offered by the web-based version. Each IDE we present integrates feedback for mathematical and programmatic type checking, proving, among others, and permit users to generate and run executable, property-preserving Java.},
booktitle = {Proceedings of the 12th Workshop on Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems},
articleno = {6},
numpages = {3},
location = {Barcelona, Spain},
series = {ICOOOLPS'17}
}

@proceedings{10.1145/2688130,
title = {ETX '14: Proceedings of the 2014 Workshop on Eclipse Technology eXchange},
year = {2014},
isbn = {9781450325301},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {It is our great pleasure to welcome you to the 2014 Eclipse Technology eXchange Workshop, sponsored by ACM SIGPLAN. This year's workshop continues the tradition of bringing together researchers and practitioners to discuss potential new uses of Eclipse in research and education as well as how Eclipse can leverage novel work in, e.g., programming languages and software engineering research. ETX has been a very successful workshop at OOPSLA from 2003-2007 and given that the Eclipse Ecosystem is still very relevant for research and education we felt that it was time to revive ETX at SPLASH.Due to the longer hiatus, the response to our call for papers was a little lower than what we had hoped for, but after a rigorous round of reviews we had three submissions that were accepted. We decided to complement the program with two invited talks and provided authors and attendees with an opportunity to showcase some of their Eclipse-related work in an open demonstration session. In the first invited talk, Anish Karmarkar from Oracle presented the standardization work on CAMP (Cloud Application Management for Platforms), a standard for managing software applications on PaaS cloud platforms. Since the cloud is an ongoing hot topic and has led to the proliferation of the DevOps model, his talk could provide interesting insights into the interrelation between development, deployment, and operation of software systems in the cloud, an area where IDEs could and arguably need to play a much stronger role in the future.Tam\'{a}s Szab\'{o} from itemis AG was the second invited speaker and talked about mbeddr, a set of extensible and integrated languages for embedded software development. mbeddr is a customizable IDE that is built on the Meta Programming System (MPS) from JetBrains. MPS directly works on the Abstract Syntax Tree of the IDE contents and this model is projected to the user for editing. mbeddr utilizes the capabilities of the projectional editor by providing various notations (projections) for the developers; apart from the regular source code, developers can easily embed tables, complex mathematical formulas and diagrams right into to the text.},
location = {Portland, Oregon, USA}
}

@inproceedings{10.1145/3196398.3196459,
author = {Bulmer, Tyson and Montgomery, Lloyd and Damian, Daniela},
title = {Predicting developers' IDE commands with machine learning},
year = {2018},
isbn = {9781450357166},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3196398.3196459},
doi = {10.1145/3196398.3196459},
abstract = {When a developer is writing code they are usually focused and in a state-of-mind which some refer to as flow. Breaking out of this flow can cause the developer to lose their train of thought and have to start their thought process from the beginning. This loss of thought can be caused by interruptions and sometimes slow IDE interactions. Predictive functionality has been harnessed in user applications to speed up load times, such as in Google Chrome's browser which has a feature called "Predicting Network Actions". This will pre-load web-pages that the user is most likely to click through. This mitigates the interruption that load times can introduce. In this paper we seek to make the first step towards predicting user commands in the IDE. Using the MSR 2018 Challenge Data of over 3000 developer session and over 10 million recorded events, we analyze and cleanse the data to be parsed into event series, which can then be used to train a variety of machine learning models, including a neural network, to predict user induced commands. Our highest performing model is able to obtain a 5 cross-fold validation prediction accuracy of 64%.},
booktitle = {Proceedings of the 15th International Conference on Mining Software Repositories},
pages = {82–85},
numpages = {4},
keywords = {neural network, machine learning, developer commands, IDE monitoring},
location = {Gothenburg, Sweden},
series = {MSR '18}
}

@inproceedings{10.1145/3417990.3420205,
author = {Rani, Fatima and Diez, Pablo and Chavarriaga, Enrique and Guerra, Esther and de Lara, Juan},
title = {Automated migration of EuGENia graphical editors to the web},
year = {2020},
isbn = {9781450381352},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3417990.3420205},
doi = {10.1145/3417990.3420205},
abstract = {Domain-specific languages (DSLs) are languages tailored for particular domains. Many frameworks and tools have been proposed to develop editors for DSLs, especially for desktop IDEs, like Eclipse.We are witnessing the advent of low-code development platforms, which are cloud-based environments supporting rapid application development by using graphical languages and forms. While this approach is very promising, the creation of new low-code platforms may require the migration of existing desktop-based editors to the web. However, this is a technically challenging task.To fill this gap, we present ROCCO, a tool that migrates Eclipse-based graphical modelling editors to the web, to facilitate their integration with low-code platforms. The tool reads a meta-model annotated with EuGENia annotations, and generates a web editor using the DPG web framework used by the UGROUND company. In this paper, we present the approach, including tool support and an evaluation based on migrating nine editors created by third parties, which shows the usefulness of the tool.},
booktitle = {Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings},
articleno = {71},
numpages = {7},
keywords = {model-driven engineering, low-code platforms, graphical DSLs},
location = {Virtual Event, Canada},
series = {MODELS '20}
}

@inproceedings{10.1145/3482632.3483041,
author = {Ding, Xiaoshan},
title = {Research and Practice of Online and Offline Mixed Teaching Mode of Ideological and Political Course in Colleges},
year = {2021},
isbn = {9781450390255},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3482632.3483041},
doi = {10.1145/3482632.3483041},
abstract = {Classroom teaching of ideological and political (ide.&amp;pol.) theory courses in colleges is the main channel of ide.&amp;pol education in colleges, and informatization teaching is the focus of the current curriculum teaching reform in Chinese universities. Effective use of online teaching methods in the classroom teaching of ide.&amp;pol. theory courses in colleges, to achieve integration of traditional classroom teaching and modern information methods, to carry out mixed teaching, to stimulate classroom vitality, and to effectively improve classroom teaching of ide.&amp;pol. theory courses effectiveness is great significance.},
booktitle = {2021 4th International Conference on Information Systems and Computer Aided Education},
pages = {877–880},
numpages = {4},
location = {Dalian, China},
series = {ICISCAE 2021}
}

@inproceedings{10.5555/2819009.2819116,
author = {Padhye, Rohan and Dhoolia, Pankaj and Mani, Senthil and Sinha, Vibha Singhal},
title = {Smart programming playgrounds},
year = {2015},
publisher = {IEEE Press},
abstract = {Modern IDEs contain sophisticated components for inferring missing types, correcting bad syntax and completing partial expressions in code, but they are limited to the context that is explicitly defined in a project's configuration. These tools are ill-suited for quick prototyping of incomplete code snippets, such as those found on the Web in Q&amp;A forums or walk-through tutorials, since such code snippets often assume the availability of external dependencies and may even contain implicit references to an execution environment that provides data or compute services.We propose an architecture for smart programming playgrounds that can facilitate rapid prototyping of incomplete code snippets through a semi-automatic context resolution that involves identifying static dependencies, provisioning external resources on the cloud and injecting resource bindings to handles in the original code fragment.Such a system could be potentially useful in a range of different scenarios, from sharing code snippets on the Web to experimenting with new ideas during traditional software development.},
booktitle = {Proceedings of the 37th International Conference on Software Engineering - Volume 2},
pages = {607–610},
numpages = {4},
location = {Florence, Italy},
series = {ICSE '15}
}

@inproceedings{10.1145/3170427.3186510,
author = {Washington, Peter and Samuel-Gama, Karina G. and Goyal, Shirish and Ramaswami, Ashwin and Riedel-Kruse, Ingmar H.},
title = {Prototyping Biotic Games and Interactive Experiments with JavaScript},
year = {2018},
isbn = {9781450356213},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3170427.3186510},
doi = {10.1145/3170427.3186510},
abstract = {Life-science research is often driven by advancements in biotechnology. In this demonstration, we explore technology which supports real-time interaction with living matter in the cloud. In order to enable scientists to perform more interactive experiments, we have developed a JavaScript API and corresponding online IDE which can be used to program interactive computer applications allowing the user to remotely interact with swarms of living single-celled micro-organisms in real time. The API interfaces with several remote microscopes which provide a magnified view of a microfluidic chip housing the microorganisms. We hope this work can be a start towards bringing techniques from HCI into bioengineering and biotechnology development.},
booktitle = {Extended Abstracts of the 2018 CHI Conference on Human Factors in Computing Systems},
pages = {1–4},
numpages = {4},
keywords = {human-biology interaction, cloud labs, bioengineering},
location = {<conf-loc>, <city>Montreal QC</city>, <country>Canada</country>, </conf-loc>},
series = {CHI EA '18}
}

@inproceedings{10.1145/2983323.2983848,
author = {Zhang, Jiawei and Yu, Philip S. and Lv, Yuanhua and Zhan, Qianyi},
title = {Information Diffusion at Workplace},
year = {2016},
isbn = {9781450340731},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2983323.2983848},
doi = {10.1145/2983323.2983848},
abstract = {People nowadays need to spend a large amount of time on their work everyday and workplace has become an important social occasion for effective communication and information exchange among employees. Besides traditional online contacts (e.g., face-to-face meetings and telephone calls), to facilitate the communication and cooperation among employees, a new type of online social networks has been launched inside the firewalls of many companies, which are named as the "enterprise social networks" (ESNs). In this paper, we want to study the information diffusion among employees at workplace via both online ESNs and online contacts. This is formally defined as the IDE (Information Diffusion in Enterprise) problem. Several challenges need to be addressed in solving the IDE problem: (1) diffusion channel extraction from online ESN and online contacts; (2) effective aggregation of the information delivered via different diffusion channels; and (3) communication channel weighting and selection. A novel information diffusion model, Muse (Multi-source Multi-channel Multi-topic diffUsion SElection), is introduced in this paper to resolve these challenges. Extensive experiments conducted on real-world ESN and organizational chart dataset demonstrate the outstanding performance of Muse in addressing the IDE problem.},
booktitle = {Proceedings of the 25th ACM International on Conference on Information and Knowledge Management},
pages = {1673–1682},
numpages = {10},
keywords = {enterprise social networks, diffusion channel selection, data mining},
location = {Indianapolis, Indiana, USA},
series = {CIKM '16}
}

@inproceedings{10.1145/2815585.2817797,
author = {Kato, Jun and Goto, Masataka},
title = {Form Follows Function(): An IDE to Create Laser-cut Interfaces and Microcontroller Programs from Single Code Base},
year = {2015},
isbn = {9781450337809},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2815585.2817797},
doi = {10.1145/2815585.2817797},
abstract = {During the development of physical computing devices, physical object models and programs for microcontrollers are usually created with separate tools with distinct files. As a result, it is difficult to track the changes in hardware and software without discrepancy. Moreover, the software cannot directly access hardware metrics. Designing hardware interface cannot benefit from the source code information either. This demonstration proposes a browser-based IDE named f3.js that enables development of both as a single JavaScript code base. The demonstration allows audiences to play with the f3.js IDE and showcases example applications such as laser-cut interfaces generated from the same code but with different parameters. Programmers can experience the full feature and designers can interact with preset projects with a mouse or touch to customize laser-cut interfaces. More information is available at http://f3js.org.},
booktitle = {Adjunct Proceedings of the 28th Annual ACM Symposium on User Interface Software &amp; Technology},
pages = {43–44},
numpages = {2},
keywords = {personal fabrication, microcontroller, laser-cut interface, integrated development environment},
location = {Daegu, Kyungpook, Republic of Korea},
series = {UIST '15 Adjunct}
}

@inproceedings{10.1145/3196398.3196467,
author = {Ciborowska, Agnieszka and Kraft, Nicholas A. and Damevski, Kostadin},
title = {Detecting and characterizing developer behavior following opportunistic reuse of code snippets from the web},
year = {2018},
isbn = {9781450357166},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3196398.3196467},
doi = {10.1145/3196398.3196467},
abstract = {Modern software development is social and relies on many online resources and tools. In this paper, we study opportunistic code reuse from the Web, e.g., when developers copy code snippets from popular Q&amp;A sites and paste them into their projects. Our focus is the behavior of developers following opportunistic code reuse, which reveals the success or failure of the action. We study developer behavior via a large, representative dataset of micro-interactions in the IDE. Our analysis of developer behavior exhibited in this dataset confirms laboratory study observations that code reuse from the Web is followed by heavy editing, in some cases by a rapid undo, and rarely by the execution of tests.},
booktitle = {Proceedings of the 15th International Conference on Mining Software Repositories},
pages = {94–97},
numpages = {4},
keywords = {opportunistic reuse, interaction data, field study, developer behavior, code snippet},
location = {Gothenburg, Sweden},
series = {MSR '18}
}

@inproceedings{10.1145/1028664.1028670,
author = {McCormick, Edward and De Volder, Kris},
title = {JQuery: finding your way through tangled code},
year = {2004},
isbn = {1581138334},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1028664.1028670},
doi = {10.1145/1028664.1028670},
abstract = {A typical IDE based exploration of an OOP system will often involve multiple searches through class hierarchies, field accesses, method calls, regular expression matches and more. Developers who must follow connections between these disconnected views may find great difficulty in combining the capabilities of each view and may as well suffer significant disorientation due to loss of context while switching. toolname is a flexible, query-based source code browser that alleviates this disorientation by allowing the user to explore the various types of structural relationships between elements of the code without the distraction of switching tools. Using toolname, a developer can define his or her own top-level browsers on-the-fly by formulating logic queries and running them against the source code. Elements in the tree can then be queried individually in the same manner, allowing further exploration of the complex web of relationships that exist between scattered elements of code.},
booktitle = {Companion to the 19th Annual ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages, and Applications},
pages = {9–10},
numpages = {2},
keywords = {visualization, query engine, navigation, exploration, browser},
location = {Vancouver, BC, CANADA},
series = {OOPSLA '04}
}

@inproceedings{10.1145/2661088.2661090,
author = {Khan, Faiz and Foley-Bourgon, Vincent and Kathrotia, Sujay and Lavoie, Erick and Hendren, Laurie},
title = {Using JavaScript and WebCL for numerical computations: a comparative study of native and web technologies},
year = {2014},
isbn = {9781450332118},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2661088.2661090},
doi = {10.1145/2661088.2661090},
abstract = {From its modest beginnings as a tool to validate forms, JavaScript is now an industrial-strength language used to power online applications such as spreadsheets, IDEs, image editors and even 3D games. Since all modern web browsers support JavaScript, it provides a medium that is both easy to distribute for developers and easy to access for users. This paper provides empirical data to answer the question: Is JavaScript fast enough for numerical computations? By measuring and comparing the runtime performance of benchmarks representative of a wide variety of scientific applications, we show that sequential JavaScript is within a factor of 2 of native code. Parallel code using WebCL shows speed improvements of up to 2.28 over JavaScript for the majority of the benchmarks.},
booktitle = {Proceedings of the 10th ACM Symposium on Dynamic Languages},
pages = {91–102},
numpages = {12},
keywords = {web browser, parallelism, numerical computation, javascript, computational dwarfs, benchmark, WebCL, OpenCL, C},
location = {Portland, Oregon, USA},
series = {DLS '14}
}

@inproceedings{10.1145/3545947.3576231,
author = {Xing, Eric and Xing, Guangming},
title = {A Toolkit for Assessments in Introductory Programming Courses},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3576231},
doi = {10.1145/3545947.3576231},
abstract = {Traditional paper-based exams and LMS-provided online exams for introductory programming courses are not aligned with learning objectives that emphasize problem-solving and coding skills. In this poster, we present a cloud-based assessment solution for introductory programming courses. First, we discuss the requirements and challenges of conducting frequent assessments. We then outline the functions in our online exam toolkit that allow instructors to administer versatile assessments. Instead of relying on a traditional lockdown browser, the plagiarism and cheating detection in our toolkit allows instructors to administer exams in any modern browser for face-to-face classes.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1285},
numpages = {1},
keywords = {web ide, education, assessment},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.5555/3432601.3432646,
author = {Shao, Steve and Sharma, Nitika and Kuan, Stephanie},
title = {Z modernization open tools showcase},
year = {2020},
publisher = {IBM Corp.},
address = {USA},
abstract = {Z Modernization Open Tools Showcase is a collection of multiple demos and use-cases built into a single environment, illustrating how to configure and debug transactions in seconds. What's more exciting, it brings support to developers first choice IDEs including VS Code. With modern tools to existing z/OS workloads, developers can start interacting with z/OS like we would any other cloud environment.},
booktitle = {Proceedings of the 30th Annual International Conference on Computer Science and Software Engineering},
pages = {270–271},
numpages = {2},
keywords = {z/OS, mainframe, debugger, VS Code},
location = {Toronto, Ontario, Canada},
series = {CASCON '20}
}

@inproceedings{10.1109/ASE51524.2021.9678893,
author = {Kimura, Yusuke and Akazaki, Takumi and Kikuchi, Shinji and Mahajan, Sonal and Prasad, Mukul R.},
title = {Q&amp;A MAESTRO: Q&amp;A post recommendation for fixing Java runtime exceptions},
year = {2022},
isbn = {9781665403375},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ASE51524.2021.9678893},
doi = {10.1109/ASE51524.2021.9678893},
abstract = {Programmers often use Q&amp;A sites (e.g., Stack Overflow) to understand a root cause of program bugs. Runtime exceptions is one of such important class of bugs that is actively discussed on Stack Overflow. However, it may be difficult for beginner programmers to come up with appropriate keywords for search. Moreover, they need to switch their attentions between IDE and browser, and it is time-consuming. To overcome these difficulties, we proposed a method, "Q&amp;A MAESTRO", to find suitable Q&amp;A posts automatically for Java runtime exception by utilizing structure information of codes described in programming Q&amp;A website. In this paper, we describe a usage scenario of IDE-plugin, the architecture and user interface of the implementation, and results of user studies. A video is available at https://youtu.be/4X24jJrMUVw. A demo software is available at https://github.com/FujitsuLaboratories/Q-A-MAESTRO.},
booktitle = {Proceedings of the 36th IEEE/ACM International Conference on Automated Software Engineering},
pages = {1227–1231},
numpages = {5},
location = {Melbourne, Australia},
series = {ASE '21}
}

@inproceedings{10.1145/3375959.3375967,
author = {Wolde, Behailu Getachew and Boltana, Abiot Sinamo},
title = {Combinatorial Testing Approach for Cloud Mobility Service},
year = {2020},
isbn = {9781450372633},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3375959.3375967},
doi = {10.1145/3375959.3375967},
abstract = {Currently, software product becomes an essential component in running many stakeholders' activities. For instance, the industries mostly use cloud services to execute their important business functionality. However, by a few input's parameter interacting, this functionality can be pended. Such constraint poses challenging to cover various features of failure especially in ensuring cloud application. One way is to devise a strategy to cover input parameters' characteristics based on Combinatorial testing approach. This technique includes all possible combinations of test inputs for detecting bugs on the System Under Test (SUT). The paper explains the Combinatorial covering arrays to generate relatively exhaustive testing by modeling features of sample services using Feature IDE plugin in Eclipse IDE. This way, we build the input domain model to represent coverage of the existing mobility service running on NEMo Mobility cloud platform. Using this model, covering arrays is applied to generate t-way test cases by leveraging IPOg algorithm, which is implemented in a CiTLab. As a test case management, the JUnit testing framework uses test stubs to validate the test methods of generated test cases on the specified service (SUT).},
booktitle = {Proceedings of the 2019 2nd Artificial Intelligence and Cloud Computing Conference},
pages = {6–13},
numpages = {8},
keywords = {Software Testing, Feature Model, Combinatorial Testing, Cloud Mobility Service, CiTLAB},
location = {Kobe, Japan},
series = {AICCC '19}
}

@inproceedings{10.1109/ICSE48619.2023.00159,
author = {Rutishauser, Roy and Meyer, Andr\'{e} N. and Holmes, Reid and Fritz, Thomas},
title = {Semi-Automatic, Inline and Collaborative Web Page Code Curations},
year = {2023},
isbn = {9781665457019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE48619.2023.00159},
doi = {10.1109/ICSE48619.2023.00159},
abstract = {Software developers spend about a quarter of their workday using the web to fulfill various information needs. Searching for relevant information online can be time-consuming, yet acquired information is rarely systematically persisted for later reference. In this work, we introduce SALI, an approach for semi-automated inline linking of web pages to source code locations. SALI helps developers naturally capture high-quality, explicit links between web pages and specific source code locations by recommending links for curation within the IDE. Through two laboratory studies, we examined the developer's ability to both curate and consume links between web pages and specific source code locations while performing software development tasks. The studies were performed with 20 subjects working on realistic software change tasks from widely-used open-source projects. Results show that developers continuously and concisely curate web pages at meaningful locations in the code with little effort. Additionally, we found that other developers could use these curations while performing new and different change tasks to speed up relevant information gathering within unfamiliar codebases by a factor of 2.4.},
booktitle = {Proceedings of the 45th International Conference on Software Engineering},
pages = {1866–1877},
numpages = {12},
keywords = {collaboration, web browsing, knowledge management, semi-automated link curation},
location = {Melbourne, Victoria, Australia},
series = {ICSE '23}
}

@inproceedings{10.5555/2663638.2663669,
author = {Yoon, YoungSeok and Myers, Brad A.},
title = {An exploratory study of backtracking strategies used by developers},
year = {2012},
isbn = {9781467318242},
publisher = {IEEE Press},
abstract = {Developers frequently backtrack while coding. They go back to an earlier state by removing inserted code or by restoring removed code for various reasons. However, little is known about when and how the developers backtrack, and modern IDEs do not provide much assistance for backtracking. As a first step towards gathering baseline knowledge about backtracking and designing more robust backtracking assistance tools in modern IDEs, we conducted an exploratory study with 12 professional developers and a follow-up online survey. Our study revealed several barriers they faced while backtracking. Subjects often manually commented and uncommented code, and often had difficulty finding relevant parts to backtrack. Backtracking was reported to be needed by 3/4 of the developers at least "sometimes".},
booktitle = {Proceedings of the 5th International Workshop on Co-Operative and Human Aspects of Software Engineering},
pages = {138–144},
numpages = {7},
keywords = {undo, exploratory programming, component},
location = {Zurich, Switzerland},
series = {CHASE '12}
}

@inproceedings{10.1145/2897073.2897117,
author = {Allison, Lance A. and Fuad, Mohammad Muztaba},
title = {Inter-app communication between Android apps developed in app-inventor and Android studio},
year = {2016},
isbn = {9781450341783},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2897073.2897117},
doi = {10.1145/2897073.2897117},
abstract = {Communications between mobile apps are an important aspect of mobile platforms. Android is specifically designed with inter-app communication in mind and depends on this to provide different platform specific functionalities. Android Apps can either be designed with the help of Android SDK and using IDEs such as Android Studio or by using a browser based platform called App Inventor. These two development platforms provide their own technique for inter-app communication in the same platform, however lack an established method of inter-app communication when apps are developed using the two seperate development platforms. This paper provides the missing information required for the app communications and presents the method for sending and receiving arguments between apps developed in these two platforms. The paper also outlines the significance of the result, and examines their limitations.},
booktitle = {Proceedings of the International Conference on Mobile Software Engineering and Systems},
pages = {17–18},
numpages = {2},
keywords = {mobile apps, app inventor, Android studio, Android},
location = {Austin, Texas},
series = {MOBILESoft '16}
}

@article{10.5555/2753024.2753055,
author = {Deeb, Fatima Abu and Hickey, Timothy},
title = {The Spinoza code tutor: faculty poster abstract},
year = {2015},
issue_date = {June 2015},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {30},
number = {6},
issn = {1937-4771},
abstract = {Spinoza[5] is a web-based IDE developed using NodeJS to support active learning in intro-ductory programming classes. It encompass the best features from various systems like codingbat [1], cloudcoder[2] and codeHunt[3] in one holistic system. Spinoza differs from other similar systems in providing the instructor with detailed real-time feedback during in-class coding sessions, both at the level of the individual student and the class as a whole. From the students' view, Spinoza provides authenticated access to a collection of named programming problems and a web-based IDE which allows students to code, run, unit test, and debug those problems. From the instructor's view, Spinoza provides interfaces for creating a variety of programming challenges and also provides multiple views of students' progress on solving the coding problems.},
journal = {J. Comput. Sci. Coll.},
month = {jun},
pages = {154–155},
numpages = {2}
}

@inproceedings{10.1145/3472672.3473953,
author = {Ricca, Filippo and Leotta, Maurizio},
title = {Towards automated generation of PO-based WebDriver test suites from Selenium IDE recordings},
year = {2021},
isbn = {9781450386234},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3472672.3473953},
doi = {10.1145/3472672.3473953},
abstract = {Modern web applications require long quality assurance sessions to be appreciated by users. Test automation reduces delivery times but requires the development of effective and maintainable test scripts so that the advantages of its use are not lost.  The usage of the Page object (PO) pattern has proven to be very effective in GUI testing, however, the manual development of Page objects, a sort of web page facade exposing methods to the test scripts, requires a relevant effort, which is often only repaid during evolution.  In this paper, we describe a novel approach, almost totally automated, that takes advantage of the features offered by Selenium IDE for generating more maintainable Selenium WebDriver test scripts and Page objects for web applications. The only manual step required to the tester/developer is to add comments to the Selenese produced by Selenium IDE during registrations through a plugin. The very first estimate we conducted to evaluate our tool-based approach appears to be promising.},
booktitle = {Proceedings of the 12th International Workshop on Automating TEST Case Design, Selection, and Evaluation},
pages = {9–16},
numpages = {8},
keywords = {Test Automation, Selenium IDE and WebDriver, Page Objects, Automated generation},
location = {Athens, Greece},
series = {A-TEST 2021}
}

@inproceedings{10.1145/3173574.3174101,
author = {Yeh, Tom and Kim, Jeeeun},
title = {CraftML: 3D Modeling is Web Programming},
year = {2018},
isbn = {9781450356206},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3173574.3174101},
doi = {10.1145/3173574.3174101},
abstract = {We explore web programming as a new paradigm for programmatic 3D modeling. Most existing approaches subscribe to the imperative programming paradigm. While useful, there exists a gulf of evaluation between procedural steps and the intended structure. We present CraftML, a language providing a declarative syntax where the code is the structure. CraftML offers a rich set of programming features familiar to web developers of all skill levels, such as tags, hyperlinks, document object model, cascade style sheet, JQuery, string interpolation, template engine, data injection, and scalable vector graphics. We develop an online IDE to support CraftML development, with features such as live preview, search, module import, and parameterization. Using examples and case studies, we demonstrate that CraftML offers a low floor for beginners to make simple designs, a high ceiling for experts to build complex computational models, and wide walls to support many application domains such as education, data physicalization, tactile graphics, assistive devices, and mechanical components.},
booktitle = {Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems},
pages = {1–12},
numpages = {12},
keywords = {programming, fabrication, creativity support, 3d printing, 3d modeling},
location = {<conf-loc>, <city>Montreal QC</city>, <country>Canada</country>, </conf-loc>},
series = {CHI '18}
}

@inproceedings{10.1145/3626253.3635572,
author = {Wang, Sierra and Mitchell, John and Haber, Nick and Piech, Chris},
title = {Math IDE: A Platform for Creating with Math},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3635572},
doi = {10.1145/3626253.3635572},
abstract = {To inspire student engagement in middle school math, we explore the possibility of using generative AI to enhance the creativity of math learning. We present the Math IDE, a math education environment in which students learn about math concepts by building artifacts. We aimed to create a platform in which students can engage with mathematical concepts, create an artifact that embodies the math that they are learning about, and practice their high-level specification skills. In the current iteration of the Math IDE, students can create custom web pages by describing and demonstrating understanding of the math that is involved in the web page. In this short overview, we describe our process and discuss several open questions regarding the design and application of this novel method of math education.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1844–1845},
numpages = {2},
keywords = {creating, education, generative ai, math},
location = {<conf-loc>, <city>Portland</city>, <state>OR</state>, <country>USA</country>, </conf-loc>},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/1152760.1152768,
author = {Kemp, Elizabeth and Setungamudalige, D. T.},
title = {A resource support toolkit (R-IDE): supporting the DECIDE framework},
year = {2006},
isbn = {1595934731},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1152760.1152768},
doi = {10.1145/1152760.1152768},
abstract = {A central activity involved in the user-centred design process is usability evaluation. Cost-effective evaluation tools to fully support usability evaluations however, are still limited. The aim of this work is to introduce a web-based, resource-supported, interactive evaluation toolkit called R-IDE, which guides evaluation planners through the various activities involved in planning and conducting usability evaluations. The IDE stages of the DECIDE framework provide the basis for the design of this toolkit, which currently supports two evaluation methods: heuristic evaluation for websites and standard questionnaires. This paper describes the design, development, evaluation and future potential of this toolkit.},
booktitle = {Proceedings of the 7th ACM SIGCHI New Zealand Chapter's International Conference on Computer-Human Interaction: Design Centered HCI},
pages = {61–66},
numpages = {6},
keywords = {heuristic evaluation, evaluation toolkit, evaluation methods},
location = {Christchurch, New Zealand},
series = {CHINZ '06}
}

@inproceedings{10.5555/2886444.2886471,
author = {Rahman, Mohammad Masudur and Roy, Chanchal K.},
title = {Recommending relevant sections from a webpage about programming errors and exceptions},
year = {2015},
publisher = {IBM Corp.},
address = {USA},
abstract = {Programming errors or exceptions are inherent in software development and maintenance, and given today's Internet era, software developers often look at web for finding working solutions. They make use of a search engine for retrieving relevant pages, and then look for the appropriate solutions by manually going through the pages one by one. However, both the manual checking of a page's content against a given exception (and its context) and then working an appropriate solution out are non-trivial tasks. They are even more complex and time-consuming with the bulk of irrelevant (i.e., off-topic) and noisy (e.g., advertisements) content in the web page. In this paper, we propose an IDE-based and context-aware page content recommendation technique that locates and recommends relevant sections from a given web page by exploiting the technical details, in particular, the context of an encountered exception in the IDE. An evaluation with 250 web pages related to 80 programming exceptions, comparison with the only available closely related technique, and a case study involving comparison with VSM and LSA techniques show that the proposed technique is highly promising in terms of precision, recall and F1-measure.},
booktitle = {Proceedings of the 25th Annual International Conference on Computer Science and Software Engineering},
pages = {181–190},
numpages = {10},
keywords = {traceability, content relevance, content recommendation},
location = {Markham, Canada},
series = {CASCON '15}
}

@inproceedings{10.1145/2541348.2541352,
author = {Yoshida, Norihiro and Choi, Eunjong and Inoue, Katsuro},
title = {Active support for clone refactoring: a perspective},
year = {2013},
isbn = {9781450326049},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2541348.2541352},
doi = {10.1145/2541348.2541352},
abstract = {Clone refactoring (merging duplicate code) is a promising solution to improve the maintainability of source code. In this position paper, we discuss directions towards the advancement of clone refactoring, and show a perspective of active support based on online analysis of code modification on an editor of IDE.},
booktitle = {Proceedings of the 2013 ACM Workshop on Workshop on Refactoring Tools},
pages = {13–16},
numpages = {4},
keywords = {refactoring, ide, code clone},
location = {Indianapolis, Indiana, USA},
series = {WRT '13}
}

@inproceedings{10.1145/2048147.2048159,
author = {Hemel, Zef and Visser, Eelco},
title = {Mobl: the new language of the mobile web},
year = {2011},
isbn = {9781450309424},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2048147.2048159},
doi = {10.1145/2048147.2048159},
abstract = {Mobl is a new language designed to declaratively construct mobile web applications. Mobl integrates languages for user interface design, styling, data modeling, querying and application logic into a single, unified language that is flexible, expressive, enables early detection of errors, and has good IDE support.},
booktitle = {Proceedings of the ACM International Conference Companion on Object Oriented Programming Systems Languages and Applications Companion},
pages = {23–24},
numpages = {2},
keywords = {software development, mobile web, domain-specific language},
location = {Portland, Oregon, USA},
series = {OOPSLA '11}
}

@inproceedings{10.1145/1244002.1244178,
author = {Liu, Xin and Deters, Ralph},
title = {An efficient dual caching strategy for web service-enabled PDAs},
year = {2007},
isbn = {1595934804},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1244002.1244178},
doi = {10.1145/1244002.1244178},
abstract = {PDAs have evolved over the years from resource constrained devices that supported only the most basic tasks to powerful handheld computing devices. However, the most significant step in the evolution of PDAs was the introduction of wireless connectivity which enabled them to host applications that require internet connectivity like email, web browsers and maybe most importantly smart/rich clients. Being able to host smart clients allows the users of PDAs to seamlessly access the IT resources (e.g. legacy apps) of their organizations. One increasingly popular way of enabling access to IT resources is by using Web Services (WS) [14]. This trend has been aided by the rapid availability of Web Service (WS) packages/tools, most notably the efforts of the Apache group [1] and IDE vendors (e.g., Microsoft's Visual Studio [2], IBM's Eclipse [3]). Using IDE tools and other software packages it is fairly easy for programmers to expose application interfaces and/or consume existing interfaces leading to a gradual replacement of the current web server centric approaches (e.g. ASP, JSP, Servlets, CGI scripts) with WS centric approach.This paper focuses on the challenges of enabling PDAs to host Web Services consumers and introduces a dual caching approach to overcome problems arising from temporarily loss of connectivity and fluctuations in bandwidth.},
booktitle = {Proceedings of the 2007 ACM Symposium on Applied Computing},
pages = {788–794},
numpages = {7},
keywords = {web services, nomadic web services client, model-based caching, caching, SOA},
location = {Seoul, Korea},
series = {SAC '07}
}

@inproceedings{10.1145/3545947.3576297,
author = {Xing, Guangming and Xia, Zhonghang and Salem, Tawfiq},
title = {iCAP: A Classroom Engagement Tool for Introductory Programming Courses},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3576297},
doi = {10.1145/3545947.3576297},
abstract = {In this poster, we present iCAP (In Class Activity Participation), an Audience Response System (ARS) for student engagement during introductory programming lectures. iCAP is a web-based solution, allowing student access from any laptop, tablet, or phone with access to a modern browser. Therefore, iCAP increases the flexibility and convenience of educator-student interaction. This poster introduces iCAP's functionalities and compares student mastery of learning outcomes among students taught with and without question-based learning methodology.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1353},
numpages = {1},
keywords = {web ide, classroom engagement, audience response system},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3503823.3503880,
author = {Maikantis, Theodore and Chaikalis, Theodore and Ampatzoglou, Apostolos and Chatzigeorgiou, Alexander},
title = {SmartCLIDE: Shortening the Toolchain of SOA-based Cloud Software Development by Automating Service Creation, Composition, Testing, and Deployment},
year = {2022},
isbn = {9781450395557},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3503823.3503880},
doi = {10.1145/3503823.3503880},
abstract = {Nowadays the majority of cloud applications are developed based on the Service-Oriented Architecture (SOA) paradigm. Large-scale applications are structured as a collection of well-integrated services that are deployed in public, private or hybrid cloud. Despite the inherent benefits that service-based cloud development provides, the process is far from trivial, in the sense that it requires the software engineer to be (at least) comfortable with the use of various technologies in the long cloud development toolchain: programming in various languages, testing tools, build / CI tools, repositories, deployment mechanisms, etc. In this paper, we propose an approach and corresponding toolkit (termed SmartCLIDE—as part of the results of an EU-funded research project) for facilitating SOA-based software development for the cloud, by extending a well-known cloud IDE from Eclipse. The approach aims at shortening the toolchain for cloud development, hiding the process complexity and lowering the required level of knowledge from software engineers. The approach and tool underwent an initial validation from professional cloud software developers. The results underline the potential of such an automation approach, as well as the usability of the research prototype, opening further research opportunities and providing benefits for practitioners.},
booktitle = {Proceedings of the 25th Pan-Hellenic Conference on Informatics},
pages = {306–311},
numpages = {6},
keywords = {Service-Oriented Architecture, Cloud Software Development, Automated Software Engineering},
location = {Volos, Greece},
series = {PCI '21}
}

@inproceedings{10.5555/2555523.2555566,
author = {Bist, Gary and Cheung, Kenneth K.},
title = {Business process management (BPM) in a day},
year = {2013},
publisher = {IBM Corp.},
address = {USA},
abstract = {Business processes today must be developed while businesses are themselves changing to suit turbulent market conditions. Cooperation and collaboration across corporations is the key to developing effective and adaptable business processes in this situation. But how? Both business users and technical developers must work together using a tool that lets both skill sets deliver an optimal solution. One of the most successful business process development tools for both a business user and a technical developer was used in this workshop: IBM's Business Process Manager Advanced 8.5.This hands-on workshop let CASCON participants work as business users and technical developers to address a business problem with both skill sets. As they altered roles they learned the most appropriate tools to use in Business Process Manager given their different backgrounds, so that the result was something better than what either role would have delivered individually.Standards are also important. Workshop participants learned that Business Process Manager's tools generate code that complies with the most widely-used industry standards. Specifically, Business Process Modeling Notation (BPMN) was used to design business processes; Web Services Description Language (WSDL) was used to create services; and Business Process Execution Language (BPEL) was used to develop business processes. Tools to create web services supported most web service standards including policy sets, which are often needed for security purposes.However, this workshop was mostly about building good working business processes. Learning by doing!In the first exercise, Process Designer was used to outline a business process as a business analyst might. This meant setting up activities that could contribute to a business solution, dividing the activities into things a person might do and things a program might do. Then these activities had to be wired together to form a sequence or flow, which also meant learning about choices that might make the business process go this way or that way depending on the circumstances when the business process was running in real time. The CASCON participants had to learn initially how to create good business process designs and then later in the workshop how to test those ideas out.Important learning experiences in this first exercise included how to build effective user interfaces using a helpful tool called the Coach. They also learned how to create variables including variables with complex types or business objects. These variables were used to pass data along the business process.A special activity the CASCON participants learned about was the Advanced Integration Service that lets a business process pass work over from Process Designer to Integration Designer. This special service, only available in the Advanced version of Business Process Manager, is a very good way to let a technical user working in Integration Designer share programming solutions with a business user working in Process Designer.And then they switched from Process Designer to Integration Designer to implement an Advanced Integration Service with Java in Integration Designer. Integration Designer is really a developer's paradise with many tools to create technical solutions with custom code in a variety of languages.While inside Integration Designer, the CASCON participants learned how to unit test with an integrated test environment. Then they returned to Process Designer and system tested their business process so far with a tool called the Inspector. They learned how to develop their business process in iterations by taking a snapshot of their work. A snapshot is like a milestone in the development of a business process.The following exercise focused on a common business challenge: how to reuse applications from the past in a current business process. Most corporations have many applications on hand that they have invested in over a considerable number of years. Business Process Manager, the CASCON participants learned, can take existing applications in Integration Designer, including ones accessing back end systems to get data from databases or Enterprise Resource Planning (ERP) systems like SAP, and make these applications - and their solutions - available to Process Designer.They learned how to associate these applications, which is a way of making them visible to other tools like Process Designer. Another important technique they learned was to use library mirroring. Mirrored libraries are a way of sharing data between Integration Designer and Process Designer.More tools they learned about in Integration Designer included the interface editor to create interfaces and they business object editor to design and build business objects or complex types. CASCON participants worked with a Java editor that generated Java stub code effectively reducing the time to create a Java-based application. Integration Designer is based on Service Oriented Architecture (SOA) and they discovered that the services they created with Integration Designer followed that service standard.One part of that SOA standard is about exports and imports - a means of exposing applications to other applications. They learned how to make an export visible to Process Designer which was a key to sharing data and technical solutions with the business user working in Process Designer.Again, CASCON participants unit tested in Integration Designer to make certain their contribution in that environment was working properly and then system tested in Process Designer with the Inspector. They also created more user interfaces with the Coach. The user interface from the Coach they discovered could be displayed in a source view or a run time view. They learned how to build gateways. Gateways allow a choice in the flow of a business process at run time. The choice is determined by logic in the gateway, which the CASCON participants learned to develop. They completed their second iteration of development with another snapshot to indicate their progress.How do you get data from back end systems where financial records, for example, might be in a format that does not match the format expected in the current business process? In the third exercise, mediation and mapping were used to dynamically solve this eternal technical problem. Returning to Integration Designer, CASCON participants learned how to use a mediation tool to map between two services. In this case, an employee record was used. One service used one kind of name for an identifier and the other service used another name - even though the data was the same. Using a graphical mapping tool they mapped the different representations so that their data could be shared dynamically at run time. And they learned how to add error handling code should something go wrong at run time between the different services sharing their data.This exercise showed the CASCON participants how to work with business objects or complex types in user interfaces. A complex type is a variable that contains other variables. They learned how to use the Coach to develop a user interface that presented data from specific elements within a business object.The CASCON participants again unit tested and system tested their work in both Integration Designer and Process Designer. They created another snapshot for the final iteration of the workshop. A final lecture recaptured what they had learned at the workshop and pointed them to even more features they might want to explore in Business Process Manager on their own.In this workshop, CASCON participants also learned how to integrate Master Data Management (MDM) with business processes. Data governance demands that organizations increase the values of consumption on trusted and accurate data. Data governance ensures having a single version of truth to make smarter business decisions. Master Data Management (MDM) lets you create and maintain the master data; Business Process Manager (BPM) provides organizations the ability to capture and optimize the business processes. This section demonstrated how these two products can work together using in Master Data Governance.},
booktitle = {Proceedings of the 2013 Conference of the Center for Advanced Studies on Collaborative Research},
pages = {355–356},
numpages = {2},
location = {Ontario, Canada},
series = {CASCON '13}
}

@inproceedings{10.1109/ASE.2009.40,
author = {Maras, Josip and tula, Maja and Crnkovic, Ivica},
title = {phpModeler - A Web Model Extractor},
year = {2009},
isbn = {9780769538914},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ASE.2009.40},
doi = {10.1109/ASE.2009.40},
abstract = {This paper presents phpModeler, a tool for reverse engineering of legacy php web applications that generates static UML diagrams showing resources which the current web page is using, its functions and dependencies it has on other web pages. Once the models describing individual web pages have been generated, phpModeler can analyze them and generate dependency models that for each entity in every page model show all entities dependent on it. phpModeler can also be used to highlight the difference between page models – a feature that, when combined with a SVN repository shows the way how the current web page has evolved over time. phpModeler is a plugin for the Eclipse IDE.},
booktitle = {Proceedings of the 24th IEEE/ACM International Conference on Automated Software Engineering},
pages = {660–661},
numpages = {2},
keywords = {web applications, tool, reverse engineering, maintenance, architecture recovery},
series = {ASE '09}
}

@article{10.5555/1295109.1295130,
author = {Bi, Yaodong and Beidler, John},
title = {Teaching database systems with web applications team projects},
year = {2008},
issue_date = {January 2008},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {23},
number = {3},
issn = {1937-4771},
abstract = {This paper describes an approach to teaching undergraduate-level database systems with Web applications team projects. The Web applications employ the three-tier architecture in the Java programming language with Apache Tomcat as the Web server and PostgreSQL as the database server. Students use the Eclipse IDE configured for Web applications and the CVS concurrent versioning system for team member cooperation on software development. The database topics covered in the course are closely synchronized with the steps students take in their team projects. To minimize the intrusion of Web programming, straightforward sample programs and a sample Web application are used to help students in acquiring the knowledge and skills of Web applications development and applying them in their projects.},
journal = {J. Comput. Sci. Coll.},
month = {jan},
pages = {82–88},
numpages = {7}
}

@inproceedings{10.1145/1822258.1822261,
author = {Ingalls, Dan},
title = {The Lively Kernel: a wiki of active objects: invited talk},
year = {2008},
isbn = {9781605581286},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1822258.1822261},
doi = {10.1145/1822258.1822261},
abstract = {The Lively Kernel is a complete platform for Web programming written in JavaScript using graphics available in leading browsers. A widget set built from these elements provides a user interface kit, and the widget set is also extensible. A window-based IDE allows users to edit their applications and even the system itself.},
booktitle = {Proceedings of the 4th International Symposium on Wikis},
articleno = {2},
location = {Porto, Portugal},
series = {WikiSym '08}
}

@inproceedings{10.1145/1806799.1806827,
author = {W\"{u}rsch, Michael and Ghezzi, Giacomo and Reif, Gerald and Gall, Harald C.},
title = {Supporting developers with natural language queries},
year = {2010},
isbn = {9781605587196},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1806799.1806827},
doi = {10.1145/1806799.1806827},
abstract = {The feature list of modern IDEs is steadily growing and mastering these tools becomes more and more demanding, especially for novice programmers. Despite their remarkable capabilities, IDEs often still cannot directly answer the questions that arise during program comprehension tasks. Instead developers have to map their questions to multiple concrete queries that can be answered only by combining several tools and examining the output of each of them manually to distill an appropriate answer. Existing approaches have in common that they are either limited to a set of predefined, hardcoded questions, or that they require to learn a specific query language only suitable for that limited purpose. We present a framework to query for information about a software system using guided-input natural language resembling plain English. For that, we model data extracted by classical software analysis tools with an OWL ontology and use knowledge processing technologies from the Semantic Web to query it. We use a case study to demonstrate how our framework can be used to answer queries about static source code information for program comprehension purposes.},
booktitle = {Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering - Volume 1},
pages = {165–174},
numpages = {10},
keywords = {tool support, source code analysis, software maintenance, software evolution, semantic web, natural language, conceptual queries},
location = {Cape Town, South Africa},
series = {ICSE '10}
}

@article{10.5555/3007225.3007262,
author = {Fischer, Paul},
title = {INTEL® XDK: cross-platform ide for development of mobile apps including games and IoT: tutorial presentation},
year = {2016},
issue_date = {October 2016},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {32},
number = {1},
issn = {1937-4771},
abstract = {Intel® XDK is a free IDE for people who want to create apps for mobile and IoT platforms. It offers essential tools to rapidly design, debug, tune, and build apps for Android*, iOS*, and Windows* app stores. Our users range from beginners who have never programmed to experienced Web developers who want to move into the mobile arena.},
journal = {J. Comput. Sci. Coll.},
month = {oct},
pages = {180},
numpages = {1}
}

@inproceedings{10.1145/1938595.1938603,
author = {Anslow, Craig and Marshall, Stuart and Noble, James and Biddle, Robert},
title = {Co-located collaborative software visualization},
year = {2010},
isbn = {9781450305433},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1938595.1938603},
doi = {10.1145/1938595.1938603},
abstract = {Most software visualization tools are designed from a single-user perspective and are bound to the desktop, IDEs, and the web. Few tools are designed with sufficient support for the social aspects of software engineering such as collaboration, communication, and awareness. Our research aims at supporting co-located collaborative software analysis using software visualization techniques with multi-touch tables. The research will be conducted via user experiments which will inform the design of multi-touch software visualization applications and further our understanding of how developers work together with co-located collaborative tools.},
booktitle = {Human Aspects of Software Engineering},
articleno = {4},
numpages = {2},
keywords = {software visualization, multi-touch, co-located collaboration},
location = {Reno, Nevada},
series = {HAoSE '10}
}

@inproceedings{10.1145/2676723.2677280,
author = {Whitney, Michael and Lipford-Richter, Heather and Chu, Bill and Zhu, Jun},
title = {Embedding Secure Coding Instruction into the IDE: A Field Study in an Advanced CS Course},
year = {2015},
isbn = {9781450329668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2676723.2677280},
doi = {10.1145/2676723.2677280},
abstract = {Many of the security vulnerabilities common in today's software can be prevented with standard secure coding practices. Computer science students who will become the developers of that software need to learn about those practices so they can prevent such vulnerabilities. Many computing programs are addressing this need through additional lectures, elective courses, or more holistic approaches to integrate security across curriculums. We are exploring a complementary approach, integrating secure coding education into the IDE to provide a learning opportunity in the context of writing code. In this paper, we report on two field studies using an IDE tool in an advanced Web programming course. Our results indicate that the tool can increase students' awareness and knowledge of secure programming, but to be most effective, instructors may need to incentivize its use through in-class methods and careful timing of its introduction.},
booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer Science Education},
pages = {60–65},
numpages = {6},
keywords = {security education, secure programming, ide},
location = {Kansas City, Missouri, USA},
series = {SIGCSE '15}
}

@inproceedings{10.1109/ICPC.2019.00039,
author = {Bai, Gina R. and Clee, Brian and Shrestha, Nischal and Chapman, Carl and Wright, Cimone and Stolee, Kathryn T.},
title = {Exploring tools and strategies used during regular expression composition tasks},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICPC.2019.00039},
doi = {10.1109/ICPC.2019.00039},
abstract = {Regular expressions are frequently found in programming projects. Studies have found that developers can accurately determine whether a string matches a regular expression. However, we still do not know the challenges associated with composing regular expressions.We conduct an exploratory case study to reveal the tools and strategies developers use during regular expression composition. In this study, 29 students are tasked with composing regular expressions that pass unit tests illustrating the intended behavior. The tasks are in Java and the Eclipse IDE was set up with JUnit tests. Participants had one hour to work and could use any Eclipse tools, web search, or web-based tools they desired. Screen-capture software recorded all interactions with browsers and the IDE. We analyzed the videos quantitatively by transcribing logs and extracting personas. Our results show that participants were 30% successful (28 of 94 attempts) at achieving a 100% pass rate on the unit tests. When participants used tools frequently, as in the case of the novice tester and the knowledgeable tester personas, or when they guess at a solution prior to searching, they are more likely to pass all the unit tests. We also found that compile errors often arise when participants searched for a result and copy/pasted the regular expression from another language into their Java files. These results point to future research into making regular expression composition easier for programmers, such as integrating visualization into the IDE to reduce context switching or providing language migration support when reusing regular expressions written in another language to reduce compile errors.},
booktitle = {Proceedings of the 27th International Conference on Program Comprehension},
pages = {197–208},
numpages = {12},
keywords = {regular expressions, problem solving strategies, personas, exploratory study},
location = {Montreal, Quebec, Canada},
series = {ICPC '19}
}

@inproceedings{10.1145/3093338.3093360,
author = {Sampedro, Zebula and Hauser, Thomas and Sood, Saurabh},
title = {Sandstone HPC: A Domain-General Gateway for New HPC Users},
year = {2017},
isbn = {9781450352727},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3093338.3093360},
doi = {10.1145/3093338.3093360},
abstract = {The complexity of high-performance computing (HPC) resources poses many challenges to new users. A number of science gateways have been developed to increase the productivity of novice users by hiding the underlying infrastructure, however these solutions tend not to teach HPC skills that transfer easily outside of the gateway. In this paper we introduce a domain-general gateway, Sandstone HPC, that represents the HPC environment more naturally to novice users by abstracting the command-line interface and providing contextual help. We assess the degree to which Sandstone HPC improves upon the usability of the command-line interface by analyzing the results of a usability study conducted on both environments. We will also detail how the architecture promotes long-term sustainability and a community-development model.},
booktitle = {Proceedings of the Practice and Experience in Advanced Research Computing 2017 on Sustainability, Success and Impact},
articleno = {33},
numpages = {7},
keywords = {Web-Based IDE, User Studies, High-Performance Computing},
location = {New Orleans, LA, USA},
series = {PEARC '17}
}

@inproceedings{10.5555/2392747.2392757,
author = {Ide, Nancy and Suderman, Keith},
title = {A model for linguistic resource description},
year = {2012},
publisher = {Association for Computational Linguistics},
address = {USA},
abstract = {This paper describes a comprehensive standard for resource description developed within ISO TC37 SC4). The standard is instantiated in a system of XML headers that accompany data and annotation documents represented using the the Linguistic Annotation Framework's Graph Annotation Format (GrAF) (Ide and Suderman, 2007; Ide and Suderman, Submitted). It provides mechanisms for describing the organization of the resource, documenting the conventions used in the resource, associating data and annotation documents, and defining and selecting defined portions of the resource and its annotations. It has been designed to accommodate the use of XML technologies for processing, including XPath, XSLT, and, by virtue of the system's linkage strategy, RDF/OWL, and to accommodate linkage to web-based ontologies and data category registries such as the OLiA ontologies (Chiarcos, 2012) and ISOCat (Marc Kemps-Snijders and Wright, 2008).},
booktitle = {Proceedings of the Sixth Linguistic Annotation Workshop},
pages = {57–66},
numpages = {10},
location = {Jeju, Republic of Korea},
series = {LAW VI '12}
}

@inproceedings{10.5555/3106028.3106033,
author = {Wittern, Erik and Ying, Annie and Zheng, Yunhui and Laredo, Jim A. and Dolby, Julian and Young, Christopher C. and Slominski, Aleksander A.},
title = {Opportunities in software engineering research for web API consumption},
year = {2017},
isbn = {9781538628058S},
publisher = {IEEE Press},
abstract = {Nowadays, invoking third party code increasingly involves calling web services via their web APIs, as opposed to the more traditional scenario of downloading a library and invoking the library's API. However, there are also new challenges for developers calling these web APIs. In this paper, we highlight a broad set of these challenges and argue for resulting opportunities for software engineering research to support developers in consuming web APIs. We outline two specific research threads in this context: (1) web API specification curation, which enables us to know the signatures of web APIs, and (2) static analysis that is capable of extracting URLs, HTTP methods etc. of web API calls. Furthermore, we present new work on how we combine (1) and (2) to provide IDE support for application developers consuming web APIs. As web APIs are used broadly, research in supporting the consumption of web APIs offers exciting opportunities.},
booktitle = {Proceedings of the 1st International Workshop on API Usage and Evolution},
pages = {7–10},
numpages = {4},
location = {Buenos Aires, Argentina},
series = {WAPI '17}
}

@inproceedings{10.1145/1370114.1370129,
author = {Happel, Hans-J\"{o}rg and Maalej, Walid and Stojanovi, Ljiljana},
title = {Team: towards a software engineering semantic web},
year = {2008},
isbn = {9781605580395},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1370114.1370129},
doi = {10.1145/1370114.1370129},
abstract = {Large software development projects are complex endeavours that involve numerous participants which can work across several sites and act in various roles. Each participant produces and consumes information relevant for the success of the project. In such settings, an effective and efficient allocation of knowledge is a hard challenge, especially if there is no central authority, which enforces standards for the whole ecosystem. We consider semantic technologies as an important enabler to improve information and knowledge sharing in such scenarios, by helping to exchange and interconnect software engineering knowledge across the web. In this paper, we describe the corresponding vision of a Software Engineering Semantic Web and the role of intelligent IDEs in order to benefit from and contribute to it.},
booktitle = {Proceedings of the 2008 International Workshop on Cooperative and Human Aspects of Software Engineering},
pages = {57–60},
numpages = {4},
keywords = {knowledge sharing, knowledge management, collaboration},
location = {Leipzig, Germany},
series = {CHASE '08}
}

@inproceedings{10.5555/2662737.2662747,
author = {Miglierina, Marco and Gibilisco, Giovanni P. and Ardagna, Danilo and Di Nitto, Elisabetta},
title = {Model based control for multi-cloud applications},
year = {2013},
isbn = {9781467364478},
publisher = {IEEE Press},
abstract = {The advent of cloud computing has offered to developers a new appealing paradigm to deploy their applications without capital investments. Resources can now be acquired on-demand in a flexible, scalable and rapid way. However, cloud providers lack of native mechanisms to guarantee the Quality of Service required by specific application domains. High availability can be achieved by replication of critical components. Since outages could affect the entire cloud provider, replication can be effective only by using multiple providers.In this paper we tackle the above problem and present an approach to guarantee availability requirements of cloud-based applications by exploiting replication on multiple clouds to reduce unavailability, still limiting costs. More precisely, we propose: i) an approach to model, at design time, the application, its availability requirements and the characteristics of the used clouds, and ii) a self-adaptive technique responsible, at runtime, of both in-cloud scaling policies and traffic routing among different cloud providers, by means of a control-theoretical approach.We integrated the modeling approach in the Palladio Bench IDE and developed a runtime self-adaptation controller in Matlab. The controller has been evaluated against different workload conditions, costs variations and service failures in simulated scenarios. The controller has been able to provide the desired availability minimizing costs.},
booktitle = {Proceedings of the 5th International Workshop on Modeling in Software Engineering},
pages = {37–43},
numpages = {7},
keywords = {self-adaptive software, non-functional requirements, multi-cloud applications, control theory, cloud computing, availability},
location = {San Francisco, California},
series = {MiSE '13}
}

@inproceedings{10.1145/2899415.2925504,
author = {Paiva, Jos\'{e} Carlos and Leal, Jos\'{e} Paulo and Queir\'{o}s, Ricardo Alexandre},
title = {Learning Computer Science Languages in Enki},
year = {2016},
isbn = {9781450342315},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2899415.2925504},
doi = {10.1145/2899415.2925504},
abstract = {This paper presents an overview and main features of Enki, a web-based learning environment for computer science languages. Enki was designed to be a sort of entry level IDE, aggregating tools for navigating and viewing course materials, for solving exercises and receiving automated feedback, as well as promoting the learning process. Enki uses services from several other systems, namely for content sequencing and recommendation, exercise assessment, and gamification.},
booktitle = {Proceedings of the 2016 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {254–255},
numpages = {2},
keywords = {sequencing, programming languages, learning, integration, gamification, exercises, educational resources},
location = {Arequipa, Peru},
series = {ITiCSE '16}
}

@inproceedings{10.1145/3281278.3281280,
author = {Baudart, Guillaume and Mandel, Louis and Tardieu, Olivier and Vaziri, Mandana},
title = {A reactive language for analyzing cloud logs},
year = {2018},
isbn = {9781450360708},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3281278.3281280},
doi = {10.1145/3281278.3281280},
abstract = {Log analysis is required in many domains, and especially in the emerging field of cloud computing. Cloud applications are often built by composing diverse services. When something goes wrong, finding the root cause of the problem can be difficult. Many services are only reachable through their Application Programming Interfaces (APIs) with no possibility for live introspection. In this context, logs become an essential tool for monitoring and debugging. Cloud services typically generate very large quantities of log messages, with formats that may not be well specified and may vary over time. In this paper, we present CloudLens, a language for the analysis of semi-structured textual data as found in logs, and specify its formal semantics. CloudLens is a reactive language and views logs as streams of objects. Our objective is to facilitate exploring the contents of logs interactively and to write reusable analyses succinctly, using familiar constructs. We implemented an interpreter for the Apache Zeppelin notebook to provide an interactive IDE. Our prototype implementation is open source and we report on a detailed case study using logs from the Apache OpenWhisk project.},
booktitle = {Proceedings of the 5th ACM SIGPLAN International Workshop on Reactive and Event-Based Languages and Systems},
pages = {61–70},
numpages = {10},
keywords = {Reactive programming, Programming language, Log analysis},
location = {Boston, MA, USA},
series = {REBLS 2018}
}

@inproceedings{10.1145/3532512.3564142,
author = {Kursun, Turgut Reis and Saey, Mathijs and Jonckers, Viviane},
title = {Enhancing DrRacket with Dodona for Learning Scheme},
year = {2022},
isbn = {9781450396561},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3532512.3564142},
doi = {10.1145/3532512.3564142},
abstract = {Learning how to program in a typical setting is challenging because feedback can often not be given immediately. Tracking the work of a student is also challenging for teachers, as the work of a student is not readily accessible. Therefore, digital learning environments have been considered to facilitate the learning process. We aim to facilitate the learning process of beginner students learning Scheme. To this end, we have developed a plugin for the DrRacket IDE (used for Scheme), that communicates with Dodona, a web service geared towards helping students learn how to code. Our plugin uses the information provided by this platform to give students immediate feedback on their code inside the DrRacket IDE. To enable the above, we extended the Dodona platform to support Scheme. As part of our extensions, we introduced several dynamic and static analyses to the Dodona platform, which we use to verify additional properties of the code submitted by students.},
booktitle = {Companion Proceedings of the 6th International Conference on the Art, Science, and Engineering of Programming},
pages = {81–82},
numpages = {2},
keywords = {learning Scheme, DrRacket plugin, Dodona coding platform},
location = {Porto, Portugal},
series = {Programming '22}
}

@article{10.1145/1053331.1053339,
author = {Grossman, Edward},
title = {What’s on Your Hard Drive? What’s on Your Hard Drive?},
year = {2005},
issue_date = {March 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {2},
issn = {1542-7730},
url = {https://doi.org/10.1145/1053331.1053339},
doi = {10.1145/1053331.1053339},
abstract = {Submissions pour in daily, creating piles of late-night prescreening work for the Queue oompa loompas. We’re also receiving e-mail feedback from irate readers, questioning why we published Joe Blow’s emphatic endorsement of such and such IDE when “frankly, it totally sucks.” To accommodate these impulses we’re taking WOYHD to the Web, where we’ll post each month’s results, complete with a comments feature so you can argue about which tools are great and which tools you hate.},
journal = {Queue},
month = {mar},
pages = {18},
numpages = {1}
}

@inproceedings{10.1145/3194793.3194801,
author = {Wittern, Erik},
title = {Web APIs - challenges, design points, and research opportunities: invited talk at the 2nd international workshop on API usage and evolution (WAPI '18)},
year = {2018},
isbn = {9781450357548},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3194793.3194801},
doi = {10.1145/3194793.3194801},
abstract = {Web Application Programming Interfaces (web APIs) provide programmatic, network-based access to remote data or functionalities. Applications, for example, use the Google Places API to learn about nearby establishments, use the Twitter, Instagram, or Facebook API to connect users with friends and family, or use the Stripe API to accept end-user payments. Increasingly, applications themselves consist of micro-services that expose their capabilities to one another using web APIs.In comparison to library APIs, which are a common subject of software engineering research, web APIs present unique challenges - both for providers and consumers - that are arguably much less explored yet [3]. For one, in web APIs, providers control both the API and the runtime providing the capabilities exposed by the API. In consequence, providers may extend, change, or even remove these capabilities or the API, with possibly severe effects for consuming applications. In contrast, applications typically depend on specific versions of software libraries, which can be used even as the library evolves. Being controlled by another party and invoked via network, web API consumers also have to consider and possibly mitigate varying quality of service (QoS) characteristics. Primarily, the availabilities and response times of web APIs change over time, possibly impacting application performance or functionality. Furthermore, the use of library APIs is eased by mechanisms like auto-complete or IDE-integrated documentation (at least in typed languages). In contrast, web APIs commonly lack machine-understandable specifications and consume and provide data in the form of strings. To correctly use a web API, developers have to familiarize with semi-structured documentation pages, often written in HTML - there are only few IDE-based error-checking approaches for web APIs yet [2]. Whereas for many programming languages central package manager services provide unified access to available libraries (think Maven for Java, npm for JavaScript, or RubyGems for Ruby), comprehensive listings of web APIs do not exist, hardening their discovery and selection.In this talk, we outline the characteristics of web APIs causing these challenges. We discuss relevant design points, both for providers and consumers, how these design points have been implemented by different web API paradigms in recent years, and recent attempts to bride these paradigms [1]. Throughout the talk, we give examples of our research to address web API-related challenges. Our goal is to inspire WAPI attendees to take on some of the many research opportunities surrounding web APIs.},
booktitle = {Proceedings of the 2nd International Workshop on API Usage and Evolution},
pages = {18},
numpages = {1},
keywords = {web APIs, software engineering},
location = {Gothenburg, Sweden},
series = {WAPI '18}
}

@inproceedings{10.1145/3287324.3287407,
author = {Liao, Soohyun Nam and Zingaro, Daniel and Alvarado, Christine and Griswold, William G. and Porter, Leo},
title = {Exploring the Value of Different Data Sources for Predicting Student Performance in Multiple CS Courses},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287407},
doi = {10.1145/3287324.3287407},
abstract = {A number of recent studies in computer science education have explored the value of various data sources for early prediction of students' overall course performance. These data sources include responses to clicker questions, prerequisite knowledge, instrumented student IDEs, quizzes, and assignments. However, these data sources are often examined in isolation or in a single course. Which data sources are most valuable, and does course context matter? To answer these questions, this study collected student grades on prerequisite courses, Peer Instruction clicker responses, online quizzes, and assignments, from five courses (over 1000 students) across the CS curriculum at two institutions. A trend emerges suggesting that for upper-division courses, prerequisite grades are most predictive; for introductory programming courses, where no prerequisite grades were available, clicker responses were the most predictive. In concert, prerequisites and clicker responses generally provide highly accurate predictions early in the term, with assignments and online quizzes sometimes providing incremental improvements. Implications of these results for both researchers and practitioners are discussed.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {112–118},
numpages = {7},
keywords = {student outcomes, prediction, machine learning, low-performing students, data structures, cs2, cs1, architecture},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.5555/1600053.1600135,
author = {Dowell, J. and Tscholl, M. and Gladisch, T. and Asgari-Targhi, M.},
title = {Argumentation scheme and shared online diagramming in case-based collaborative learning},
year = {2009},
isbn = {9781409285984},
publisher = {International Society of the Learning Sciences},
abstract = {Argumentation schemes describe patterns of reasoning in discourse. We report an investigation into whether the argumentation scheme known as 'inference to the best explanation' (IBE) captures the argumentation found in collaborative case-based learning. We examine the dialogue of three students working in an online learning environment as they attempt to explain the verdict in a legal case of medical negligence; the IDE scheme is clearly visible in the dialogue. We also report the exploratory development of shared argument diagramming tools that allow learners to draw their explanations while they discuss them. The tools passively reinforce the IBE argumentation scheme. Evaluation of the tools provided the clearest evidence to date that learners are able to integrate their shared online argument diagramming with their computer-mediated dialogue.},
booktitle = {Proceedings of the 9th International Conference on Computer Supported Collaborative Learning - Volume 1},
pages = {567–575},
numpages = {9},
location = {Rhodes, Greece},
series = {CSCL'09}
}

@inproceedings{10.1145/2899415.2899441,
author = {Paiva, Jos\'{e} Carlos and Leal, Jos\'{e} Paulo and Queir\'{o}s, Ricardo Alexandre},
title = {Enki: A Pedagogical Services Aggregator for Learning Programming Languages},
year = {2016},
isbn = {9781450342315},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2899415.2899441},
doi = {10.1145/2899415.2899441},
abstract = {This paper presents Enki, a web-based IDE that integrates several pedagogical tools designed to engage students in learning programming languages. Enki achieves this goal (1) by sequencing educational resources, either expository or evaluative, (2) by using gamification services to entice students to solve activities, (3) by promoting social interaction and (4) by helping students with activities, providing feedback on submitted solutions. The paper describes Enki, its concept and architecture, details its design and implementation, and covers also its validation.},
booktitle = {Proceedings of the 2016 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {332–337},
numpages = {6},
keywords = {sequencing, programming languages, integration, gamification, exercises, educational resources, e-learning},
location = {Arequipa, Peru},
series = {ITiCSE '16}
}

@inproceedings{10.1145/1810295.1810363,
author = {Genev\`{e}s, Pierre and Laya\"{\i}da, Nabil},
title = {Eliminating dead-code from XQuery programs},
year = {2010},
isbn = {9781605587196},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1810295.1810363},
doi = {10.1145/1810295.1810363},
abstract = {One of the challenges in web software development is to help achieving a good level of quality in terms of code size and runtime performance, for increasingly popular domain specific languages such as XQuery. We present an IDE equipped with static analysis features for assisting the programmer. These features are capable of identifying and eliminating dead code automatically. The tool is based on newly developed formal programming language verification techniques [4, 3], which are now mature enough to be introduced in the process of software development.},
booktitle = {Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering - Volume 2},
pages = {305–306},
numpages = {2},
location = {Cape Town, South Africa},
series = {ICSE '10}
}

@inproceedings{10.1145/1985441.1985478,
author = {Schr\"{o}ter, Adrian},
title = {MSR Challenge 2011: Eclipse, Netbeans, Firefox, and Chrome},
year = {2011},
isbn = {9781450305747},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1985441.1985478},
doi = {10.1145/1985441.1985478},
abstract = {The MSR Challenge aims at offering researchers and practitioners in the area of Mining Software Repositories a shared set of software repositories, enabling them to compare their tools and approaches. This year, the main theme of the challenge was on the comparison of projects. We selected four open source projects, and challenged participants to use their brains, tools, computational power, and magic to compare them and uncover interesting similarities and differences. The projects were Eclipse and Netbeans, two popular IDEs written in Java (Group 1) and Firefox and Chrome, two web browsers written in C/C++ (Group 2). We encouraged participants to analyze more than one project, ideally in the same group but allowed them to analyze a single project.},
booktitle = {Proceedings of the 8th Working Conference on Mining Software Repositories},
pages = {227–229},
numpages = {3},
keywords = {report, data repositories},
location = {Waikiki, Honolulu, HI, USA},
series = {MSR '11}
}

@inproceedings{10.1145/2048066.2048121,
author = {Hemel, Zef and Visser, Eelco},
title = {Declaratively programming the mobile web with Mobl},
year = {2011},
isbn = {9781450309400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2048066.2048121},
doi = {10.1145/2048066.2048121},
abstract = {A new generation of mobile touch devices, such as the iPhone, iPad and Android devices, are equipped with powerful, modern browsers. However, regular websites are not optimized for the specific features and constraints of these devices, such as limited screen estate, unreliable Internet access, touch-based interaction patterns, and features such as GPS. While recent advances in web technology enable web developers to build web applications that take advantage of the unique properties of mobile devices, developing such applications exposes a number of problems, specifically: developers are required to use many loosely coupled languages with limited tool support and application code is often verbose and imperative. We introduce mobl, a new language designed to declaratively construct mobile web applications. Mobl integrates languages for user interface design, styling, data modeling, querying and application logic into a single, unified language that is flexible, expressive, enables early detection of errors, and has good IDE support.},
booktitle = {Proceedings of the 2011 ACM International Conference on Object Oriented Programming Systems Languages and Applications},
pages = {695–712},
numpages = {18},
keywords = {mobile web, mobile development, mobile, domain-specific language},
location = {Portland, Oregon, USA},
series = {OOPSLA '11}
}

@article{10.14778/2733004.2733052,
author = {Fu, Yupeng and Ong, Kian Win and Papakonstantinou, Yannis and Zamora, Erick},
title = {Forward: data-centric UIS using declarative templates that efficiently wrap third-party JavaScript components},
year = {2014},
issue_date = {August 2014},
publisher = {VLDB Endowment},
volume = {7},
number = {13},
issn = {2150-8097},
url = {https://doi.org/10.14778/2733004.2733052},
doi = {10.14778/2733004.2733052},
abstract = {While Ajax programming and the plethora of JavaScript component libraries enable high-quality Uls in web applications, integrating them with page data is laborious and error-prone as a developer has to handcode incremental modifications with trigger-based programming and manual coordination of data dependencies. The FORWARD web framework simplifies the development of Ajax applications through declarative, state-based templates. This declarative, data-centric approach is characterized by the principle of logical/physical independence, which the database community has often deployed successfully. It enables FORWARD to leverage database techniques, such as incremental view maintenance, updatable views, capability-based component wrappers and cost-based optimization to automate efficient live visualizations. We demonstrate an end-to-end system implementation, including a web-based IDE (itself built in FORWARD), academic and commercial applications built in FORWARD and a wide variety of JavaScript components supported by the declarative templates.},
journal = {Proc. VLDB Endow.},
month = {aug},
pages = {1649–1652},
numpages = {4}
}

@inproceedings{10.1145/3426425.3426945,
author = {Barash, Mikhail},
title = {Example-driven software language engineering},
year = {2020},
isbn = {9781450381765},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3426425.3426945},
doi = {10.1145/3426425.3426945},
abstract = {Language workbenches---tools to define software languages together with their IDEs---are designed to simplify language engineering and implementation: they free language engineers from many meticulous tasks, but oftentimes have a very steep learning curve even for experienced software professionals. With the assumption that meta-definitions are one of the key factors that hinder language engineering, we introduce an example-driven approach to language definition. We describe in this paper our vision of a web-based tool aimed at beginner language engineers, and list possible requirements for such a tool. A language is defined by giving examples of code written in it using illustrative syntax definition. These examples are then annotated to specify different concerns of language definition---abstract syntax, typing rules, validation rules, formatting rules, and dynamic semantics.},
booktitle = {Proceedings of the 13th ACM SIGPLAN International Conference on Software Language Engineering},
pages = {246–252},
numpages = {7},
keywords = {transformations, language engineering, implicit modeling, illustrative syntax definition, example-driven},
location = {Virtual, USA},
series = {SLE 2020}
}

@inproceedings{10.1145/2567948.2578036,
author = {Tomassetti, Federico and Rizzo, Giuseppe and Troncy, Raphael},
title = {CrossLanguageSpotter: a library for detecting relations in polyglot frameworks},
year = {2014},
isbn = {9781450327459},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2567948.2578036},
doi = {10.1145/2567948.2578036},
abstract = {Nowadays, most of the web frameworks are developed using different programming languages, both for server and client side programmes. The typical scenario includes a general purpose language (e.g. Ruby, Python, Java) used together with different specialized languages: HTML, CSS, Javascript and SQL. All the artifacts are connected via different types of relations, most of which depend on the adopted framework. These cross-language relations are normally not captured by tools which require the developer to learn and to remember those associations in order to understand and maintain the application. This paper describes a library for detecting cross-language relations in polyglot frameworks. The library has been developed to be modular and to be easily integrated in existing IDEs. The library is publicly available at http://github.com/CrossLanguageProject/crosslanguagespotter},
booktitle = {Proceedings of the 23rd International Conference on World Wide Web},
pages = {583–586},
numpages = {4},
keywords = {tool support, polyglot development, cross-language relations},
location = {Seoul, Korea},
series = {WWW '14 Companion}
}

@inproceedings{10.1145/2855667.2855676,
author = {Akhin, Marat and Suhinin, Alexandr},
title = {Discovering clones in software: from complex algorithms to everyday desktop tool},
year = {2015},
isbn = {9781450341301},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2855667.2855676},
doi = {10.1145/2855667.2855676},
abstract = {Software clone detection is an actively researched area which has spawned numerous approaches to the problem of duplicated code. These approaches, however, are of little practical use as most of them are ill-suited for incremental analysis required by the developers in their day-to-day activities. This paper tackles the problem of clone detection from the practical point of view, in the context of IDE integration, and presents an online clone detection algorithm based on extended suffix trees. The approach has been tested in a prototype plugin for IntelliJ IDEA and proved its applicability in the industrial setting.},
booktitle = {Proceedings of the 11th Central &amp; Eastern European Software Engineering Conference in Russia},
articleno = {8},
numpages = {6},
keywords = {suffix trie, clone detection, IDE},
location = {Moscow, Russia},
series = {CEE-SECR '15}
}

@inproceedings{10.1145/2846650.2846652,
author = {Bohez, Steven and De Coninck, Elias and Verbelen, Tim and Dhoedt, Bart},
title = {Androsgi: bringing the power of OSGi to Android},
year = {2015},
isbn = {9781450339049},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2846650.2846652},
doi = {10.1145/2846650.2846652},
abstract = {Nowadays, Android is by far the most popular operating system on a myriad of mobile devices. Although based on the Java programming language, Android does not offer the same benefits as a dynamic software module system such as OSGi. Nevertheless OSGi would have many advantages on mobile environments. Software modularity allows you to only deploy the required pieces of software at runtime. Moreover, many of the enterprise OSGi specifications facilitate the development of distributed applications connecting to the Cloud. In order to exploit these advantages on Android, we present Androsgi, an Eclipse IDE plugin that allows you to easily run OSGi on top of Android. The Androsgi plugin facilitates deploying OSGi bundles, and calling both local and remote OSGi services from within your Android application.},
booktitle = {Proceedings of the on Eclipse Technology EXchange},
pages = {1–6},
numpages = {6},
keywords = {OSGi, Eclipse, Bndtools, Android},
location = {Pittsburgh, PA, USA},
series = {ETX 2015}
}

@inproceedings{10.1145/2462932.2462979,
author = {Arapov, Pavel and Buffa, Michel},
title = {WikiNext, a JavaScript wiki with semantic features},
year = {2012},
isbn = {9781450316057},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2462932.2462979},
doi = {10.1145/2462932.2462979},
abstract = {WikiNext, is a semantic wiki prototype written in JavaScript, from database to server and client code. It is not in competition with wikis like Semantic Media Wiki, but more a test bed for new ideas. Every wiki page is an application that keeps a Web Socket open with the server, enabling incremental saves or collaborative editions using Google wave like algorithms. Using JavaScript on the whole chain of operations avoids data transformation from/to different formats like in traditional approaches (Objects, JSON/XML, and SQL). WikiNext uses JavaScript distributed objects and includes an IDE to write JS applications within wiki pages.},
booktitle = {Proceedings of the Eighth Annual International Symposium on Wikis and Open Collaboration},
articleno = {39},
numpages = {3},
keywords = {wiki, web socket, semantic web, linked open data, RDF, NodeJS, MongoDB, JavaScript, HTML5},
location = {Linz, Austria},
series = {WikiSym '12}
}

@inproceedings{10.1145/2384616.2384624,
author = {Schiller, Todd W. and Ernst, Michael D.},
title = {Reducing the barriers to writing verified specifications},
year = {2012},
isbn = {9781450315616},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2384616.2384624},
doi = {10.1145/2384616.2384624},
abstract = {Formally verifying a program requires significant skill not only because of complex interactions between program subcomponents, but also because of deficiencies in current verification interfaces. These skill barriers make verification economically unattractive by preventing the use of less-skilled (less-expensive) workers and distributed workflows (i.e., crowdsourcing). This paper presents VeriWeb, a web-based IDE for verification that decomposes the task of writing verifiable specifications into manageable subproblems. To overcome the information loss caused by task decomposition, and to reduce the skill required to verify a program, VeriWeb incorporates several innovative user interface features: drag and drop condition construction, concrete counterexamples, and specification inlining.To evaluate VeriWeb, we performed three experiments. First, we show that VeriWeb lowers the time and monetary cost of verification by performing a comparative study of VeriWeb and a traditional tool using 14 paid subjects contracted hourly from Exhedra Solution's vWorker online marketplace. Second, we demonstrate the dearth and insufficiency of current ad-hoc labor marketplaces for verification by recruiting workers from Amazon's Mechanical Turk to perform verification with VeriWeb. Finally, we characterize the minimal communication overhead incurred when VeriWeb is used collaboratively by observing two pairs of developers each use the tool simultaneously to verify a single program.},
booktitle = {Proceedings of the ACM International Conference on Object Oriented Programming Systems Languages and Applications},
pages = {95–112},
numpages = {18},
keywords = {program verification, human factors, crowdsourcing},
location = {Tucson, Arizona, USA},
series = {OOPSLA '12}
}

@inproceedings{10.1145/3334480.3383069,
author = {Abtahi, Parastoo and Dietz, Griffin},
title = {Learning Rust: How Experienced Programmers Leverage Resources to Learn a New Programming Language},
year = {2020},
isbn = {9781450368193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3334480.3383069},
doi = {10.1145/3334480.3383069},
abstract = {Experienced programmers are capable of learning new programming languages independently using various available resources, but we lack a comprehensive understanding of which resources they find most valuable in doing so. In this paper, we study how experienced programmers learn Rust, a systems programming language with extensive documentation and example code, an active online community, and descriptive compiler errors. We develop a task that requires learning Rust syntax and comprehending the Rust-specific approach to mutability and ownership. Our results show that users spend 43% of online time viewing example code and that programmers appreciate in-line compiler errors, choosing to refresh, on average, every 30.6 seconds after first discovering this feature. The average time between these refreshes predicted total task time, but individual resource choices did not. Based on our findings we offer design implications for language and IDE developers.},
booktitle = {Extended Abstracts of the 2020 CHI Conference on Human Factors in Computing Systems},
pages = {1–8},
numpages = {8},
keywords = {computer science education, learning resources, programming languages, rust},
location = {<conf-loc>, <city>Honolulu</city>, <state>HI</state>, <country>USA</country>, </conf-loc>},
series = {CHI EA '20}
}

@inproceedings{10.1145/967900.968239,
author = {Chang, Yen-Jen and Weng, Yung-Ching and Lai, Feipei},
title = {Enhanced object management for high performance web proxies},
year = {2004},
isbn = {1581138121},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/967900.968239},
doi = {10.1145/967900.968239},
abstract = {The dramatic increase of WWW traffic on the Internet has led to the wide use of web proxy. The web proxies can be used to improve security, save network bandwidth and reduce network latency. However, as the network bandwidth increased, the general-purpose file system is rapidly becoming the performance bottleneck of web proxies. In this paper, we propose an enhanced object management, called UNIFIED, which is a user-level technique for improving the performance of web proxy. In UNIFIED method, several techniques are developed to improve the disk I/O performance. Instead of the traditional trace-driven simulation, we employ Polygraph 2.5.4 with Polymix-3 workload to evaluate our system realistically. To investigate how the proxy performance depends on the equipped disk, we offer two sets of test machines. One is equipped with one IDE disk and the other is equipped with five SCSI disks. Experimental results show that, in both tests, our method can improve the proxy performance dramatically by reducing the overhead associated with disk I/O.},
booktitle = {Proceedings of the 2004 ACM Symposium on Applied Computing},
pages = {1711–1716},
numpages = {6},
keywords = {user-level, polygraph, disk I/O, Web Proxies},
location = {Nicosia, Cyprus},
series = {SAC '04}
}

@inproceedings{10.1145/2635868.2635928,
author = {Nguyen, Hung Viet and K\"{a}stner, Christian and Nguyen, Tien N.},
title = {Building call graphs for embedded client-side code in dynamic web applications},
year = {2014},
isbn = {9781450330565},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2635868.2635928},
doi = {10.1145/2635868.2635928},
abstract = {When developing and maintaining a software system, programmers often rely on IDEs to provide editor services such as syntax highlighting, auto-completion, and "jump to declaration". In dynamic web applications, such tool support is currently limited to either the server-side code or to hand-written or generated client-side code. Our goal is to build a call graph for providing editor services on client-side code while it is still embedded as string literals within server-side code. First, we symbolically execute the server-side code to identify all possible client-side code variations. Subsequently, we parse the generated client-side code with all its variations into a VarDOM that compactly represents all DOM variations for further analysis. Based on the VarDOM, we build conditional call graphs for embedded HTML, CSS, and JS. Our empirical evaluation on real-world web applications show that our analysis achieves 100% precision in identifying call-graph edges. 62% of the edges cross PHP strings, and 17% of them cross files - in both situations, navigation without tool support is tedious and error prone.},
booktitle = {Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
pages = {518–529},
numpages = {12},
keywords = {Web Code Analysis, Embedded Code, Call Graphs},
location = {Hong Kong, China},
series = {FSE 2014}
}

@article{10.1145/1273039.1273042,
author = {Pareja-Flores, Crist\'{o}bal and Urquiza-Fuentes, Jamie and Vel\'{a}zquez-Iturbide, J. \'{A}ngel},
title = {WinHIPE: an IDE for functional programming based on rewriting and visualization},
year = {2007},
issue_date = {March 2007},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {42},
number = {3},
issn = {0362-1340},
url = {https://doi.org/10.1145/1273039.1273042},
doi = {10.1145/1273039.1273042},
abstract = {The article describes an IDE for functional programming, called WinHIPE. It provides an interactive and flexible tracer, as well as a powerful visualization and animation system. The former tool is based on the rewriting model of evaluation, and the latter provides automatic generation of visualizations and animations, friendly support for customization, maintenance and exportation of animations to the Web, and facilities to cope with large scale. Its main advantage over other visualization systems is an effortless approach to animation creation and maintenance, based on generating visualizations and animations automatically, as a side effect of program execution. Finally, we briefly describe our experience using the system during several years in educational settings.},
journal = {SIGPLAN Not.},
month = {mar},
pages = {14–23},
numpages = {10},
keywords = {tracing, term rewriting, programming environments, program visualization, program animation, functional programming, expression evaluation}
}

@inproceedings{10.1145/3408877.3432517,
author = {Bigman, Maxwell and Roy, Ethan and Garcia, Jorge and Suzara, Miroslav and Wang, Kaili and Piech, Chris},
title = {PearProgram: A More Fruitful Approach to Pair Programming},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3432517},
doi = {10.1145/3408877.3432517},
abstract = {In this paper we present PearProgram, a hybrid learning and research tool that helps introductory Computer Science (CS) students learn how to pair program, including in remote learning environments. Grounded in theory from the Learning Sciences, the tool -- a collaborative, online IDE -- has two primary goals: 1) to help introductory CS students achieve pair programming success; and 2) to research what factors contribute to pairs that have beneficial outcomes. We present our learnings from the use of PearProgram in three remote introductory CS courses: a CS1 course, and two large international courses, including one for high school students. Teacher and student users responded positively to PearProgram, and use of the tool was associated with beneficial learning outcomes in these online learning environments. Our research opens many future research directions for (remote) pair programming, and indicates practices that may prove useful for CS educators at all levels.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {900–906},
numpages = {7},
keywords = {pair programming, online learning, cs1, covid-19, computing education},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/3193992.3194002,
author = {Wickert, Alexander and Lamprecht, Anna-Lena and Margaria, Tiziana},
title = {Domain-specific design of patient classification in cancer-related cachexia research},
year = {2018},
isbn = {9781450357180},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3193992.3194002},
doi = {10.1145/3193992.3194002},
abstract = {We apply an IDE for user-level process design and composition to a real-life case study: a complex workflow from an ongoing global cancer-related cachexia research project. Originally buried in a manually operated spreadsheet, the process is now fully automated and integrated into the project database, ensuring the immediate availability, consistency and reproducibility of the outcomes. Our integrated solution enables the scientists to immediately execute the processes and easily customize both processes and data model to continuously changing experimental setups. The data modeling is provided by the Dynamic Web Application framework and the process modeling functionalities by the Java Application Building Center, both following the paradigm of eXtreme Model-Driven Design for model-driven software development.},
booktitle = {Proceedings of the 6th Conference on Formal Methods in Software Engineering},
pages = {60–63},
numpages = {4},
keywords = {workflow design, scientific workflows, process modeling, model-driven software development, domain-specific modeling},
location = {Gothenburg, Sweden},
series = {FormaliSE '18}
}

@inproceedings{10.1145/3479645.3479652,
author = {Maulana, Fairuz Iqbal and Susanto, Vincentius and Shilo, Putri and Gunawan, Julio and Pangestu, Gusti and Budi Raharja, Dwi Riza},
title = {Design and Development of Website Dr.Changkitchen Diet Catering Using SDLC Waterfall Model},
year = {2021},
isbn = {9781450384070},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3479645.3479652},
doi = {10.1145/3479645.3479652},
abstract = {Diet catering is intended for those who have a goal to live healthier and lose weight. This is done by paying attention to the amount of nutrition or nutrition. The writing of this report aims to develop a web-based diet catering business so that the transaction process between the two parties is easier and faster. The web development process consists of several stages: Analysis, Design, Implementation and Testing Deployment, Maintenance. This diet catering web development uses Brackets as the IDE and by implementing the Waterfall software development model. This website is a way to promote our diet catering products and also to simplify and streamline the transaction path between sellers and buyers because all activities and goals of users will be included in the data. Users who can access this website will be divided into 3 users as non-members, members, and admin. The Non-members can view products and testimonials on our homepage and if nonmembers want to make a purchase, they can order by using social media such as Instagram, Whatsapp, and Line. The Members can make orders and transactions through website. Admin will see the existing transaction process and perform maintenance on the web.},
booktitle = {Proceedings of the 6th International Conference on Sustainable Information Engineering and Technology},
pages = {75–79},
numpages = {5},
keywords = {website, waterfall, hci, diet catering, design},
location = {Malang, Indonesia},
series = {SIET '21}
}

@inproceedings{10.1145/2642918.2647349,
author = {LaToza, Thomas D. and Towne, W. Ben and Adriano, Christian M. and van der Hoek, Andr\'{e}},
title = {Microtask programming: building software with a crowd},
year = {2014},
isbn = {9781450330695},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2642918.2647349},
doi = {10.1145/2642918.2647349},
abstract = {Microtask crowdsourcing organizes complex work into workflows, decomposing large tasks into small, relatively independent microtasks. Applied to software development, this model might increase participation in open source software development by lowering the barriers to contribu-tion and dramatically decrease time to market by increasing the parallelism in development work. To explore this idea, we have developed an approach to decomposing programming work into microtasks. Work is coordinated through tracking changes to a graph of artifacts, generating appropriate microtasks and propagating change notifications to artifacts with dependencies. We have implemented our approach in CrowdCode, a cloud IDE for crowd development. To evaluate the feasibility of microtask programming, we performed a small study and found that a small crowd of 12 workers was able to successfully write 480 lines of code and 61 unit tests in 14.25 person-hours of time.},
booktitle = {Proceedings of the 27th Annual ACM Symposium on User Interface Software and Technology},
pages = {43–54},
numpages = {12},
keywords = {programming tools, development environment, crowdsourcing},
location = {Honolulu, Hawaii, USA},
series = {UIST '14}
}

@inproceedings{10.1145/3375258.3375259,
author = {Wang, Chen-Wei},
title = {Creating Tutorial Materials as Lecture Supplements by Integrating Drawing Tablet and Video Capturing/Sharing},
year = {2020},
isbn = {9781450377171},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3375258.3375259},
doi = {10.1145/3375258.3375259},
abstract = {We report the experience of adopting an innovative technique for creating tutorial videos which complement lectures and facilitate students' learning. Our technique relies on: 1) preparing starter pages consisting of code fragments or writings/figures on a drawing tablet; 2) illustrating complex ideas on the drawing tablet; 3) recording all computer desktop activities (e.g., development of code on a programming IDE, illustration on the drawing tablet); and 4) sharing the recorded tutorial videos with students online. Our technique has been adopted in creating tutorial series for four Computer Science and Engineering courses, ranging from the first year to the third year. Analytics of these online tutorial videos is presented to show the average amount of time which each registered student spent on watching them. Course evaluation results indicate that our technique is perceived as effective for achieving the course learning outcomes. Comparison of students' performance on complex topics (arrays and loops) also indicates a positive impact of our approach.},
booktitle = {Proceedings of the 8th Computer Science Education Research Conference},
pages = {1–8},
numpages = {8},
keywords = {Tutorial Videos, Large Class, Laboratory Assignments, Instructional Technologies, Computational Thinking},
location = {Larnaca, Cyprus},
series = {CSERC '19}
}

@inproceedings{10.1145/3108421.3108429,
author = {Woon, Hoe-Chun and Bau, Yoon-Teck},
title = {Difficulties in Learning C++ and GUI Programming with Qt Platform: View of Students},
year = {2017},
isbn = {9781450352482},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3108421.3108429},
doi = {10.1145/3108421.3108429},
abstract = {We have conducted a C++ and GUI programming workshop with Qt platform and a set of 14 tutorials on the several of concepts and topics of programming fundamentals and Qt framework. This is a programming workshop with computer lab sessions without any formal lectures. The aim is to understand how difficulties for students in learning C++ and GUI programming. A set of web-based questionnaire according to the 14 fundamental programming tutorials has been conducted and come out with an analysis and discussion of results. Preliminary result has shown that the students could create GUI applications easily with the difficult and multi-paradigm programming language such as C++ using programming IDE tools that comes with GUI builder.},
booktitle = {Proceedings of the 1st International Conference on E-Commerce, E-Business and E-Government},
pages = {15–19},
numpages = {5},
keywords = {programming difficulties, programming basics, object-oriented programming (OOP), graphical user interface (GUI) programming, Qt framework, Programming fundamentals, C++},
location = {Turku, Finland},
series = {ICEEG '17}
}

@inproceedings{10.1145/3183440.3183481,
author = {Cito, J\"{u}rgen and Leitner, Philipp and Bosshard, Christian and Knecht, Markus and Mazlami, Genc and Gall, Harald C.},
title = {PerformanceHat: augmenting source code with runtime performance traces in the IDE},
year = {2018},
isbn = {9781450356633},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3183440.3183481},
doi = {10.1145/3183440.3183481},
abstract = {Performance problems observed in production environments that have their origin in program code are immensely hard to localize and prevent. Data that can help solve such problems is usually found in external dashboards and is thus not integrated into the software development process. We propose an approach that augments source code with runtime traces to tightly integrate runtime performance traces into developer workflows. Our goal is to create operational awareness of performance problems in developers' code and contextualize this information to tasks they are currently working on. We implemented this approach as an Eclipse IDE plugin for Java applications that is available as an open source project on GitHub. A video of PerformanceHat in action is online: https://youtu.be/fTBBiylRhag},
booktitle = {Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings},
pages = {41–44},
numpages = {4},
keywords = {software performance engineering, program analysis, development workflow},
location = {Gothenburg, Sweden},
series = {ICSE '18}
}

@inproceedings{10.1145/1967486.1967492,
author = {Dignum, Frank and Padget, Julian and Vasconcelos, Wamberto},
title = {Organizing services for a changing environment},
year = {2010},
isbn = {9781450304214},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1967486.1967492},
doi = {10.1145/1967486.1967492},
abstract = {Service-oriented computing is the "new wave" emerging from the growing up of web services and its adoption of elements of semantic web technology. More sophistication, in response to business requirements, does of course not make it easier to use or to control. In particular business processes demand resilience and (real-time) adaptation in the face of changing business requirements, incorporation of alternative services and finding suitable substitutes when those needed are not available. The EU-funded ALIVE project is prototyping ideas, driven by commercial and industrial uses cases, that utilize research in organizational modelling, software agents, model-driven engineering, artificial intelligence, semantic web and web services to construct tools and demonstrators to address these needs. This tutorial will focus on a use case from the ALIVE project (in one of the domains of crisis management, communications, or information services), discuss the requirements that arise from it and then explore it from the three perspectives that characterize the ALIVE approach: organizations, coordination and services, all illustrated by the innovative tools that have been developed during the project.More information about the ALIVE project can be downloaded from http://www.ist-alive.eu and a public release of the ALIVE tools, integrated into the Eclipse IDE will be available from mid October via the above website.},
booktitle = {Proceedings of the 12th International Conference on Information Integration and Web-Based Applications &amp; Services},
pages = {16},
numpages = {1},
keywords = {services, organizations, agents},
location = {Paris, France},
series = {iiWAS '10}
}

@inproceedings{10.1145/1852786.1852802,
author = {Nguyen-Hoan, Luke and Flint, Shayne and Sankaranarayana, Ramesh},
title = {A survey of scientific software development},
year = {2010},
isbn = {9781450300391},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1852786.1852802},
doi = {10.1145/1852786.1852802},
abstract = {Software for scientific research purposes has received increased attention in recent years. Case studies have noted development practices, limitations, and problems in the development of scientific software. However, applicability of the results of these studies to improving the wider scientific software development practices is not known. This paper presents a survey of 60 scientific software developers. The survey was conducted online from August--September 2009, and aims to identify where improvements to scientific software practices can be made. While our results generally confirm previous work, we have found some notable differences. The use of IDEs and version control tools among the surveyed scientific software developers has increased, and trace-ability of scientific software is not as important to scientific software developers as it is to scientific software users. Documentation also appears to be more widely produced than previous studies indicate. However, there remains room for improvement in tool use, documentation, testing, and verification activities for scientific software development.},
booktitle = {Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement},
articleno = {12},
numpages = {10},
keywords = {survey, software engineering, scientists, scientific software},
location = {Bolzano-Bozen, Italy},
series = {ESEM '10}
}

@inproceedings{10.3115/1119296.1119300,
author = {Narayanan, Srinivas and Petruck, Miriam R. L. and Baker, Collin F. and Fillmore, Charles J.},
title = {Putting FrameNet data into the ISO linguistic annotation framework},
year = {2003},
publisher = {Association for Computational Linguistics},
address = {USA},
url = {https://doi.org/10.3115/1119296.1119300},
doi = {10.3115/1119296.1119300},
abstract = {This paper describes FrameNet (Lowe et al., 1997; Baker et al., 1998; Fillmore et al., 2002), an online lexical resource for English based on the principles of frame semantics (Fillmore, 1977a; Fillmore, 1982; Fillmore and Atkins, 1992), and considers the FrameNet database in reference to the proposed ISO model for linguistic annotation of language resources (ISO TC37 SC4 )(ISO, 2002; Ide and Romary, 2001b). We provide a data category specification for frame semantics and FrameNet annotations in an RDF-based language. More specifically, we provide a DAML+OIL markup for lexical units, defined as a relation between a lemma and a semantic frame, and frame-to-frame relations, namely Inheritance and Subframes. The paper includes simple examples of FrameNet annotated sentences in an XML/RDF format that references the project-specific data category specification.},
booktitle = {Proceedings of the ACL 2003 Workshop on Linguistic Annotation: Getting the Model Right - Volume 19},
pages = {22–29},
numpages = {8},
location = {Sapporo, Japan},
series = {LingAnnot ;03}
}

@inproceedings{10.1145/1117696.1117717,
author = {Allowatt, Anthony and Edwards, Stephen H.},
title = {IDE Support for test-driven development and automated grading in both Java and C++},
year = {2005},
isbn = {1595933425},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1117696.1117717},
doi = {10.1145/1117696.1117717},
abstract = {Students need to learn testing skills, and using test-driven development on assignments is one way to help students learn. We use a flexible automated grading system called Web-CAT to assess student assignments, including the validity and completeness of their own test cases. By building on existing educational plug-ins for Eclipse, and adding our own plug-ins for electronic submission and for unit testing support in C++, we are able to use Eclipse as a portal to all the services our students will need, allowing them to accomplish all their tasks entirely within the IDE, from their project's inception to its submission and evaluation. Further, we are able to carry students through the transition from Java programming to C++ programming within this same environment.},
booktitle = {Proceedings of the 2005 OOPSLA Workshop on Eclipse Technology EXchange},
pages = {100–104},
numpages = {5},
keywords = {test-first coding, test-driven development, extreme programming, electronic grading, electronic assignment submission, Eclipse IDE},
location = {San Diego, California},
series = {eclipse '05}
}

@inproceedings{10.1109/ASE51524.2021.9678934,
author = {Xie, Sophie and Yang, Junwen and Lu, Shan},
title = {Automated code refactoring upon database-schema changes in web applications},
year = {2022},
isbn = {9781665403375},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ASE51524.2021.9678934},
doi = {10.1109/ASE51524.2021.9678934},
abstract = {Modern web applications manipulate a large amount of user data and undergo frequent data-schema changes. These changes bring up a unique refactoring task: updating application code to be consistent with data schema. Previous study and our own investigation show that this type of refactoring is error-prone and time-consuming for developers. This paper presents EvolutionSaver, a static code analysis and transformation tool that automates schema-related code refactoring and consistency checking. EvolutionSaver is implemented as an IDE plugin that works for both Rails and Django applications. The source code of EvolutionSaver is available on Github [1] and the plugin can be downloaded from Visual Studio Marketplace [2], with its tutorial available at https://www.youtube.com/watch?v=qBiMkLFIjbE and DOI 10.5281/zenodo.5276127.},
booktitle = {Proceedings of the 36th IEEE/ACM International Conference on Automated Software Engineering},
pages = {1262–1265},
numpages = {4},
location = {Melbourne, Australia},
series = {ASE '21}
}

@inproceedings{10.1145/2656434.2656440,
author = {Kim, William and Chung, Sam and Endicott-Popovsky, Barbara},
title = {Software architecture model driven reverse engineering approach to open source software development},
year = {2014},
isbn = {9781450327114},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2656434.2656440},
doi = {10.1145/2656434.2656440},
abstract = {Popular Open Source Software (OSS) development platforms like GitHub, Google Code, and Bitbucket take advantage of some best practices of traditional software development like version control and issue tracking. Current major open source software environments, including IDE tools and online code repositories, do not provide support for visual architecture modeling. Research has shown that visual modeling of complex software projects has benefits throughout the software lifecycle. Then why is it that software architecture modeling is so conspicuously missing from popular online open source code repositories? How can including visual documentation improve the overall quality of open source software projects? Our goal is to answer both of these questions and bridge the gap between traditional software engineering best practices and open source development by applying a software architecture documentation methodology using Unified Modeling Language, called 5W1H Re-Doc, on a real open source project for managing identity and access, MITREid Connect. We analyze the effect of a model-driven software engineering approach on collaboration of open source contributors, quality of specification conformance, and state-of-the-art of architecture modeling. Our informal experiment revealed that in some cases, having the visual documentation can significantly increase comprehension of an online OSS project over having only the textual information that currently exists for that project.},
booktitle = {Proceedings of the 3rd Annual Conference on Research in Information Technology},
pages = {9–14},
numpages = {6},
keywords = {software architecture documentation, open source software development, model-driven software engineering},
location = {Atlanta, Georgia, USA},
series = {RIIT '14}
}

@inproceedings{10.1145/3579028.3609014,
author = {Loth, Jacob and Sundermann, Chico and Schrull, Tobias and Brugger, Thilo and Rieg, Felix and Th\"{u}m, Thomas},
title = {UVLS: A Language Server Protocol For UVL},
year = {2023},
isbn = {9798400700927},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3579028.3609014},
doi = {10.1145/3579028.3609014},
abstract = {The Universal Variability Language (UVL) is a community-driven textual format for feature models. Over the last few years, UVL has been integrated into several relevant product-line tools. One of UVLs major advantages is its manual readability and editability. Still, without automated support it is hard to overview larger UVL models. We implemented a language server protocol (LSP) that includes syntactical and semantic analyses of UVL files. The LSP comes with several handy features to make textual editing of UVL more convenient, such as syntax checks and anomaly detection. Furthermore, the LSP supports the configuration of UVL files in a web-based editor with decision propagation. The reasoning engine supports constraints with a high level of expressiveness, such as numerical and string features. Due to the generic interface of LSPs, UVL can be integrated into modern IDEs with only small efforts. We already integrated the LSP into Visual Studio Code and NeoVim.},
booktitle = {Proceedings of the 27th ACM International Systems and Software Product Line Conference - Volume B},
pages = {43–46},
numpages = {4},
keywords = {variability language, language server protocol, feature modeling},
location = {Tokyo, Japan},
series = {SPLC '23}
}

@inproceedings{10.1145/2702123.2702319,
author = {Ou, Jibin and Vechev, Martin and Hilliges, Otmar},
title = {An Interactive System for Data Structure Development},
year = {2015},
isbn = {9781450331456},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2702123.2702319},
doi = {10.1145/2702123.2702319},
abstract = {Data structure algorithms are of fundamental importance in teaching and software development, yet are difficult to understand. We propose a new approach for understanding, debugging and developing heap manipulating data structures. The key technical idea of our work is to combine deep parametric abstraction techniques emerging from the area of static analysis with interactive abstraction manipulation. Our approach bridges program analysis with HCI and enables new capabilities not possible before: i) online automatic visualization of the data structure in a way which captures its essential operation, thus enabling powerful local reasoning, and ii) fine grained pen and touch gestures allowing for interactive control of the abstraction -- at any point the developer can pause the program, graphically interact with the data, and continue program execution. These features address some of the most pressing challenges in developing data structures. We implemented our approach in a Java-based system called FluiEdt and evaluated it with $27$ developers. The results indicate that FluiEdt is more effective in helping developers find data structure errors than existing state of the art IDEs (e.g. Eclipse) or pure visualization based approaches.},
booktitle = {Proceedings of the 33rd Annual ACM Conference on Human Factors in Computing Systems},
pages = {3053–3062},
numpages = {10},
keywords = {software development, program analysis, debugging},
location = {Seoul, Republic of Korea},
series = {CHI '15}
}

@inproceedings{10.5555/2337223.2337390,
author = {Roehm, Tobias and Maalej, Walid},
title = {Automatically detecting developer activities and problems in software development work},
year = {2012},
isbn = {9781467310673},
publisher = {IEEE Press},
abstract = {Detecting the current activity of developers and problems they are facing is a prerequisite for a context-aware assistance and for capturing developers experiences during their work. We present an approach to detect the current activity of software developers and if they are facing a problem. By observing developer actions like changing code or searching the web, we detect whether developers are locating the cause of a problem, searching for a solution, or applying a solution. We model development work as recurring problem solution cycle, detect developer's actions by instrumenting the IDE, translate developer actions to observations using ontologies, and infer developer activities by using Hidden Markov Models. In a preliminary evaluation, our approach was able to correctly detect 72% of all activities. However, a broader more reliable evaluation is still needed.},
booktitle = {Proceedings of the 34th International Conference on Software Engineering},
pages = {1261–1264},
numpages = {4},
location = {Zurich, Switzerland},
series = {ICSE '12}
}

@inproceedings{10.1145/2590748.2590760,
author = {Welch, Daniel and Cook, Charles and Sun, Yu-Shan and Sitaraman, Murali},
title = {A web-integrated verifying compiler for RESOLVE: a research perspective},
year = {2014},
isbn = {9781450327763},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2590748.2590760},
doi = {10.1145/2590748.2590760},
abstract = {RESOLVE is an integrated language that combines imperative programming and mathematical specifications for full functional verification of component-based programs. From a researcher's perspective, this paper summarizes the elements of RESOLVE's web IDE that includes a verifying compiler. We use a variety of in-language examples to demonstrate the following: Extensible mathematical units that contain definitions and results, higher-order specifications of generic components that use those mathematical units, alternative implementations of specifications, and automated generation of verification conditions and proofs for implementation correctness. While verification and research are the focus of this paper, it's worth mentioning that the compiler translates RESOLVE code to Java (or C) for execution, and has been utilized in a variety of computer science classes at multiple institutions over the last five years.},
booktitle = {Proceedings of the 7th India Software Engineering Conference},
articleno = {12},
numpages = {6},
keywords = {verifying compiler, specification, formal methods, components, automation},
location = {Chennai, India},
series = {ISEC '14}
}

@inproceedings{10.1145/3545947.3576279,
author = {Hafeez, Mustafa and Karki, Anand and Radwan, Yara and Saha, Anis and Zavaleta Bernuy, Angela and Harrington, Brian},
title = {Evaluating Solo vs Pair Programming in an Online Setting for Introductory Programming Students},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3576279},
doi = {10.1145/3545947.3576279},
abstract = {Many studies have shown the efficacy of pair programming for students learning to program. However, most of these studies have taken place in an in-person environment, where the driver and navigator are physically sharing a keyboard and screen and can communicate verbally and non-verbally. With the increase in online learning, especially during the COVID-19 pandemic. It is important to know whether these results generalize to an online environment.In this work, we develop a methodology to replicate existing pair programming research in a remote context. Students can fulfill the same driver and navigator roles and share access to a single IDE. However, communication is limited to video chat, and participants can never physically interact. This will allow us to replicate various studies, evaluating the efficacy, perceptions, impacts, and perceptions of solo vs. pair programming.An initial study of 116 students enrolled in an introduction to programming course validated our experimental setup and showed that pair programming positively impacted the completion and correctness of programming exercises in an online environment. With 67.3% of pair programming submissions passing at least one test case, vs. 55.3% in the solo programming condition, and 63.5% of pair programming submissions passing all test cases vs. 45.0% of solo submissions (p &lt; 0.02). This work validates our experimental design and shows promise that future work will be able to replicate many additional pair-programming studies in an online environment.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1333},
numpages = {1},
keywords = {remote work, remote pair-programming, pair-programming, cs0},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@article{10.5555/1047846.1047888,
author = {Stringfellow, Catherine V. and Carpenter, Stewart B.},
title = {An introduction to C# and the .Net framework},
year = {2005},
issue_date = {April 2005},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {20},
number = {4},
issn = {1937-4771},
abstract = {A new style of programming is developing in which applications are created from building blocks available over the Internet. Integrating software components developed in various languages can be difficult. The .NET framework allows software components written in different languages to interact with each other or with old packaged software written in C/C++, hence supporting interoperability. This framework allows for the management and execution of applications and Web services. The framework provides security, memory management and other programming capabilities. In addition, the architecture is capable of existing on multiple platforms. C# is an event-driven, fully object-oriented, visual programming language that was developed specifically for .NET. Its constructs are familiar enough to enable programmers to migrate from C/C++ and Java easily.This tutorial will present C# and Visual Studio's .NET IDE. The tutorial will start out with examples of simple console applications, pointing out differences to C++ and Java. It will demonstrate how to visually program windows applications using several pre-packaged components. As time allows, it will cover concepts for building applications that interact with databases usingADO.NET and SQL, as well as building interactive web documents that respond to client requests using ASP.NET.},
journal = {J. Comput. Sci. Coll.},
month = {apr},
pages = {271–273},
numpages = {3}
}

@inproceedings{10.1145/2046396.2046410,
author = {Goldman, Max},
title = {Role-based interfaces for collaborative software development},
year = {2011},
isbn = {9781450310147},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2046396.2046410},
doi = {10.1145/2046396.2046410},
abstract = {Real-time collaboration between multiple simultaneous contributors to a shared document is full of both opportunities and pitfalls, as evidenced by decades of research and industry work in computer-supported cooperative work. In the domain of software engineering, collaboration is still generally achieved either via shared use of a single computer (e.g. pair programming) or with version control (and manual pushing and pulling of changes). By examining and designing for the different roles collaborating programmers play when working synchronously together, we can build real-time collaborative programming systems that make their collaboration more effective. And beyond simple shared editing, we can provide asymmetric, role-specific interfaces on their shared task. Collabode is a web-based IDE for collaborative programming with simultaneous editors that, along with several novel models for closely-collaborative software development, explores the potential of real-time cooperative programming.},
booktitle = {Proceedings of the 24th Annual ACM Symposium Adjunct on User Interface Software and Technology},
pages = {23–26},
numpages = {4},
keywords = {software development, pair programming, crowdsourcing, collaboration},
location = {Santa Barbara, California, USA},
series = {UIST '11 Adjunct}
}

@inproceedings{10.1145/3377929.3398087,
author = {Reid, Brittany and Treude, Christoph and Wagner, Markus},
title = {Optimising the fit of stack overflow code snippets into existing code},
year = {2020},
isbn = {9781450371278},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3377929.3398087},
doi = {10.1145/3377929.3398087},
abstract = {Software developers often reuse code from online sources such as Stack Overflow within their projects. However, the process of searching for code snippets and integrating them within existing source code can be tedious. In order to improve efficiency and reduce time spent on code reuse, we present an automated code reuse tool for the Eclipse IDE (Integrated Developer Environment), NLP2TestableCode. NLP2TestableCode can not only search for Java code snippets using natural language tasks, but also evaluate code snippets based on a user's existing code, modify snippets to improve fit and correct errors, before presenting the user with the best snippet, all without leaving the editor. NLP2TestableCode also includes functionality to automatically generate customisable test cases and suggest argument and return types, in order to further evaluate code snippets. In evaluation, NLP2TestableCode was capable of finding compilable code snippets for 82.9% of tasks, and testable code snippets for 42.9%.},
booktitle = {Proceedings of the 2020 Genetic and Evolutionary Computation Conference Companion},
pages = {1945–1953},
numpages = {9},
keywords = {stack overflow, optimisation, crowd-generated code snippets},
location = {Canc\'{u}n, Mexico},
series = {GECCO '20}
}

@inproceedings{10.5555/2486788.2486888,
author = {Wang, Jinshui and Peng, Xin and Xing, Zhenchang and Zhao, Wenyun},
title = {Improving feature location practice with multi-faceted interactive exploration},
year = {2013},
isbn = {9781467330763},
publisher = {IEEE Press},
abstract = {Feature location is a human-oriented and information-intensive process. When performing feature location tasks with existing tools, developers often feel it difficult to formulate an accurate feature query (e.g., keywords) and determine the relevance of returned results. In this paper, we propose a feature location approach that supports multi-faceted interactive program exploration. Our approach automatically extracts and mines multiple syntactic and semantic facets from candidate program elements. Furthermore, it allows developers to interactively group, sort, and filter feature location results in a centralized, multi-faceted, and intelligent search User Interface (UI). We have implemented our approach as a web-based tool MFIE and conducted an experimental study. The results show that the developers using MFIE can accomplish their feature location tasks 32% faster and the quality of their feature location results (in terms of F-measure) is 51% higher than that of the developers using regular Eclipse IDE.},
booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
pages = {762–771},
numpages = {10},
location = {San Francisco, CA, USA},
series = {ICSE '13}
}

@inproceedings{10.1145/2968219.2971379,
author = {Kubitza, Thomas and Schmidt, Albrecht},
title = {Rapid interweaving of smart things with the meSchup IoT platform},
year = {2016},
isbn = {9781450344623},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2968219.2971379},
doi = {10.1145/2968219.2971379},
abstract = {Although physical prototyping platforms such as Arduino have significantly lowered the barrier for the development of standalone networked smart things, it still remains very challenging to create multi-device environments in which heterogeneous devices collaborate in smart ways to assist their users. However, with the ever growing number of networked smart things in our home, office and public environments it becomes more and more important to practically explore the opportunities that these device ecologies can potentially offer in the future. With meSchup we present an IoT prototyping platform that drastically reduces the effort and time for the creation and exploration of smart multi-device environments. We show a novel interaction script approach that interweaves arbitrary devices in real time and introduce interactive programming by demonstrations features integrated in a single web based IDE. We finally illustrate three exemplary use cases that indicate the wide range of possible applications.},
booktitle = {Proceedings of the 2016 ACM International Joint Conference on Pervasive and Ubiquitous Computing: Adjunct},
pages = {313–316},
numpages = {4},
keywords = {smart environments, rapid prototyping, programming by demonstration, middleware, internet of things},
location = {Heidelberg, Germany},
series = {UbiComp '16}
}

@inproceedings{10.1145/3211332.3211335,
author = {Devine, James and Finney, Joe and de Halleux, Peli and Moskal, Micha\l{} and Ball, Thomas and Hodges, Steve},
title = {MakeCode and CODAL: intuitive and efficient embedded systems programming for education},
year = {2018},
isbn = {9781450358033},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3211332.3211335},
doi = {10.1145/3211332.3211335},
abstract = {Across the globe, it is now commonplace for educators to engage in the making (design and development) of embedded systems in the classroom to motivate and excite their students. This new domain brings its own set of unique requirements. Historically, embedded systems development requires knowledge of low-level programming languages, local installation of compilation toolchains, device drivers, and applications. For students and educators, these requirements can introduce insurmountable barriers.  We present the motivation, requirements, implementation, and evaluation of a new programming platform that enables novice users to create software for embedded systems. The platform has two major components: 1) Microsoft MakeCode (), a web app that encapsulates an entire beginner IDE for microcontrollers; and 2) CODAL, an efficient component-oriented C++ runtime for microcontrollers. We show how MakeCode and CODAL provide an accessible, cross-platform, installation-free programming experience for the BBC micro:bit and other embedded devices.},
booktitle = {Proceedings of the 19th ACM SIGPLAN/SIGBED International Conference on Languages, Compilers, and Tools for Embedded Systems},
pages = {19–30},
numpages = {12},
keywords = {embedded systems, education, classroom},
location = {Philadelphia, PA, USA},
series = {LCTES 2018}
}

@inproceedings{10.1145/3162957.3162965,
author = {Yin, Huishi and Pfahl, Dietmar},
title = {A preliminary study on the suitability of stack overflow for open innovation in requirements engineering},
year = {2017},
isbn = {9781450353656},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3162957.3162965},
doi = {10.1145/3162957.3162965},
abstract = {Due to lack of resources (funds, social influence, user feedback etc.), small companies, in particular, start-up companies, almost exclusively must rely on their own expertise with regards to technological innovation. Therefore, it could be beneficial for them to analyze big companies or competitors' products in order to get a better understanding of what users think about them. The core idea of my research project is to use opinions voiced by users about strengths and weaknesses of competitors' products to improve the understanding of actual user needs and thus help focus the requirements definition of the small, especially start-up company's own product. In order to lower the cost of analysis, we investigate how user needs can be distilled from online open sources. Since there are different types of online open sources, as a starting point of our current stage of research, we focused on one type of online open sources - question and answer (Q&amp;A) sites such as Stack Overflow. As a showcase, we used the IDE project Eclipse. In our exploratory study, we analyzed the popularity of Eclipse, the amount of questions asked, the amount of questions asked that received an accepted answer, as well as the contents of questions asked about Eclipse. We also analyzed the emotional polarity of the posted questions. We found that the Stack Overflow timely updates, and the emotions reflected is more objective according to the result shown by sentiment analysis that 82% questions show neutral emotion.},
booktitle = {Proceedings of the 3rd International Conference on Communication and Information Processing},
pages = {45–49},
numpages = {5},
keywords = {stack overflow, requirements engineering, open innovation, eclipse, data mining},
location = {Tokyo, Japan},
series = {ICCIP '17}
}

@article{10.1145/3487569,
author = {Xu, Frank F. and Vasilescu, Bogdan and Neubig, Graham},
title = {In-IDE Code Generation from Natural Language: Promise and Challenges},
year = {2022},
issue_date = {April 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {31},
number = {2},
issn = {1049-331X},
url = {https://doi.org/10.1145/3487569},
doi = {10.1145/3487569},
abstract = {A great part of software development involves conceptualizing or communicating the underlying procedures and logic that needs to be expressed in programs. One major difficulty of programming is turning concept into code, especially when dealing with the APIs of unfamiliar libraries. Recently, there has been a proliferation of machine learning methods for code generation and retrieval from natural language queries, but these have primarily been evaluated purely based on retrieval accuracy or overlap of generated code with developer-written code, and the actual effect of these methods on the developer workflow is surprisingly unattested. In this article, we perform the first comprehensive investigation of the promise and challenges of using such technology inside the PyCharm IDE, asking, “At the current state of technology does it improve developer productivity or accuracy, how does it affect the developer experience, and what are the remaining gaps and challenges?” To facilitate the study, we first develop a plugin for the PyCharm IDE that implements a hybrid of code generation and code retrieval functionality, and we orchestrate virtual environments to enable collection of many user events (e.g., web browsing, keystrokes, fine-grained code edits). We ask developers with various backgrounds to complete 7 varieties of 14 Python programming tasks ranging from basic file manipulation to machine learning or data visualization, with or without the help of the plugin. While qualitative surveys of developer experience are largely positive, quantitative results with regards to increased productivity, code quality, or program correctness are inconclusive. Further analysis identifies several pain points that could improve the effectiveness of future machine learning-based code generation/retrieval developer assistants and demonstrates when developers prefer code generation over code retrieval and vice versa. We release all data and software to pave the road for future empirical studies on this topic, as well as development of better code generation models.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {mar},
articleno = {29},
numpages = {47},
keywords = {empirical study, code retrieval, code generation, Natural language programming assistant}
}

@inproceedings{10.1145/3545947.3573251,
author = {Carreon, Mario and Matsuda, Yuki and Suwa, Hirohiko and Yasumoto, Keiichi},
title = {Exploring Gaze Tracking &amp; Code Logging in IDEs as a Passive Way to Ask for Help in Introduction to Programming Classes},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3573251},
doi = {10.1145/3545947.3573251},
abstract = {A typical CS1 class involves students working on solving programming problems. Before the pandemic, this occurred in a computer laboratory with a teacher who could quickly assist students having difficulty with their work. Sometimes, there is a need for this intervention even without the student asking for help. An experienced teacher can sense the growing frustration of a student through their overall demeanor. A teacher can also watch how a student codes to provide quick hints to address potential problems. This kind of intervention is challenging to do in an online learning setting. A typical online meeting software provides a small and limited view of a student, often crowded with all the other students. As such, the visual cues of frustration can be easily lost in the noise. Not being able to see the student's code easily is also a problem. The system we are developing aims to create an online IDE that leverages gaze tracking and code logging to automatically identify these struggling students. In the first phase of the research, a learning model will be trained on students' gaze and code logs in line with their overall class performance. The second phase of the research will then use this model to predict the frustration level of student users. Collaboration and gamification strategies will be explored in the final stage of the research that would assist interventions of not just teachers but also classmates who are willing to help.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1270},
numpages = {1},
keywords = {introduction to programming, gaze tracking, focused intervention, code logging},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/2501988.2502053,
author = {Ginosar, Shiry and De Pombo, Luis Fernando and Agrawala, Maneesh and Hartmann, Bjorn},
title = {Authoring multi-stage code examples with editable code histories},
year = {2013},
isbn = {9781450322683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2501988.2502053},
doi = {10.1145/2501988.2502053},
abstract = {Multi-stage code examples present multiple versions of a program where each stage increases the overall complexity of the code. In order to acquire strategies of program construction using a new language or API, programmers consult multi-stage code examples in books, tutorials and online videos. Authoring multi-stage code examples is currently a tedious process, as it involves keeping several stages of code synchronized in the face of edits and error corrections. We document these difficulties with a formative study examining how programmers author multi-stage code examples. We then present an IDE extension that helps authors create multi-stage code examples by propagating changes (insertions, deletions and modifications) to multiple saved versions of their code. Our system adapts revision control algorithms to the specific task of evolving example code. An informal evaluation finds that taking snapshots of a program as it is being developed and editing these snapshots in hindsight help users in creating multi-stage code examples.},
booktitle = {Proceedings of the 26th Annual ACM Symposium on User Interface Software and Technology},
pages = {485–494},
numpages = {10},
keywords = {tutorials, programming, examples, editable histories},
location = {St. Andrews, Scotland, United Kingdom},
series = {UIST '13}
}

@inproceedings{10.1145/2905055.2905347,
author = {Saxena, Ankur and Sanyal, Abhishek and Kumar, Gyanesh and Singh, Saurabh Chandra},
title = {A Framework to protect multiple applications in java using synchronization.},
year = {2016},
isbn = {9781450339629},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2905055.2905347},
doi = {10.1145/2905055.2905347},
abstract = {Today, everything has gone distributed for so many types of server applications. We have Web servers, application servers, database servers, file servers, and mail servers that maintain worker queues and thread pools to handle large numbers of short tasks that arrive from remote sources. In this paper we have done analysis for multithreaded programs, focusing on ways to improve the efficiency of analyzing interactions between threads. A multithreaded program always contains two or more parts that can run concurrently without lagging and each part can handle different tasks at the same time making optimal use of the available resources. Each task is independent of the other. Multithreading is based on the idea of multitasking in applications where specific operations within a single application are further divided into individual threads. This application of multithreading is developed using Eclipse IDE. Eclipse consists of a base workspace and an extensible plug-in system for customizing the environment.},
booktitle = {Proceedings of the Second International Conference on Information and Communication Technology for Competitive Strategies},
articleno = {131},
numpages = {6},
keywords = {Thread priority, Thread Runnable, Thread Lifecycle, Synchronization, Multithreading, Eclipse},
location = {Udaipur, India},
series = {ICTCS '16}
}

@inproceedings{10.1145/3544548.3581525,
author = {Wang, April Yi and Head, Andrew and Zhang, Ashley Ge and Oney, Steve and Brooks, Christopher},
title = {Colaroid: A Literate Programming Approach for Authoring Explorable Multi-Stage Tutorials},
year = {2023},
isbn = {9781450394215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3544548.3581525},
doi = {10.1145/3544548.3581525},
abstract = {Multi-stage programming tutorials are key learning resources for programmers, using progressive incremental steps to teach them how to build larger software systems. A good multi-stage tutorial describes the code clearly, explains the rationale and code changes for each step, and allows readers to experiment as they work through the tutorial. In practice, it is time-consuming for authors to create tutorials with these attributes. In this paper, we introduce Colaroid, an interactive authoring tool for creating high quality multi-stage tutorials. Colaroid tutorials are augmented computational notebooks, where snippets and outputs represent a snapshot of a project, with source code differences highlighted, complete source code context for each snippet, and the ability to load and tinker with any stage of the project in a linked IDE. In two laboratory studies, we found Colaroid makes it easy to create multi-stage tutorials, while offering advantages to readers compared to video and web-based tutorials.},
booktitle = {Proceedings of the 2023 CHI Conference on Human Factors in Computing Systems},
articleno = {798},
numpages = {22},
keywords = {computational notebooks, instruction, programming, tutorials},
location = {<conf-loc>, <city>Hamburg</city>, <country>Germany</country>, </conf-loc>},
series = {CHI '23}
}

@proceedings{10.5555/2820116,
title = {CSI-SE '15: Proceedings of the Second International Workshop on CrowdSourcing in Software Engineering},
year = {2015},
publisher = {IEEE Press},
abstract = {It is our pleasure to welcome the reader to the (pre-workshop) proceedings of the 2nd International Workshop on Crowd Sourcing in Software Engineering (CSI-SE 2015), co-located with the 37th International Conference on Software Engineering (ICSE 2015) held in Florence, Italy, May 19, 2015.A number of trends under the broad banner of crowdsourcing are beginning to fundamentally disrupt the way in which software is engineered. Programmers increasingly rely on crowdsourced knowledge and code, as they look to Q&amp;A sites for answers or use code from publicly posted snippets. Programmers play, compete, and learn with the crowd, engaging in programming competitions and puzzles with crowds of programmers. Online IDEs make radically new forms of collaboration possible, allowing developers to synchronously program with crowds of distributed programmers. Programmer reputation is increasingly visible on Q&amp;A sites and public code repositories, opening new possibilities in how developers find jobs and companies identify talent. Crowds of non-programmers increasingly participate in development, usability testing software or even constructing specifications while playing games. Crowdfunding democratizes choices about which software is built, broadening the software which might be feasibly constructed. Approaches for crowd development seek to microtask software development, dramatically increasing participation in open source by enabling software projects to be built through casual, transient work.},
location = {Florence, Italy}
}

@inproceedings{10.1145/3315568.3338015,
author = {Goldsmith, Simon},
title = {Adventures in commercial-grade static analysis (keynote)},
year = {2019},
isbn = {9781450367202},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3315568.3338015},
doi = {10.1145/3315568.3338015},
abstract = {Building a commercial grade static analysis presents a lot of interesting problems. Everything not forbidden is compulsory: language specifications are wonderful documents, but in reality anything the user's compiler and runtime accepts is fair game. Analysis abstractions that scale "except in pathological cases" don't scale: analyzing tens of thousands of code bases that routinely exceed millions of lines of code means that those pathological cases inevitably arise. Build a good analysis that runs overnight, and users will ask you to run it in their IDE for near-immediate feedback. A bug finding tool needs a low false positive rate, but a tool aimed at finding security vulnerabilities needs a low false negative rate. Only analyzing "source" code and only starting from main() is insufficient for understanding modern web and mobile applications: frameworks imply a different programming model with a lot of auto-magical program behavior, often including idiosyncratic configuration regimes and various template languages. We'll talk about these problems and how we tackle them.},
booktitle = {Proceedings of the 8th ACM SIGPLAN International Workshop on State Of the Art in Program Analysis},
pages = {1},
numpages = {1},
keywords = {web applications, transpilation, static analysis, software security, parallel, mobile applications, incremental, Synopsys, Soundiness, Coverity},
location = {Phoenix, AZ, USA},
series = {SOAP 2019}
}

@inproceedings{10.1145/3411764.3445149,
author = {Payne, William Christopher and Bergner, Yoav and West, Mary Etta and Charp, Carlie and Shapiro, R. Benjamin and Szafir, Danielle Albers and Taylor, Edd V. and DesPortes, Kayla},
title = {danceON: Culturally Responsive Creative Computing},
year = {2021},
isbn = {9781450380966},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3411764.3445149},
doi = {10.1145/3411764.3445149},
abstract = {Dance provides unique opportunities for embodied interdisciplinary learning experiences that can be personally and culturally relevant. danceON is a system that supports learners to leverage their body movement as they engage in artistic practices across data science, computing, and dance. The technology includes a Domain Specific Language (DSL) with declarative syntax and reactive behavior, a media player with pose detection and classification, and a web-based IDE. danceON provides a low-floor allowing users to bind virtual shapes to body positions in under three lines of code, while also enabling complex, dynamic animations that users can design working with conditionals and past position data. We developed danceON to support distance learning and deployed it in two consecutive cohorts of a remote, two-week summer camp for young women of color. We present our findings from an analysis of the experience and the resulting computational performances. The work identifies implications for how design can support learners’ expression across culturally relevant themes and examines challenges from the lens of usability of the computing language and technology.},
booktitle = {Proceedings of the 2021 CHI Conference on Human Factors in Computing Systems},
articleno = {96},
numpages = {16},
keywords = {design based research, data literacy, dance, culturally responsive pedagogy, computing education},
location = {<conf-loc>, <city>Yokohama</city>, <country>Japan</country>, </conf-loc>},
series = {CHI '21}
}

@proceedings{10.1145/2897659,
title = {CSI-SE '16: Proceedings of the 3rd International Workshop on CrowdSourcing in Software Engineering},
year = {2016},
isbn = {9781450341585},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {It is our pleasure to welcome the reader to the (pre-workshop) proceedings of the 3rd International Workshop on CrowdSourcing in Software Engineering (CSI-SE 2016), co-located with the 38th International Conference on Software Engineering (ICSE 2016) held in Austin, TX, USA on May 16, 2016.A number of trends under the broad banner of crowdsourcing are beginning to fundamentally disrupt the way in which software is engineered. Programmers increasingly rely on crowdsourced knowledge and code, as they look at Q&amp;A websites for answers or use code from publicly posted snippets. Programmers play, compete, and learn with the crowd, engaging in programming competitions and puzzles with crowds of programmers. Online IDEs make radically new forms of collaboration possible, allowing developers to synchronously program with crowds of distributed programmers. Programmer reputation is increasingly visible on Q&amp;A sites and public code repositories, opening new possibilities in how developers find jobs and companies identify talent. Crowds of non-programmers increasingly participate in development, usability testing software or even constructing specifications while playing games. Developers can take feedback from a crowd of users to guide further evolution of their applications. Crowdfunding democratizes choices about which software is built, broadening the software which might be feasibly constructed. Approaches for crowd development seek to microtask software development, dramatically increasing participation in open source by enabling software projects to be built through casual, transient work.},
location = {Austin, Texas}
}

@inproceedings{10.1145/3159450.3162207,
author = {Garcia, Rita and Falkner, Katria and Vivian, Rebecca},
title = {Parsons Problems usage within a MOOC Pedagogy: (Abstract Only)},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3162207},
doi = {10.1145/3159450.3162207},
abstract = {Parsons Problems is an effective Introductory Programming teaching tool that allows students to arrange code to form a functional program, reducing their cognitive load so they can focus on programming concepts. This demonstration shows how Parsons Problems can be used as a pedagogical strategy in a Massive Open Online Course (MOOC) for introductory programming. A MOOC is a learning platform, where compilers and IDEs have already been embedded for CS students to immerse themselves in a single learning environment. The Parsons Problems package, js-parsons, available at https://github.com/js-parsons/js-parsons has been successfully integrated into the University of Adelaide's edX's MOOC platform as a component that can potentially be made available for other edX platforms. The demonstration presents the educators' interface to add new questions and receive students' results, along with students' perspective, including subgoals. The demonstration prototypes new feedback models when students encounter Parsons Problems errors, opening discussion up to the audience for opinions and input. This demonstration is intended for anyone wanting to know how to use Parsons Problems within MOOCs as a pedagogical approach; those seeking to incorporate MOOCs into their coursework with focused exercises; and those wanting to contribute to future Parsons Problems enhancements. Laptops are recommended, since participants will have the hands-on opportunity to evaluate the package during the demonstration.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {1111},
numpages = {1},
keywords = {parsons problems, mooc, introductory programming},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@proceedings{10.5555/3100549,
title = {CSI-SE '17: Proceedings of the 4th International Workshop on CrowdSourcing in Software Engineering},
year = {2017},
isbn = {9781538640418},
publisher = {IEEE Press},
abstract = {It is our pleasure to welcome the reader to the (pre-workshop) proceedings of the 4th International Workshop on CrowdSourcing in Software Engineering (CSI-SE 2017), co-located with the 39th International Conference on Software Engineering (ICSE 2017) held in Buenos Aires, Argentina, during May 20-28, 2017.A number of trends under the broad banner of crowdsourcing are beginning to fundamentally disrupt the way in which software is engineered. Programmers increasingly rely on crowdsourced knowledge and code, as they look to Question &amp; Answer (Q&amp;A) sites for answers or use code from publicly posted snippets. Programmers play, compete, and learn with the crowd, engaging in programming competitions and puzzles with crowds of programmers. Online IDEs make possible radically new forms of collaboration, allowing developers to synchronously program with crowds of distributed programmers. Programmers' reputation is increasingly visible on Q&amp;A sites and public code repositories, opening new possibilities in how developers find jobs and companies identify talent. Crowds of non-programmers increasingly participate in development, usability testing software or even constructing specifications while playing games. Crowds play an increasing role in shaping software requirements, broadening the software which might be feasibly constructed. Approaches for crowd development seek to microtask software development, dramatically increasing participation in open source by enabling software projects to be built through casual, transient work.},
location = {Buenos Aires, Argentina}
}

@inproceedings{10.1145/3180155.3182537,
author = {Bao, Lingfeng and Xing, Zhenchang and Xia, Xin and Lo, David and Hassan, Ahmed E.},
title = {Inference of development activities from interaction with uninstrumented applications},
year = {2018},
isbn = {9781450356381},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3180155.3182537},
doi = {10.1145/3180155.3182537},
abstract = {Studying developers' behavior is crucial for designing effective techniques and tools to support developers' daily work. However, there are two challenges in collecting and analyzing developers' behavior data. First, instrumenting many software tools commonly used in real work settings (e.g., IDEs, web browsers) is difficult and requires significant resources. Second, the collected behavior data consist of low-level and fine-grained event sequences, which must be abstracted into high-level development activities for further analysis.In this paper [1], to address these two challenges, we first use our ActivitySpace framework to improve the generalizability of the data collection. Then, we propose a Condition Random Field (CRF) based approach to segment and label the developers' low-level actions into a set of basic, yet meaningful development activities. To evaluate our proposed approach, we deploy the ActivitySpace framework in an industry partner's company and collect the real working data from ten professional developers' one-week work. We conduct an experiment with the collected data and a small number of initial human-labeled training data using the CRF model and the other three baselines (i.e., a heuristic-rules based method, a SVM classifier, and a random weighted classifier). The proposed CRF model achieves better performance (i.e., 0.728 accuracy and 0.672 macro-averaged F1-score) than the other three baselines.},
booktitle = {Proceedings of the 40th International Conference on Software Engineering},
pages = {897},
numpages = {1},
keywords = {conditional random field, developers' interaction data, software development},
location = {<conf-loc>, <city>Gothenburg</city>, <country>Sweden</country>, </conf-loc>},
series = {ICSE '18}
}

@inproceedings{10.1145/3328778.3372715,
author = {Fowler, Megan},
title = {Learning Loop Invariants},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3372715},
doi = {10.1145/3328778.3372715},
abstract = {One aspect of developing correct code, code that functions as specified, is annotating loops with suitable invariants. Loop invariants are useful for human reasoning and are necessary for tool-assisted automated reasoning. Writing loop invariants can be a difficult task for all students, especially beginning software engineering students. In helping students learn to write adequate invariants, we need to understand not only what errors they make, but also why they make them. This poster discusses the use of a Web IDE backed by the RESOLVE verification engine to aid students in developing loop invariants and to collect performance data. In addition to collecting submitted invariant answers, students are asked to provide their steps or thought processes regarding how they arrived at their answers for each submission. The answers and reasons are then analyzed using a mixed-methods approach. Resulting categories of answers indicate that students are able to use formal method concepts with which they are already familiar, such as, pre and post-conditions as a starting place to develop adequate loop invariants. Additionally, some common trouble spots in learning to write invariants are identified. The results will be useful to guide classroom instruction and automated tutoring.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {1426},
numpages = {1},
keywords = {tracing, software-engineering, reasoning, online tool, objects, loop-invariants, correctness},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/3597503.3639138,
author = {Izadi, Maliheh and Katzy, Jonathan and Van Dam, Tim and Otten, Marc and Popescu, Razvan Mihai and Van Deursen, Arie},
title = {Language Models for Code Completion: A Practical Evaluation},
year = {2024},
isbn = {9798400702174},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3597503.3639138},
doi = {10.1145/3597503.3639138},
abstract = {Transformer-based language models for automatic code completion have shown great promise so far, yet the evaluation of these models rarely uses real data. This study provides both quantitative and qualitative assessments of three public code language models when completing real-world code. We first developed an open-source IDE extension, Code4Me, for the online evaluation of the models. We collected real auto-completion usage data for over a year from more than 1200 users, resulting in over 600K valid completions. These models were then evaluated using six standard metrics across twelve programming languages. Next, we conducted a qualitative study of 1690 real-world completion requests to identify the reasons behind the poor model performance. A comparative analysis of the models' performance in online and offline settings was also performed, using benchmark synthetic datasets and two masking strategies.Our findings suggest that while developers utilize code completion across various languages, the best results are achieved for mainstream languages such as Python and Java. InCoder outperformed the other models across all programming languages, highlighting the significance of training data and objectives. Our study also revealed that offline evaluations do not accurately reflect real-world scenarios. Upon qualitative analysis of the models' predictions, we found that 66.3% of failures were due to models' limitations, 24.4% occurred due to inappropriate model usage in a development context, and 9.3% were valid requests that developers overwrote. Given these findings, we propose several strategies to overcome the current limitations. These include refining training objectives, improving resilience to typographical errors, adopting hybrid approaches, and enhancing implementations and usability.},
booktitle = {Proceedings of the IEEE/ACM 46th International Conference on Software Engineering},
articleno = {79},
numpages = {13},
keywords = {automatic code completion, transformers, language models, IDE, evaluation, open source, InCoder, UniXcoder, CodeGPT},
location = {<conf-loc>, <city>Lisbon</city>, <country>Portugal</country>, </conf-loc>},
series = {ICSE '24}
}

@inproceedings{10.1145/3408877.3439522,
author = {Siegel, Angela and Zarb, Mark},
title = {One Semicolon Away from Success: Rebranding "failure" in CS1 through New Terminology},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3439522},
doi = {10.1145/3408877.3439522},
abstract = {In a review of student programming work (through playback of their submissions via online IDE), it was noted that students could be quite close to a successful solution and repeatedly start over, deleting all of the work done to that point in time. The words of Thomas Edison expressed the problem associated with this current branding: "I have not failed. I've just found 10,000 ways that won't work." While this is meant to imply that failure has led towards success, the idea that something "won't work" captures the mindset that students are facing when using the word 'failure' in regards to programming. In fact, iterations of programs move students incrementally closer to their goal. The notion of a binary concept like pass/fail being applied to programming leaves less room for creativity and exploration. Amongst new programming students, after reaching this point of 'passing', student fear of modifying and 'playing' with working programs has been noted. In order to address the concerns of students and help shift student mindsets away from 'failure' towards 'incremental improvement', a rebranding exercise must take place.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {1367},
numpages = {1},
keywords = {programming, novices, mindset, failure, cs1},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/2025113.2025140,
author = {Maoz, Shahar and Ringert, Jan Oliver and Rumpe, Bernhard},
title = {ADDiff: semantic differencing for activity diagrams},
year = {2011},
isbn = {9781450304436},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2025113.2025140},
doi = {10.1145/2025113.2025140},
abstract = {Activity diagrams (ADs) have recently become widely used in the modeling of workflows, business processes, and web-services, where they serve various purposes, from documentation, requirement definitions, and test case specifications, to simulation and code generation. As models, programs, and systems evolve over time, understanding changes and their impact is an important challenge, which has attracted much research efforts in recent years.In this paper we present addiff, a semantic differencing operator for ADs. Unlike most existing approaches to model comparison, which compare the concrete or the abstract syntax of two given diagrams and output a list of syntactical changes or edit operations, addiff considers the semantics of the diagrams at hand and outputs a set of diff witnesses, each of which is an execution trace that is possible in the first AD and is not possible in the second. We motivate the use of addiff, formally define it, and show two algorithms to compute it, a concrete forward-search algorithm and a symbolic fixpoint algorithm, implemented using BDDs and integrated into the Eclipse IDE. Empirical results and examples demonstrate the feasibility and unique contribution of addiff to the state-of-the-art in version comparison and evolution analysis.},
booktitle = {Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering},
pages = {179–189},
numpages = {11},
keywords = {software evolution, diagrams, activity diagrams},
location = {Szeged, Hungary},
series = {ESEC/FSE '11}
}

@article{10.5555/3417639.3417658,
author = {DePratti, Roland},
title = {Jupyter notebooks versus a textbook in a big data course},
year = {2020},
issue_date = {April 2020},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {35},
number = {8},
issn = {1937-4771},
abstract = {In building curriculum in new areas of computer science, often the tools introduced in the course are an important component. This is especially true in the area of big data, where the complexity of the problems the area tackles is high. In the 4 years since its inception, my big data course has gone through two major redesigns and has settled on a tool set including: the Hadoop platform, Spark processing engine, the Python programming language, Eclipse IDE, and Jupyter Notebooks. Many of the changes were driven by input from professional peers on big data teams, who were struggling with the complexity resulting from the low-level programming model used by MapReduce. Jupyter Notebook, a type of computational notebook, was added to the course to introduce students to the Python programming language. Data scientists and researchers have found computational notebooks an effective tool to manage their work by providing a way to track their thinking process, their code, and conclusions in one web document. To assess the effectiveness of using Jupyter Notebook in a big data course, students' views on the use of computational notebooks and traditional textbooks were captured and statistically analyzed.},
journal = {J. Comput. Sci. Coll.},
month = {apr},
pages = {208–220},
numpages = {13}
}

@inproceedings{10.1145/2038558.2038603,
author = {Sauer, Christoph},
title = {Wiki as business application platform: the MES showcase},
year = {2011},
isbn = {9781450309097},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2038558.2038603},
doi = {10.1145/2038558.2038603},
abstract = {This presentation shows the business application suite mHub that implements the core components of a manufacturing execution system (MES) purely with a specially developed application wiki distribution. The novelty of the application wiki is its "wiki as business application platform" approach, that abstracts all necessary technologies to implement the solution within the edit page area. Other than application wikis targeted for end users, that merely serve as query interfaces to existing business applications, this application wiki enables developers to script every aspect of the application domain within the wiki itself.},
booktitle = {Proceedings of the 7th International Symposium on Wikis and Open Collaboration},
pages = {221–222},
numpages = {2},
keywords = {web IDE, software engineering, rapid application development, manufacturing automation and control, collaborative software development, application wikis, MES, ERP},
location = {Mountain View, California},
series = {WikiSym '11}
}

@inproceedings{10.1145/2157136.2157194,
author = {Jenkins, Jam and Brannock, Evelyn and Cooper, Thomas and Dekhane, Sonal and Hall, Mark and Nguyen, Michael},
title = {Perspectives on active learning and collaboration: JavaWIDE in the classroom},
year = {2012},
isbn = {9781450310987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2157136.2157194},
doi = {10.1145/2157136.2157194},
abstract = {The Java Wiki Integrated Development Environment (JavaWIDE) is an innovative environment that promotes active learning and collaboration in programming courses. This paper surveys how JavaWIDE's features have been used to promote active and collaborative learning in both traditional and distance education (synchronous) in four different environments: high school, summer enrichment courses, and at two- and four-year colleges. The authors describe the context of each teaching and learning environment and the parts of JavaWIDE that are particularly well suited in each context. After discussing the active learning and collaboration techniques employed, student responses to the experience are summarized. This collection of case studies illustrates how the concurrent editing, shared environment awareness and other features of JavaWIDE can be used to promote active learning and collaboration within a heterogeneous set of teaching and learning environments.},
booktitle = {Proceedings of the 43rd ACM Technical Symposium on Computer Science Education},
pages = {185–190},
numpages = {6},
keywords = {web-based IDE, tutoring, javawide, introductory programming, distance education, concurrent editing, collaboration, case study, active learning, Java, CS1, CS0},
location = {Raleigh, North Carolina, USA},
series = {SIGCSE '12}
}

@inproceedings{10.1145/3487553.3524873,
author = {Hakimov, Sherzod and Cheema, Gullal Singh and Kastner, Marc A. and Shah, Rajiv Ratn and Sikka, Karan},
title = {MUWS’22: 1st International Workshop on Multimodal Understanding for the Web and Social Media},
year = {2022},
isbn = {9781450391306},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3487553.3524873},
doi = {10.1145/3487553.3524873},
abstract = {The 1st International Workshop on Multimodal Understanding for the Web and Social Media (MUWS 2022) is co-located with The Web Conference (WWW) and held on the 26th of April, 20221. Multimodal learning and analysis is an emerging research area that cuts through several disciplines like Computer Vision, Natural Language Processing (NLP), Speech Processing, and Multimedia. Recently, several multimodal learning techniques have shown the benefit of combining multiple modalities in video representation learning and downstream tasks on videos. At the core, these methods are focused on modelling the modalities and their complex interactions by using large amounts of data, different loss functions and deep neural network architectures. Although these research directions are exciting and challenging, interdisciplinary fields such as semiotics are rarely considered. Literature in semiotics provides a detailed theory and analysis on meaning creation through signs and symbols via multiple modalities. In general, it provides a compelling view of multimodality and perception that can further expand computational research and applications on the web and social media. The goal of the interdisciplinary MUWS Workshop is to bring together researchers and practitioners from the fields of Information Retrieval, Natural Language Processing, Computer Vision, Human Computation, and Semiotics to discuss and evaluate methods and solutions for effective and efficient analytics of multimodal information present in the Web or social media. We are interested in approaches, tasks, and metrics for effectively analysing multimedia information such as image-text pairs and videos to design methodologies that jointly consider information from multiple modalities. The interdisciplinary nature of processing such multimodal data involves combining ideas and methods from the fields mentioned above. We envision the workshop as a forum for researchers and practitioners from academia and industry for original contributions and practical application on multimodal information processing, mining, retrieval, search, and management. The workshop features advanced methods for combining visual and textual content for problems such as fake news detection, predicting reliability and popularity of news articles, generating image narrative with emotion, and injecting knowledge graph information to improve visual question answering performance. We would like to take this opportunity to sincerely thank the authors and presenters for their inspiring contributions to the workshop. Our sincere thanks are due to the program committee members for reviewing the submissions and ensuring the high quality of our workshop program. We also thank Ichiro Ide for his keynote talk, Chiao-I Tseng and Christian Otto for their invited talks in the workshop. We are also very grateful to the organisers of The Web Conference 2022, and particularly the Workshops Chairs, Nathalie Hernandez and Preslav Nakov, for their support with the workshop organisation.},
booktitle = {Companion Proceedings of the Web Conference 2022},
pages = {692–693},
numpages = {2},
location = {Virtual Event, Lyon, France},
series = {WWW '22}
}

@inproceedings{10.1145/1095714.1095744,
author = {Athauda, Rukshan and Kodagoda, Nuwan and Wickramaratne, Jagath and Sumathipala, Prasanna and Rupasinghe, Lakmal and Edirisighe, Aruna and Gamage, Anjalie and De Silva, Dhammika},
title = {Integrating industrial technologies, tools and practices to the IT curriculum: an innovative course with .NET and java platforms},
year = {2005},
isbn = {1595932526},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1095714.1095744},
doi = {10.1145/1095714.1095744},
abstract = {Exposure to state-of-art industry technologies, tools and practices by students provide CS/IT graduates highly desirable skills and marketability. A key expectation of the industry from their new cadre is a speedy integration into the business environment resulting in productive work. This usually requires having a sound technological background, a maturity to assess the environment and adapt quickly, and highly-developed soft skills to be productive in a team environment. Incorporating such experience and skills into a CS/IT curriculum is challenging and is still in its infancy stages. We undertook such as an endeavor in integrating .NET into the IT curriculum.Microsoft's .NET platform is becoming increasingly popular in the industry. Incorporating .NET into the undergraduate IT curriculum provides a plethora of skills and increases the employability of our graduates. We integrated .NET without a major revision to the existing curriculum by introducing an optional course in the final year (senior-level) of the IT undergraduate program.In addition to the .NET platform, the course covered the Java platform, which is similar in architecture to .NET. The course emulated an industry-based environment with real-world based assignments, focused on deliverables, used state-of-art IDEs and documentation, and pair programming to create a highly productive environment.The "soft skills" were integrated into the course with a project that implemented a virtual marketplace. Students in groups played different entities in the virtual marketplace and communicated with each other via Web Services. The project provided a virtual business environment and exposure to teamwork, collaboration, competition, negotiating, and creativity skills.Our first offering of the course in semester 1, 2005, attracted 128 students. The course created a highly productive environment throughout the semester. Students completed 7 assignments and the project within the 14-week semester. The initial results are encouraging and provide many insights to CS/IT departments planning to incorporate such courses.},
booktitle = {Proceedings of the 6th Conference on Information Technology Education},
pages = {125–132},
numpages = {8},
keywords = {state-of-art technologies, java platform, industry practices, CS/IT curriculum, .NET platform},
location = {Newark, NJ, USA},
series = {SIGITE '05}
}

@inproceedings{10.1145/3351287.3351298,
author = {Fabian, Khristin and Taylor-Smith, Ella and Meharg, Debbie and Varey, Alison},
title = {Facilitating computing students' transition to higher education},
year = {2019},
isbn = {9781450372572},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3351287.3351298},
doi = {10.1145/3351287.3351298},
abstract = {Students who progress to higher education from further education colleges are faced with academic, social, and logistical challenges during their transition. In general, they find university life more challenging compared to students who have been at university for two years already. The Associate Student Project (ASP) is an intervention programme within the School of Computing that provides support to students who make this transition. This support includes access to online resources, orientation events, university lectures and workshops, throughout their two years at further education college. This study aims to measure the impact of the ASP through a survey on academic behavioural confidence and a comparison of the grade point average of three student groups: independent direct entrants (n=53), associate students (n=27), and native students (students who entered university at first year, n=75). Analysis revealed that, while independent direct entrants (IDE) were less confident about their studies than native students (NS), there was a closer parity of confidence between native and associate students (AS). In addition, AS' confidence on tasks that relate to requesting information is higher than the other groups, perhaps due to the ASP's emphasis on providing good information to AS and encouraging dialogue. Associate students found interventions that provide insight into university life prior to their transfer useful. Additionally, the grade point average of AS was not found to be significantly different in comparison to native students. This paper reports on the success of these interventions in building student confidence and explores the impact for transitional students.},
booktitle = {Proceedings of the 2019 Conference on United Kingdom &amp; Ireland Computing Education Research},
articleno = {2},
numpages = {7},
keywords = {widening participation, student transitions, higher education, further education, direct entrants},
location = {Canterbury, United Kingdom},
series = {UKICER '19}
}

@inproceedings{10.1145/3328778.3372701,
author = {Cooper, Saraah and Clinkscale, Ben and Williams, Briana and Lewis, Myles},
title = {Exploring the Impact of Exposing CS Majors to Programming Concepts using IDE Programming vs. non-IDE Programming in the Classroom},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3372701},
doi = {10.1145/3328778.3372701},
abstract = {Due to the increased demand for computer scientists in the, the importance to improve the retention rate of CS majors who could potentially fill such positions has been ongoing. Literature has produced many efforts for increasing the engagement of CS majors in the field while also exploring ways to improve their ability to develop the ideal skill sets for success. In such efforts, our research explores the impact of visual and/or command-line based programming editors and their ability to shape the students' mental model as they learn to program. This abstract discusses a "think-aloud" protocol assessment that was conducted on two entry level programming courses at a university in the United States during the 2018-2019 school year. The objective of this assessment was to determine whether Repl.IT, a web-based IDE, and Cygwin/Nano Editor, a command line-based tool, impacted student performance while being used for programming. Our preliminary results showed that 41% of the students using Repl.IT completed the assigned task for the assessment, while 53% of the students using the Cygwin/Nano editor did the same. The results concerning assignment incompletion revealed that students who did not complete their assignment and used Repl.IT did so because of assignment complexity and programming language difficulty, whereas assignment complexity and tool usage difficulty lead to assignment incompletion for students using Cygwin/Nano. This assessment also revealed that Repl.IT students exhibited a higher comfort, confidence, and fondness for using their editor than the Cygwin/Nano students.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {1422},
numpages = {1},
keywords = {verbal-protocol-assessment, programming-editors, cs-majors},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/3210240.3210327,
author = {Farooq, Umar and Zhao, Zhijia},
title = {RuntimeDroid: Restarting-Free Runtime Change Handling for Android Apps},
year = {2018},
isbn = {9781450357203},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3210240.3210327},
doi = {10.1145/3210240.3210327},
abstract = {Portable devices, like smartphones and tablets, are often subject to runtime configuration changes, such as screen orientation changes, screen resizing, keyboard attachments, and language switching. When handled improperly, such simple changes can cause serious runtime issues, from data loss to app crashes.This work presents, to our best knowledge, the first formative study on runtime change handling with 3,567 Android apps. The study not only reveals the current landscape of runtime change handling, but also points out a common cause of various runtime change issues -- activity restarting. On one hand, the restarting facilitates the resource reloading for the new configuration. On the other hand, it may slow down the app, and more critically, it requires developers to manually preserve a set of data in order to recover the user interaction state after restarting.Based on the findings of this study, this work further introduces a re starting-free runtime change handling solution -- RuntimeDroid. RuntimeDroid can completely avoid the activity restarting, at the same time, ensure proper resource updating with user input data preserved. These are achieved with two key components: an online resource loading module, called HotR and a novel UI components migration technique. The former enables proper resources loading while the activity is still live. The latter ensures that prior user changes are carefully preserved during runtime changes.For practical use, this work proposes two implementations of RuntimeDroid: an IDE plugin and an auto-patching tool. The former allows developers to easily adopt restarting-free runtime change handling during the app developing; The latter can patch released app packages without source code. Finally, evaluation with a set of 72 apps shows that RuntimeDroid successfully fixed all the 197 reported runtime change issues, meanwhile reducing the runtime change handling delays by 9.5X on average.},
booktitle = {Proceedings of the 16th Annual International Conference on Mobile Systems, Applications, and Services},
pages = {110–122},
numpages = {13},
keywords = {Runtime Configuration Change, Event Handling, Android},
location = {Munich, Germany},
series = {MobiSys '18}
}

@inproceedings{10.1145/3468264.3468582,
author = {Liu, Jiakun and Baltes, Sebastian and Treude, Christoph and Lo, David and Zhang, Yun and Xia, Xin},
title = {Characterizing search activities on stack overflow},
year = {2021},
isbn = {9781450385626},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3468264.3468582},
doi = {10.1145/3468264.3468582},
abstract = {To solve programming issues, developers commonly search on Stack Overflow to seek potential solutions. However, there is a gap between the knowledge developers are interested in and the knowledge they are able to retrieve using search engines. To help developers efficiently retrieve relevant knowledge on Stack Overflow, prior studies proposed several techniques to reformulate queries and generate summarized answers. However, few studies performed a large-scale analysis using real-world search logs. In this paper, we characterize how developers search on Stack Overflow using such logs. By doing so, we identify the challenges developers face when searching on Stack Overflow and seek opportunities for the platform and researchers to help developers efficiently retrieve knowledge. To characterize search activities on Stack Overflow, we use search log data based on requests to Stack Overflow's web servers. We find that the most common search activity is reformulating the immediately preceding queries. Related work looked into query reformulations when using generic search engines and found 13 types of query reformulation strategies. Compared to their results, we observe that 71.78% of the reformulations can be fitted into those reformulation strategies. In terms of how queries are structured, 17.41% of the search sessions only search for fragments of source code artifacts (e.g., class and method names) without specifying the names of programming languages, libraries, or frameworks. Based on our findings, we provide actionable suggestions for Stack Overflow moderators and outline directions for future research. For example, we encourage Stack Overflow to set up a database that includes the relations between all computer programming terminologies shared on Stack Overflow, e.g., method name, data structure name, design pattern, and IDE name. By doing so, Stack Overflow could improve the performance of search engines by considering related programming terminologies at different levels of granularity.},
booktitle = {Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {919–931},
numpages = {13},
keywords = {Stack Overflow, Query Reformulation, Query Logs, Data Mining},
location = {Athens, Greece},
series = {ESEC/FSE 2021}
}

@inproceedings{10.1145/3369555.3369572,
author = {Jun, Yon Yi and Leau, Yu-Beng and Alias, Suraya and Park, Yong Jin},
title = {A multi-filter feature selection in detecting distributed denial-of-service attack},
year = {2020},
isbn = {9781450371803},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3369555.3369572},
doi = {10.1145/3369555.3369572},
abstract = {Distributed Denial of Services (DDoS) has become the most intrusive security threat on the Internet. Flash crowd attack is the most challenging problem among the attacks which targeting the web server during the Flash Events (FEs). It mimics the behaviour of legitimate users and sends high rate malicious traffics toward the server and block the normal users from using the desired services. Thus, making it hard to detect and successfully bypasses the detection mechanism. The key semantic difference between FEs and DDoS is that the former represents legitimate access of the website while the latter does not. However, this does not help in discriminating them automatically. The behavioural differences between the two have to be developed after understanding their individual properties. In this research, a Multi-Filter Feature Selection (M2FS) method is proposed by combining the 3 filter methods which are Information Gain (IG), Gain Ratio (GR) and ReliefF. It consists of 3-stage procedures: feature ranking, feature selection and classification. Subsequently, an experimental evaluation of the proposed Multi-Filter Feature Selection (M2FS) method is performed by using the benchmark dataset, NSL-KDD and employed the J48 classification algorithm. The performance of the proposed M2FS method is evaluated by multi-criteria that take into account which are classification accuracy, True Positive Rate (TPR), False Positive Rate (FPR) and time to build the model. Meanwhile, the performance of effectiveness of the proposed M2FS method is then compared with the existing feature selection methods and also the proposed M2FS with PCA. In addition, the proposed M2FS method is developed through WEKA API with Java Programming language using the IDE of Eclipse Java. The findings show that the proposed M2FS method is effectively reduced the 41 features to 14 features and produced a high accuracy, high TPR, low FPR and shorter time build when compared to other existing feature selection methods.},
booktitle = {Proceedings of the 3rd International Conference on Telecommunications and Communication Engineering},
pages = {57–62},
numpages = {6},
keywords = {flash crowd, feature selection and classification, distributed denial-of-service attack, detection accuracy},
location = {Tokyo, Japan},
series = {ICTCE '19}
}

@article{10.1145/373626.373705,
author = {Carmel, David and Maarek, Yoelle and Soffer, Aya},
title = {XML and information retrieval: a SIGIR 2000 workshop},
year = {2001},
issue_date = {March 2001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {30},
number = {1},
issn = {0163-5808},
url = {https://doi.org/10.1145/373626.373705},
doi = {10.1145/373626.373705},
abstract = {XML - the eXtensible Markup Language has recently emerged as a new standard for data representation and exchange on the Interact. It is believed that it will become a universal format for data exchange on the Web and that in the near future we will find vast amounts of documents in XML format on the Web. As a result, it has become crucial to address the question of how large collections of XML documents can be sorted and retrieved efficiently and effectively.To date, most work on storing, indexing, querying, and searching documents in XML has stemmed from the database community's work on semi-structured data. An alternative approach, that has received less attention to date, is to view XML documents as a collection of text documents with additional tags and relations between these tags. IR techniques have traditionally been applied to search large sets of textual data and should thus be extended to encode the structure and semantics inherent in XML documents. Integrating IR and XML search techniques will enable more sophisticated search on the structure as well as the content of these documents, while leveraging the success of IR techniques in document similarity ranking and keyword search.The SIGIR workshop on XML and information retrieval was held July 28th, in Athens Greece. The goal of the workshop was to bring together researchers and practitioners interested in XML and IR to discuss and define the most relevant topics in the relation between these two technologies, present recent results, and propose future directions for research. The topics for discussion included:• How to extend IR technologies to search XML documents• How to integrate XML structure in IR indexing structures• How to query XML documents both on content and structure• How to introduce the semantics inherent in XML into the search process• How to adopt database indexing techniques in an IR frameworkThe opening session of the workshop consisted of a survey of search engines for XML documents. This was followed by three technical sessions: query languages, retrieval algorithms, and IR systems for XML documents. The final talk of the day, "Searching Annotated Language Resources in XML", by Nancy Ide was given from the perspective of potential users of XML search systems and opened many topics for discussion. The workshop was concluded with a panel discussion where the panelists outlined their vision of the future of XML search.},
journal = {SIGMOD Rec.},
month = {mar},
pages = {62–65},
numpages = {4}
}

@article{10.1145/2629506,
author = {Santhiar, Anirudh and Pandita, Omesh and Kanade, Aditya},
title = {Mining Unit Tests for Discovery and Migration of Math APIs},
year = {2014},
issue_date = {September 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {1},
issn = {1049-331X},
url = {https://doi.org/10.1145/2629506},
doi = {10.1145/2629506},
abstract = {Today's programming languages are supported by powerful third-party APIs. For a given application domain, it is common to have many competing APIs that provide similar functionality. Programmer productivity therefore depends heavily on the programmer's ability to discover suitable APIs both during an initial coding phase, as well as during software maintenance.The aim of this work is to support the discovery and migration of math APIs. Math APIs are at the heart of many application domains ranging from machine learning to scientific computations. Our approach, called MathFinder, combines executable specifications of mathematical computations with unit tests (operational specifications) of API methods. Given a math expression, MathFinder synthesizes pseudo-code comprised of API methods to compute the expression by mining unit tests of the API methods. We present a sequential version of our unit test mining algorithm and also design a more scalable data-parallel version.We perform extensive evaluation of MathFinder (1) for API discovery, where math algorithms are to be implemented from scratch and (2) for API migration, where client programs utilizing a math API are to be migrated to another API. We evaluated the precision and recall of MathFinder on a diverse collection of math expressions, culled from algorithms used in a wide range of application areas such as control systems and structural dynamics. In a user study to evaluate the productivity gains obtained by using MathFinder for API discovery, the programmers who used MathFinder finished their programming tasks twice as fast as their counterparts who used the usual techniques like web and code search, IDE code completion, and manual inspection of library documentation. For the problem of API migration, as a case study, we used MathFinder to migrate Weka, a popular machine learning library. Overall, our evaluation shows that MathFinder is easy to use, provides highly precise results across several math APIs and application domains even with a small number of unit tests per method, and scales to large collections of unit tests.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {oct},
articleno = {4},
numpages = {33},
keywords = {unit tests, mining, mathematical computation, API migration, API discovery}
}

@proceedings{10.1145/1985441,
title = {MSR '11: Proceedings of the 8th Working Conference on Mining Software Repositories},
year = {2011},
isbn = {9781450305747},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
abstract = {Welcome to MSR 2011, the Eighth International Working Conference on Mining Software Repositories, held May 21-22 in Waikiki, Honolulu, Hawaii, and co-located with the 2011 ACM/IEEE International Conference on Software Engineering (ICSE 2011).This is the fourth year that MSR has been a Working Conference, building on the strong foundation of four years as a successful ICSE workshop. We are happy to report that the community of MSR researchers continues to grow, while at the same time the research being performed is maturing. This year saw a further increase in the total number of submissions: 61 full paper submissions (10 pages) and 17 short paper submissions (4 pages) for a total of 78. This total is 11 more than the 67 total submissions in 2010. Full paper submissions increased by 10 (61 vs. 51) while short paper submissions increased by 1 (17 vs. 16).Of the 61 full paper submissions, 20 were ultimately accepted, for a full paper accept rate of 33%. For short papers, of the 17 submissions 6 were accepted, for a short paper accept rate of 35%. Following last year's conference, MSR 2011 accepted or rejected papers at their submitted length, and did not permit downgrading of a paper from full paper to short paper. All accepted papers will be presented at the conference. Each paper received three reviews by members of the program committee. After we received all reviews, an online discussion process allowed variance among reviews to be understood, and in many cases, consensus to emerge. The program committee chairs then personally read all of the reviews and commentary prior to making final decisions.In the content of the papers, this year sees a continuation of previous topics, as well as the emergence of some new ones. Following MSR 2010, in MSR 2011, full papers receive a full 15 minutes for presentation within a block of papers within a session. In keeping with MSR's roots as a working conference, full paper sessions have 30 minutes for discussion of papers. For short papers, each paper has 7 minutes in a presentation session.The conference has two keynote presentations this year. Professor E. James Whitehead, at UC Santa Cruz in the USA, will present a talk entitled, Fantasy, Farms, and Freemium: What Game Data Mining Teaches Us About Retention, Conversion, and Virality; this talk will focus on computer games and opportunities for mining. Professor Yuanyuan Zhou, at UC San Diego in the USA, will present a talk entitled, Connecting Technology with Real?world Problems -- From Copy-paste Detection to Detecting Known Bugs; this talk will focus on her tech?transfer experiences from copy-paste detection to checking for known bugs.We are pleased to continue the tradition of the MSR challenge track, where researchers from across the community apply their mining techniques to a common problem. This year the main theme of the challenge is on comparison of projects. We selected four open source projects, and invited submissions to compare them and uncover interesting similarities and differences. The projects are Eclipse and Netbeans, two popular IDEs written in Java (Group 1) and Firefox and Chrome, two web browsers written in C/C++ (Group 2). Submissions were invited to analyze more than one project, ideally in the same group, or analyze a single project (4 page sub mission). The conference received 6 challenge track submissions, of which 5 were accepted and will be presented at the conference.We are also delighted to announce that a selection of the best papers from this year's conference will be invited to submit an extended version for consideration in a special issue of the Springer journal Empirical Software Engineering. The invitees will be announced during the opening session of MSR 2011.},
location = {Waikiki, Honolulu, HI, USA}
}

